[33mcommit 14d706bb39e75ee5874d5dae869ac28541162cfe[m
Author: Tom Caputi <tcaputi@datto.com>
Date:   Thu Nov 9 01:26:20 2017 -0500

    Send maxblkid in send file
    
    Raw sends require several fields from the metadnode to
    match between the source and target, one of which is
    dn_maxblkid. Unfortunately this field was not being
    sent in the DRR_BEGIN payload and could get out of sync.
    This patch adds this info to the payload, resolving the
    issue. This patch does constitue a send file format
    change.
    
    Signed-off-by: Tom Caputi <tcaputi@datto.com>

[33mcommit 0a6cc7091a531a70817b47de23c68941967aff9f[m
Author: Tom Caputi <tcaputi@datto.com>
Date:   Wed Nov 8 14:30:44 2017 -0500

    Compress indirect blocks of encrypted metadnode
    
    Fixes a small issue where the indirect blocks of an
    encrypted objset's metadnode were not being compressed.
    
    Signed-off-by: Tom Caputi <tcaputi@datto.com>

[33mcommit 7ec4d55d03900f62caeaa9f7710bf753d121942e[m
Author: Tom Caputi <tcaputi@datto.com>
Date:   Wed Nov 8 14:12:59 2017 -0500

    Fix for #6845
    
    The current on-disk format for encrypted datasets protects
    not only the encrypted and authenticated blocks, but also
    the order and interpretation of these blocks. In order to
    make this work while maintaining the ability to do raw sends
    the indirect bps maintain a secure checksum of all the MACs
    in the block below it, along with a few other fields that
    determine how the data is interpretted.
    
    Unfortunately, the current on-disk format erroniously
    includes the byteorder and compression of the blocks below,
    which is not portable and thus cannot support raw sends.
    Unfortunately, it is also not possible to easily work around
    this issue due to a separate and much smaller bug which
    causes indirect blocks for dnodes to not be compressed.
    
    This patch zero's out the byteorder and compression when
    computing the MAC (as they should have been) and registers
    an errata for the on-disk format bug.
    
    Signed-off-by: Tom Caputi <tcaputi@datto.com>

[33mcommit 23ea00a1fe9cafa081f910a8326b8f41cfb9f8d4[m
Author: Scot W. Stevenson <scot.stevenson@gmail.com>
Date:   Sun Nov 5 22:11:37 2017 +0100

    Add documentation strings to arc_summary.py
    
    Include docstrings (PEP8, PEP257) for module and all functions.
    Separately, remove outdated section in comment at start of
    module. Separately, remove unused global constant "usetunable".
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Scot W. Stevenson <scot.stevenson@gmail.com>
    Closes #6818

[33mcommit 2df9ad1c075cfca3cf5acb64950a91e2284f6338[m
Author: George G <gg7@users.noreply.github.com>
Date:   Sun Nov 5 21:09:56 2017 +0000

    Fix column alignment with long zpool names
    
    `zpool status` normally aligns NAME/STATE/etc columns:
    
        NAME                       STATE     READ WRITE CKSUM
        dummy                      ONLINE       0     0     0
          mirror-0                 ONLINE       0     0     0
            /tmp/dummy-long-1.bin  ONLINE       0     0     0
            /tmp/dummy-long-2.bin  ONLINE       0     0     0
          mirror-1                 ONLINE       0     0     0
            /tmp/dummy-long-3.bin  ONLINE       0     0     0
            /tmp/dummy-long-4.bin  ONLINE       0     0     0
    
    However, if the zpool name is longer than the zvol names, alignment
    issues arise:
    
        NAME                  STATE     READ WRITE CKSUM
        dummy-very-very-long-zpool-name  ONLINE       0     0     0
          mirror-0            ONLINE       0     0     0
            /tmp/dummy-1.bin  ONLINE       0     0     0
            /tmp/dummy-2.bin  ONLINE       0     0     0
          mirror-1            ONLINE       0     0     0
            /tmp/dummy-3.bin  ONLINE       0     0     0
            /tmp/dummy-4.bin  ONLINE       0     0     0
    
    `zpool iostat` and `zpool import` are also affected:
    
                      capacity     operations     bandwidth
        pool        alloc   free   read  write   read  write
        ----------  -----  -----  -----  -----  -----  -----
        dummy        104K  1.97G      0      0    152  9.84K
        dummy-very-very-long-zpool-name   152K  1.97G      0      1    144  13.1K
        ----------  -----  -----  -----  -----  -----  -----
    
        dummy-very-very-long-zpool-name  ONLINE
          mirror-0            ONLINE
            /tmp/dummy-1.bin  ONLINE
            /tmp/dummy-2.bin  ONLINE
          mirror-1            ONLINE
            /tmp/dummy-3.bin  ONLINE
            /tmp/dummy-4.bin  ONLINE
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: George Gaydarov <git@gg7.io>
    Closes #6786

[33mcommit cd1813d36e78ce21fa0b0e48b050e0493f9f6c93[m
Author: Scot W. Stevenson <scot.stevenson@gmail.com>
Date:   Sat Nov 4 21:33:28 2017 +0100

    Rewrite fHits() in arc_summary.py with SI units
    
    Complete rewrite of fHits(). Move units from non-standard English
    abbreviations to SI units, thereby avoiding confusion because of
    "long scale" and "short scale" numbers. Remove unused parameter
    "Decimal". Add function string. Aim to confirm to PEP8.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Scot W. Stevenson <scot.stevenson@gmail.com>
    Closes #6815

[33mcommit 1c27024e22af4386b592b30d40e6a0820ceb48c1[m
Author: Don Brady <dev.fs.zfs@gmail.com>
Date:   Sat Nov 4 14:25:13 2017 -0600

    Undo c89 workarounds to match with upstream
    
    With PR 5756 the zfs module now supports c99 and the
    remaining past c89 workarounds can be undone.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Don Brady <don.brady@delphix.com>
    Closes #6816

[33mcommit df1f129bc4150fd6ea3f23a01154a71ffa48bf12[m
Author: Scot W. Stevenson <scot.stevenson@gmail.com>
Date:   Fri Nov 3 23:43:53 2017 +0100

    Minor code cleanup in arc_summary.py
    
    Simplify and inline single-use function div1(); inline twice-used
    function div2(); add function comment to zfs_header(); replace
    variable "unused" in get_Kstat() with "_" following convention.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Scot W. Stevenson <scot.stevenson@gmail.com>
    Closes #6802

[33mcommit 34c2b3680bd705c3eabe32442c0d3c9ca82628b5[m
Merge: 9a810ef 4fc411f
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Nov 3 15:38:52 2017 -0700

    Initramfs fixes
    
    * initramfs: Fix inconsistent whitespace
    * initramfs: Fix a spelling error
    * initramfs: Set elevator=noop on the rpool's disks
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Richard Laager <rlaager@wiktel.com>
    Closes #6807

[33mcommit 9a810efb02a646c59cd69e639d057022ccf3a9a9[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Fri Nov 3 09:53:32 2017 -0700

    Allow test-runner to filter test groups by tag
    
    Enable test-runner to accept a list of tags to identify
    which test groups the user wishes to run.
    
    Also allow test-runner to perform multiple iterations
    of a test run.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: John Wren Kennedy <john.kennedy@delphix.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #6788

[33mcommit 4fc411f7a3ecee8a70fc8d6c687fae9a1cf20b31[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Wed Nov 1 21:54:56 2017 -0500

    initramfs: Set elevator=noop on the rpool's disks
    
    ZFS already sets elevator=noop for wholedisk vdevs (for all pools), but
    typical root-on-ZFS installations use partitions.  This sets
    elevator=noop on the disks in the root pool.
    
    Ubuntu 16.04 and 16.10 had this.  It was lost in 17.04 due to Debian
    switching to this upstream initramfs script.
    
    Signed-off-by: Richard Laager <rlaager@wiktel.com>

[33mcommit 11b9dcfb2d30a8d05a424bb2a9a6d26ef39aabbb[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Wed Nov 1 21:54:28 2017 -0500

    initramfs: Fix a spelling error
    
    This fixes a typo in a comment.
    
    Signed-off-by: Richard Laager <rlaager@wiktel.com>

[33mcommit 4767c7a14e3b5f242746755d33d69edf81c6194f[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Wed Nov 1 21:53:22 2017 -0500

    initramfs: Fix inconsistent whitespace
    
    This fixes one instance of inconsistent whitespace.
    
    Signed-off-by: Richard Laager <rlaager@wiktel.com>

[33mcommit c9427c4696a244bc0d1bdecc37be320bb57ce54d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Oct 30 16:21:24 2017 -0700

    Add scan.coverity.com badge to README
    
    Include the scan.coverity.com status badge in the top level README.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6801

[33mcommit f3c8c9e6f0e5e2ce6a1cba31db0422d8585e8c7c[m
Author: Jason King <jason.brian.king@gmail.com>
Date:   Tue Jun 13 04:16:45 2017 -0500

    OpenZFS 640 - number_to_scaled_string is duplicated in several commands
    
    Porting Notes:
    - The OpenZFS patch added nicenum_scale() and nicenum() to a
      library not used by ZFS.  Rather than pull in a new dependency
      the version of nicenum in lib/libzpool/util.c was simply
      replaced with the new one.
    
    Reviewed by: Sebastian Wiedenroth <wiedi@frubar.net>
    Reviewed by: Robert Mustacchi <rm@joyent.com>
    Reviewed by: Yuri Pankov <yuripv@gmx.com>
    Approved by: Dan McDonald <danmcd@joyent.com>
    Authored by: Jason King <jason.brian.king@gmail.com>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/640
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/0a055120
    Closes #6796

[33mcommit 47c8e7fd97d8406f3fe51882a4a2787103012a82[m
Author: Scot W. Stevenson <scot.stevenson@gmail.com>
Date:   Wed Oct 25 08:29:02 2017 +0200

    Rewrite of function fBytes() in arc_summary.py
    
    Replace if-elif-else construction with shorter loop;
    remove unused parameter "Decimal"; centralize format
    string; add function documentation string; conform to
    PEP8.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Scot W. Stevenson <scot.stevenson@gmail.com>
    Closes #6784

[33mcommit 5c2552c56456191e8038efe25ed66270c3f1501a[m
Author: Antonio Russo <antonio.e.russo@gmail.com>
Date:   Mon Oct 30 16:18:26 2017 -0400

    systemd zfs-import.target and documentation
    
    zfs-import-{cache,scan}.service must complete before any mounting of
    filesystems can occur. To simplify this dependency, create a target
    that is reached After (in the systemd sense) the pool is imported.
    
    Additionally, recommend that legacy zfs mounts use the option
    
    x-systemd.requires=zfs-import.target
    
    to codify this requirement.
    
    Reviewed-by: Fabian Grünbichler <f.gruenbichler@proxmox.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Antonio Russo <antonio.e.russo@gmail.com>
    Closes #6764

[33mcommit ca85d690974c4c1e12f1bd5eadfa47806ba01f89[m
Author: abraunegg <alex.braunegg@gmail.com>
Date:   Tue Oct 31 07:15:10 2017 +1100

    Update zfs module parameters man5
    
    Update zfs module parameters man5 with missing parameter details
    for multiple tunings.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Alex Braunegg <alex.braunegg@gmail.com>
    Closes #6785

[33mcommit f4ae39a19da8a5756cc1287a426e1c8a62eeaaac[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Oct 27 15:52:03 2017 -0700

    Fix status command options in zpool(8)
    
    The 'zpool status' command supports the -P option for printing full
    path names.  It does not support the -p parsable option for printing
    exact values.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: loli10K <ezomori.nozomu@gmail.com>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6792
    Closes #6794

[33mcommit 867959b5887c5211c520ad10ef8d12990a6d79fa[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Oct 27 12:46:35 2017 -0700

    OpenZFS 8081 - Compiler warnings in zdb
    
    Fix compiler warnings in zdb.  With these changes, FreeBSD can compile
    zdb with all compiler warnings enabled save -Wunused-parameter.
    
    usr/src/cmd/zdb/zdb.c
    usr/src/cmd/zdb/zdb_il.c
    usr/src/uts/common/fs/zfs/sys/sa.h
    usr/src/uts/common/fs/zfs/sys/spa.h
    	Fix numerous warnings, including:
    	* const-correctness
    	* shadowing global definitions
    	* signed vs unsigned comparisons
    	* missing prototypes, or missing static declarations
    	* unused variables and functions
    	* Unreadable array initializations
    	* Missing struct initializers
    
    usr/src/cmd/zdb/zdb.h
    	Add a header file to declare common symbols
    
    usr/src/lib/libzpool/common/sys/zfs_context.h
    usr/src/uts/common/fs/zfs/arc.c
    usr/src/uts/common/fs/zfs/dbuf.c
    usr/src/uts/common/fs/zfs/spa.c
    usr/src/uts/common/fs/zfs/txg.c
    	Add a function prototype for zk_thread_create, and ensure that every
    	callback supplied to this function actually matches the prototype.
    
    usr/src/cmd/ztest/ztest.c
    usr/src/uts/common/fs/zfs/sys/zil.h
    usr/src/uts/common/fs/zfs/zfs_replay.c
    usr/src/uts/common/fs/zfs/zvol.c
    	Add a function prototype for zil_replay_func_t, and ensure that
    	every function of this type actually matches the prototype.
    
    usr/src/uts/common/fs/zfs/sys/refcount.h
    	Change FTAG so it discards any constness of __func__, necessary
    	since existing APIs expect it passed as void *.
    
    Porting Notes:
    - Many of these fixes have already been applied to Linux.  For
      consistency the OpenZFS version of a change was applied if the
      warning was addressed in an equivalent but different fashion.
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Authored by: Alan Somers <asomers@gmail.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/8081
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/843abe1b8a
    Closes #6787

[33mcommit a94d38c0f382c16244912de83a7356ae35e63322[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Fri Oct 27 09:52:18 2017 -0700

    Correct make mancheck recipe
    
    The current make recipe for mancheck silently ignores errors. Correct
    the recipe so errors cause the mancheck recipe fail.
    
    The zpool reopen command in the zpool.8 manpage had a bullet list
    without an .El.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: loli10K <ezomori.nozomu@gmail.com>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #6790

[33mcommit ee45fbd89465f12b39e97173a088175d4b712b5f[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Fri Oct 27 01:58:38 2017 +0200

    ZFS send fails to dump objects larger than 128PiB
    
    When dumping objects larger than 128PiB it's possible for do_dump() to
    miscalculate the FREE_RECORD offset due to an integer overflow
    condition: this prevents the receiving end from correctly restoring
    the dumped object.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Fabian Grünbichler <f.gruenbichler@proxmox.com>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #6760

[33mcommit 88f9c9396bcce596db56dc880260f95c49a51d67[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Fri Oct 27 01:49:33 2017 +0200

    Allow 'zpool events' filtering by pool name
    
    Additionally add four new tests:
    
     * zpool_events_clear: verify 'zpool events -c' functionality
     * zpool_events_cliargs: verify command line options and arguments
     * zpool_events_follow: verify 'zpool events -f'
     * zpool_events_poolname: verify events filtering by pool name
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #3285
    Closes #6762

[33mcommit a032ac4b3819408b2e17085224290b6a762de79a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Oct 26 12:57:53 2017 -0700

    OpenZFS 8558, 8602 - lwp_create() returns EAGAIN
    
    8558 lwp_create() returns EAGAIN on system with more than 80K ZFS filesystems
    
    On a system with more than 80K ZFS filesystems, we've seen cases
    where lwp_create() will start to fail by returning EAGAIN. The
    problem being, for each of those 80K ZFS filesystems, a taskq will
    be created for each dataset as part of the ZIL for each dataset.
    
    Porting Notes:
    - The new nomem taskq kstat was dropped.
    - Added module options and documentation for new tunings
      zfs_zil_clean_taskq_nthr_pct, zfs_zil_clean_taskq_minalloc,
      zfs_zil_clean_taskq_maxalloc, and zfs_sync_taskq_batch_pct.
    
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Sebastien Roy <sebastien.roy@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Authored by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Chris Dunlop <chris@onthe.net.au>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/8558
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/216d772
    
    8602 remove unused "dp_early_sync_tasks" field from "dsl_pool" structure
    
    Reviewed by: Serapheim Dimitropoulos <serapheim@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Authored by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Chris Dunlop <chris@onthe.net.au>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/8602
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/2bcb545
    Closes #6779

[33mcommit d3f2cd7e3b70679f127dd471ea6d37ece27463f2[m
Author: Arkadiusz Bubała <arkadiusz.bubala@open-e.com>
Date:   Thu Oct 26 21:26:09 2017 +0200

    Added no_scrub_restart flag to zpool reopen
    
    Added -n flag to zpool reopen that allows a running scrub
    operation to continue if there is a device with Dirty Time Log.
    
    By default if a component device has a DTL and zpool reopen
    is executed all running scan operations will be restarted.
    
    Added functional tests for `zpool reopen`
    
    Tests covers following scenarios:
    * `zpool reopen` without arguments,
    * `zpool reopen` with pool name as argument,
    * `zpool reopen` while scrubbing,
    * `zpool reopen -n` while scrubbing,
    * `zpool reopen -n` while resilvering,
    * `zpool reopen` with bad arguments.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Tom Caputi <tcaputi@datto.com>
    Signed-off-by: Arkadiusz Bubała <arkadiusz.bubala@open-e.com>
    Closes #6076
    Closes #6746

[33mcommit 3ad59c015dce45965fa309a0364a46c6f8bdda9f[m
Author: Fabian-Gruenbichler <f.gruenbichler@proxmox.com>
Date:   Thu Oct 26 21:18:49 2017 +0200

    arcstat: flush stdout / outfile after each line
    
    Otherwise, if arcstat gets interrupted before the desired number of
    iterations is reached, the output file will be empty (both if set via
    '-o' or via shell redirection).
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Fabian Grünbichler <f.gruenbichler@proxmox.com>
    Closes #6775

[33mcommit 69b229bd60135838d606f5da41831d409d11de2d[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Thu Oct 26 10:23:58 2017 -0700

    commitcheck: Multiple OpenZFS ports in commit
    
    Allow commitcheck.sh to handle multiple OpenZFS ports in
    a single commit. This is useful in the cases when a change
    upstream has bug fixes and it makes sense to port them with
    the original patch.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #6780

[33mcommit 8dcaf243d77b21c49092a4ffd3a641ac3407217c[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Thu Oct 26 10:17:00 2017 -0700

    Add Coverity defect fix commit checker support
    
    Enable commitcheck.sh to test if a commit message is
    in the expected format for a coverity defect fix.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #6777

[33mcommit 64b8c58e3e49dcca107c2f53dd5cc7208ee6f405[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Mon Oct 23 14:18:12 2017 -0700

    Ensure arc_size_break is filled in arc_summary.py
    
    Use mfu_size and mru_size pulled from the arcstats
    kstat file to calculate the mfu and mru percentages
    for arc size breakdown.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Richard Elling <Richard.Elling@RichardElling.com>
    Reviewed-by: AndCycle <andcycle@andcycle.idv.tw>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #5526
    Closes #6770

[33mcommit 63e5e960bad6f6c7d8eeb8273988ec7fd10f0a60[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Mon Oct 23 14:01:43 2017 -0700

    Correct flake8 errors after STYLE builder update
    
    Fix new flake8 errors related to bare excepts and ambiguous
    variable names due to a STYLE builder update.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #6776

[33mcommit d9daa7abcf04f75ba013ec954c4f2d4854ba1cbc[m
Author: David Quigley <dpquigl@users.noreply.github.com>
Date:   Mon Oct 23 12:42:37 2017 -0600

    ZTS: Add auto-spare tests
    
    The ZED is expected to automatically kick in a hot spare device
    when there's one available in the pool and a sufficient number of
    read errors have been encountered.  Use zinject to simulate the
    failure condition and verify the hot spare is used.
    
    auto_spare_001_pos.ksh: read IO errors, the vdev is FAULTED
    auto_spare_002_pos.ksh: read CHECKSUM errors, the vdev is DEGRADE
    
    Reviewed by: Richard Elling <Richard.Elling@RichardElling.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: David Quigley <david.quigley@intel.com>
    Closes #6280

[33mcommit f8cd871a01a5e38e35cb4d44768dce09265265f4[m
Author: adisbladis <adis@blad.is>
Date:   Tue Oct 24 02:00:45 2017 +0800

    Use ashift=12 by default on SSDSC2BW48 disks
    
    Currently the 480GB models of this disk do not use ashift=12 by
    default.  SSDSC2BW48 is also optimized for 4k blocks.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: adisbladis <adis@blad.is>
    Closes #6774

[33mcommit 70c8a79446ce74db93f492312f4ce0a825c4dbf5[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Mon Oct 23 09:47:16 2017 -0700

    Provide commit message format for Coverity defects
    
    Provide details about the commit message format for Coverity defect
    fixes submitted.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #6771

[33mcommit d5e024cba215ddbe433658e2d19e611eab33e2c9[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Oct 23 09:45:59 2017 -0700

    Emit history events for 'zpool create'
    
    History commands and events were being suppressed for the
    'zpool create' command since the history object did not
    yet exist.  Create the object earlier so this history
    doesn't get lost.
    
    Split the pool_destroy event in to pool_destroy and
    pool_export so they may be distinguished.
    
    Updated events_001_pos and events_002_pos test cases.  They
    now check for the expected history events and were reworked
    to be more reliable.
    
    Reviewed-by: Nathaniel Clark <nathaniel.l.clark@intel.com>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6712
    Closes #6486

[33mcommit 1cfdb0e6e401087778712fa893777b064a8afb6b[m
Author: wli5 <weigang.li@intel.com>
Date:   Sat Oct 21 02:11:25 2017 +0800

    Support integration with new QAT products
    
    Support integration with new QAT products: Intel(R) C62x Chipset,
    or Atom(R) C3000 Processor Product Family SoC:
    1. Detect new file name in auto-conf.
    2. Change MAX_INSTANCES to 48.
    3. Change "num_inst" to U16 to clean a build warning.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Weigang Li <weigang.li@intel.com>
    Closes #6767

[33mcommit 6044cf59cdf80d4ba94a7b6c6736cace8a7de9db[m
Author: John <johnramsden@users.noreply.github.com>
Date:   Thu Oct 19 11:18:42 2017 -0700

    Add convenience 'zfs_get' functions
    
    Add get functions to match existing ones.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: John Ramsden <johnramsden@riseup.net>
    Closes #6308

[33mcommit bbf1ad67cd0d6f3bc1e22a8a0c7448c15409d007[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Oct 19 10:06:55 2017 -0700

    Remove vn_rename and vn_remove dependency
    
    The only place vn_rename and vn_remove are used is when writing
    out an updated pool configuration file.  By truncating the file
    instead of renaming and removing it we can avoid having to implement
    these interfaces entirely.  Functionally an empty cache file is
    treated the same as a missing cache file.  This is particularly
    advantageous because the Linux kernel has never provided a way
    to reliably implement vn_rename and vn_remove.
    
    The cachefile_004_pos.ksh test case was updated to understand
    that an empty cache file is the same as a missing one.
    
    The zfs-import-* systemd service files were not updated to use
    ConditionFileNotEmpty in place of ConditionPathExists.  This
    means that after exporting all pools and rebooting new pools
    will not the scanned for on the next boot.  This small change
    should not impact normal usage since pools are not exported
    as part of a normal shutdown.
    
    Documentation was updated accordingly.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Arkadiusz Bubała <arkadiusz.bubala@open-e.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes zfsonlinux/spl#648
    Closes #6753

[33mcommit 35df0bb5565c81ba52de430108b37eced9de0606[m
Author: Tom Caputi <tcaputi@datto.com>
Date:   Wed Oct 18 13:08:36 2017 -0400

    Fix ASSERT in dmu_free_long_object_raw()
    
    This small patch fixes an issue where dmu_free_long_object_raw()
    calls dnode_hold() after freeing the dnode a line above.
    
    Reviewed-by: Jorgen Lundman <lundman@lundman.net>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tom Caputi <tcaputi@datto.com>
    Closes #6766

[33mcommit ca9b8e8797dbb7109a052bd3d7316ef27081531c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Oct 18 10:07:02 2017 -0700

    Update codecov.io behavior
    
    Update the codecov.yml included in the repository to behave as
    originally intended.  This can be refined as needed.
    
    * Always post coverage results to the GitHub PR after two builds
      have been uploaded.  This is the normal case since there will
      be a build uploaded for both kernel and user coverage results.
    
    * Adjust red -> yellow -> green coloring in the web interface.
      Due to the number of unlikely error conditions which are hard
      to force consider 90% coverage an excellent level of coverage.
    
    * Allow a 1% variance in coverage between test runs.  This is
      approximately 10x larger than the typical variance observed
      which leaves us a reasonable margin to prevent false positives.
    
    * Always post a new smaller comment to PRs which does not include
      a file list.  Old coverage reports are removed.
    
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6765

[33mcommit c721ba435fc7d2fb61a6e586c5cc11c27f67b480[m
Author: Tobin Harding <me@tobin.cc>
Date:   Wed Oct 18 03:37:50 2017 +1100

    Fix coverity defects: CID 161388
    
    CID 161388: Resource Leak (REASOURCE_LEAK)
    
    Jump to errout so that file descriptor gets closed before returning
    from function.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tobin C. Harding <me@tobin.cc>
    Closes #6755

[33mcommit ced28193b06b3d93f404a5d67713c124731a2a0d[m
Author: Tobin Harding <me@tobin.cc>
Date:   Tue Oct 17 09:32:48 2017 +1100

    Fix coverity defects: 147480, 147584
    
    CID 147480: Logically dead code (DEADCODE)
    
    Remove non-null check and subsequent function call. Add ASSERT to future
    proof the code.
    
    usage label is only jumped to before `zhp` is initialized.
    
    CID 147584: Out-of-bounds access (OVERRUN)
    
    Subtract length of current string from buffer length for `size` argument
    to `snprintf`.
    
    Starting address for the write is the start of the buffer + the current
    string length. We need to subtract this string length else risk a buffer
    overflow.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tobin C. Harding <me@tobin.cc>
    Closes #6745

[33mcommit 7670f721fc82e6cdcdd31f83760a79b6f2f2b998[m
Author: Neal Gompa (ニール・ゴンパ) <ngompa13@gmail.com>
Date:   Sun Oct 15 16:00:44 2017 -0400

    Add DKMS package on Debian-based distributions
    
    * config/deb.am: Enable building DKMS packages for Debian
    * rpm/generic/zfs-dkms.spec.in: Adjust spec to be Debian-compatible
      * Condition kernel-devel Req to RPM distros
      * Adjust the DKMS Req to have a minimum of a version only
      * Ensure that --rpm_safe_upgrade isn't used on non-RPM distros
    * config/deb.am: Drop CONFIG_KERNEL and CONFIG_USER guards
    * Makefile.am: Add pkg-dkms target
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Neal Gompa <ngompa@datto.com>
    Closes #6044
    Closes #6731

[33mcommit c616dcf8bc3b2cb2dddc9b8f8bc64f307c9fb938[m
Author: Tobin Harding <me@tobin.cc>
Date:   Sat Oct 14 06:42:04 2017 +1100

    Fix function documentation to correctly mirror code
    
    Currently the function documentation states that two strings are
    allocated, this is outdated. Only one char ** parameter is passed
    into the function now, clearly only a pointer to a single string
    is returned and needs to be free'd.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tobin C. Harding <me@tobin.cc>
    Closes #6754

[33mcommit aea899a6fabbd8d0daf25a23ba114804b022529b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Oct 13 12:39:39 2017 -0700

    Increase default zloop.sh vdev size
    
    The default 128M vdev size used by zloop.sh isn't always large
    enough and can result in ENOSPC failures which suspend the pool.
    Increase the default size to 512M and provide a -s option which
    can be used to specify an alternate size.
    
    This does increase the free space requirements to run zloop.sh.
    However, since the vdevs are sparse 4x the space is not required.
    
    Reviewed-by: Don Brady <don.brady@delphix.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6758

[33mcommit 21a932b83c3e0c6fe5f42f874fd3664e67f374c7[m
Merge: cdc15a7 9bae371
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Oct 13 10:02:39 2017 -0700

    Post-Encryption Followup
    
    This PR includes fixes for bugs and documentation issues found
    after the encryption patch was merged and general code improvements
    for long-term maintainability.
    
    Reviewed-by: Jorgen Lundman <lundman@lundman.net>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tom Caputi <tcaputi@datto.com>
    Issue #6526
    Closes #6639
    Closes #6703
    Cloese #6706
    Closes #6714
    Closes #6595

[33mcommit cdc15a76045fa70743fb95a1fd450229e2b73fd3[m
Author: Damian Wojsław <damian@wojslaw.pl>
Date:   Fri Oct 13 02:10:38 2017 +0200

    Typo in dsl_dataset.h
    
    The parameters dsl_dataset_t *os in function prototype should be
    renamed to dsl_dataset_t *ds.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Damian Wojsław <damian@wojslaw.pl>
    Closes #6756
    Closes #6273

[33mcommit e0922b0421697294583804f00a67d10a77ecd6c6[m
Merge: 085b501 d9ee0e2
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Oct 12 09:51:56 2017 -0700

    Fixes for SPARC support
    
    The current code base almost compiles on SPARC, but a few fixes are
    required for the code to compile (and work efficiently). Code in this
    PR comes from OpenZFS project which was initially dropped when porting
    the crypto framework.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Pengcheng Xu <i@jsteward.moe>
    Closes #6733
    Closes #6738
    Closes #6750

[33mcommit 085b501fb81654171bcc2ed76bff64eea408ca20[m
Author: Antonio Russo <antonio.e.russo@gmail.com>
Date:   Thu Oct 12 12:39:45 2017 -0400

    Explicitly depend on icp module in initramfs hook
    
    Automatic dependency resolution is unreliable on many systems.
    Follow suit with existing code, and explicitly include icp
    in module dependencies.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Antonio Russo <antonio.e.russo@gmail.com>
    Closes #6751

[33mcommit 9bae371ce69187f14e15129173ba0b138a965ada[m
Author: Tom Caputi <tcaputi@datto.com>
Date:   Thu Oct 5 13:43:34 2017 -0400

    Fix for #6714
    
    This 2 line patch fixes a possible integer overflow reported by grsec.
    
    Signed-off-by: Tom Caputi <tcaputi@datto.com>

[33mcommit 2637dda8f80dbd49dd0512c74108ff977dfb8c7b[m
Author: Tom Caputi <tcaputi@datto.com>
Date:   Tue Oct 3 13:18:45 2017 -0400

    Fix for #6706
    
    This patch resolves an issue where raw sends would fail to send
    encryption parameters if the wrapping key was unloaded and reloaded
    before the data was sent and the dataset wass not an encryption root.
    The code attempted to lookup the values from the wrapping key which
    was not being initialized upon reload. This change forces the code to
    lookup the correct value from the encryption root's DSL Crypto Key.
    Unfortunately, this issue led to the on-disk DSL Crypto Key for some
    non-encryption root datasets being left with zeroed out encryption
    parameters. However, this should not present a problem since these
    values are never looked at and are overrwritten upon changing keys.
    
    This patch also fixes an issue where raw, resumable sends were not
    being cleaned up appropriately if an invalid DSL Crypto Key was
    received.
    
    Signed-off-by: Tom Caputi <tcaputi@datto.com>

[33mcommit b135b9f11ad15823d92f8ca3f40fcdd91690677d[m
Author: Tom Caputi <tcaputi@datto.com>
Date:   Mon Oct 2 21:55:39 2017 -0400

    Fix for #6703
    
    This patch resolves an issue where spa_keystore_change_key_sync_impl()
    incorrectly recursed into clone DSL Directories while recursively
    rewrapping encryption keys. Clones share keys with their origins, so
    this logic was incorrect.
    
    Signed-off-by: Tom Caputi <tcaputi@datto.com>

[33mcommit 440a3eb939441a42ab5029e5e64498d802fa276b[m
Author: Tom Caputi <tcaputi@datto.com>
Date:   Thu Sep 28 11:49:13 2017 -0400

    Fixes for #6639
    
    Several issues were uncovered by running stress tests with zfs
    encryption and raw sends in particular. The issues and their
    associated fixes are as follows:
    
    * arc_read_done() has the ability to chain several requests for
      the same block of data via the arc_callback_t struct. In these
      cases, the ARC would only use the first request's dsobj from
      the bookmark to decrypt the data. This is problematic because
      the first request might be a prefetch zio which is able to
      handle the key not being loaded, while the second might use a
      different key that it is sure will work. The fix here is to
      pass the dsobj with each individual arc_callback_t so that each
      request can attempt to decrypt the data separately.
    
    * DRR_FREE and DRR_FREEOBJECT records in a send file were not
      having their transactions properly tagged as raw during raw
      sends, which caused a panic when the dbuf code attempted to
      decrypt these blocks.
    
    * traverse_prefetch_metadata() did not properly set
      ZIO_FLAG_SPECULATIVE when issuing prefetch IOs.
    
    * Added a few asserts and code cleanups to ensure these issues
      are more detectable in the future.
    
    Signed-off-by: Tom Caputi <tcaputi@datto.com>

[33mcommit 4807c0badb130ae70cf6f0887b4be1648f217f1a[m
Author: Tom Caputi <tcaputi@datto.com>
Date:   Tue Sep 12 16:15:11 2017 -0400

    Encryption patch follow-up
    
    * PBKDF2 implementation changed to OpenSSL implementation.
    
    * HKDF implementation moved to its own file and tests
      added to ensure correctness.
    
    * Removed libzfs's now unnecessary dependency on libzpool
      and libicp.
    
    * Ztest can now create and test encrypted datasets. This is
      currently disabled until issue #6526 is resolved, but
      otherwise functions as advertised.
    
    * Several small bug fixes discovered after enabling ztest
      to run on encrypted datasets.
    
    * Fixed coverity defects added by the encryption patch.
    
    * Updated man pages for encrypted send / receive behavior.
    
    * Fixed a bug where encrypted datasets could receive
      DRR_WRITE_EMBEDDED records.
    
    * Minor code cleanups / consolidation.
    
    Signed-off-by: Tom Caputi <tcaputi@datto.com>

[33mcommit 94d49e8f9bd2e58a783066327c84b7d3b605ac0f[m
Author: Tom Caputi <tcaputi@datto.com>
Date:   Wed Oct 11 12:12:48 2017 -0400

    Relax ASSERT for #6526
    
    This patch resolves a minor issue where an ASSERT in
    metaslab_passivate() that only applies to non weight-based
    metaslabs was erroneously applied to all metaslabs.
    
    Signed-off-by: Tom Caputi <tcaputi@datto.com>

[33mcommit d9ee0e2621d79c121b37e0a359d58834f37fbc78[m
Author: KireinaHoro <i@jsteward.moe>
Date:   Thu Oct 12 01:42:05 2017 +0800

    Remove useless DEFAULT_INCLUDES in AM_CCASFLAGS
    
    CPPASCOMPILE and LTCPPASCOMPILE all include DEFAULT_INCLUDES,
    hence it's unnecessary to add the includes again.
    
    Signed-off-by: Pengcheng Xu <i@jsteward.moe>

[33mcommit e102b1b51521f8444b5512796dca92e1c0518d1f[m
Author: KireinaHoro <i@jsteward.moe>
Date:   Wed Oct 11 13:36:26 2017 +0800

    Fix libspl assembler flags to respect cpu type
    
    It's important to respect the user's CFLAGS as mismatched -mcpu
    will directly result in the assembler not able to produce correct
    code. Fixes #6733.
    
    Signed-off-by: Pengcheng Xu <i@jsteward.moe>

[33mcommit a7ec8c47e21c76624149beb1c9490c0e1bedf2a8[m
Author: KireinaHoro <i@jsteward.moe>
Date:   Wed Oct 11 13:16:46 2017 +0800

    SPARC optimizations for Encode()
    
    Normally a SPARC processor runs in big endian mode. Save the extra labor
    needed for little endian machines when the target is a big endian one
    (sparc).
    
    Signed-off-by: Pengcheng Xu <i@jsteward.moe>

[33mcommit 46d4fe880e15848b272593ae68333577206d9c5b[m
Author: KireinaHoro <i@jsteward.moe>
Date:   Wed Oct 11 13:09:43 2017 +0800

    SPARC optimizations for SHA1Transform()
    
    Passing arguments explicitly into SHA1Transform() increases the number of
    registers abailable to the compiler, hence leaving more local and out registers
    available. The missing symbol of sha1_consts[], which prevents compiling on
    SPARC, is added back, which speeds up the process of utilizing the relative
    constants.
    This should fix #6738.
    
    Signed-off-by: Pengcheng Xu <i@jsteward.moe>

[33mcommit d4404c3fdbe11f5220fd6ab429bb2f12ac93d1f4[m
Author: aun <spamtoaun@gmail.com>
Date:   Wed Oct 11 20:06:20 2017 +0300

    Fix boot from ZFS issues
    
    * Correct ZFS snapshot listing
    * Disable "lvm is not available" message on quiet boot
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Alar Aun <spamtoaun@gmail.com>
    Closes #6700
    Closes #6747

[33mcommit 29e07af5ae77e0ddf9ccfb77684f9713627b2ceb[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Oct 11 09:15:44 2017 -0700

    Fix chattr/cleanup failure
    
    The chattr cleanup step may fail to delete the user if there is still
    an active process running as that user.  Retry the userdel when this
    occurs to eliminate spurious false positves.
    
      ERROR: userdel quser1 exited 8
      userdel: user quser1 is currently used by process 26814
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6749

[33mcommit 523d5ce0f48a1b7127345d830e5a34079cace322[m
Author: Tobin Harding <me@tobin.cc>
Date:   Wed Oct 11 10:41:47 2017 +1100

    Fix coverity defects: CID 147474
    
    CID 147474: Logically dead code (DEADCODE)
    
    Remove ternary operator and return `error` directly.
    
    Currently return value is derived from a ternary operator. The
    conditional is always true. The ternary operator is therefore
    redundant i.e dead code.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tobin C. Harding <me@tobin.cc>
    Closes #6723

[33mcommit 829e95c4dc74d7d6d31d01af9c39e03752499b15[m
Author: Fabian Grünbichler <f.gruenbichler@proxmox.com>
Date:   Tue Sep 26 14:03:21 2017 +0200

    Skip FREEOBJECTS for objects which can't exist
    
    When sending an incremental stream based on a snapshot, the receiving
    side must have the same base snapshot.  Thus we do not need to send
    FREEOBJECTS records for any objects past the maximum one which exists
    locally.
    
    This allows us to send incremental streams (again) to older ZFS
    implementations (e.g. ZoL < 0.7) which actually try to free all objects
    in a FREEOBJECTS record, instead of bailing out early.
    
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Fabian Grünbichler <f.gruenbichler@proxmox.com>
    Closes #5699
    Closes #6507
    Closes #6616

[33mcommit 48fbb9ddbf2281911560dfbc2821aa8b74127315[m
Author: Fabian Grünbichler <f.gruenbichler@proxmox.com>
Date:   Fri Sep 29 12:00:29 2017 +0200

    Free objects when receiving full stream as clone
    
    All objects after the last written or freed object are not supposed to
    exist after receiving the stream.  Free them accordingly, as if a
    freeobjects record for them had been included in the stream.
    
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Fabian Grünbichler <f.gruenbichler@proxmox.com>
    Closes #5699
    Closes #6507
    Closes #6616

[33mcommit aee1dd4d983c64db3c3155290d48f05243e85709[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Wed Oct 11 00:22:05 2017 +0200

    Fix intra-pool resumable 'zfs send -t <token>'
    
    Because resuming from a token requires "guid" -> "snapshot" mapping
    we have to walk the whole dataset hierarchy to find the right snapshot
    to send; when both source and destination exists, for an incremental
    resumable stream, libzfs gets confused and picks up the wrong snapshot
    to send from: this results in attempting to send
    
       "destination@snap1 -> source@snap2"
    
    instead of
    
       "source@snap1 -> source@snap2"
    
    which fails with a "Invalid cross-device link" error (EXDEV).
    
    Fix this by adjusting the logic behind dataset traversal in
    zfs_iter_children() to pick the right snapshot to send from.
    
    Additionally update dry-run 'zfs send -t' to print its output to
    stderr: this is consistent with other dry-run commands.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #6618
    Closes #6619
    Closes #6623

[33mcommit 70f02287f86db33950eba9ceeb4f4c07c23131e0[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Oct 10 15:19:19 2017 -0700

    Fix ARC behavior on 32-bit systems
    
    With the addition of the ABD changes consumption of the virtual
    address space has been greatly reduced.  This exposed an issue on
    CONFIG_HIGHMEM systems where free memory was being calculated
    incorrectly.  Functionally this didn't cause any major problems
    prior to ABD because a lack of available virtual address space
    was used as an indicator of low memory.
    
    This patch makes the following changes to address the issue and
    in the process realigns the code further with OpenZFS.  There
    are no substantive changes in behavior for 64-bit systems.
    
    * Added CONFIG_HIGHMEM case to the arc_all_memory() and
      arc_free_memory() functions to only consider low memory pages
      on CONFIG_HIGHMEM systems.
    
    * The arc_free_memory() function was updated to return bytes
      instead of pages to be consistent with the other helper
      functions.  In user space we make up some reasonable values
      since currently only testing is performed in this context.
    
    * Adds three new values to the arcstats kstat to provide visibility
      in to the ARC's assessment of the memory situation:
      memory_all_bytes, memory_free_bytes, and memory_available_bytes.
    
    * Added kmem_reap() call to arc_available_memory() for 32-bit
      builds to realign code with OpenZFS.
    
    * Reduced size of test file in /async_destroy_001_pos.ksh to
      speed up test case.  Multiple txgs are still required.
    
    * Move vdevs used by zpool_clear_001_pos and zpool_upgrade_002_pos
      to TEST_BASE_DIR location to speed up test cases.
    
    Reviewed-by: David Quigley <david.quigley@intel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5352
    Closes #6734

[33mcommit 4f23c5d0c45649ba2bb7679c86561b006aee2dfe[m
Author: privb0x23 <privb0x23@users.noreply.github.com>
Date:   Mon Oct 9 21:34:26 2017 +0000

    Fix inclusion of libgcc_s.so on Void
    
    On Void Linux (x86_64 musl) libgcc_s.so is located in "/usr/lib"
    so it is not found by dracut and it produces an error.
    
    Add a simple additional path check for "/usr/lib/libgcc_s.so*"
    and install it in the initramfs.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: privb0x23 <privb0x23@users.noreply.github.com>
    Closes #6715

[33mcommit 57f4ef2e819670f8b28760b32745e0729f8d80d7[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Oct 6 11:23:12 2017 -0700

    Fix abdstats kstat on 32-bit systems
    
    When decrementing the struct_size and scatter_chunk_waste kstats
    the value needs to be cast to an int on 32-bit systems.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6721

[33mcommit a0430cc5a913406cf471bcafac31c5118d89843f[m
Author: Tobin Harding <me@tobin.cc>
Date:   Fri Oct 6 13:38:55 2017 +1100

    Use bitwise '&' instead of logical '&&'
    
    Make two instances of the same change. Change bitwise AND (&) to logical
    AND (&&).
    
    Currently the code uses a bitwise AND between two boolean values.
    
    In the first instance;
    
    The first operand is a flag that has been bitwise combined with a bit
    mask to get a boolean value as to whether a file has group write
    permissions set.
    
    The second operand used is a struct member that is intended as a
    boolean flag not a bit mask.
    
    In the second instance the argument is the same except with world write
    permissions instead of group write (S_IWOTH, S_IWGRP).
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Tobin C. Harding <me@tobin.cc>
    Closes #6684
    Closes #6722

[33mcommit d95a59805f8f00046bb449fb12161e1f0caf65fb[m
Author: Tobin Harding <me@tobin.cc>
Date:   Fri Oct 6 13:33:44 2017 +1100

    Remove unnecessary equality check
    
    Currently `if` statement includes an assignment (from a function return
    value) and a equality check. The parenthesis are in the incorrect place,
    currently the code clobbers the function return value because of this.
    
    We can fix this by simplifying the `if` statement.
    
    `if (foo != 0)`
    
    can be more succinctly expressed as
    
    `if (foo)`
    
    Remove the equality check, add parenthesis to correct the statement.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Tobin C. Harding <me@tobin.cc>
    Closes #6685
    Close #6719

[33mcommit eea2e2413220b34a3da0911dee554df20bdd0c47[m
Author: Isaac Huang <he.huang@intel.com>
Date:   Thu Oct 5 20:30:02 2017 -0600

    Use linear abd in vdev_copy_uberblocks()
    
    The vdev_copy_uberblocks() function should use abd_alloc_linear() to
    allocate ub_abd, because abd_to_buf(ub_abd)) is used later.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Isaac Huang <he.huang@intel.com>
    Closes #6718
    Closes #6713

[33mcommit c11f1004d19dd74e4be8869d211639413293dea0[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Oct 5 19:28:00 2017 -0700

    Remove dead code from AVL tree
    
    The avl_update_* functions are never used by ZFS and are therefore
    being removed.  They're barely even used in Illumos.  Additionally,
    simplify avl_add() by using a VERIFY which produces exactly the same
    behavior under Linux.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6716

[33mcommit 39f56627ae988d09b4e3803c01c22b2026b2310e[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Mon Oct 2 15:36:04 2017 -0700

    receive_freeobjects() skips freeing some objects
    
    When receiving a FREEOBJECTS record, receive_freeobjects()
    incorrectly skips a freed object in some cases. Specifically, this
    happens when the first object in the range to be freed doesn't exist,
    but the second object does. This leaves an object allocated on disk
    on the receiving side which is unallocated on the sending side, which
    may cause receiving subsequent incremental streams to fail.
    
    The bug was caused by an incorrect increment of the object index
    variable when current object being freed doesn't exist.  The
    increment is incorrect because incrementing the object index is
    handled by a call to dmu_object_next() in the increment portion of
    the for loop statement.
    
    Add test case that exposes this bug.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Closes #6694
    Closes #6695

[33mcommit 01ff0d7540b21c461c19b90b1e715df26cba3ff2[m
Author: Alek P <alek-p@users.noreply.github.com>
Date:   Fri Sep 29 15:58:52 2017 -0700

    Update the default for zfs_txg_history
    
    It's often useful to have access to txg history for debugging
    purposes. This patch changes the default from 0 to 100 TXGs
    worth of history preserved.
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed by: Richard Elling <Richard.Elling@RichardElling.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Alek Pinchuk <apinchuk@datto.com>
    Closes #6691

[33mcommit e71cade67d48495db46fb6eed29b88b895bcb2d8[m
Author: chrisrd <chris@onthe.net.au>
Date:   Sat Sep 30 08:49:19 2017 +1000

    Scale the dbuf cache with arc_c
    
    Commit d3c2ae1 introduced a dbuf cache with a default size of the
    minimum of 100M or 1/32 maximum ARC size. (These figures may be adjusted
    using dbuf_cache_max_bytes and dbuf_cache_max_shift.) The dbuf cache
    is counted as metadata for the purposes of ARC size calculations.
    
    On a 1GB box the ARC maximum size defaults to c_max 493M which gives a
    dbuf cache default minimum size of 15.4M, and the ARC metadata defaults
    to minimum 16M. I.e. the dbuf cache is an significant proportion of the
    minimum metadata size. With other overheads involved this actually means
    the ARC metadata doesn't get down to the minimum.
    
    This patch dynamically scales the dbuf cache to the target ARC size
    instead of statically scaling it to the maximum ARC size. (The scale is
    still set by dbuf_cache_max_shift and the maximum size is still fixed by
    dbuf_cache_max_bytes.) Using the target ARC size rather than the current
    ARC size is done to help the ARC reach the target rather than simply
    focusing on the current size.
    
    Reviewed-by: Chunwei Chen <tuxoko@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Chris Dunlop <chris@onthe.net.au>
    Issue #6506
    Closes #6561

[33mcommit b59b22972db5913000ca157c24a254182df8d957[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Thu Sep 28 22:04:14 2017 +0200

    Add 'zfs diff' coverage to the ZFS Test Suite
    
    This change adds four new tests to the ZTS:
    
     * zfs_diff_changes: verify type of changes diplayed (-, +, R and M)
     * zfs_diff_cliargs: verify command line options and arguments
     * zfs_diff_timestamp: verify 'zfs diff -t'
     * zfs_diff_types: verify type of objects (files, dirs, pipes...)
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: John Wren Kennedy <john.kennedy@delphix.com>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #6686

[33mcommit 269db7a4b3ef2bc14f3c2cf95f050479cbd69e72[m
Author: Simon Guest <simon.guest@tesujimath.org>
Date:   Thu Sep 28 06:39:47 2017 +1300

    vdev_id: extension for new scsi topology
    
    On systems with SCSI rather than SAS disk topology, this change enables
    the vdev_id script to match against the block device path, and therefore
    create a vdev alias in /dev/disk/by-vdev.
    
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Simon Guest <simon.guest@tesujimath.org>
    Closes #6592

[33mcommit 0c484ab5677ffaa3e0e2371456deb4f8eb370388[m
Author: Prakash Surya <prakash.surya@delphix.com>
Date:   Tue Sep 26 12:29:32 2017 -0700

    Run ztest for longer on "Coverage" builders
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Prakash Surya <prakash.surya@delphix.com>
    Closes #6675

[33mcommit 7e98073379353a05498ac5a2f1a5df2a2257d6b0[m
Author: DeHackEd <DeHackEd@users.noreply.github.com>
Date:   Mon Sep 25 13:38:27 2017 -0400

    Fix printk() calls missing log level
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: DHE <git@dehacked.net>
    Closes #6672

[33mcommit 3fd3e56cfd543d7d7a1bf502bfc0db6e24139668[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Mon Sep 25 19:32:34 2017 +0200

    Fix some ZFS Test Suite issues
    
    * Add 'zfs bookmark' coverage (zfs_bookmark_cliargs)
    
     * Add OpenZFS 8166 coverage (zpool_scrub_offline_device)
    
     * Fix "busy" zfs_mount_remount failures
    
     * Fix bootfs_003_pos, bootfs_004_neg, zdb_005_pos local cleanup
    
     * Update usage of $KEEP variable, add get_all_pools() function
    
     * Enable history_008_pos and rsend_019_pos (non-32bit builders)
    
     * Enable zfs_copies_005_neg, update local cleanup
    
     * Fix zfs_send_007_pos (large_dnode + OpenZFS 8199)
    
     * Fix rollback_003_pos (use dataset name, not mountpoint, to unmount)
    
     * Update default_raidz_setup() to work properly with more than 3 disks
    
     * Use $TEST_BASE_DIR instead of hardcoded (/var)/tmp for file VDEVs
    
     * Update usage of /dev/random to /dev/urandom
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Issue #6086
    Closes #5658
    Closes #6143
    Closes #6421
    Closes #6627
    Closes #6632

[33mcommit b33d668ddb005b1072c26d36e1abff53aa39ca98[m
Author: Olaf Faaland <faaland1@llnl.gov>
Date:   Sat Sep 23 09:28:18 2017 -0700

    Fix ZTS MMP tests and ztest -M behavior
    
    Quote "$MMP_IMPORT_MSG" when it is passed as an argument, as it is a
    multi-word string.  Some tests were passing when they should not have,
    because the grep was only testing for the first word.
    
    Correct the message expected when no hostid is set and the test attempts
    to enable multihost.  It did not match the actual output in that
    situation.
    
    Disable ztest_reguid() when ztest is invoked with the -M option.  If
    ztest performs a reguid, a concurrent import attempt may fail with the
    error "one or more devices is currently unavailable" if the guid sum is
    calculated on the original device guids but compared against the guid
    sum ztest wrote based on the new device guids.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>
    Closes #6666

[33mcommit 7a6acb31b7a5bcc27a9b0313e46c411d2af353db[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Sep 22 22:16:18 2017 -0700

    Fix "--enable-code-coverage" debug build
    
    When --enable-code-coverage is provided it should not result
    in NDEBUG being defined.  This is controlled by --enable-debug.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6674

[33mcommit bb2773b358561145457670f2feb8c7c85b861711[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Sep 22 18:54:34 2017 -0700

    Update codecov.yml
    
    Update the codecov.yml to make the following functional changes.
    
    * Do not require the CI testing to pass before posting results.
    * Set red-yellow-green coverage percent from 50%-100%
    * Allow a 1% drop in coverage to still be considered a pass.
    * Reduce the size of the comment posted to the issue.
    
    Additionally, the top level README.markdown has been updated
    to include the codecov.io badge and the project summary reworded.
    
    Reviewed-by: Prakash Surya <prakash.surya@delphix.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6669

[33mcommit acf044420b134b022da5c866b19df69934ad3778[m
Author: Prakash Surya <prakash.surya@delphix.com>
Date:   Fri Sep 22 18:49:57 2017 -0700

    Add support for "--enable-code-coverage" option
    
    This change adds support for a new option that can be passed to the
    configure script: "--enable-code-coverage". Further, the "--enable-gcov"
    option has been removed, as this new option provides the same
    functionality (plus more).
    
    When using this new option the following make targets are available:
    
     * check-code-coverage
     * code-coverage-capture
     * code-coverage-clean
    
    Note: these make targets can only be run from the root of the project.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Prakash Surya <prakash.surya@delphix.com>
    Closes #6670

[33mcommit d410c6d9fd4db812a1009e1603c89f1e222e1875[m
Author: Olaf Faaland <faaland1@llnl.gov>
Date:   Fri Sep 22 14:29:26 2017 -0700

    Reimplement vdev_random_leaf and rename it
    
    Rename it as mmp_random_leaf() since it is defined in mmp.c.
    
    The earlier implementation could end up spinning forever if a pool had a
    vdev marked writeable, none of whose children were writeable.  It also
    did not guarantee that if a writeable leaf vdev existed, it would be
    found.
    
    Reimplement to recursively walk the device tree to select the leaf.  It
    searches the entire tree, so that a return value of (NULL) indicates
    there were no usable leaves in the pool; all were either not writeable
    or had pending mmp writes.
    
    It still chooses the starting child randomly at each level of the tree,
    so if the pool's devices are healthy, the mmp writes go to random leaves
    with an even distribution.  This was verified by testing using
    zfs_multihost_history enabled.
    
    Reviewed by: Thomas Caputi <tcaputi@datto.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>
    Closes #6631
    Closes #6665

[33mcommit 5df5d06a8d86af475e90fe7dd86ea044f937be66[m
Author: Don Brady <dev.fs.zfs@gmail.com>
Date:   Thu Sep 21 11:17:56 2017 -0600

    Cleanup zloop working directory after each pass
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed by: John Kennedy <jwk404@gmail.com>
    Reviewed-by: Olaf Faaland <faaland1@llnl.gov>
    Signed-off-by: Don Brady <don.brady@delphix.com>
    Issue #6595
    Closes #6663

[33mcommit 4ce3c45a5e30a6ee698ea60be381c774050093ed[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Sep 20 09:36:17 2017 -0700

    Increase default arc_c_min
    
    Increase the default arc_c_min value to which whichever is larger,
    either 32M or 1/32 of total system memory.  This is advantageous for
    systems with more than 1G of memory where performance issues may
    occur when the ARC is allowed to collapse below a minimum size.
    At the same time we want to use the bare minimum value which is
    still functional so the filesystem can be used in very low memory
    environments.
    
    Reviewed-by: Tim Chase <tim@chase2k.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6659

[33mcommit 848259c10f08694fd57c005aeb5ca8d724f046b6[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Sep 20 09:30:24 2017 -0700

    Export symbol dmu_tx_mark_netfree()
    
    This symbol is needed by Lustre for the same reason it was needed
    by the ZPL.  It should have been exported when the original patch
    was merged.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Reviewed-by: Alex Zhuravlev <bzzz@whamcloud.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6660

[33mcommit 18a2485fc8061f7393ca19f7291366bc46fe9bf7[m
Author: Feng Sun <loyou85@gmail.com>
Date:   Wed Sep 20 03:19:08 2017 +0800

    misc: fix meaningless values
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Feng Sun <loyou85@gmail.com>
    Closes #6658

[33mcommit 34d00e7aba13076e47dbd1791bd955c1e2f7b0c9[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Tue Sep 19 12:17:29 2017 -0700

    Correct cppcheck errors
    
    ZFS buildbot STYLE builder was moved to Ubuntu 17.04
    which has a newer version of cppcheck. Handle the
    new cppcheck errors.
    
    uu_* functions removed in this commit were unused
    and effectively dead code. They are now retired.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #6653

[33mcommit 8e2dddab421e7131b7bd7eadd517fb36b59b2ddd[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Sep 19 10:09:37 2017 -0700

    ZTS fix slog_replay_volume.ksh failure
    
    The slog_replay_volume.ksh test case will fail when the pool is
    layered on files in a filesystem which does not support discard.
    Avoid this issue by creating the pool using DISKS which will
    either be loopback device or real disk.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6654

[33mcommit a9a2bf71520ffb5668c9204db5c7df0445dc912a[m
Author: David Quigley <dpquigl@users.noreply.github.com>
Date:   Mon Sep 18 18:06:40 2017 -0600

    Remove FRU and LIBTOPO Support
    
    FRU and LIBTOPO support are illumos only features that will not be ported to
    Linux and make the code more complicated than necessary. This commit
    makes way for further cleanups of the zed/FMA code.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: David Quigley <david.quigley@intel.com>
    Closes #6641

[33mcommit ea49beba66106dcb272b43323fad147df1df13fd[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Mon Sep 18 14:23:09 2017 -0700

    Correct shellcheck errors
    
    The ZFS buildbot moved to using Ubuntu 17.04 for the
    STYLE builder which has a newer version of shellcheck.
    Correct the new issues it discovers.
    
    Reviewed-by: loli10K <ezomori.nozomu@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #6647

[33mcommit a35b4cc8cca6eed5e93d54aa9ca2c72273a8943b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sat Sep 16 19:36:44 2017 -0700

    ZTS fix events_002_pos.sh failure
    
    Fix spurious events_002_pos failures by waiting longer before
    grabbing the log to check for the resilver_finish event.  It
    would be better to rework this logic to wait only as long as
    needed rather than a fixed timeout.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6651

[33mcommit 787acae0b5cd139ea0f9fa60558cca28d4673b23[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Sat Sep 16 11:00:19 2017 -0700

    Linux 3.14 compat: IO acct, global_page_state, etc
    
    generic_start_io_acct/generic_end_io_acct in the master
    branch of the linux kernel requires that the request_queue
    be provided.
    
    Move the logic from freemem in the spl to arc_free_memory
    in arc.c. Do this so we can take advantage of global_page_state
    interface checks in zfs.
    
    Upstream kernel replaced struct block_device with
    struct gendisk in struct bio. Determine if the
    function bio_set_dev exists during configure
    and have zfs use that if it exists.
    
    bio_set_dev https://github.com/torvalds/linux/commit/74d4699
    global_node_page_state https://github.com/torvalds/linux/commit/75ef718
    io acct https://github.com/torvalds/linux/commit/d62e26b
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #6635

[33mcommit 90cdf2833d163dd4db31aded1e6940cc9edb67f6[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Sat Sep 16 19:51:24 2017 +0200

    Add mdoc style checker
    
    Add a new make 'mancheck' target which uses mandoc -Tlint to verify
    manpage files: currently only zfs(8), zpool(8) zdb(8) and zgenhostid(8)
    are supported.
    
    Additionally fix some outstanding manpage formatting issues.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #6646

[33mcommit 1f4e2c88fd6ca44ec50f178ca8baa18a9c764a98[m
Author: David Quigley <david.quigley@intel.com>
Date:   Wed Sep 13 14:48:05 2017 -0400

    ZTEST: Always enable asserts
    
    The build for ztest always enabled debug information but does not enable
    asserts unless --enable-debug is used. This will always enable asserts
    in the ztest code.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: David Quigley <david.quigley@intel.com>
    Closes #6640

[33mcommit 7c9abcf88781947d02863b81ae98c58b18ed71d0[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Fri Sep 15 23:13:52 2017 +0300

    OpenZFS 8435 - zpool.1m and zfs.1m: minor cleanup
    
    3796 listsnapshots not documented in zpool man page
    
    Authored by: George Melikov <mail@gmelikov.ru>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Reviewed by: Yuri Pankov <yuripv@gmx.com>
    Approved by: Dan McDonald <danmcd@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Ported-by: George Melikov mail@gmelikov.ru
    
    OpenZFS-issue: https://www.illumos.org/issues/8435
    OpenZFS-commit: openzfs/openzfs@a058d1c
    
    Porting notes: OpenZFS review applied,
    some ZoL changes were reverted.
    See https://github.com/openzfs/openzfs/pull/415

[33mcommit 6384cf4132a39dd0ada7991d551554b718041da9[m
Author: Prakash Surya <prakash.surya@delphix.com>
Date:   Fri Sep 15 11:47:11 2017 -0700

    Make "-fno-inline" compile option more accessible
    
    When functions are inlined, it can make the system much more difficult
    to instrument using tools such as ftrace, BPF, crash, etc. Thus, to aid
    development and increase the system's observability, when the
    "--enable-debuginfo" flag is specified, the "-fno-inline" compilation
    option will be used for both userspace and kernel modules.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Prakash Surya <prakash.surya@delphix.com>
    Closes #6605

[33mcommit d9ec8b9b2a3880a1a2b68e57a25833486c3b164d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Sep 15 10:24:13 2017 -0700

    Add configure option to enable gcov analysis
    
    * Add configure option to enable gcov analysis.
    * Includes a few minor ctime fixes.
    * Add codecov.yml configuration.
    
    Reviewed-by: Prakash Surya <prakash.surya@delphix.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6642

[33mcommit 0107f69898e3b6d39d974b272da1739cb2f39027[m
Author: Gaurav Kumar <gaurkuma@users.noreply.github.com>
Date:   Wed Sep 13 12:20:07 2017 -0700

    Modifying XATTRs doesnt change the ctime
    
    Changing any metadata, should modify the ctime.
    
    Reviewed-by: Chunwei Chen <tuxoko@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: gaurkuma <gauravk.18@gmail.com>
    Closes #3644
    Closes #6586

[33mcommit b1490dd43e3c98649c7d23928d908f5bb019411b[m
Author: David Quigley <dpquigl@users.noreply.github.com>
Date:   Wed Sep 13 12:45:04 2017 -0600

    Fix bug in distclean which removes needed files
    
    Running distclean removes the following files because of an error
    in Makefile.am
    
    deleted:    tests/zfs-tests/include/commands.cfg
    deleted:    tests/zfs-tests/include/libtest.shlib
    deleted:    tests/zfs-tests/include/math.shlib
    deleted:    tests/zfs-tests/include/properties.shlib
    deleted:    tests/zfs-tests/include/zpool_script.shlib
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: David Quigley <david.quigley@intel.com>
    Closes #6636

[33mcommit ded8f06a3cfee60b3a8ea5309e9c4d0e567ed3b5[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Tue Sep 12 20:33:22 2017 +0200

    Relax (ref)reservation constraints on ZVOLs
    
    This change allow (ref)reservation to be set larger than the current
    ZVOL size: this is safe as we normally set refreservation > volsize
    at ZVOL creation time when we account for metadata.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed by: Richard Elling <Richard.Elling@RichardElling.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #2468
    Closes #6610

[33mcommit d9549cba9640cd3b09d76b8cbd54387728b7be24[m
Author: Arkadiusz Bubała <arkadiusz.bubala@open-e.com>
Date:   Mon Sep 11 19:25:01 2017 +0200

    Fix false config_cache_write events
    
    On pool import when the old cache file is removed
    the ereport.fs.zfs.config_cache_write event is generated.
    Because zpool export always removes cache file it happens
    every export - import sequence.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: loli10K <ezomori.nozomu@gmail.com>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Arkadiusz Bubała <arkadiusz.bubala@open-e.com>
    Closes #6617

[33mcommit 835db58592d7d947e5818eb7281882e2a46073e0[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Sat Sep 9 00:24:31 2017 +0200

    Add -vnP support to 'zfs send' for bookmarks
    
    This leverages the functionality introduced in cf7684b to expose
    verbose, dry-run and parsable 'zfs send' options for bookmarks.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #3666
    Closes #6601

[33mcommit 57858fb5ca4b1d0f28b054cb5e15aaf3bc54c99e[m
Author: Mike Swanson <mikeonthecomputer@gmail.com>
Date:   Fri Sep 8 15:21:58 2017 -0700

    Recommend compression=on in zfs(8) dedup section
    
    compression=lz4 depends on the lz4 feature being enabled, while
    compression=on will let ZFS use either lzjb or lz4 where appropriate.
    It also allows the documentation to not go out of date if/when ZFS
    picks a new default in the future.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Mike Swanson <mikeonthecomputer@gmail.com>
    Closes #6614

[33mcommit 5c214ae318cbca37285ec38e6a2044a7002d31e9[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Sep 8 15:07:00 2017 -0700

    Fix volume WR_INDIRECT log replay
    
    The portion of the zvol_replay_write() handler responsible for
    replaying indirect log records for some reason never existed.
    As a result indirect log records were not being correctly replayed.
    
    This went largely unnoticed since the majority of zvol log records
    were of the type WR_COPIED or WR_NEED_COPY prior to OpenZFS 7578.
    
    This patch updates zvol_replay_write() to correctly handle these
    log records and adds a new test case which verifies volume replay
    to prevent any regression.  The existing test case which verified
    replay on filesystem was renamed slog_replay_fs.ksh for clarity.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: loli10K <ezomori.nozomu@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6603
    Closes #6615

[33mcommit e0dd0a32a8c8db725be673153b09bee0ca9adcf2[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Sep 7 09:48:26 2017 -0700

    Revert "Handle new dnode size in incremental..."
    
    This reverts commit 65dcb0f67a4d72ee4e1e534703db5caacf1ec85f until
    a comprehensive fix is finalized.  The stricter interior dnode
    detection in 4c5b89f59e4e5c8f5b4680040118ebde09598bbe and the new
    test case added by this patch revealed a issue with resizing
    dnodes when receiving an incremental backup stream.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #6576

[33mcommit 4c5b89f59e4e5c8f5b4680040118ebde09598bbe[m
Author: Olaf Faaland <faaland1@llnl.gov>
Date:   Tue Sep 5 16:15:04 2017 -0700

    Improved dnode allocation and dmu_hold_impl()
    
    Refactor dmu_object_alloc_dnsize() and dnode_hold_impl() to simplify the
    code, fix errors introduced by commit dbeb879 (PR #6117) interacting
    badly with large dnodes, and improve performance.
    
    * When allocating a new dnode in dmu_object_alloc_dnsize(), update the
    percpu object ID for the core's metadnode chunk immediately.  This
    eliminates most lock contention when taking the hold and creating the
    dnode.
    
    * Correct detection of the chunk boundary to work properly with large
    dnodes.
    
    * Separate the dmu_hold_impl() code for the FREE case from the code for
    the ALLOCATED case to make it easier to read.
    
    * Fully populate the dnode handle array immediately after reading a
    block of the metadnode from disk.  Subsequently the dnode handle array
    provides enough information to determine which dnode slots are in use
    and which are free.
    
    * Add several kstats to allow the behavior of the code to be examined.
    
    * Verify dnode packing in large_dnode_008_pos.ksh.  Since the test is
    purely creates, it should leave very few holes in the metadnode.
    
    * Add test large_dnode_009_pos.ksh, which performs concurrent creates
    and deletes, to complement existing test which does only creates.
    
    With the above fixes, there is very little contention in a test of about
    200,000 racing dnode allocations produced by tests 'large_dnode_008_pos'
    and 'large_dnode_009_pos'.
    
    name                            type data
    dnode_hold_dbuf_hold            4    0
    dnode_hold_dbuf_read            4    0
    dnode_hold_alloc_hits           4    3804690
    dnode_hold_alloc_misses         4    216
    dnode_hold_alloc_interior       4    3
    dnode_hold_alloc_lock_retry     4    0
    dnode_hold_alloc_lock_misses    4    0
    dnode_hold_alloc_type_none      4    0
    dnode_hold_free_hits            4    203105
    dnode_hold_free_misses          4    4
    dnode_hold_free_lock_misses     4    0
    dnode_hold_free_lock_retry      4    0
    dnode_hold_free_overflow        4    0
    dnode_hold_free_refcount        4    57
    dnode_hold_free_txg             4    0
    dnode_allocate                  4    203154
    dnode_reallocate                4    0
    dnode_buf_evict                 4    23918
    dnode_alloc_next_chunk          4    4887
    dnode_alloc_race                4    0
    dnode_alloc_next_block          4    18
    
    The performance is slightly improved for concurrent creates with
    16+ threads, and unchanged for low thread counts.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>
    Closes #5396
    Closes #6522
    Closes #6414
    Closes #6564

[33mcommit 65dcb0f67a4d72ee4e1e534703db5caacf1ec85f[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Tue Sep 5 16:09:15 2017 -0700

    Handle new dnode size in incremental backup stream
    
    When receiving an incremental backup stream, call
    dmu_object_reclaim_dnsize() if an object's dnode size differs between
    the incremental source and target. Otherwise it may appear that a
    dnode which has shrunk is still occupying slots which are in fact
    free. This will cause a failure to receive new objects that should
    occupy the now-free slots.
    
    Add a test case to verify that an incremental stream containing
    objects with changed dnode sizes can be received without error. This
    test case fails without this change.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Closes #6366
    Closes #6576

[33mcommit c8811dec7044a126650c7e2d9f3404680ae115b5[m
Author: Fabian-Gruenbichler <f.gruenbichler@proxmox.com>
Date:   Tue Sep 5 22:50:35 2017 +0200

    Add man page reference to systemd units
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Fabian Grünbichler <f.gruenbichler@proxmox.com>
    Closes #6599

[33mcommit 2917956841362b10af8b3afe7274968ddcc3f6e2[m
Author: bunder2015 <omfgbunder@gmail.com>
Date:   Tue Sep 5 16:45:18 2017 -0400

    zfs(8) manpage corrections
    
    Corrected indent of the note located at the bottom of the options for
    zfs send as well as remove an extra whitespace
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: bunder2015 <omfgbunder@gmail.com>
    Closes #6590

[33mcommit e771de534ff88a72b0531a85abc04ffb4333da53[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Sep 5 13:41:32 2017 -0700

    Trim new line from zfs_vdev_scheduler
    
    Add a helper function to trim the tailing new line.  While we're
    here use this new hook to immediately apply the new scheduler.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3356
    Closes #6573

[33mcommit cf7684bc8d57ace26d086027e8059c725fd9ff92[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Thu Aug 31 18:00:35 2017 +0200

    Retire send space estimation via ZFS_IOC_SEND
    
    Add a small wrapper around libzfs_core`lzc_send_space() to libzfs so
    that every legacy ZFS_IOC_SEND consumer, along with their userland
    counterpart estimate_ioctl(), can leverage ZFS_IOC_SEND_SPACE to
    request send space estimation.
    
    The legacy functionality in zfs_ioc_send() is left untouched for
    compatibility purposes.
    
    Reviewed by: Thomas Caputi <tcaputi@datto.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #6029

[33mcommit 1afc54f7f4f88902d0a3a3d88f6c7c6311c886ee[m
Author: Richard Lowe <richlowe@richlowe.net>
Date:   Sun Jul 8 19:01:30 2012 +0100

    OpenZFS 2976 - remove useless offsetof() macros
    
    Authored by: Richard Lowe <richlowe@richlowe.net>
    Reviewed by: Josef 'Jeff' Sipek <jeffpc@josefsipek.net>
    Reviewed by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Reviewed by: Andy Stormont <andyjstormont@gmail.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/2976
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/5c5f137
    Closes #6582

[33mcommit d22323e89f13975e1a60860aa78609584f00a606[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Wed Aug 30 21:09:18 2017 +0200

    dmu_objset: release bonus buffer in failure path
    
    Reported by kmemleak during testing of a new patch:
    
    ```
    unreferenced object 0xffff9f1c12e38800 (size 1024):
      comm "z_upgrade", pid 17842, jiffies 4296870904 (age 8746.268s)
      backtrace:
        kmemleak_alloc+0x7a/0x100
        __kmalloc_node+0x26c/0x510
        range_tree_create+0x39/0xa0 [zfs]
        dmu_zfetch_init+0x73/0xe0 [zfs]
        dnode_create+0x12c/0x3b0 [zfs]
        dnode_hold_impl+0x1096/0x1130 [zfs]
        dnode_hold+0x23/0x30 [zfs]
        dmu_bonus_hold_impl+0x6b/0x370 [zfs]
        dmu_bonus_hold+0x1e/0x30 [zfs]
        dmu_objset_space_upgrade+0x114/0x310 [zfs]
        dmu_objset_userobjspace_upgrade_cb+0xd8/0x150 [zfs]
        dmu_objset_upgrade_task_cb+0x136/0x1e0 [zfs]
        kthread+0x119/0x150
    ```
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Closes #6575

[33mcommit 74ea6092d0693b6e1c6daaee0fdc79491697996c[m
Author: Eli Rosenthal <eli.rosenthal@delphix.com>
Date:   Thu Jun 2 21:06:18 2016 -0700

    OpenZFS 7028 - avl_destroy_nodes supports emptying, not just destroying, an avl tree
    
    Authored by: Eli Rosenthal <eli.rosenthal@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Approved by: Gordon Ross <gordon.ross@nexenta.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/7028
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/86f617e
    Closes #6583

[33mcommit de327eccbb063c2321a40e167ad5c5b54ce2c227[m
Author: Steve Dougherty <sdougherty@barracuda.com>
Date:   Tue Nov 10 19:41:10 2015 -0500

    OpenZFS 6447 - handful of nvpair cleanups
    
    Authored by: Steve Dougherty <sdougherty@barracuda.com>
    Reviewed by: Josef 'Jeff' Sipek <jeffpc@josefsipek.net>
    Reviewed by: Andy Stormont <astormont@racktopsystems.com>
    Reviewed by: Garrett D'Amore <garrett@damore.org>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Don Brady <dev.fs.zfs@gmail.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/6447
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/759e89b
    Closes #6581

[33mcommit ecaebdbcf693d9f08844e04dc97f6859b7c37c80[m
Author: Andriy Gapon <avg@icyb.net.ua>
Date:   Thu Nov 12 11:23:37 2015 -0800

    OpenZFS 5778 - nvpair_type_is_array() does not recognize DATA_TYPE_INT8_ARRAY
    
    Authored by: Andriy Gapon <avg@icyb.net.ua>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed-by: Don Brady <dev.fs.zfs@gmail.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/5778
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/bf4d553
    Closes #6580

[33mcommit 24ded86e8dd528b056d73630ff33e526f9540dbc[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Thu Aug 4 16:16:29 2016 -0700

    OpenZFS 7261 - nvlist code should enforce name length limit
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Sebastien Roy <sebastien.roy@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Robert Mustacchi <rm@joyent.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed-by: Don Brady <dev.fs.zfs@gmail.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/7261
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/48dd5e6
    Closes #6579

[33mcommit 006309e8d75b22efc7418095e408b3b3774ef8ea[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Mon Apr 3 09:47:11 2017 -0700

    OpenZFS 8375 - Kernel memory leak in nvpair code
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Prashanth Sreenivasa <pks@delphix.com>
    Reviewed by: Robert Mustacchi <rm@joyent.com>
    Approved by: Dan McDonald <danmcd@joyent.com>
    Reviewed-by: Don Brady <dev.fs.zfs@gmail.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/8375
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/843c211
    Closes #6578

[33mcommit 1ea8942faa90c1787f3ad1bda44dc26bfc3186da[m
Author: alaviss <alaviss@users.noreply.github.com>
Date:   Wed Aug 30 00:17:49 2017 +0700

    libtpool: don't clone affinity if not supported
    
    pthread_attr_(get/set)affinity_np() is glibc-only. This commit
    disable the code path that use those functions in non-glibc
    system. Fixes the following when building with musl:
    
    libzfs.so: undefined reference to`pthread_attr_setaffinity_np'
    libzfs.so: undefined reference to`pthread_attr_getaffinity_np'
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Leorize <alaviss@users.noreply.github.com>
    Closes #6571

[33mcommit 0d3980acbcca00f495926a1d6b0886e0ea1f6589[m
Author: Richard Yao <richard.yao@clusterhq.com>
Date:   Tue Sep 23 14:29:30 2014 -0400

    Implement --enable-debuginfo to force debuginfo
    
    Inspection of a Ubuntu 14.04 x64 system revealed that the config file
    used to build the kernel image differs from the config file used to
    build kernel modules by the presence of CONFIG_DEBUG_INFO=y:
    
    This in itself is insufficient to show that the kernel is built with
    debuginfo, but a cursory analysis of the debuginfo provided and the
    size of the kernel strongly suggests that it was built with
    CONFIG_DEBUG_INFO=y while the modules were not. Installing
    linux-image-$(uname -r)-dbgsym had no obvious effect on the debuginfo
    provided by either the modules or the kernel.
    
    The consequence is that issue reports from distributions such as Ubuntu
    and its derivatives build kernel modules without debuginfo contain
    nonsensical backtraces. It is therefore desireable to force generation
    of debuginfo, so we implement --enable-debuginfo. Since the build system
    can build both userspace components and kernel modules, the generic
    --enable-debuginfo option will force debuginfo for both. However, it
    also supports --enable-debuginfo=kernel and --enable-debuginfo=user for
    finer grained control.
    
    Enabling debuginfo for the kernel modules works by injecting
    CONFIG_DEBUG_INFO=y into the make environment. This is enables
    generation of debuginfo by the kernel build systems on all Linux
    kernels, but the build environment is slightly different int hat
    CONFIG_DEBUG_INFO has not been in the CPP. Adding -DCONFIG_DEBUG_INFO
    would fix that, but it would also cause build failures on kernels where
    CONFIG_DEBUG_INFO=y is already set. That would complicate its use in
    DKMS environments that support a range of kernels and is therefore
    undesireable. We could write a compatibility shim to enable
    CONFIG_DEBUG_INFO only when it is explicitly disabled, but we forgo
    doing that because it is unnecessary. Nothing in ZoL or the kernel uses
    CONFIG_DEBUG_INFO in the CPP at this time and that is unlikely to
    change.
    
    Enabling debuginfo for the userspace components is done by injecting -g
    into CPPFLAGS. This is not necessary because the build system honors the
    environment's CPPFLAGS by appending them to the actual CPPFLAGS used,
    but it is supported for consistency.
    
    Reviewed-by: Chunwei Chen <tuxoko@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <richard.yao@clusterhq.com>
    Closes #2734

[33mcommit 6f174823cef105860a11f757f092942653c17869[m
Author: Richard Yao <richard.yao@clusterhq.com>
Date:   Tue Sep 23 13:31:33 2014 -0400

    Make --enable-debug fail when given bogus args
    
    Currently, bogus options to --enable-debug become --disable-debug. That
    means that passing --enable-debug=true is analogous to --disable-debug,
    but the result is counterintuitive. We switch to AS_CASE to allow us to
    fail when given a bogus option.
    
    Also, we modify the text printed to clarify that --enable-debug enables
    assertions.
    
    Reviewed-by: Chunwei Chen <tuxoko@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <richard.yao@clusterhq.com>
    Closes #2734

[33mcommit 1e0457e7f5384b0328ea499083120dd191d80c90[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Tue Aug 29 09:00:28 2017 -0700

    Enhance comments for large dnode project
    
    Fix a few nits in the comments from large dnodes. Also import
    some of the commit message as a comment in the code, making
    it more accessible.
    
    Reviewed-by: @rottegift
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Wilson <george.wilson@delphix.com>
    Signed-off-by: Matt Ahrens <mahrens@delphix.com>
    Closes #6551

[33mcommit 2209e40981e887c773914ec0f3b73cedf45ddb7d[m
Author: dbavatar <dbavatar@gmail.com>
Date:   Thu Aug 24 13:48:23 2017 -0400

    Linux 4.8+ compatibility fix for vm stats
    
    vm_node_stat must be used instead of vm_zone_stat. Unfortunately the
    old code still compiles potentially leading to silent failure of
    arc_evictable_memory()
    
    AKAMAI: CR 3816601: Regression in zfs dropcache test
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Debabrata Banerjee <dbanerje@akamai.com>
    Closes #6528

[33mcommit 076e9b946ef7a706ce2926c29912c467cdeddab6[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Thu Aug 24 20:36:17 2017 +0300

    Remove copyright duplicate in zpool man page
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: George Melikov <mail@gmelikov.ru>
    Closes #6553

[33mcommit 2fb1a234ab6912399336c8d459b1e40f67bc823e[m
Author: chrisrd <chris@onthe.net.au>
Date:   Fri Aug 25 03:31:59 2017 +1000

    dbuf_cons: deduplicate multilist_link_init()
    
    Remove harmless duplicate multilist_link_init() introduced by
    commit d3c2ae1.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: loli10K <ezomori.nozomu@gmail.com>
    Signed-off-by: Chris Dunlop <chris@onthe.net.au>
    Closes #6552

[33mcommit d7323e79a61fa7c6dd0b4bbcf4e5658c4fbea3dd[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Thu Aug 24 10:30:42 2017 -0700

    OpenZFS 8547 - update mandoc to 1.14.3
    
    Authored by: Yuri Pankov <yuri.pankov@nexenta.com>
    Reviewed by: Robert Mustacchi <rm@joyent.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/8547
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/c66b804
    Closes #6549

[33mcommit e4b6b2db124eac51580833d45d83dfde05cbc55c[m
Author: Alek P <alek-p@users.noreply.github.com>
Date:   Thu Aug 24 10:27:20 2017 -0700

    OpenZFS 8414 - Implemented zpool scrub pause/resume
    
    Authored by: Alek Pinchuk <apinchuk@datto.com>
    Reviewed by: George Melikov <mail@gmelikov.ru>
    Reviewed by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed by: Brad Lewis <brad.lewis@delphix.com>
    Reviewed by: Serapheim Dimitropoulos <serapheim@delphix.com>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Approved by: Dan McDonald <danmcd@joyent.com>
    Ported-by: Alek Pinchuk <apinchuk@datto.com>
    
    OpenZFS-issue: https://www.illumos.org/issues/8414
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/c29616076
    Closes #6538

[33mcommit 9b8407638da71ea9f4afb21375f991869f19811f[m
Author: Tom Caputi <tcaputi@datto.com>
Date:   Wed Aug 23 19:54:24 2017 -0400

    Send / Recv Fixes following b52563
    
    This patch fixes several issues discovered after
    the encryption patch was merged:
    
    * Fixed a bug where encrypted datasets could attempt
      to receive embedded data records.
    
    * Fixed a bug where dirty records created by the recv
      code wasn't properly setting the dr_raw flag.
    
    * Fixed a typo where a dmu_tx_commit() was changed to
      dmu_tx_abort()
    
    * Fixed a few error handling bugs unrelated to the
      encryption patch in dmu_recv_stream()
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tom Caputi <tcaputi@datto.com>
    Closes #6512
    Closes #6524
    Closes #6545

[33mcommit db4c1adaf82db7815baa675d7df3952f46b07ae9[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Tue Aug 22 20:53:40 2017 +0200

    Add support for DMU_OTN_* types in dbufstat.py
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #6535

[33mcommit 05f85a6a64e999748ffbdf7a76b406f0f0ceb8b3[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Mon Aug 21 13:11:11 2017 -0700

    Fix zfs_ioc_pool_sync should not use fnvlist
    
    Use fnvlist on user input would allow user to easily panic zfs.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Alek Pinchuk <apinchuk@datto.com>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #6529

[33mcommit 551905dd475c6b4c4fa87d7734f018084a755af8[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Fri Aug 4 12:23:10 2017 +0200

    vdev_mirror: kstat observables for preferred vdev
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Closes #6461

[33mcommit d6c6590c5dd727832a58e77f7830049631b0c266[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Fri Aug 4 11:29:56 2017 +0200

    vdev_mirror: load balancing fixes
    
    vdev_queue:
    - Track the last position of each vdev, including the io size,
      in order to detect linear access of the following zio.
    - Remove duplicate `vq_lastoffset`
    
    vdev_mirror:
    - Correctly calculate the zio offset (signedness issue)
    - Deprecate `vdev_queue_register_lastoffset()`
    - Add `VDEV_LABEL_START_SIZE` to zio offset of leaf vdevs
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Closes #6461

[33mcommit 133a5c6598ddc858f5b7ecedaf1364fcfe2e477f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Aug 21 10:00:12 2017 -0700

    zimport.sh: Allow custom pool create options
    
    Allow custom options to be passed to 'zpool create` when creating
    a new pool.
    
    Normally zimport.sh is intented to prevent accidentally introduced
    incompatibilities so we want the default behavior.  However, when
    introducing a known incompatibility with a feature flag we need a
    way to disable the feature.  By adding a line like the following
    to the commit message the feature can be disabled allowing the
    pool to be compatibile with older versions.
    
    TEST_ZIMPORT_CREATE_OPTIONS="-o feature@encryption=disabled"
    
    * Additionally fix /dev/nul -> /dev/null typo and minor white space
      formating issues.
    
    * Updated fail function to print a message and exit with 1 for use
      by the buildbot.
    
    * Silence warnings when zlib_inflate / zlib_default modules don't
      exist.  This can happen when they're build in to the kernel.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6520

[33mcommit 9000a9fac950d2e2c9578d760dd775ac1ceaa507[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Mon Aug 21 18:31:54 2017 +0200

    Disable mount(8) canonical paths in do_mount()
    
    By default the mount(8) command, as invoked by 'zfs mount', will try
    to resolve any path parameter in its canonical form: this could lead
    to mount failures when the cwd contains a symlink having the same name
    of the dataset being mounted.
    
    Fix this by explicitly disabling mount(8) path canonicalization.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #1791
    Closes #6429
    Closes #6437

[33mcommit f763c3d1df569a8d6b60bcb5e95cf07aa7a189e6[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Mon Aug 21 17:59:48 2017 +0200

    Fix range locking in ZIL commit codepath
    
    Since OpenZFS 7578 (1b7c1e5) if we have a ZVOL with logbias=throughput
    we will force WR_INDIRECT itxs in zvol_log_write() setting itx->itx_lr
    offset and length to the offset and length of the BIO from
    zvol_write()->zvol_log_write(): these offset and length are later used
    to take a range lock in zillog->zl_get_data function: zvol_get_data().
    
    Now suppose we have a ZVOL with blocksize=8K and push 4K writes to
    offset 0: we will only be range-locking 0-4096. This means the
    ASSERTion we make in dbuf_unoverride() is no longer valid because now
    dmu_sync() is called from zilog's get_data functions holding a partial
    lock on the dbuf.
    
    Fix this by taking a range lock on the whole block in zvol_get_data().
    
    Reviewed-by: Chunwei Chen <tuxoko@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #6238
    Closes #6315
    Closes #6356
    Closes #6477

[33mcommit 08de8c16f5d322fb594742ea78958385d8ee5b50[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Thu Aug 17 23:28:17 2017 +0200

    Fix remounting snapshots read-write
    
    It's not enough to preserve/restore MS_RDONLY on the superblock flags
    to avoid remounting a snapshot read-write: be explicit about our
    intentions to the VFS layer so the readonly bit is updated correctly
    in do_remount_sb().
    
    Reviewed-by: Chunwei Chen <tuxoko@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #6510
    Closes #6515

[33mcommit a1f3a1c05fa9cb06334189813d0e0d556d479620[m
Author: BtbN <btbn@btbn.de>
Date:   Thu Aug 17 00:51:51 2017 +0200

    Use /sbin/openrc-run for openrc init scripts
    
    Using /sbin/runscript is deprecated and throws a QA warning
    when still used in init scripts.
    
    Reviewed-by: bunder2015 <omfgbunder@gmail.com>
    Signed-off-by: BtbN <btbn@btbn.de>
    Closes #6519

[33mcommit c8f9061fc714696a53cf4d14a4567f0a83dbf862[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Aug 15 17:26:38 2017 -0700

    Retire legacy test infrastructure
    
    * Removed zpios kmod, utility, headers and man page.
    
    * Removed unused scripts zpios-profile/*, zpios-test/*,
      zpool-config/*, smb.sh, zpios-sanity.sh, zpios-survey.sh,
      zpios.sh, and zpool-create.sh.
    
    * Removed zfs-script-config.sh.in.  When building 'make' generates
      a common.sh with in-tree path information from the common.sh.in
      template.  This file and sourced by the test scripts and used
      for in-tree testing, it is not included in the packages.  When
      building packages 'make install' uses the same template to
      create a new common.sh which is appropriate for the packaging.
    
    * Removed unused functions/variables from scripts/common.sh.in.
      Only minimal path information and configuration environment
      variables remain.
    
    * Removed unused scripts from scripts/ directory.
    
    * Remaining shell scripts in the scripts directory updated to
      cleanly pass shellcheck and added to checked scripts.
    
    * Renamed tests/test-runner/cmd/ to tests/test-runner/bin/ to
      match install location name.
    
    * Removed last traces of the --enable-debug-dmu-tx configure
      options which was retired some time ago.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6509

[33mcommit 70322be8dc160f003fa95e034462ad625b325568[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Aug 15 16:40:04 2017 -0700

    Fix ZTS grow_pool/setup
    
    The addition of the large_dnode_008_pos test case, which runs
    right before this one, exposed some racy behavior in grow_pool
    setup.sh on the Ubuntu kmemleak builder.  Before creating
    partitions on a device destroying any existing ones.
    
      ERROR: set_partition 1  100mb loop0 exited 1
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6499
    Closes #6516

[33mcommit d49d9c2bdc31263536d3b714d7e393b66321886a[m
Author: sckobras <sckobras@users.noreply.github.com>
Date:   Tue Aug 15 00:18:26 2017 +0200

    vdev_id: implement slot numbering by port id
    
    With HPE hardware and hpsa-driven SAS adapters, only a single phy is
    reported, but no individual per-port phys (ie. no phy* entry below
    port_dir), which breaks topology detection in the current sas_handler
    code. Instead, slot information can be derived directly from the port
    number. This change implements a new slot keyword "port" similar to
    "id" and "lun", and assumes a default phy/port of 0 if no individual
    phy entry can be found. It allows to use the "sas_direct" topology with
    current HPE Dxxxx and Apollo 45xx JBODs.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Daniel Kobras <d.kobras@science-computing.de>
    Closes #6484

[33mcommit d977122da92e870a6a8990437ced845a04c39cfc[m
Author: Don Brady <dev.fs.zfs@gmail.com>
Date:   Mon Aug 14 18:17:15 2017 -0400

    Add corruption failure option to zinject(8)
    
    Added a 'corrupt' error option that will flip a bit in the data
    after a read operation.  This is useful for generating checksum
    errors at the device layer (in a mirror config for example). It
    is also used to validate the diagnosis of checksum errors from
    the zfs diagnosis engine.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Don Brady <don.brady@intel.com>
    Closes #6345

[33mcommit 42a76fc8d757ab82fc1ce8e5e1f2079e07a5b9d4[m
Author: Fabian-Gruenbichler <f.gruenbichler@proxmox.com>
Date:   Mon Aug 14 19:56:04 2017 +0200

    dracut: make module-setup.sh shebang explicit
    
    while these are source by dracut (which is a bash script)
    the practical difference is small, but it is more correct:
    
    /bin/sh is not bash on all systems (e.g. Debian and its
    derivatives use /bin/dash as /bin/sh by default).
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Fabian Grünbichler <f.gruenbichler@proxmox.com>
    Closes #6491

[33mcommit b52563034230b35f0562b6f40ad1a00f02bd9a05[m
Author: Tom Caputi <tcaputi@datto.com>
Date:   Mon Aug 14 13:36:48 2017 -0400

    Native Encryption for ZFS on Linux
    
    This change incorporates three major pieces:
    
    The first change is a keystore that manages wrapping
    and encryption keys for encrypted datasets. These
    commands mostly involve manipulating the new
    DSL Crypto Key ZAP Objects that live in the MOS. Each
    encrypted dataset has its own DSL Crypto Key that is
    protected with a user's key. This level of indirection
    allows users to change their keys without re-encrypting
    their entire datasets. The change implements the new
    subcommands "zfs load-key", "zfs unload-key" and
    "zfs change-key" which allow the user to manage their
    encryption keys and settings. In addition, several new
    flags and properties have been added to allow dataset
    creation and to make mounting and unmounting more
    convenient.
    
    The second piece of this patch provides the ability to
    encrypt, decyrpt, and authenticate protected datasets.
    Each object set maintains a Merkel tree of Message
    Authentication Codes that protect the lower layers,
    similarly to how checksums are maintained. This part
    impacts the zio layer, which handles the actual
    encryption and generation of MACs, as well as the ARC
    and DMU, which need to be able to handle encrypted
    buffers and protected data.
    
    The last addition is the ability to do raw, encrypted
    sends and receives. The idea here is to send raw
    encrypted and compressed data and receive it exactly
    as is on a backup system. This means that the dataset
    on the receiving system is protected using the same
    user key that is in use on the sending side. By doing
    so, datasets can be efficiently backed up to an
    untrusted system without fear of data being
    compromised.
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Jorgen Lundman <lundman@lundman.net>
    Signed-off-by: Tom Caputi <tcaputi@datto.com>
    Closes #494
    Closes #5769

[33mcommit 376994828fd3753aba75d492859727ca76f6a293[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Fri Aug 11 08:57:54 2017 -0700

    Fix NULL pointer when O_SYNC read in snapshot
    
    When doing read on a file open with O_SYNC, it will trigger zil_commit.
    However for snapshot, there's no zil, so we shouldn't be doing that.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #6478
    Closes #6494

[33mcommit 761b8ec6bf98f39550353173ad7bec5306073f9c[m
Author: gaurkuma <gaurkuma@users.noreply.github.com>
Date:   Fri Aug 11 08:56:24 2017 -0700

    Allow longer SPA names in stats
    
    The pool name can be 256 chars long. Today, in /proc/spl/kstat/zfs/
    the name is limited to < 32 characters. This change is to allows
    bigger pool names.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: loli10K <ezomori.nozomu@gmail.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: gaurkuma <gauravk.18@gmail.com>
    Closes #6481

[33mcommit c25b8f99f8dcbe898b81728e6a9dab107df4fc0b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Aug 11 08:51:44 2017 -0700

    Simplify threads, mutexs, cvs and rwlocks
    
    * Simplify threads, mutexs, cvs and rwlocks
    
    * Update the zk_thread_create() function to use the same trick
      as Illumos.  Specifically, cast the new pthread_t to a void
      pointer and return that as the kthread_t *.  This avoids the
      issues associated with managing a wrapper structure and is
      safe as long as the callers never attempt to dereference it.
    
    * Update all function prototypes passed to pthread_create() to
      match the expected prototype.  We were getting away this with
      before since the function were explicitly cast.
    
    * Replaced direct zk_thread_create() calls with thread_create()
      for code consistency.  All consumers of libzpool now use the
      proper wrappers.
    
    * The mutex_held() calls were converted to MUTEX_HELD().
    
    * Removed all mutex_owner() calls and retired the interface.
      Instead use MUTEX_HELD() which provides the same information
      and allows the implementation details to be hidden.  In this
      case the use of the pthread_equals() function.
    
    * The kthread_t, kmutex_t, krwlock_t, and krwlock_t types had
      any non essential fields removed.  In the case of kthread_t
      and kcondvar_t they could be directly typedef'd to pthread_t
      and pthread_cond_t respectively.
    
    * Removed all extra ASSERTS from the thread, mutex, rwlock, and
      cv wrapper functions.  In practice, pthreads already provides
      the vast majority of checks as long as we check the return
      code.  Removing this code from our wrappers help readability.
    
    * Added TS_JOINABLE state flag to pass to request a joinable rather
      than detached thread.  This isn't a standard thread_create() state
      but it's the least invasive way to pass this information and is
      only used by ztest.
    
    TEST_ZTEST_TIMEOUT=3600
    
    Chunwei Chen <tuxoko@gmail.com>
    Reviewed-by: Tom Caputi <tcaputi@datto.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4547
    Closes #5503
    Closes #5523
    Closes #6377
    Closes #6495

[33mcommit 21df134f4cb1c1e05eb89992b71573843df62b27[m
Author: sanjeevbagewadi <sanjeev.bagewadi@gmail.com>
Date:   Fri Aug 11 04:23:40 2017 +0530

    zio_dva_throttle_done() should allow zinjected ZIO
    
    If fault injection is enabled, the ZIO_FLAG_IO_RETRY could be set by
    zio_handle_device_injection() to generate the FMA events and update
    stats. Hence, ignore the flag and process such zios.
    
    A better fix would be to add another flag in the zio_t to indicate that
    the zio is failed because of a zinject rule. However, considering the
    fact that we do this in debug bits, we could do with the crude check
    using the global flag zio_injection_enabled which is set to 1 when
    zinject records are added.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Sanjeev Bagewadi <sanjeev.bagewadi@gmail.com>
    Closes #6383
    Closes #6384

[33mcommit b58237e769a4fa57ab8846b61ce59e5c73035b26[m
Author: Fabian-Gruenbichler <f.gruenbichler@proxmox.com>
Date:   Fri Aug 11 00:45:25 2017 +0200

    Man page fixes
    
    * ztest.1 man page: fix typo
    * zfs-module-parameters.5 man page: fix grammar
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Fabian Grünbichler <f.gruenbichler@proxmox.com>
    Closes #6492

[33mcommit 4334df53539c280f847350cb5b11180993229ef9[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Thu Aug 10 07:53:10 2017 -0700

    Disable rsend_024_pos
    
    The test case frequently hangs on buildbot
    TEST builders. Disable it for now.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #6487

[33mcommit 46364cb2f35545a7fc915df9593b719a94c43a83[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Aug 9 15:31:08 2017 -0700

    Add libtpool (thread pools)
    
    OpenZFS provides a library called tpool which implements thread
    pools for user space applications.  Porting this library means
    the zpool utility no longer needs to borrow the kernel mutex and
    taskq interfaces from libzpool.  This code was updated to use
    the tpool library which behaves in a very similar fashion.
    
    Porting libtpool was relatively straight forward and minimal
    modifications were needed.  The core changes were:
    
    * Fully convert the library to use pthreads.
    * Updated signal handling.
    * lmalloc/lfree converted to calloc/free
    * Implemented portable pthread_attr_clone() function.
    
    Finally, update the build system such that libzpool.so is no
    longer linked in to zfs(8), zpool(8), etc.  All that is required
    is libzfs to which the zcommon soures were added (which is the way
    it always should have been).  Removing the libzpool dependency
    resulted in several build issues which needed to be resolved.
    
    * Moved zfeature support to module/zcommon/zfeature_common.c
    * Moved ratelimiting to to module/zfs/zfs_ratelimit.c
    * Moved get_system_hostid() to lib/libspl/gethostid.c
    * Removed use of cmn_err() in zcommon source
    * Removed dprintf_setup() call from zpool_main.c and zfs_main.c
    * Removed highbit() and lowbit()
    * Removed unnecessary library dependencies from Makefiles
    * Removed fletcher-4 kstat in user space
    * Added sha2 support explicitly to libzfs
    * Added highbit64() and lowbit64() to zpool_util.c
    
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6442

[33mcommit 5146d802b4e371cab1d6db79bea482c056be7bf2[m
Author: Boris Protopopov <bprotopopov@users.noreply.github.com>
Date:   Wed Aug 9 14:10:47 2017 -0400

    zv_suspend_lock in zvol_open()/zvol_release()
    
    Acquire zv_suspend_lock on first open and last close only.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Boris Protopopov <boris.protopopov@actifio.com>
    Closes #6342

[33mcommit 520faf5ddcb1a9536f53438963d1c96678040466[m
Author: gaurkuma <gaurkuma@users.noreply.github.com>
Date:   Wed Aug 9 11:04:41 2017 -0700

    Crash in dbuf_evict_one with DTRACE_PROBE
    
    Update the dbuf__evict__one() tracepoint so that it can safely
    handle a NULL dmu_buf_impl_t pointer.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: loli10K <ezomori.nozomu@gmail.com>
    Signed-off-by: gaurkuma <gauravk.18@gmail.com>
    Closes #6463

[33mcommit 6a8ee4f71dd957096922a50e318fd5350d2e9061[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Tue Aug 8 08:41:31 2017 -0700

    Add debug log entries for failed receive records
    
    Log contents of a receive record if an error occurs while writing
    it out to the pool. This may help determine the cause when backup
    streams are rejected as invalid.
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Closes #6465

[33mcommit 9631681b75336ec6265d8fa5cecb353687c1f373[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Aug 8 08:38:53 2017 -0700

    Fix dnode allocation race
    
    When performing concurrent object allocations using the new
    multi-threaded allocator and large dnodes it's possible to
    allocate overlapping large dnodes.
    
    This case should have been handled by detecting an error
    returned by dnode_hold_impl().  But that logic only checked
    the returned dnp was not-NULL, and the dnp variable was not
    reset to NULL when retrying.  Resolve this issue by properly
    checking the return value of dnode_hold_impl().
    
    Additionally, it was possible that dnode_hold_impl() would
    misreport a dnode as free when it was in fact in use.  This
    could occurs for two reasons:
    
    * The per-slot zrl_lock must be held over the entire critical
      section which includes the alloc/free until the new dnode
      is assigned to children_dnodes.  Additionally, all of the
      zrl_lock's in the range must be held to protect moving
      dnodes.
    
    * The dn->dn_ot_type cannot be solely relied upon to check
      the type.  When allocating a new dnode its type will be
      DMU_OT_NONE after dnode_create().  Only latter when
      dnode_allocate() is called will it transition to the new
      type.  This means there's a window when allocating where
      it can mistaken for a free dnode.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Ned Bass <bass6@llnl.gov>
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Reviewed-by: Olaf Faaland <faaland1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6414
    Closes #6439

[33mcommit d19a6d5c80fb24451a7d76716eaf38d3a3f933c7[m
Author: Karsten Kretschmer <kkretschmer@gmail.com>
Date:   Fri Aug 4 20:14:48 2017 +0200

    dracut: Install commands required for vdev_id
    
    The vdev_id script requires awk, grep, and head.  Use dracut_install to
    ensure that these commands are available in the initrd environment.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Karsten Kretschmer <kkretschmer@gmail.com>
    Closes #6443
    Closes #6452

[33mcommit 1e1c398033384106c8ee96435ba0683797b41a46[m
Author: Sen Haerens <sen@senhaerens.be>
Date:   Thu Aug 3 18:56:15 2017 +0200

    Fix zpool events scripted mode tab separator
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Sen Haerens <sen@senhaerens.be>
    Closes #6444
    Closes #6445

[33mcommit b0bd8ffecd70b46e584e2e52ea74f2373b544217[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Thu Aug 3 18:43:17 2017 +0200

    Fix parsable 'zfs get' for compressratios
    
    This is consistent with the change introduced in bc2d809 where
    'zpool get -p dedupratio' does not add a trailing "x" to the output.
    
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #6436
    Closes #6449

[33mcommit e3bdcb8ad88e7a90726193c9afe96a713729c928[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Thu Aug 3 08:57:43 2017 -0700

    Retry zfs destroy when busy in rsend tests
    
    rsend tests in the test suite frequently create and
    destroy datasets. It is possible for zfs destroy to
    return an error code indicating the dataset is busy.
    Simply use a log_must_busy in these cases to retry
    destroying those datasets. Other fixes to rsend test
    cases to avoid unmounting and remounting filesystems
    and some cleanup.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #6418

[33mcommit ecb2b7dc7f8f7273c215fb30c984bde08e75b852[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Wed Aug 2 21:16:12 2017 -0700

    Use SET_ERROR for constant non-zero return codes
    
    Update many return and assignment statements to follow the convention
    of using the SET_ERROR macro when returning a hard-coded non-zero
    value from a function. This aids debugging by recording the error
    codes in the debug log.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Closes #6441

[33mcommit 6710381680b0f551c37627e3a5a4886ccf99983f[m
Author: Tony Hutter <hutter2@llnl.gov>
Date:   Wed Aug 2 09:08:38 2017 -0700

    Only record zio->io_delay on reads and writes
    
    While investigating https://github.com/zfsonlinux/zfs/issues/6425 I
    noticed that ioctl ZIOs were not setting zio->io_delay correctly.  They
    would set the start time in zio_vdev_io_start(), but never set the end
    time in zio_vdev_io_done(), since ioctls skip it and go straight to
    zio_done().  This was causing spurious "delayed IO" events to appear,
    which would eventually get rate-limited and displayed as
    "Missed events" messages in zed.
    
    To get around the problem, this patch only sets zio->io_delay for read
    and write ZIOs, since that's all we care about anyway.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Closes #6425
    Closes #6440

[33mcommit af0f842883ceb7e88b8f4d1fe6ad80b6ad951827[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Mon Jul 31 16:54:34 2017 -0700

    mmp_on_uberblocks: Use kstat for uberblock counts
    
    Use kstat to get a more accurate count of uberblock updates.
    Using a loop with zdb can potentially miss some uberblocks.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #6407
    Closes #6419

[33mcommit c7a7601c08d3f7db42dfca46e0ad8aa287df43da[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Mon Jul 31 20:07:05 2017 +0200

    Fix volmode=none property behavior at import time
    
    At import time spa_import() calls zvol_create_minors() directly: with
    the current implementation we have no way to avoid device node
    creation when volmode=none.
    
    Fix this by enforcing volmode=none directly in zvol_alloc().
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #6426

[33mcommit 1e0565d10a5f75bd15104df3db3264554e8b2dd1[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sat Jul 29 13:25:53 2017 -0700

     Fix aarch64 build
    
    Add aarch64 to the list of architecture which do not sanitize the
    LDFLAGS from the environment.  See fb963d33 for details.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6424

[33mcommit c1dd2f783a30d001f79648dab5ae5bbfe5614759[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Fri Jul 28 22:37:27 2017 -0700

    Disable zfs_send_007_pos
    
    Test case zfs_send_007_pos regularly is killed
    by test-runner during zfs-tests on buildbot. Disable
    it for now until further investigation can be done.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #6422

[33mcommit 650258d7c786b8e62ca847a926f6f038cd3e5d94[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Fri Jul 28 23:12:34 2017 +0200

    zfs promote|rename .../%recv should be an error
    
    If we are in the middle of an incremental 'zfs receive', the child
    .../%recv will exist. If we run 'zfs promote' .../%recv, it will "work",
    but then zfs gets confused about the status of the new dataset.
    Attempting to do this promote should be an error.
    
    Similarly renaming .../%recv datasets should not be allowed.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #4843
    Closes #6339

[33mcommit f06f53fa3f566056fd3a03737032f1bd6bcf48bc[m
Author: Andriy Gapon <avg@FreeBSD.org>
Date:   Tue Feb 28 23:32:55 2017 +0200

    OpenZFS 7915 - checks in l2arc_evict could use some cleaning up
    
    Authored by: Andriy Gapon <avg@FreeBSD.org>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Approved by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/7915
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/836a00c
    Closes #6375

[33mcommit e98b6117252acb4931bbcc0ff6b164269273de4e[m
Author: Andriy Gapon <avg@FreeBSD.org>
Date:   Mon Jul 17 15:31:30 2017 +0300

    OpenZFS 8373 - TXG_WAIT in ZIL commit path
    
    Authored by: Andriy Gapon <avg@FreeBSD.org>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Dan McDonald <danmcd@joyent.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/8373
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/7f04961
    Closes #6403

[33mcommit 0f69f42b43637548bec225ed25fa71b032de114e[m
Author: bunder2015 <omfgbunder@gmail.com>
Date:   Thu Jul 27 22:06:34 2017 -0400

    Correct man page generation
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: bunder2015 <omfgbunder@gmail.com>
    Closes #6409
    Closes #6410

[33mcommit ccad64314ab55963c1a0731ff62c8cf6c6976f28[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jul 26 10:10:28 2017 -0700

    Tag zfs-0.7.0
    
    META file and changelog updated.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit bff245dd342f7318bfa88e471e584c2c46f8c4db[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Wed Jul 26 09:44:21 2017 -0700

    OpenZFS 8508 - Mounting a zpool on 32-bit platforms panics
    
    Authored by: Justin Hibbits <chmeeedalf@gmail.com>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Approved by: Dan McDonald <danmcd@joyent.com>
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/8508
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/15fc257
    Closes #6404

[33mcommit 8740cf4a2f5f7ff7fb6c214e0baf06356b2870b8[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Tue Jul 25 23:09:48 2017 -0700

    Add line info and SET_ERROR() to ZFS debug log
    
    Redefine the SET_ERROR macro in terms of __dprintf() so the error
    return codes get logged as both tracepoint events (if tracepoints are
    enabled) and as ZFS debug log entries.  This also allows us to use
    the same definition of SET_ERROR() in kernel and user space.
    
    Define a new debug flag ZFS_DEBUG_SET_ERROR=512 that may be bitwise
    or'd into zfs_flags. Setting this flag enables both dprintf() and
    SET_ERROR() messages in the debug log. That is, setting
    ZFS_DEBUG_SET_ERROR and ZFS_DEBUG_DPRINTF|ZFS_DEBUG_SET_ERROR are
    equivalent (this was done for sake of simplicity). Leaving
    ZFS_DEBUG_SET_ERROR unset suppresses the SET_ERROR() messages which
    helps avoid cluttering up the logs.
    
    To enable SET_ERROR() logging, run:
    
      echo 1 >   /sys/module/zfs/parameters/zfs_dbgmsg_enable
      echo 512 > /sys/module/zfs/parameters/zfs_flags
    
    Remove the zfs_set_error_class tracepoints event class since
    SET_ERROR() now uses __dprintf(). This sacrifices a bit of
    granularity when selecting individual tracepoint events to enable but
    it makes the code simpler.
    
    Include file, function, and line number information in debug log
    entries.  The information is now added to the message buffer in
    __dprintf() and as a result the zfs_dprintf_class tracepoints event
    class was changed from a 4 parameter interface to a single parameter.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Closes #6400

[33mcommit 9ff13dbe921c7177faee3f10c832e88bded39920[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jul 25 18:57:00 2017 -0700

    Fix zpool-features.5 indentation
    
    The userobj_accounting feature described in the zpool-features.5
    man page was incorrectly indented.  Fix it.
    
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6402

[33mcommit 73aac4aa410121ddcc08bd7fd15d987caf101584[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Tue Jul 25 18:52:40 2017 -0700

    Some additional send stream validity checking
    
    Check in the DMU whether an object record in a send stream being
    received contains an unsupported dnode slot count, and return an
    error if it does. Failure to catch an unsupported dnode slot count
    would result in a panic when the SPA attempts to increment the
    reference count for the large_dnode feature and the pool has the
    feature disabled. This is not normally an issue for a well-formed
    send stream which would have the DMU_BACKUP_FEATURE_LARGE_DNODE flag
    set if it contains large dnodes, so it will be rejected as
    unsupported if the required feature is disabled. This change adds a
    missing object record field validation.
    
    Add missing stream feature flag checks in
    dmu_recv_resume_begin_check().
    
    Consolidate repetitive comment blocks in dmu_recv_begin_check().
    
    Update zstreamdump to print the dnode slot count (dn_slots) for an
    object record when running in verbose mode.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Closes #6396

[33mcommit 3f759c0c736d3a636614406ac0d6f9335819d6e9[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jul 25 12:20:52 2017 -0700

    Fix 'zpool clear' on suspended pools
    
    'zpool clear' should be able to resume I/O on suspended, but otherwise
    healthy, pools.
    
    4a283c7 accidentally introduced a new code path where we call
    txg_wait_synced() on the suspended pool before we had the chance to
    resume I/O via zio_resume(): this results in the 'zpool clear'
    command hanging indefinitely, waiting for a TXG that cannot be synced.
    
    Fix this by avoiding the call to txg_wait_synced().
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: loli10K <ezomori.nozomu@gmail.com>
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6399

[33mcommit f269060a24d1f43a30d647e0835ca4fcaac6bae9[m
Author: Justin Bedő <cu@cua0.org>
Date:   Wed Jul 26 03:30:20 2017 +1000

    Fix autoconf detection of super_setup_bdi_name
    
    The previous autoconf test for the presence of super_setup_bdi_name()
    uses an invocation with an incorrect type signature, producing a
    warning by the compiler when the test is run. This gets elevated to an
    error when compiling with -Werror=format-security, causing autoconf to
    falsely infer super_setup_bdi_name() is not present. This updates the
    testing code to match the invocation used in
    include/linux/vfs_compat.h.
    
    Reviewed-by: loli10K <ezomori.nozomu@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Justin Bedo <cu@cua0.org>
    Closes #6398

[33mcommit e889f0f520971fc2688189cdbe0efde2ccc8ec65[m
Author: Olaf Faaland <faaland1@llnl.gov>
Date:   Fri Jul 14 18:15:00 2017 -0700

    Report MMP_STATE_NO_HOSTID immediately
    
    There is no need to perform the activity check before detecting that the
    user must set the system hostid, because the pool's multihost property
    is on, but spa_get_hostid() returned 0.  The initial call to
    vdev_uberblock_load() provided the information required.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>
    Closes #6388

[33mcommit 0582e403221008480657a88e8f50aecc88397c80[m
Author: Olaf Faaland <faaland1@llnl.gov>
Date:   Thu Jul 20 17:54:26 2017 -0700

    Add callback for zfs_multihost_interval
    
    Add a callback to wake all running mmp threads when
    zfs_multihost_interval is changed.
    
    This is necessary when the interval is changed from a very large value
    to a significantly lower one, while pools are imported that have the
    multihost property enabled.
    
    Without this commit, the mmp thread does not wake up and detect the new
    interval until after it has waited the old multihost interval time.  A
    user monitoring mmp writes via the provided kstat would be led to
    believe that the changed setting did not work.
    
    Added a test in the ZTS under mmp to verify the new functionality is
    working.
    
    Added a test to ztest which starts and stops mmp threads, and calls into
    the code to signal sleeping mmp threads, to test for deadlocks or
    similar locking issues.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>
    Closes #6387

[33mcommit 60f510344596b1f2f890df2e96282d586edf6aaf[m
Author: Olaf Faaland <faaland1@llnl.gov>
Date:   Fri Jul 14 16:32:55 2017 -0700

    Skip activity check for zhack RO import
    
    "zhack feature stat" performs a read-only import, so the MMP activity
    check is not necessary.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>
    Closes #6388
    Closes #6389

[33mcommit b9373170e3e346733f5666dd80727cb6e05cd5d3[m
Author: Olaf Faaland <faaland1@llnl.gov>
Date:   Tue Jul 18 18:11:08 2017 -0700

    Add zgenhostid utility script
    
    Turning the multihost property on requires that a hostid be set to allow
    ZFS to determine when a foreign system is attemping to import a pool.
    The error message instructing the user to set a hostid refers to
    genhostid(1).
    
    Genhostid(1) is not available on SUSE Linux.  This commit adds a script
    modeled after genhostid(1) for those users.
    
    Zgenhostid checks for an /etc/hostid file; if it does not exist, it
    creates one and stores a value.  If the user has provided a hostid as an
    argument, that value is used.  Otherwise, a random hostid is generated
    and stored.
    
    This differs from the CENTOS 6/7 versions of genhostid, which overwrite
    the /etc/hostid file even though their manpages state otherwise.
    
    A man page for zgenhostid is added. The one for genhostid is in (1), but
    I put zgenhostid in (8) because I believe it's more appropriate.
    
    The mmp tests are modified to use zgenhostid to set the hostid instead
    of using the spl_hostid module parameter.  zgenhostid will not replace
    an existing /etc/hostid file, so new mmp_clear_hostid calls are
    required.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Andreas Dilger <andreas.dilger@intel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>
    Closes #6358
    Closes #6379

[33mcommit ffb195c256f8a74a87c3834258ec90c513d66adb[m
Author: Olaf Faaland <faaland1@llnl.gov>
Date:   Mon Jul 24 08:48:28 2017 -0700

    Release SCL_STATE in map_write_done()
    
    The config lock must be held for the duration of the MMP write.
    Since the I/Os are executed via map_nowait(), the done function
    is the only place where we know the write has completed.
    
    Since SCL_STATE is taken as reader, overlapping I/Os do not
    create a deadlock.  The refcount is simply increased when new
    I/Os are queued and decreased when I/Os complete.
    
    Test case added which exercises the probe IO call path to
    verify the fix and prevent a regression.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>
    Closes #6394

[33mcommit f43615d0cc22d7db496c1291c84e64e269ca51d9[m
Author: Olaf Faaland <faaland1@llnl.gov>
Date:   Tue Jul 18 11:43:55 2017 -0700

    Revert Fix vdev_probe() call wrt SCL_STATE_ALL
    
    This reverts commit cc9c6bc, which has been causing intermittent
    test failures on buildbot.  A correct fix for this locking issue
    has been applied in a separate patch.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>

[33mcommit f6837d9b53d44547d640040d5db9e7d152664d4f[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Mon Jul 24 13:02:42 2017 -0700

    Increase delay for zed log in events tests
    
    In zed event test cases, a brief delay was introduced
    to allow for events to make it to the zed log. On at least
    one buildbot builder, the 1 second delay is not long enough.
    Therefore, increasing the delay should ensure the zed has
    more than enough time to write to its log.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #6395

[33mcommit 871e07321cc66fcea4dccc88fd2a754959ffa679[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Mon Jul 24 21:56:49 2017 +0200

    Fix buffer overflow in dsl_dataset_name()
    
    If we're creating a pool with version >= SPA_VERSION_DSL_SCRUB (v11)
    we need to account for additional space needed by the origin dataset
    which will also be snapshotted: "poolname"+"/"+"$ORIGIN"+"@"+"$ORIGIN".
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #6374

[33mcommit 83a5e4d6b9c2509efa25ea4cfceba3cd313bf920[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Mon Jul 24 12:49:27 2017 -0700

    Fix don't zero_label when replace with spare
    
    When replacing a disk with non-wholedisk spare, we shouldn't zero_label
    it. The wholedisk case already skip it. In fact, zero_label function
    will fail saying device busy because it's already opened exclusively,
    but since there's no error checking, the replace command will succeed,
    causing great confusion.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #6369

[33mcommit d6bcf7ff5e97df3195d34269b1b72952b4a00778[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Mon Jul 24 11:53:59 2017 -0700

    Restrict zpool iostat/status -c to search path
    
    zpool iostat/status -c is supposed to be restricted
    by its search path, but currently isn't. To prevent
    arbitrary scripts from being executed, disallow '/'
    from commands.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #6353
    Closes #6359

[33mcommit b6e5c40382a52206f48cb26cc20ed85294e1b0a9[m
Author: Olaf Faaland <faaland1@llnl.gov>
Date:   Mon Jul 24 11:22:10 2017 -0700

    Use correct macro for hz in mmp.c
    
    Commit 379ca9c Multi-modifier protection (MMP) used HZ to convert
    nanoseconds to ticks for use with cv_timedwait() and ddi_get_lbolt().
    The correct macro is hz, which is defined within the SPL for kernel
    space, and within zfs_context.h for user space.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>
    Closes #6357
    Closes #6360

[33mcommit 802ae562ed817af978e2636806db1952d29ee86d[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Mon Jul 24 11:16:58 2017 -0700

    Fix coverity defects: CID 165755
    
    CID 165755: Division or modulo by zero (DIVIDE_BY_ZERO)
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Reviewed-by: Olaf Faaland <faaland1@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #6352

[33mcommit 39554216dff2c8bd4a2fa296644b5e3723ce8ed3[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Mon Jul 24 11:10:25 2017 -0700

    zfs_mount_001_neg: use log_must_busy in cleanup
    
    Use log_must_busy when destroying the snapshot
    and dataset during cleanup in zfs_mount_001_neg.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #6382

[33mcommit 0c656a964da7993847943c438c5abee7f46aa06d[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Mon Jul 24 11:03:50 2017 -0700

    Disable nbmand tests on kernels w/o support
    
    This change allows mountpoint_003_pos and send-c_props
    to run on Linux kernels that do not support mandatory
    locking. Linux kernel versions greater than or equal to
    4.4 no longer support mandatory locking and the test
    suite will now account for that.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #6346
    Closes #6347
    Closes #6362

[33mcommit c89a02a26ae8f314c621ffd5542a3502a196b7d0[m
Author: Tony Hutter <hutter2@llnl.gov>
Date:   Mon Jul 24 10:58:14 2017 -0700

    Add new fsck return code to zvol_misc_002_pos
    
    zvol_misc_002_pos was failing on Fedora 26 because its newer version
    of fsck was returning a different code than previous versions.  The
    new fsck error code is valid and is been added to the test in this
    patch.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Olaf Faaland <faaland1@llnl.gov>
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Closes #6350

[33mcommit 829f9251cf03f1b385a46960539380dd70555270[m
Author: Serapheim Dimitropoulos <serapheim@delphix.com>
Date:   Thu Jul 13 07:32:53 2017 -0700

    OpenZFS 8491 - uberblock on-disk padding to reserve space for smoothly merging zpool checkpoint & MMP in ZFS
    
    The zpool checkpoint feature in DxOS added a new field in the uberblock.
    The Multi-Modifier Protection Pull Request from ZoL adds three new fields
    in the uberblock (Reference: https://github.com/zfsonlinux/zfs/pull/6279).
    As these two changes come from two different sources and once upstreamed
    and deployed will introduce an incompatibility with each other we want
    to upstream a change that will reserve the padding for both of them so
    integration goes smoothly and everyone gets both features.
    
    Porting Notes: Preserved MMP comments in uberblock struct.
    
    Authored by: Serapheim Dimitropoulos <serapheim@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed by: Olaf Faaland <faaland1@llnl.gov>
    Approved by: Gordon Ross <gwr@nexenta.com>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/8491
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/d84fa5f
    Closes #6390

[33mcommit 36ba27e9e07b35340ba388e6624e65995595ed92[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sun Jul 23 19:37:12 2017 -0700

    Linux 4.13 compat: bio->bi_status and blk_status_t
    
    Commit torvalds/linux@4e4cbee9.  The bio->bi_error field was
    replaced with bio->bi_status which is an enum that describes
    all possible error types.
    
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6351

[33mcommit 7a8ed6b8b7bb5dde7b5713c75f99aee9bfbc12f2[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Thu Jul 20 17:04:35 2017 -0700

    Minor fixes in zpool iostat -c documentation (#6370)
    
    - Use nested [] notation to denote optional script list elements
    - Fix space before comma after smarctl(8)
    - Fix typo and formatting error in reference to -v option
    - Fix spelling errors
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Closes #6370

[33mcommit 4265a9293e49008bf0393fe678c8e8d53429aa1f[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Fri Jul 14 19:34:35 2017 +0300

    Fix coverity defects: CID 165757
    
    CID 165757: Control flow issues (MISSING_BREAK)
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: George Melikov <mail@gmelikov.ru>
    Closes #6348

[33mcommit ff1cb6bf26cd7d16c6f846ea9199e734025c6d6d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jul 13 12:08:53 2017 -0700

    Tag 0.7.0-rc5
    
    Fifth release candidate.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    `

[33mcommit cc9c6bcb7341cf37ccd4dfc939ec2abd4872e4bb[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jul 11 20:35:34 2017 -0400

    Fix vdev_probe() call outside SCL_STATE_ALL lock
    
    When an IO fails then zio_vdev_io_done() can call vdev_probe()
    to determine the health of the vdev.  This is safe as long as
    the original zio was submitted with zio_wait() and holds the
    SCL_STATE_ALL lock over the operation.
    
    If zio_no_wait() was used then the done callback will submit
    the probe IO outside the SCL_STATE_ALL lock and hit this
    ASSERT in zio_create()
    
      ASSERT(!vd || spa_config_held(spa, SCL_STATE_ALL, RW_READER));
    
    Resolve the issue by only allowing vdev_probe() to be called
    when there's a waiter indicating the caller is using zio_wait().
    This assumes that caller is still holding SCL_STATE_ALL.
    
    This issue isn't MMP specific but was surfaced when testing.
    Without this patch it can be reproduced by running:
    
      zpool set multihost on <pool>
      zinject -d <vdev> -e io -T write -f 50 <pool> -L uber
    
    Reviewed-by: Olaf Faaland <faaland1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Don Brady <don.brady@intel.com>
    Closes #745
    Closes #6279

[33mcommit 379ca9cf2beba802f096273e89e30914a2d6bafc[m
Author: Olaf Faaland <faaland1@llnl.gov>
Date:   Fri Jul 7 20:20:35 2017 -0700

    Multi-modifier protection (MMP)
    
    Add multihost=on|off pool property to control MMP.  When enabled
    a new thread writes uberblocks to the last slot in each label, at a
    set frequency, to indicate to other hosts the pool is actively imported.
    These uberblocks are the last synced uberblock with an updated
    timestamp.  Property defaults to off.
    
    During tryimport, find the "best" uberblock (newest txg and timestamp)
    repeatedly, checking for change in the found uberblock.  Include the
    results of the activity test in the config returned by tryimport.
    These results are reported to user in "zpool import".
    
    Allow the user to control the period between MMP writes, and the
    duration of the activity test on import, via a new module parameter
    zfs_multihost_interval.  The period is specified in milliseconds.  The
    activity test duration is calculated from this value, and from the
    mmp_delay in the "best" uberblock found initially.
    
    Add a kstat interface to export statistics about Multiple Modifier
    Protection (MMP) updates. Include the last synced txg number, the
    timestamp, the delay since the last MMP update, the VDEV GUID, the VDEV
    label that received the last MMP update, and the VDEV path.  Abbreviated
    output below.
    
    $ cat /proc/spl/kstat/zfs/mypool/multihost
    31 0 0x01 10 880 105092382393521 105144180101111
    txg   timestamp  mmp_delay   vdev_guid   vdev_label vdev_path
    20468    261337  250274925   68396651780       3    /dev/sda
    20468    261339  252023374   6267402363293     1    /dev/sdc
    20468    261340  252000858   6698080955233     1    /dev/sdx
    20468    261341  251980635   783892869810      2    /dev/sdy
    20468    261342  253385953   8923255792467     3    /dev/sdd
    20468    261344  253336622   042125143176      0    /dev/sdab
    20468    261345  253310522   1200778101278     2    /dev/sde
    20468    261346  253286429   0950576198362     2    /dev/sdt
    20468    261347  253261545   96209817917       3    /dev/sds
    20468    261349  253238188   8555725937673     3    /dev/sdb
    
    Add a new tunable zfs_multihost_history to specify the number of MMP
    updates to store history for. By default it is set to zero meaning that
    no MMP statistics are stored.
    
    When using ztest to generate activity, for automated tests of the MMP
    function, some test functions interfere with the test.  For example, the
    pool is exported to run zdb and then imported again.  Add a new ztest
    function, "-M", to alter ztest behavior to prevent this.
    
    Add new tests to verify the new functionality.  Tests provided by
    Giuseppe Di Natale.
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Ned Bass <bass6@llnl.gov>
    Reviewed-by: Andreas Dilger <andreas.dilger@intel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>
    Closes #745
    Closes #6279

[33mcommit 34ae0ae1749f297c23c3c1680ea552df94ae2122[m
Author: Olaf Faaland <faaland1@llnl.gov>
Date:   Thu May 25 13:32:06 2017 -0700

    Make hostid consistent in user and kernel space
    
    If no spl_hostid was set, and no /etc/hostid file existed, the user
    and kernel would have different values for the hostid.
    
    The kernel's would be 0.  User space's would depend on the libc
    implementation.  On systems with glibc, it would be a generated value,
    probably the first 4 bytes of an IP address (see man 3 gethostid and
    comments above hostid_read in SPL for details).
    
    This then causes the hostid stored in the labels and in the pool
    config not to match the hostid userspace obtains from
    get_system_hostid().
    
    Since the kernel has no way to know the libc's generated hostid value,
    it serves no purpose for ZFS to use the value.
    
    This patch changes user space's get_system_hostid() to conform to the
    kernel's method, first checking for the spl_hostid via sysfs, and then
    reading from /etc/hostid directly.
    
    It does not look up spl_hostid_path, because if that is set and the
    file it pointed to exists, spl_hostid will reflect its contents.
    
    It eliminates the call to libc's gethostid().
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Ned Bass <bass6@llnl.gov>
    Reviewed-by: Andreas Dilger <andreas.dilger@intel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>
    Closes #745
    Closes #6279

[33mcommit 12fa0466df8773fc6151e8b55367a1c4f76ec407[m
Author: Dave Eddy <dave@daveeddy.com>
Date:   Tue May 30 11:39:17 2017 -0700

    OpenZFS 6939 - add sysevents to zfs core for commands
    
    Authored by: Dave Eddy <dave@daveeddy.com>
    Reviewed by: Patrick Mooney <patrick.mooney@joyent.com>
    Reviewed by: Joshua M. Clulow <jmc@joyent.com>
    Reviewed by: Josh Wilsdon <jwilsdon@joyent.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Richard Elling <Richard.Elling@RichardElling.com>
    Reviewed by: Alan Somers <asomers@gmail.com>
    Reviewed by: Andrew Stormont <andyjstormont@gmail.com>
    Approved by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/6939
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/ce1577b
    Closes #6328

[33mcommit 314be68aa93a543f89d7c0137f25848e4c692653[m
Author: Tom Caputi <tcaputi@datto.com>
Date:   Wed Jul 12 20:15:24 2017 -0400

    Fixed VERIFY3_IMPL() bug from 682ce104
    
    When VERIFY3_IMPL() was adjusted in 682ce104, the values of
    the operands were omitted from the variadic arguments list.
    This patch simply corrects this.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Tom Caputi <tcaputi@datto.com>
    Closes #6343

[33mcommit cf8738d85374f51298a0872bcd58257bbb4fda6d[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Wed Jul 12 22:05:37 2017 +0200

    Add port of FreeBSD 'volmode' property
    
    The volmode property may be set to control the visibility of ZVOL
    block devices.
    
    This allow switching ZVOL between three modes:
       full - existing fully functional behaviour (default)
       dev  - hide partitions on ZVOL block devices
       none - not exposing volumes outside ZFS
    
    Additionally the new zvol_volmode module parameter can be used to
    control the default behaviour.
    
    This functionality can be used, for instance, on "backup" pools to
    avoid cluttering /dev with unneeded zd* devices.
    
    Original-patch-by: mav <mav@FreeBSD.org>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: loli10K <ezomori.nozomu@gmail.com>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    
    FreeBSD-commit: https://github.com/freebsd/freebsd/commit/dd28e6bb
    Closes #1796
    Closes #3438
    Closes #6233

[33mcommit e19572e4cc0b8df95ebf60053029e454592a92d4[m
Author: Yuri Pankov <yuri.pankov@nexenta.com>
Date:   Mon Jun 12 20:16:28 2017 -0700

    OpenZFS 5428 - provide fts(), reallocarray(), and strtonum()
    
    Authored by: Yuri Pankov <yuri.pankov@nexenta.com>
    Reviewed by: Robert Mustacchi <rm@joyent.com>
    Approved by: Joshua M. Clulow <josh@sysmgr.org>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    Porting Notes:
    * All hunks unrelated to ZFS were dropped.
    
    OpenZFS-issue: https://www.illumos.org/issues/5428
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/4585130
    Closes #6326

[33mcommit b24827ac1e327f763a8dd4ed60c44c2a5d918b42[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Fri Jul 7 17:07:40 2017 -0700

    Exit test-runner with non-zero if tests are KILLED
    
    fe46eeb introduced non-zero exit codes to test-runner.
    A non-zero exit code should be returned when test-runner
    decided to kill a test and mark it as KILLED.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #6325

[33mcommit dda82a2eabefcf3e044c5d3bbe78954dfc0e4248[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Sat Jul 8 00:45:29 2017 +0200

    Fix chattr_001_pos
    
    Commands should be eval()ed if they involve a shell redirection,
    otherwise we end up writing log_* functions messages to the output.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #6300
    Closes #6323

[33mcommit 2ade4a99f0b995df6fb45138d04a0209b959ef63[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Mon Mar 20 15:38:11 2017 -0700

    OpenZFS 8126 - ztest assertion failed in dbuf_dirty due to dn_nlevels changing
    
    The sync thread is concurrently modifying dn_phys->dn_nlevels
    while dbuf_dirty() is trying to assert something about it, without
    holding the necessary lock. We need to move this assertion further down
    in the function, after we have acquired the dn_struct_rwlock.
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Reviewed by: Serapheim Dimitropoulos <serapheim@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/8126
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/0ef125d
    Closes #6314

[33mcommit a896468c7872dc7277fd0171c65bd2c185bfcaab[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Mon May 1 11:06:07 2017 -0700

    OpenZFS 8067 - zdb should be able to dump literal embedded block pointer
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Alex Reece <alex@delphix.com>
    Reviewed by: Yuri Pankov <yuri.pankov@gmail.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/8067
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/8173085
    Closes #6319

[33mcommit c34efbebd577644674a7cf543b3e0540c9f0fa9f[m
Author: Antonio Russo <antonio.e.russo@gmail.com>
Date:   Fri Jul 7 13:45:17 2017 -0400

    Prevent dependencies on Debianized packages
    
    Call dpkg-shlibdeps with arguments excluding the Debianized packages
    lib{uutil1,nvpair1,zfs2,zpool2}linux from the auto-generated
    dependencies of generated .debs. A shim dh_shlibdeps that calls the
    real dh_shlibdeps with corresponding arguments is installed into a
    temporary directory, which is in turn pre-pended to the PATH for the
    alien call, working around alien's inability to directly alter the
    dependencies of its output debs. Resolves #6106.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Antonio Russo <antonio.e.russo@gmail.com>
    Closes #6309
    Closes #6106

[33mcommit 92e43c17188d47f47b69318e4884096dec380e36[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Fri Jul 7 19:39:53 2017 +0200

    Fix 'zpool clear' on readonly pools
    
    Illumos 4080 inadvertently allows 'zpool clear' on readonly pools: fix
    this by reintroducing a check (POOL_CHECK_READONLY) in zfs_ioc_clear
    registration code.
    
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #6306

[33mcommit 0ea05c64f8d08c20439dd2a06e949a2aa4115101[m
Author: Alek P <alek-p@users.noreply.github.com>
Date:   Thu Jul 6 22:16:13 2017 -0700

    Implemented zpool scrub pause/resume
    
    Currently, there is no way to pause a scrub. Pausing may
    be useful when the pool is busy with other I/O to preserve
    bandwidth.
    
    This patch adds the ability to pause and resume scrubbing.
    This is achieved by maintaining a persistent on-disk scrub state.
    While the state is 'paused' we do not scrub any more blocks.
    We do however perform regular scan housekeeping such as
    freeing async destroyed and deadlist blocks while paused.
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Thomas Caputi <tcaputi@datto.com>
    Reviewed-by: Serapheim Dimitropoulos <serapheimd@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Alek Pinchuk <apinchuk@datto.com>
    Closes #6167

[33mcommit 94b25662c51696ec081494e69efb5896566dede2[m
Author: Arkadiusz Bubała <arkadiusz.bubala@open-e.com>
Date:   Thu Jul 6 17:38:24 2017 +0200

    Reschedule processes on -ERESTARTSYS
    
    On the single core machine the system may hang when the
    spa_namespare_lock acquisition fails in the zvol_first_open
    function. It returns -ERESTARTSYS error what causes the
    endless loop in __blkdev_get function.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Arkadiusz Bubała <arkadiusz.bubala@open-e.com>
    Closes #6283
    Closes #6312

[33mcommit 9c3dcab5e229723ba41c67926223e942794a9ab2[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Wed Jul 5 20:46:52 2017 +0300

    ZTS: replace su commands by run_user function
    
    Needed for PATH variable to be passed into su.  The
    posix* tests were fixed, but they need further investigation
    before they can be enabled.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: George Melikov <mail@gmelikov.ru>
    Closes #6303

[33mcommit 478e3ecf8bc98687a336a64214c0e5e122454f52[m
Author: alaviss <alaviss@users.noreply.github.com>
Date:   Thu Jul 6 00:39:13 2017 +0700

    Musl libc fixes
    
    Musl libc's <stdio.h> doesn't include <stdarg.h>, which cause
    `va_start` and `va_end` end up being undefined symbols.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Leorize <alaviss@users.noreply.github.com>
    Closes #6310

[33mcommit 688c94c5c03c693f91d48adcf4b8826f8e16c6fd[m
Author: alaviss <alaviss@users.noreply.github.com>
Date:   Thu Jul 6 00:38:20 2017 +0700

    Clang fixes
    
    Clang doesn't support `/` as comment in assembly, this patch replaces
    them with `#`.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Leorize <alaviss@users.noreply.github.com>
    Closes #6311

[33mcommit 02dc43bc4615537e8e198170a0711e317c8e6dda[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Fri Apr 14 12:59:18 2017 -0700

    OpenZFS 8378 - crash due to bp in-memory modification of nopwrite block
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    The problem is that zfs_get_data() supplies a stale zgd_bp to
    dmu_sync(), which we then nopwrite against.
    zfs_get_data() doesn't hold any DMU-related locks, so after it
    copies db_blkptr to zgd_bp, dbuf_write_ready() could change
    db_blkptr, and dbuf_write_done() could remove the dirty record.
    dmu_sync() then sees the stale BP and that the dbuf it not dirty,
    so it is eligible for nop-writing.
    The fix is for dmu_sync() to copy db_blkptr to zgd_bp after
    acquiring the db_mtx. We could still see a stale db_blkptr,
    but if it is stale then the dirty record will still exist and
    thus we won't attempt to nopwrite.
    
    OpenZFS-issue: https://www.illumos.org/issues/8378
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/3127742
    Closes #6293

[33mcommit 8ca78ab00278332a877d7d95e057c0b4aca5f9ad[m
Author: Andriy Gapon <avg@FreeBSD.org>
Date:   Sat Mar 11 20:26:47 2017 +0200

    OpenZFS 7600 - zfs rollback should pass target snapshot to kernel
    
    Authored by: Andriy Gapon <avg@FreeBSD.org>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    The existing kernel-side code only provides a method to rollback to a
    latest snapshot, whatever it happens to be at the time when the rollback
    is actually done.  That could be unsafe or confusing in environments
    where concurrent DSL changes are possible as the resulting state could
    correspond to a newer or older snapshot than the originally requested
    one.
    This change allows to amend that method such that the rollback is
    performed only when the latest snapshot has a specific name.  That is,
    if a new snapshot is concurrently created or the target snapshot is
    destroyed, then no rollback is done and EXDEV error is returned.
    New libzfs_core function lzc_rollback_to() is provided for the new
    functionality.  libzfs is changed to use lzc_rollback_to() to implement
    zfs rollback command.
    Perhaps we should return different errors to distinguish the case where
    the desired snapshot exists but it's not the latest snapshot and the
    case where the desired snapshot does not exist.
    
    OpenZFS-issue: https://www.illumos.org/issues/7600
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/3d645eb
    Closes #6292

[33mcommit 018503911c3a4d01768270c69e6ec87b3034e86f[m
Author: Andriy Gapon <avg@FreeBSD.org>
Date:   Sat Mar 11 19:48:35 2017 +0200

    OpenZFS 7910 - l2arc_write_buffers() may write beyond target_sz
    
    Authored by: Andriy Gapon <avg@FreeBSD.org>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/7910
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/cb6af4b
    Closes #6291

[33mcommit 23873bbb5f887785b5589664673d347a77236e03[m
Author: Marcel Telka <marcel@telka.sk>
Date:   Thu Jun 22 15:30:49 2017 +0200

    OpenZFS 8418 - zfs_prop_get_table() call in zfs_validate_name() is a no-op
    
    Authored by: Marcel Telka <marcel@telka.sk>
    Reviewed by: Vitaliy Gusev <gusev.vitaliy@icloud.com>
    Approved by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/8418
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/e09ba01
    Closes #6305

[33mcommit 27ef66ef19020dcdcda7b6f64a2f92cac9674565[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Tue Jul 4 00:21:12 2017 +0300

    ZTS: minor typo and old default values
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: George Melikov <mail@gmelikov.ru>
    Closes #6298

[33mcommit fe46eebe6b6f75a006a295db1f14c9c9f02751c1[m
Author: Alek P <alek-p@users.noreply.github.com>
Date:   Fri Jun 30 14:14:26 2017 -0400

    On failure tests-runner should do non-zero exit
    
    Right now test runner will always exit(0).
    It's helpful to have zfs-tests.sh provide different
    exit values depending on if everything passed or not.
    We can then use common shell cmds to run tests until failure.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Alek Pinchuk <apinchuk@datto.com>
    Closes #6285

[33mcommit b81a1c61ec6c70586e56d29b66b261dadf1d4fe8[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Fri Jun 30 11:12:29 2017 -0700

    Print fail messages before callbacks in test suite
    
    Reorder operations in _endlog so failure messages get
    printed prior to performing callbacks and cleanup. This
    helps clarify why a test failed and places the message
    closer to the point of incident in the resulting logs.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #6281

[33mcommit aa6e82a6a55d6fde7a8dc1c21bf952df69ef9a20[m
Author: Sowrabha Gopal <sowrabha.gopal@delphix.com>
Date:   Thu Jun 1 13:27:02 2017 -0700

    OpenZFS 8430 - dir_is_empty_readdir() doesn't properly handle error from fdopendir()
    
    Authored by: Sowrabha Gopal <sowrabha.gopal@delphix.com>
    Reviewed by: Serapheim Dimitropoulos <serapheim@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Yuri Pankov <yuri.pankov@nexenta.com>
    Reviewed by: Igor Kozhukhov <igor@dilos.org>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    dir_is_empty_readdir() immediately returns if fdopendir() fails.
    We should close dirfd when that happens.
    
    OpenZFS-issue: https://www.illumos.org/issues/8430
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/e165e20
    Closes #6289

[33mcommit 1579dcbc9176d3875f3ce8926076e46a87d8e8ed[m
Author: Andriy Gapon <avg@FreeBSD.org>
Date:   Wed Jun 21 23:47:54 2017 +0300

    OpenZFS 8416 - abd.h is not C++ friendly
    
    Authored by: Andriy Gapon <avg@FreeBSD.org>
    Reviewed by: Igor Kozhukhov <igor@dilos.org>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Alek Pinchuk <pinchuk.alek@gmail.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/8416
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/589c189
    Closes #6288

[33mcommit 2a53d6a12a27b757d1d8867b2e02369fbc046cab[m
Author: Andriy Gapon <avg@FreeBSD.org>
Date:   Mon Jun 26 13:46:45 2017 +0300

    OpenZFS 8426 - mark immutable buffer arguments as such in abd.h
    
    Authored by: Andriy Gapon <avg@FreeBSD.org>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/8426
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/37359a6
    Closes #6287

[33mcommit c6f6767eea2179689873efdad4929f73f7f2b10b[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Fri Apr 14 12:52:43 2017 -0700

    OpenZFS 8377 - Panic in bookmark deletion
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    The problem is that when dsl_bookmark_destroy_check() is
    executed from open context (the pre-check), it fills in
    dbda_success based on the existence of the bookmark. But
    the bookmark (or containing filesystem as in this case)
    can be destroyed before we get to syncing context. When
    we re-run dsl_bookmark_destroy_check() in syncing context,
    it will not add the deleted bookmark to dbda_success,
    intending for dsl_bookmark_destroy_sync() to not process
    it. But because the bookmark is still in dbda_success from
    the open-context call, we do try to destroy it.
    The fix is that dsl_bookmark_destroy_check() should not
    modify dbda_success when called from open context.
    
    OpenZFS-issue: https://www.illumos.org/issues/8377
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/b0b6fe3
    Closes #6286

[33mcommit 817b1b6e7b6f9b8890a550c7c7efabdba41dd352[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Thu Jun 29 10:18:03 2017 -0700

    Clean up large dnode code
    
    Resolves issues discovered when porting to OpenZFS.
    
    * Lint warnings.
    * Made dnode_move_impl() large dnode aware.  This
      functionality is currently unused on Linux.
    
    Reviewed-by: Ned Bass <bass6@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Matthew Ahrens <mahrens@delphix.com>
    Closes #6262

[33mcommit b8a97fb101555797400c3a275e67820c5d689802[m
Author: chrisrd <chris@onthe.net.au>
Date:   Fri Jun 30 02:57:27 2017 +1000

    Set arc_meta_limit, arc_dnode_limit on change
    
    Make zfs_arc_meta_limit_percent and zfs_arc_dnode_limit_percent behave
    as you would expect from zfs-module-parameters.5.
    
    - recalculate arc_meta_limit if zfs_arc_meta_limit_percent changes
    - recalculate arc_dnode_limit if zfs_arc_dnode_limit_percent changes
    - correctly set arc_meta_limit and arc_dnode_limit if zfs_arc_max or
      zfs_arc_meta_min changes
    
    Reviewed-by: Tim Chase <tim@chase2k.com>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chris Dunlop <chris@onthe.net.au>
    Closes #6269

[33mcommit 44f09cdc59fd89f9bc935b4d36b7ed15d21ddeb3[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jun 29 09:55:30 2017 -0700

    Convert man zfs.8 to mdoc (OpenZFS sync)
    
    * Fixed some typos
    * Additional description for some commands arguments
    * Text reworked to be in sync with OpenZFS
    * Added Linux as .Os type
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6282

[33mcommit 682ce104cdd80db4b67eea09eb0a90324c5f98ee[m
Author: Tony Hutter <hutter2@llnl.gov>
Date:   Wed Jun 28 10:05:16 2017 -0700

    GCC 7.1 fixes
    
    GCC 7.1 with will warn when we're not checking the snprintf()
    return code in cases where the buffer could be truncated. This
    patch either checks the snprintf return code (where applicable),
    or simply disables the warnings (ztest.c).
    
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Closes #6253

[33mcommit cda0317e4d2a1277b328e4fc42ee3699bbe46c12[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Sun Jun 18 21:27:06 2017 +0300

    Convert man zpool.8 to mdoc (OpenZFS sync)
    
    * Fixed some typos
    * Additional description for some commands arguments
    * `listsnapshots` remained
    * Text reworked to be in sync with OpenZFS
    * Added Linux as .Os type
    * Updated `zpool events` section.
    * Updated `zpool iostat|status -c` sections
    * Added zed(8) reference to SEE ALSO
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: George Melikov <mail@gmelikov.ru>
    Closes #6245

[33mcommit 5b7bb98387e77259aab50a8c081e4c527a60b58e[m
Author: Tony Hutter <hutter2@llnl.gov>
Date:   Tue Jun 27 12:00:27 2017 -0700

    Fix RHEL 7.4 bio_set_op_attrs build error
    
    On RHEL 7.4, include/linux/bio.h now includes a macro for
    bio_set_op_attrs that conflicts with the ifndef in ZFS
    include/linux/blkdev_compat.h.  This patch fixes the build.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Closes #6234
    Closes #6271

[33mcommit 2d678f779aba26a93314c8ee1142c3985fa25cb6[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jun 27 10:09:16 2017 -0700

    Cap maximum aggregate IO size
    
    Commit 8542ef8 allowed optional IOs to be aggregated beyond
    the specified aggregation limit.  Since the aggregation limit
    was also used to enforce the maximum block size, setting
    `zfs_vdev_aggregation_limit=16777216` could result in an
    attempt to allocate an ABD larger than 16M.
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6259
    Closes #6270

[33mcommit 47770d30f205b81ece1f60760f3edb5c04574e6e[m
Author: bunder2015 <omfgbunder@gmail.com>
Date:   Tue Jun 27 13:06:07 2017 -0400

    Fix zpool_add_005_pos
    
    Under Linux the existence of a block device in /etc/fstab is
    not sufficient to prevent the use of the force flag.  Without
    the force flag a warning will be printed that the device has
    a filesystem of a given type.  Providing the force option
    will overwrite that filesystem as long as it is not actively
    mounted.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Tested-by: bunder2015 <omfgbunder@gmail.com>
    Signed-off-by: bunder2015 <omfgbunder@gmail.com>
    Closes #6267
    Closes #6272

[33mcommit 58404a73db9e245778aa7fd7028fbf742f8b815b[m
Author: Boris Protopopov <boris.protopopov@actifio.com>
Date:   Tue Jun 13 12:03:44 2017 -0400

    Refine use of zv_state_lock.
    
    Use zv_state_lock to protect all members of zvol_state structure, add
    relevant ASSERT()s. Take zv_suspend_lock before zv_state_lock, do not
    hold zv_state_lock across suspend/resume.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Boris Protopopov <boris.protopopov@actifio.com>
    Closes #6226

[33mcommit 82710e993a3481b2c3cdefb6f5fc31f65e1c6798[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Mon Jun 26 17:32:43 2017 -0700

    OpenZFS 5220 - L2ARC does not support devices that do not provide 512B access
    
    Authored by: Andriy Gapon <avg@FreeBSD.org>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Saso Kiselkov <saso.kiselkov@nexenta.com>
    Approved by: Dan McDonald <danmcd@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/5220
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/403a8da
    Closes #6260

[33mcommit d12f91fde3c6a7d1aa71967b3480faac6c853051[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Mon Jun 26 16:56:09 2017 -0700

    OpenZFS 8264 - want support for promoting datasets in libzfs_core
    
    Authored by: Andrew Stormont <astormont@racktopsystems.com>
    Reviewed by: Andriy Gapon <avg@FreeBSD.org>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Dan McDonald <danmcd@kebe.com>
    Approved by: Dan McDonald <danmcd@kebe.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/8264
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/a4b8c9a
    Closes #6254

[33mcommit 7517376f939d788a2622c84fe1f502799a74a0ae[m
Author: bunder2015 <omfgbunder@gmail.com>
Date:   Mon Jun 26 17:48:54 2017 -0400

    Fix arithmetic error message in zfs_clone_010_pos
    
    zfs_clone_010_pos.ksh: line 234: ZFS_MAXPROPLEN: arithmetic syntax error
    
    Reviewed-by: Kash Pande <kash@tripleback.net>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: bunder2015 <omfgbunder@gmail.com>
    Closes #6268

[33mcommit 03928896e114cfc4752c089727474134a2b0204b[m
Author: Boris Protopopov <bprotopopov@users.noreply.github.com>
Date:   Mon Jun 26 17:36:49 2017 -0400

    Call cv_signal() with mutex held
    
    In bqueue_dequeue(), call cv_signal() with bq_lock held.
    Re-enable rsend_009_pos to test the fix.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Boris Protopopov <boris.protopopov@actifio.com>
    Closes #5887

[33mcommit 7e35ea783e55eaa4f0721d34077652b874f979d8[m
Author: Andrew Stormont <astormont@racktopsystems.com>
Date:   Mon Jun 12 17:56:09 2017 +0100

    OpenZFS 8331 - zfs_unshare returns wrong error code for smb unshare failure
    
    Authored by: Andrew Stormont <astormont@racktopsystems.com>
    Reviewed by: Marcel Telka <marcel@telka.sk>
    Reviewed by: Toomas Soome <tsoome@me.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/8331
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/4f4378c
    Closes #6255

[33mcommit 29eb4942856da942f1482cba9326698f91eb8c1c[m
Author: Tony Hutter <hutter2@llnl.gov>
Date:   Thu Jun 22 09:39:01 2017 -0700

    Dashes for zero latency values in zpool iostat -p
    
    This prints dashes instead of zeros for zero latency values in
    'zpool iostat -p'.  You'll get zero latencies reported when the
    disk is idle, but technically a zero latency is invalid, since you
    can't measure the latency of doing nothing.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Closes #6210

[33mcommit d9ad3fea3bd0368b6af0b08ccc4de1b080e2bcb7[m
Author: Morgan Jones <mjones@rice.edu>
Date:   Mon Jun 19 16:43:16 2017 +0000

    Add kpreempt_disable/enable around CPU_SEQID uses
    
    In zfs/dmu_object and icp/core/kcf_sched, the CPU_SEQID macro
    should be surrounded by `kpreempt_disable` and `kpreempt_enable`
    calls to avoid a Linux kernel BUG warning.  These code paths use
    the cpuid to minimize lock contention and is is safe to reschedule
    the process to a different processor at any time.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Morgan Jones <me@numin.it>
    Closes #6239

[33mcommit 0241e491a08ffa471a08ceaa0b0943999d775cbe[m
Author: Don Brady <don.brady@intel.com>
Date:   Fri Jun 16 18:21:11 2017 -0600

    Inject zinject(8) a percentage amount of dev errs
    
    In the original form of device error injection, it was an all or nothing
    situation.  To help simulate intermittent error conditions, you can now
    specify a real number percentage value. This is also very useful for our
    ZFS fault diagnosis testing and for injecting intermittent errors during
    load testing.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Don Brady <don.brady@intel.com>
    Closes #6227

[33mcommit 05a5357a6c63b8c83062c1b295ee98d14f8e85aa[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Thu Jun 15 17:52:18 2017 -0700

    Provide links to info about ZFS Buildbot options
    
    Add links for information about the ZFS buildbot options
    to the contributing guidelines and PR template.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #6235

[33mcommit ef4be34a64010fb57632e1bc317810c86feacc67[m
Author: Boris Protopopov <boris.protopopov@actifio.com>
Date:   Wed Jun 14 16:18:36 2017 -0400

    Avoid 'queue not locked' warning at pool import.
    
    Use queue_flag_set_unlocked() in zvol_alloc().
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Boris Protopopov <boris.protopopov@actifio.com>
    Issue #6226

[33mcommit 97f8d7961e0b6e282f5296c20d5af9746c9db688[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Thu Jun 15 20:08:45 2017 +0200

    Fix zvol_state_t->zv_open_count race
    
    5559ba0 added zv_state_lock to protect zvol_state_t internal data:
    this, however, doesn't guard zv->zv_open_count and
    zv->zv_disk->private_data in zvol_remove_minors_impl().
    
    Fix this by taking zv->zv_state_lock before we check its zv_open_count.
    
    P1 (z_zvol)                       P2 (systemd-udevd)
    ---                               ---
    zvol_remove_minors_impl()
    : zv->zv_open_count==0
                                      zvol_open()
                                      ->mutex_enter(zv_state_lock)
                                      : zv->zv_open_count++
                                      ->mutex_exit(zv_state_lock)
    ->mutex_enter(zv->zv_state_lock)
    ->zvol_remove(zv)
    ->mutex_exit(zv->zv_state_lock)
    : zv->zv_disk->private_data = NULL
    ->zvol_free()
    -->ASSERT(zv->zv_open_count==0) *
                                      zvol_release()
                                      : zv = disk->private_data
                                      ->ASSERT(zv && zv->zv_open_count>0) *
    ---                               ---
    * ASSERT() fails
    
    Reviewed by: Boris Protopopov <bprotopopov@hotmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #6213

[33mcommit 627791f3c0f27322d7d5dd99630f03759278d824[m
Author: chrisrd <chris@onthe.net.au>
Date:   Thu Jun 15 06:23:02 2017 +1000

    Fix manual description of zfs_arc_dnode_limit
    
    In arc_evict_state() we start pruning when arc_dnode_size >
    arc_dnode_limit, i.e. arc_dnode_limit is a ceiling rather than a
    floor.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chris Dunlop <chris@onthe.net.au>
    Closes #6228

[33mcommit 8f7933fec906f14c40af297d2c89fc2567a39a1e[m
Author: Richard Yao <richard.yao@prophetstor.com>
Date:   Sat May 20 14:01:55 2017 -0400

    Fix zvol_init error handling
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <richard.yao@prophetstor.com>

[33mcommit 5228cf011626081ee5dd4b6ce6fd31857d494e93[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Tue Jun 13 12:18:08 2017 -0400

    Make zvol operations use _by_dnode routines
    
    This continues what was started in
    0eef1bde31d67091d3deed23fe2394f5a8bf2276 by fully converting zvols
    to avoid unnecessary dnode_hold() calls. This saves a small amount
    of CPU time and slightly improves latencies of operations on zvols.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <richard.yao@prophetstor.com>
    Closes #6058

[33mcommit 1fbfcf115979c707e636167fac6c10fec4ff5657[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Tue Jun 13 09:05:55 2017 -0700

    Fix zpool_import_all_001_pos
    
    Cleanup zpool_import_all_001_pos to no longer use devices.
    The test is meant to test zpool import -a and by no longer
    requiring devices, a number of dependencies are no longer
    necessary.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #6198

[33mcommit 419c80e6dc2cd83372a77dfaf6f04e446d1f0267[m
Author: DeHackEd <DeHackEd@users.noreply.github.com>
Date:   Mon Jun 12 14:41:03 2017 -0400

    Reduce stack usage of dsl_dir_tempreserve_impl
    
    Buildbots and zfs-tests regularly see 7 kilobytes of stack
    usage with this function. Convert self-calls to iterations
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: DHE <git@dehacked.net>
    Closes #6219

[33mcommit 851aa99c899e5d7ddc937e223359b8892eeeca5d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jun 12 09:45:32 2017 -0700

    Use log_must_busy in destroy_pool
    
    The log function log_must_busy was added in commit e623aea2 for
    this purpose.  Update destroy_pool to use it.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6217

[33mcommit 88c30122e5ccb343c5675f4429ee29fc5ba224a0[m
Author: kpande <github@tripleback.net>
Date:   Fri Jun 9 12:51:13 2017 -0400

    Add missing \n for "invalid optionusage" output
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: DHE <git@dehacked.net>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Jack Draak <jackdraak@gmail.com>
    Signed-off-by: Kash Pande <kash@tripleback.net>
    Closes #6203

[33mcommit dd429b46b7b8990f48c0276abe8080f626f415cb[m
Author: Paul Dagnelie <pcd@delphix.com>
Date:   Thu Jul 7 15:00:51 2016 -0700

    OpenZFS 8056 - zfs send size estimate is inaccurate for some zvols
    
    Authored by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Kash Pande <kash@tripleback.net>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    The send size estimate for a zvol can be too low, if the size of the
    record headers (dmu_replay_record_t's) is a significant portion of the
    size. This is typically the case when the data is highly compressible,
    especially with embedded blocks.
    
    The problem is that dmu_adjust_send_estimate_for_indirects() assumes
    that blocks are the size of the "recordsize" property (128KB). However,
    for zvols, the blocks are the size of the "volblocksize" property (8KB).
    Therefore, we estimate that there will be 16x less record headers than
    there really will be.
    
    The fix is to check the type of the object set (whether it is a zvol or
    not) and pick the appropriate property. In addition, while we are at it,
    we also add the size of the BEGIN and END records to the estimate.
    
    OpenZFS-issue: https://www.illumos.org/issues/8056
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/faf09cd
    Closes #6205

[33mcommit 38240ebd7a35269e8ce74dc133b34120d707cd6f[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Tue Mar 28 15:31:49 2017 -0700

    OpenZFS 8156 - dbuf_evict_notify() does not need dbuf_evict_lock
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    dbuf_evict_notify() holds the dbuf_evict_lock while checking if it should
    do the eviction itself (because the evict thread is not able to keep up).
    This can result in massive lock contention.  It isn't necessary to hold
    the lock, because if we make the wrong choice occasionally, nothing bad
    will happen. This commit results in a ~60% performance improvement for
    ARC-cached sequential reads.
    
    OpenZFS-issue: https://www.illumos.org/issues/8156
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/f73e5d9
    Closes #6204

[33mcommit dbeb8796996b4a342f7de2b3eb4ea5b86ac260f9[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Thu May 12 21:16:36 2016 -0700

    OpenZFS 8199 - multi-threaded dmu_object_alloc()
    
    dmu_object_alloc() is single-threaded, so when multiple threads are
    creating files in a single filesystem, they spend a lot of time waiting
    for the os_obj_lock.  To improve performance of multi-threaded file
    creation, we must make dmu_object_alloc() typically not grab any
    filesystem-wide locks.
    
    The solution is to have a "next object to allocate" for each CPU. Each
    of these "next object"s is in a different block of the dnode object, so
    that concurrent allocation holds dnodes in different dbufs.  When a
    thread's "next object" reaches the end of a chunk of objects (by default
    4 blocks worth -- 128 dnodes), it will be reset to the per-objset
    os_obj_next, which will be increased by a chunk of objects (128).  Only
    when manipulating the os_obj_next will we need to grab the os_obj_lock.
    This decreases lock contention dramatically, because each thread only
    needs to grab the os_obj_lock briefly, once per 128 allocations.
    
    This results in a 70% performance improvement to multi-threaded object
    creation (where each thread is creating objects in its own directory),
    from 67,000/sec to 115,000/sec, with 8 CPUs.
    
    Work sponsored by Intel Corp.
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed-by: Ned Bass <bass6@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Matthew Ahrens <mahrens@delphix.com>
    Signed-off-by: Matthew Ahrens <mahrens@delphix.com>
    
    OpenZFS-issue: https://www.illumos.org/issues/8199
    OpenZFS-commit: https://github.com/openzfs/openzfs/pull/374
    Closes #4703
    Closes #6117

[33mcommit 1b7c1e5ce90ae27d9bb1f6f3616bf079c168005c[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Fri Jun 9 09:15:37 2017 -0700

    OpenZFS 7578 - Fix/improve some aspects of ZIL writing
    
    - After some ZIL changes 6 years ago zil_slog_limit got partially broken
    due to zl_itx_list_sz not updated when async itx'es upgraded to sync.
    Actually because of other changes about that time zl_itx_list_sz is not
    really required to implement the functionality, so this patch removes
    some unneeded broken code and variables.
    
     - Original idea of zil_slog_limit was to reduce chance of SLOG abuse by
    single heavy logger, that increased latency for other (more latency critical)
    loggers, by pushing heavy log out into the main pool instead of SLOG.  Beside
    huge latency increase for heavy writers, this implementation caused double
    write of all data, since the log records were explicitly prepared for SLOG.
    Since we now have I/O scheduler, I've found it can be much more efficient
    to reduce priority of heavy logger SLOG writes from ZIO_PRIORITY_SYNC_WRITE
    to ZIO_PRIORITY_ASYNC_WRITE, while still leave them on SLOG.
    
     - Existing ZIL implementation had problem with space efficiency when it
    has to write large chunks of data into log blocks of limited size.  In some
    cases efficiency stopped to almost as low as 50%.  In case of ZIL stored on
    spinning rust, that also reduced log write speed in half, since head had to
    uselessly fly over allocated but not written areas.  This change improves
    the situation by offloading problematic operations from z*_log_write() to
    zil_lwb_commit(), which knows real situation of log blocks allocation and
    can split large requests into pieces much more efficiently.  Also as side
    effect it removes one of two data copy operations done by ZIL code WR_COPIED
    case.
    
     - While there, untangle and unify code of z*_log_write() functions.
    Also zfs_log_write() alike to zvol_log_write() can now handle writes crossing
    block boundary, that may also improve efficiency if ZPL is made to do that.
    
    Sponsored by:   iXsystems, Inc.
    
    Authored by: Alexander Motin <mav@FreeBSD.org>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Andriy Gapon <avg@FreeBSD.org>
    Reviewed by: Steven Hartland <steven.hartland@multiplay.co.uk>
    Reviewed by: Brad Lewis <brad.lewis@delphix.com>
    Reviewed by: Richard Elling <Richard.Elling@RichardElling.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Richard Yao <ryao@gentoo.org>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/7578
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/aeb13ac
    Closes #6191

[33mcommit 82644107c4e7f3e899ebde18f65cbac7c604583c[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Thu Mar 23 09:07:27 2017 -0700

    OpenZFS 8155 - simplify dmu_write_policy handling of pre-compressed buffers
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    When writing pre-compressed buffers, arc_write() requires that
    the compression algorithm used to compress the buffer matches
    the compression algorithm requested by the zio_prop_t, which is
    set by dmu_write_policy(). This makes dmu_write_policy() and its
    callers a bit more complicated.
    
    We simplify this by making arc_write() trust the caller to supply
    the type of pre-compressed buffer that it wants to write,
    and override the compression setting in the zio_prop_t.
    
    OpenZFS-issue: https://www.illumos.org/issues/8155
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/b55ff58
    Closes #6200

[33mcommit 4070bfd85282eda582cd0050367478da5e29ca2e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jun 7 10:59:44 2017 -0700

    Add MS_MANDLOCK mount failure message
    
    Commit torvalds/linux@9e8925b6 allowed for kernels to be built
    without support for mandatory locking (MS_MANDLOCK).  This will
    result in 'zfs mount' failing when the nbmand=on property is set
    if the kernel is built without CONFIG_MANDATORY_FILE_LOCKING.
    
    Unfortunately we can not reliably detect prior to the mount(2) system
    call if the kernel was built with this support.  The best we can do
    is check if the mount failed with EPERM and if we passed 'mand'
    as a mount option and then print a more useful error message. e.g.
    
      filesystem 'tank/fs' has the 'nbmand=on' property set, this mount
      option may be disabled in your kernel.  Use 'zfs set nbmand=off'
      to disable this option and try to mount the filesystem again.
    
    Additionally, switch the default error message case to use
    strerror() to produce a more human readable message.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4729
    Closes #6199

[33mcommit 829aaf280171db85fcc96bb19c1f403ee05b334a[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Tue Jun 6 22:04:01 2017 -0400

    Skip tests that are slow on 32-bit builders
    
    zpool_create_024_pos, zvol_misc_002_pos, write_dirs_002_pos are slow
    on the buildbot 32-bit builder. Skip the test cases for now on 32-bit
    builders.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #6195

[33mcommit ca8b210744ab7507cf7a27aeb246520d377f2fce[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jun 6 11:30:47 2017 -0700

    Reduce async_destroy_001_pos memory requirements
    
    The number of blocks which can be freed per TXG is controlled
    by the zfs_free_max_blocks module option (defaults to 100,000).
    Both speed up this test case and reduce the memory requirements
    by only creating 4 TXGs worth of blocks to be freed.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #5479
    Closes #6192

[33mcommit 6eb6073a044653016013b1a72de03a1257e899c5[m
Author: Håkan Johansson <f96hajo@chalmers.se>
Date:   Mon Jun 5 22:53:09 2017 +0200

    Allow add of raidz and mirror with same redundancy
    
    Allow new members to be added to a pool mixing raidz and mirror vdevs
    without giving -f, as long as they have matching redundancy.  This case
    was missed in #5915, which only handled zpool create.
    
    Add zfstest zpool_add_010_pos.ksh, with test of zpool create
    followed by zpool add of mixed raidz and mirror vdevs.
    
    Add some more mixed raidz and mirror cases to zpool_create_006_pos.ksh.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Haakan Johansson <f96hajo@chalmers.se>
    Issue #5915
    Closes #6181

[33mcommit 9f7b066bd901128f0a5e481e3c23ae9857b1263e[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Mon Jun 5 20:26:25 2017 +0200

    Linux 4.9 compat: fix zfs_ctldir xattr handling
    
    Since torvalds/linux@d0a5b99 IOP_XATTR is used to indicate the inode
    has xattr support: clear it for the ctldir inodes to avoid EIO errors.
    
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #6189

[33mcommit 099700d9dff46309cdd16f4c4331daddb70d8570[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Mon Jun 5 13:52:15 2017 -0400

    zpool iostat/status -c improvements
    
    Users can now provide their own scripts to be run
    with 'zpool iostat/status -c'. User scripts should be
    placed in ~/.zpool.d to be included in zpool's
    default search path.
    
    Provide a script which can be used with
    'zpool iostat|status -c' that will return the type of
    device (hdd, sdd, file).
    
    Provide a script to get various values from smartctl
    when using 'zpool iostat/status -c'.
    
    Allow users to define the ZPOOL_SCRIPTS_PATH
    environment variable which can be used to override
    the default 'zpool iostat/status -c' search path.
    
    Allow the ZPOOL_SCRIPTS_ENABLED environment
    variable to enable or disable 'zpool status/iostat -c'
    functionality.
    
    Use the new smart script to provide the serial command.
    
    Install /etc/sudoers.d/zfs file which contains the sudoer
    rule for smartctl as a sample.
    
    Allow 'zpool iostat/status -c' tests to run in tree.
    
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #6121
    Closes #6153

[33mcommit 92aceb2a7ee8c9367fdc901fed933f6f258173e0[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Fri Jun 2 16:17:00 2017 +0200

    Fix "snapdev" property issues
    
    When inheriting the "snapdev" property to we don't always call
    zfs_prop_set_special(): this prevents device nodes from being created in
    certain situations. Because "snapdev" is the only *special* property
    that is also inheritable we need to call zfs_prop_set_special() even
    when we're not reverting it to the received value ('zfs inherit -S').
    
    Additionally, fix a NULL pointer dereference accidentally introduced in
    5559ba0 that can be triggered when setting the "snapdev" property to
    the value "hidden" twice.
    
    Finally, add a new test case "zvol_misc_snapdev" to the ZFS Test Suite.
    
    Reviewed by: Boris Protopopov <bprotopopov@hotmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #6131
    Closes #6175
    Closes #6176

[33mcommit b870c4b5d716d87ddfb29f28745e639dd635fd5f[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Thu May 25 15:56:12 2017 -0700

    Fix import wrong spare/l2 device when path change
    
    If, for example, your aux device was /dev/sdc, but now the aux device is
    removed and /dev/sdc points to other device. zpool import will still
    use that device and corrupt it.
    
    The problem is that the spa_validate_aux in spa_import, rather than
    validate the on-disk label, it would actually write label to disk. We
    remove them since spa_load_{spares,l2cache} seems to do everything we
    need and they would actually validate on-disk label.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #6158

[33mcommit 2e9c8dbddfa5d53aa2f9c508e3dc1263d89466ad[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Wed May 24 15:11:23 2017 -0700

    Fix import finding spare/l2cache when path changes
    
    When spare or l2cache device path changes, zpool import will not fix up
    their paths like normal vdev. The issue is that when you supply a pool
    name argument to zpool import, it will use it to filter out device which
    doesn't have the pool name in the label. Since spare and l2cache device
    never have that in the label, they'll always get filtered out.
    
    We fix this by making sure we never filter out a spare or l2cache
    device.
    
    Reviewed by: Richard Elling <Richard.Elling@RichardElling.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #6158

[33mcommit b568efec526d9336292b37faae951aa9cfb4484c[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Thu Jun 1 09:24:28 2017 -0400

    Retire filebench testing
    
    We no longer perform automated filebench testing.  Remove
    references to it for the automated testing.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #6186

[33mcommit 3f7d0418dc663e3a968cf0b28b45f6ef5b83bb06[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Wed May 31 21:52:12 2017 +0200

    Fix memory leak in zvol_set_volsize()
    
    Move kmem_free() so it's called for every error path: this is
    preferred over making `dmu_object_info_t doi` local to accommodate
    older kernels with limited stacks.
    
    Reviewed by: Boris Protopopov <bprotopopov@hotmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #6177

[33mcommit 434c76ca91e9def899355914473a03441697b896[m
Author: kpande <github@tripleback.net>
Date:   Wed May 31 10:30:07 2017 -0400

    Explain reason for Signed-off-by in CONTRIBUTING
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Haakan T Johansson <f96hajo@chalmers.se>
    Signed-off-by: Kash Pande <kash@tripleback.net>
    Closes #6183

[33mcommit 2d82116e80ba88fb8efbc3e573ee8a924323b32a[m
Author: Boris Protopopov <bprotopopov@users.noreply.github.com>
Date:   Fri May 26 20:50:25 2017 -0400

    Fix ida leak in zvol_create_minor_impl
    
    Added missing ida_simple_remove() in the error handling path.
    
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Boris Protopopov <boris.protopopov@actifio.com>
    Closes #6159
    Closes #6172

[33mcommit 9210e43a1660bd1b742e80bfc121b86e2cfad57a[m
Author: Alek P <alek-p@users.noreply.github.com>
Date:   Fri May 26 08:42:10 2017 -1000

    Don't dirty bpobj if it has no entries
    
    In certain cases (dsl_scan_sync() is one), we may end up calling
    bpobj_iterate() on an empty bpobj. Even though we don't end up
    modifying the bpobj it still gets dirtied, causing unneeded writes
    to the pool.
    
    This patch adds an early bail from bpobj_iterate_impl() if bpobj
    is empty to prevent unneeded writes.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Signed-off-by: Alek Pinchuk <apinchuk@datto.com>
    Closes #6164

[33mcommit 261c013fbf79431ac79def2cdf56d9d82009cd4d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri May 26 11:40:44 2017 -0700

    Revert "Fix "snapdev" property inheritance behaviour"
    
    This reverts commit 959f56b99366c8727647b5b19fb3d47555c96cf3.
    An issue was uncovered by the new zvol_misc_snapdev test case
    which needs to be investigated and resolved.
    
    Reviewed-by: loli10K <ezomori.nozomu@gmail.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6174
    Issue #6131

[33mcommit bda77af11cc4041b2be39b7d02705bc8cec4cb2b[m
Author: Yuri Pankov <yuri.pankov@nexenta.com>
Date:   Wed May 24 07:11:47 2017 -0400

    OpenZFS 8077 - zfs-tests suite fails zpool_get_002_pos
    
    Authored by: Yuri Pankov <yuri.pankov@nexenta.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: John Kennedy <jwk404@gmail.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: bunder2015 <omfgbunder@gmail.com>
    
    Porting Notes:
    * Also corrected a quoting mistake found in our copy
    
    OpenZFS-issue: https://www.illumos.org/issues/8077
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/481467d
    Closes #6163

[33mcommit ff770130538c2ca38a4ce041e0102b699fdd7608[m
Author: Yuri Pankov <yuri.pankov@nexenta.com>
Date:   Wed May 24 07:01:49 2017 -0400

    OpenZFS 8076 - zfs-tests suite fails rootpool_002_neg
    
    Authored by: Yuri Pankov <yuri.pankov@nexenta.com>
    Reviewed by: John Kennedy <jwk404@gmail.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: bunder2015 <omfgbunder@gmail.com>
    
    OpenZFS-issue: https://www.illumos.org/issues/8076
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/ab3407e
    Closes #6162

[33mcommit ea8c83fdda344943bf80533f18d30bc95d414612[m
Author: Yuri Pankov <yuri.pankov@nexenta.com>
Date:   Wed May 24 06:46:28 2017 -0400

    OpenZFS 8071 - zfs-tests: 7290 missed some cases
    
    Authored by: Yuri Pankov <yuri.pankov@nexenta.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: John Kennedy <jwk404@gmail.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: bunder2015 <omfgbunder@gmail.com>
    
    OpenZFS-issue: https://www.illumos.org/issues/8071
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/e84991e
    Closes #6161

[33mcommit 00710365261a89abc127efa7fae5fe36d0fae7d1[m
Author: Alan Somers <asomers@gmail.com>
Date:   Wed May 24 06:34:56 2017 -0400

    OpenZFS 8070 - Add some ZFS comments
    
    Authored by: Alan Somers <asomers@gmail.com>
    Reviewed by: Yuri Pankov <yuri.pankov@gmail.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: bunder2015 <omfgbunder@gmail.com>
    
    OpenZFS-issue: https://www.illumos.org/issues/8070
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/40713f2
    Closes #6160

[33mcommit 959f56b99366c8727647b5b19fb3d47555c96cf3[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Fri May 26 01:43:46 2017 +0200

    Fix "snapdev" property inheritance behaviour
    
    When inheriting the "snapdev" property to we don't always call
    zfs_prop_set_special(): this prevents device nodes from being created in
    certain situations. Because "snapdev" is the only *special* property
    that is also inheritable we need to call zfs_prop_set_special() even
    when we're not reverting it to the received value ('zfs inherit -S').
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #6131

[33mcommit 7bc181e6db7e844981b75ae628a97e8f27628025[m
Author: Yuri Pankov <yuri.pankov@nexenta.com>
Date:   Tue May 16 11:22:23 2017 -0700

    OpenZFS 8072 - zfs-tests: several test cases incorrectly spell TESTPOOL
    
    Authored by: Yuri Pankov <yuri.pankov@nexenta.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: John Kennedy <jwk404@gmail.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/8072
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/56e4733
    Closes #6137

[33mcommit 1d8da991714dd78ea2540005ca57792832152c9c[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Wed May 24 16:02:04 2017 -0700

    config: allow --with-linux without --with-linux-obj
    
    Don't use `uname -r` to determine kernel build directory when the user
    specified kernel source with --with-linux. Otherwise, the user is forced
    to use --with-linux-obj even if they are the same directory, which is
    very counterintuitive.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Requires-spl: refs/pull/617/head

[33mcommit 952e490b1b243c1203fe94f4614ab1e46a52237d[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Wed May 24 15:56:10 2017 -0700

    Improve gitignore
    
    Ignore .*.d and exclude Makefile.in in module/
    Also, ignore *.patch and *.orig files
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>

[33mcommit 3e6c9433474f0b6fc4880549c851bfb151c8c719[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Thu May 25 18:55:55 2017 +0200

    Linux 4.12 compat: fix super_setup_bdi_name() call
    
    Provide a format parameter to super_setup_bdi_name() so we don't
    create duplicate names in '/devices/virtual/bdi' sysfs namespace which
    would prevent us from mounting more than one ZFS filesystem at a time.
    
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #6147

[33mcommit 4358afa0f2cd7629de9916ce69c5e7cdd85f6803[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri May 19 13:08:23 2017 -0400

    Retire zconfig.sh
    
    All of the test coverage provided by this script is now handled
    as part of the ZFS Test Suite.  Remove it.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6128

[33mcommit 3f03fc8df3e74b3d9ee6eb3bd8bb656898ed7272[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu May 18 15:57:21 2017 -0400

    Add zpool events tests
    
    * events_001_pos - Verify the expected events are generated when
      invoking the various zpool sub-commands.  These events must
      appear in `zpool event` and be consumed by the ZED.
    
    * events_002_pos - Verify the ZED consumes events which were
      generated while it wasn't running when it is started.
      Additionally, verify that events are only processed once.
    
    As part of this change the default.cfg used by the test suite
    was changed to a default.cfg.in file.  This was needed so the
    install location of all zed scripts, not only the enabled ones,
    could be reliably determined.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6128

[33mcommit 5a6d6cf839fe547f2007912f60eac23827b4a8de[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu May 18 20:22:04 2017 -0400

    Enable xattr tests
    
    Updated the xattr_common.ksh helper functions to use the attr
    command on Linux to manipulate xattrs.  Added an xattr.cfg file
    and reworked the user/group functionality to be consist with
    the existing delegate test cases.  The intent of each test
    case was preserved.
    
    * xattr_001_pos, xattr_002_neg - Updated to verity xattr=on
      and xattr=sa sytle xattrs.
    
    * xattr_003_neg - Use user_run helper instead of su.
    
    * xattr_004_pos - Updated to work with ext2 xattrs.
    
    * xattr_007_neg - Updated to use attr instead of runat.
    
    * xattr_008_pos, xattr_009_neg8_pos, xattr_010_neg -
      Test cases disables since they aren't applicable to Linux.
    
    * xattr_011_pos - Updated to expected behavior from GNU
      versions of the tested utilities.
    
    * xattr_012_pos - Updated to use xattrtest to create many
      small xattrs instead of a single large one.
    
    * xattr_013_pos - Updated to use attr instead of runat.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6128

[33mcommit 95401cb6f7aa9ec3dd2d61335d2dcc9459c2661c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu May 18 20:21:15 2017 -0400

    Enable remaining tests
    
    Enable most of the remaining test cases which were previously
    disabled.  The required fixes are as follows:
    
    * cache_001_pos - No changes required.
    
    * cache_010_neg - Updated to use losetup under Linux.  Loopback
      cache devices are allowed, ZVOLs as cache devices are not.
      Disabled until all the builders pass reliably.
    
    * cachefile_001_pos, cachefile_002_pos, cachefile_003_pos,
      cachefile_004_pos - Set set_device_dir path in cachefile.cfg,
      updated CPATH1 and CPATH2 to reference unique files.
    
    * zfs_clone_005_pos - Wait for udev to create volumes.
    
    * zfs_mount_007_pos - Updated mount options to expected Linux names.
    
    * zfs_mount_009_neg, zfs_mount_all_001_pos - No changes required.
    
    * zfs_unmount_005_pos, zfs_unmount_009_pos, zfs_unmount_all_001_pos -
      Updated to expect -f to not unmount busy mount points under Linux.
    
    * rsend_019_pos - Observed to occasionally take a long time on both
      32-bit systems and the kmemleak builder.
    
    * zfs_written_property_001_pos - Switched sync(1) to sync_pool.
    
    * devices_001_pos, devices_002_neg - Updated create_dev_file() helper
      for Linux.
    
    * exec_002_neg.ksh - Fixed mmap_exec.c to preserve errno.  Updated
      test case to expect EPERM from Linux as described by mmap(2).
    
    * grow_pool_001_pos - Adding missing setup.ksh and cleanup.ksh
      scripts from OpenZFS.
    
    * grow_replicas_001_pos.ksh - Added missing $SLICE_* variables.
    
    * history_004_pos, history_006_neg, history_008_pos - Fixed by
      previous commits and were not enabled.  No changes required.
    
    * zfs_allow_010_pos - Added missing spaces after assorted zfs
      commands in delegate_common.kshlib.
    
    * inuse_* - Illumos dump device tests skipped.  Remaining test
      cases updated to correctly create required partitions.
    
    * large_files_001_pos - Fixed largest_file.c to accept EINVAL
      as well as EFBIG as described in write(2).
    
    * link_count_001 - Added nproc to required commands.
    
    * umountall_001 - Updated to use umount -a.
    
    * online_offline_001_* - Pull in OpenZFS change to file_trunc.c
      to make the '-c 0' option run the test in a loop.  Included
      online_offline.cfg file in all test cases.
    
    * rename_dirs_001_pos - Updated to use the rename_dir test binary,
      pkill restricted to exact matches and total runtime reduced.
    
    * slog_013_neg, write_dirs_002_pos - No changes required.
    
    * slog_013_pos.ksh - Updated to use losetup under Linux.
    
    * slog_014_pos.ksh - ZED will not be running, manually degrade
      the damaged vdev as expected.
    
    * nopwrite_varying_compression, nopwrite_volume - Forced pool
      sync with sync_pool to ensure up to date property values.
    
    * Fixed typos in ZED log messages.  Refactored zed_* helper
      functions to resolve all-syslog exit=1 errors in zedlog.
    
    * zfs_copies_005_neg, zfs_get_004_pos, zpool_add_004_pos,
      zpool_destroy_001_pos, largest_pool_001_pos, clone_001_pos.ksh,
      clone_001_pos, - Skip until layering pools on zvols is solid.
    
    * largest_pool_001_pos - Limited to 7eb pool, maximum
      supported size in 8eb-1 on Linux.
    
    * zpool_expand_001_pos, zpool_expand_003_neg - Requires
      additional support from the ZED, updated skip reason.
    
    * zfs_rollback_001_pos, zfs_rollback_002_pos - Properly cleanup
      busy mount points under Linux between test loops.
    
    * privilege_001_pos, privilege_003_pos, rollback_003_pos,
      threadsappend_001_pos - Skip with log_unsupported.
    
    * snapshot_016_pos - No changes required.
    
    * snapshot_008_pos - Increased LIMIT from 512K to 2M and added
      sync_pool to avoid false positives.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6128

[33mcommit f871ab6ea2dd9a3b9fae157ff0a7665bb269c565[m
Author: Feng Sun <loyou85@gmail.com>
Date:   Sat May 20 04:45:46 2017 +0800

    Fix LZ4_uncompress_unknownOutputSize caused panic
    
    Sync with kernel patches for lz4
    
    https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git/log/lib/lz4
    
    4a3a99 lz4: add overrun checks to lz4_uncompress_unknownoutputsize()
    d5e7ca LZ4 : fix the data abort issue
    bea2b5 lib/lz4: Pull out constant tables
    99b7e9 lz4: fix system halt at boot kernel on x86_64
    
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Feng Sun <loyou85@gmail.com>
    Closes #5975
    Closes #5973

[33mcommit bec1067d54a004cb52a4a6762bfa1d4a30300865[m
Author: Alek P <alek-p@users.noreply.github.com>
Date:   Fri May 19 12:33:11 2017 -0700

    Implemented zpool sync command
    
    This addition will enable us to sync an open TXG to the main pool
    on demand. The functionality is similar to 'sync(2)' but 'zpool sync'
    will return when data has hit the main storage instead of potentially
    just the ZIL as is the case with the 'sync(2)' cmd.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Signed-off-by: Alek Pinchuk <apinchuk@datto.com>
    Closes #6122

[33mcommit 4a283c7f77eb5065e9f03b122bf8ead4f4a1e2be[m
Author: Tony Hutter <hutter2@llnl.gov>
Date:   Fri May 19 12:30:16 2017 -0700

    Force fault a vdev with 'zpool offline -f'
    
    This patch adds a '-f' option to 'zpool offline' to fault a vdev
    instead of bringing it offline.  Unlike the OFFLINE state, the
    FAULTED state will trigger the FMA code, allowing for things like
    autoreplace and triggering the slot fault LED.  The -f faults
    persist across imports, unless they were set with the temporary
    (-t) flag.  Both persistent and temporary faults can be cleared
    with zpool clear.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Closes #6094

[33mcommit a32df59e187a6187eb96c52b93cf02e8af51f327[m
Author: Tom Caputi <tcaputi@datto.com>
Date:   Thu May 18 20:35:49 2017 -0400

    Fixed small memory leak in ereport handling
    
    One pre-check in zfs_ereport_start() was being called after
    the nvlists were being allocated. This simply corrects that
    issue.
    
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tom Caputi <tcaputi@datto.com>
    Closes #6140

[33mcommit a9f0d7dd89fd9e09ef41ca98d6ba06bbd3d6ea88[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu May 18 10:02:16 2017 -0700

    Fix large dnode send stream flag conflict
    
    Bit 21 of the send stream flags was inadvertently used for two
    different features under concurrent development.  To avoid any
    future compatibility problems the large dnode flag is being
    switched to bit 23 which is unused.
    
    The large dnode feature has only been present in pre-releases of
    ZoL and dnodesize defaults to legacy which is compatible with
    existing OpenZFS implementations.  Users with dnodesize=auto
    needing to use zfs send/recv must update ZoL on both the
    source and destination systems.
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed-by: Ned Bass <bass6@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6139

[33mcommit 331ec1a1ad8c920fd3ddd98964a155c84db852b8[m
Author: Justin Lecher <jlec@gentoo.org>
Date:   Wed May 17 01:00:16 2017 +0100

    Compatibilty with glibc-2.23
    
    In glibc-2.23 <sys/sysmacros.h> isn't automatically included in
    <sys/types.h> [1], so we need ot explicitely include it.
    
    https://sourceware.org/ml/libc-alpha/2015-11/msg00253.html
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Justin Lecher <jlec@gentoo.org>
    Closes #6132

[33mcommit 5559ba094feff560abe00afd31ab99dd1f70698c[m
Author: Boris Protopopov <boris.protopopov@actifio.com>
Date:   Wed May 10 13:51:29 2017 -0400

    Introduce zv_state_lock
    
    The lock is designed to protect internal state of zvol_state_t and
    to avoid taking spa_namespace_lock (e.g. in dmu_objset_own() code path)
    while holding zvol_stat_lock. Refactor the code accordingly.
    
    Signed-off-by: Boris Protopopov <boris.protopopov@actifio.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3484
    Closes #6065
    Closes #6134

[33mcommit 07783588bcb513a3a1f4d995b5d4685a9cfc89e5[m
Author: Boris Protopopov <boris.protopopov@actifio.com>
Date:   Thu May 11 16:40:33 2017 -0400

    Revert commit 1ee159f4
    
    Fix lock order inversion with zvol_open() as it did not account
    for use of zvols as vdevs. The latter use cases resulted in the
    lock order inversion deadlocks that involved spa_namespace_lock
    and bdev->bd_mutex.
    
    Signed-off-by: Boris Protopopov <boris.protopopov@actifio.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #6065
    Issue #6134

[33mcommit 3d6da72d183dc655a7dc8fd59f57748fc5c1806c[m
Author: Isaac Huang <he.huang@intel.com>
Date:   Fri May 12 18:28:03 2017 -0600

    Skip spurious resilver IO on raidz vdev
    
    On a raidz vdev, a block that does not span all child vdevs, excluding
    its skip sectors if any, may not be affected by a child vdev outage or
    failure. In such cases, the block does not need to be resilvered.
    However, current resilver algorithm simply resilvers all blocks on a
    degraded raidz vdev. Such spurious IO is not only wasteful, but also
    adds the risk of overwriting good data.
    
    This patch eliminates such spurious IOs.
    
    Reviewed-by: Gvozden Neskovic <neskovic@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Signed-off-by: Isaac Huang <he.huang@intel.com>
    Closes #5316

[33mcommit 8c54ddd33af92e5defc587a10914493ca85ad60c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu May 11 14:27:57 2017 -0700

    Enable additional test cases
    
    Enable additional test cases, in most cases this required a few
    minor modifications to the test scripts.  In a few cases a real
    bug was uncovered and fixed.  And in a handful of cases where pools
    are layered on pools the test case will be skipped until this is
    supported.  Details below for each test case.
    
    * zpool_add_004_pos - Skip test on Linux until adding zvols to pools
      is fully supported and deadlock free.
    
    * zpool_add_005_pos.ksh - Skip dumpadm portion of the test which isn't
      relevant for Linux.  The find_vfstab_dev, find_mnttab_dev, and
      save_dump_dev functions were updated accordingly for Linux.  Add
      O_EXCL to the in-use check to prevent the -f (force) option from
      working for mounted filesystems and improve the resulting error.
    
    * zpool_add_006_pos - Update test case such that it doesn't depend
      on nested pools.  Switch to truncate from mkfile to reduce space
      requirements and speed up the test case.
    
    * zpool_clear_001_pos - Speed up test case by filling filesystem to
      25% capacity.
    
    * zpool_create_002_pos, zpool_create_004_pos - Use sparse files for
      file vdevs in order to avoid increasing the partition size.
    
    * zpool_create_006_pos - 6ba1ce9 allows raidz+mirror configs with
      similar redundancy.  Updating the valid_args and forced_args cases.
    
    * zpool_create_008_pos - Disable overlapping partition portion.
    
    * zpool_create_011_neg - Fix to correctly create the extra partition.
      Modified zpool_vdev.c to use fstat64_blk() wrapper which includes
      the st_size even for block devices.
    
    * zpool_create_012_neg - Updated to properly find swap devices.
    
    * zpool_create_014_neg, zpool_create_015_neg - Updated to use
      swap_setup() and swap_cleanup() wrappers which do the right thing
      on Linux and Illumos.  Removed '-n' option which succeeds under
      Linux due to differences in the in-use checks.
    
    * zpool_create_016_pos.ksh - Skipped test case isn't useful.
    
    * zpool_create_020_pos - Added missing / to cleanup() function.
      Remove cache file prior to test to ensure a clean environment
      and avoid false positives.
    
    * zpool_destroy_001_pos - Removed test case which creates a pool on
      a zvol.  This is more likely to deadlock under Linux and has never
      been completely supported on any platform.
    
    * zpool_destroy_002_pos - 'zpool destroy -f' is unsupported on Linux.
      Mount point must not be busy in order to unmount them.
    
    * zfs_destroy_001_pos - Handle EBUSY error which can occur with
      volumes when racing with udev.
    
    * zpool_expand_001_pos, zpool_expand_003_neg - Skip test on Linux
      until adding zvols to pools is fully supported and deadlock free.
      The test could be modified to use loop-back devices but it would
      be preferable to use the test case as is for improved coverage.
    
    * zpool_export_004_pos - Updated test case to such that it doesn't
      depend on nested pools.  Normal file vdev under /var/tmp are fine.
    
    * zpool_import_all_001_pos - Updated to skip partition 1, which is
      known as slice 2, on Illumos.  This prevents overwriting the
      default TESTPOOL which was causing the failure.
    
    * zpool_import_002_pos, zpool_import_012_pos - No changes needed.
    
    * zpool_remove_003_pos - No changes needed
    
    * zpool_upgrade_002_pos, zpool_upgrade_004_pos - Root cause addressed
      by upstream OpenZFS commit 3b7f360.
    
    * zpool_upgrade_007_pos - Disabled in test case due to known failure.
      Opened issue https://github.com/zfsonlinux/zfs/issues/6112
    
    * zvol_misc_002_pos - Updated to to use ext2.
    
    * zvol_misc_001_neg, zvol_misc_003_neg, zvol_misc_004_pos,
      zvol_misc_005_neg, zvol_misc_006_pos - Moved to skip list, these
      test case could be updated to use Linux's crash dump facility.
    
    * zvol_swap_* - Updated to use swap_setup/swap_cleanup helpers.
      File creation switched from /tmp to /var/tmp.  Enabled minimal
      useful tests for Linux, skip test cases which aren't applicable.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: loli10K <ezomori.nozomu@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3484
    Issue #5634
    Issue #2437
    Issue #5202
    Issue #4034
    Closes #6095

[33mcommit 4747a7d3d48ee307176dbd4a70c3be42b9f10dc0[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Mon Apr 24 09:34:36 2017 -0700

    OpenZFS 8063 - verify that we do not attempt to access inactive txg
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Serapheim Dimitropoulos <serapheim@delphix.com>
    Reviewed by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    A standard practice in ZFS is to keep track of "per-txg" state. Any of
    the 3 active TXG's (open, quiescing, syncing) can have different values
    for this state. We should assert that we do not attempt to modify other
    (inactive) TXG's.
    
    Porting Notes:
    - ASSERTV added to txg_sync_waiting() for unused variable.
    
    OpenZFS-issue: https://www.illumos.org/issues/8063
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/01acb46
    Closes #6109

[33mcommit 335b251ac1a1f8ba8434450dc0f24986bc44f688[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed May 10 10:32:40 2017 -0700

    OpenZFS 8166 - zpool scrub thinks it repaired offline device
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed-by: loli10K <ezomori.nozomu@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Matthew Ahrens <mahrens@delphix.com>
    
    If we do a scrub while a leaf device is offline (via "zpool offline"),
    we will inadvertently clear the DTL (dirty time log) of the offline
    device, even though it is still damaged.  When the device comes back
    online, we will incompletely resilver it, thinking that the scrub
    repaired blocks written before the scrub was started.  The incomplete
    resilver can lead to data loss if there is a subsequent failure of a
    different leaf device.
    
    The fix is to never clear the DTL of offline devices.  Note that if a
    device is onlined while a scrub is in progress, the scrub will be
    restarted.
    
    The problem can be worked around by running "zpool scrub" after
    "zpool online".
    
    OpenZFS-issue: https://www.illumos.org/issues/8166
    OpenZFS-commit: https://github.com/openzfs/openzfs/pull/372
    Closes #5806
    Closes #6103

[33mcommit f486f58440cc6bf7e699aa2870da142a83cac04e[m
Author: Tom Caputi <tcaputi@datto.com>
Date:   Wed May 10 13:25:27 2017 -0400

    Add missing arc_free_cksum() to arc_release()
    
    The arc layer tracks checksums of its data in the arc header
    so that it can ensure that buffers haven't changed when they're
    not supposed to. This checksum is only maintained while there
    is an uncompressed buffer still attached to the header.
    Unfortunately there is a missing call to arc_free_cksum() in
    arc_release() that can trigger ASSERTs. This has not been a
    common issue because the checksums are only maintained for
    debug builds and triggering the bug requires writing a block
    (and therefore calling arc_release()) while a compressed buffer
    is still being used on a debug build. This simply corrects the
    issue.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tom Caputi <tcaputi@datto.com>
    Closes #6105

[33mcommit 2946a1a15aab874107b4425513c1bf805e730803[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed May 10 09:30:48 2017 -0700

    Linux 4.12 compat: CURRENT_TIME removed
    
    Linux 4.9 added current_time() as the preferred interface to get
    the filesystem time.  CURRENT_TIME was retired in Linux 4.12.
    
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6114

[33mcommit a3eeab2de68670a4481eab3d086982aff23b6906[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Wed May 10 01:21:09 2017 +0200

    Add property overriding (-o|-x) to 'zfs receive'
    
    This allows users to specify "-o property=value" to override and
    "-x property" to exclude properties when receiving a zfs send stream.
    Both native and user properties can be specified.
    
    This is useful when using zfs send/receive for periodic
    backup/replication because it lets users change properties such as
    canmount, mountpoint, or compression without modifying the source.
    
    References:
       https://www.illumos.org/issues/2745
       https://www.illumos.org/issues/3753
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed-by: Alek Pinchuk <apinchuk@datto.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #1350
    Closes #5349

[33mcommit 305bc4b370b20de81eaf10a1cf724374258b74d1[m
Author: Christian Schwarz <me@cschwarz.com>
Date:   Wed May 10 00:36:53 2017 +0200

    Make createtxg and guid properties public
    
    Document the existence of `createtxg` and `guid` native properties
    in man pages and zfs command output.
    
    One of the great features of ZFS is incremental replication of
    snapshots, possibly between pools on different machines.
    
    Shell scripts are commonly used to auomate this procedure. They have to
    find the most recent common snapshot between both sides and then
    perform incremental send & recv.
    Currently, scripts rely on the sorting order of `zfs list`, which
    defaults to `createtxg`, and the assumption that snapshot names on
    either side do not change.
    
    By making `createtxg` and `guid` part of the public ZFS interface,
    scripts are enabled to use
    
      a) `createtxg` to determine the logical & temporal order of snapshots
         (the creation property is not an equivalent substitute since
          multiple snapshots may be created within one second)
      b) `guid` to uniquely identify a snapshot, independent of its current
          display name
    
    This has the potential of making scripts safer and correct.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: DHE <git@dehacked.net>
    Reviewed-by: Richard Laager <rlaager@wiktel.com>
    Signed-off-by: Christian Schwarz <me@cschwarz.com>
    Closes #6102

[33mcommit 78d95eaa732f074a6351045e59cd974380ad50ab[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Wed May 10 00:22:46 2017 +0200

    Fix NULL pointer dereference in 'zfs create'
    
    A race condition between 'zpool export' and 'zfs create' can crash the
    latter: this is because we never check libzfs`zpool_open() return
    value in libzfs`zfs_create().
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #6096

[33mcommit 4e3de24b61b9116f0138d22ec687d0a759b29967[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Tue May 9 20:51:40 2017 +0200

    Fix zfs .deb package warning in prerm script
    
    Debian zfs package generated by alien doesn't call the prerm script
    (rpm's %preun) with an integer as first parameter, which results in
    the following warning:
    
       "zfs.prerm: line 2: [: remove: integer expression expected"
    
    Modify the if-condition to avoid the warning.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #6108

[33mcommit 3e2ecae01c6de6f885eca2ea78f00db2d21065ef[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Tue May 9 11:34:19 2017 -0700

    Fix coverity defects: CID 161638
    
    CID 161638: Resource leak (RESOURCE_LEAK)
    
    Ensure the string array in print_zpool_script_help
    is freed in cases when there is an error.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #6111

[33mcommit e624cd1959904735eda81f1a9a45d99848bb3503[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Tue May 9 10:38:46 2017 -0700

    Linux 4.12 compat: PF_FSTRANS was removed
    
    zfsonlinux/spl@8f87971 added __spl_pf_fstrans_check for the xfs related
    check, so we use them accordingly.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #6113

[33mcommit a0e84010c94570fd2b6c8b43da49f0cd3e1a8e09[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri May 5 10:33:40 2017 -0700

    Tag 0.7.0-rc4
    
    Fourth release candidate.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 1eab430af7828cc1f85a7c26ef37d5da88884977[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri May 5 10:17:32 2017 -0700

    Fix unused variable warning
    
    Remove the lz4_ac local variable from dmu_write_policy() to resolve
    the following unused variable warning on non-debug builds.
    
    dmu.c: In function ‘dmu_write_policy’:
    dmu.c:1892:12: warning: unused variable ‘lz4_ac’ [-Wunused-variable]
      boolean_t lz4_ac = spa_feature_is_active(os->os_spa,
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit c17486b2178fc545c50d48effd4be47d33208933[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Sat Nov 26 21:30:44 2016 +0100

    Add missing *_destroy/*_fini calls
    
    The proposed debugging enhancements in zfsonlinux/spl#587
    identified the following missing *_destroy/*_fini calls.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Closes #5428

[33mcommit 8fa5250f5d779e577406c581fc2d7fbf0baceea5[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue May 2 17:37:14 2017 -0700

    Default to zvol_request_async=0
    
    Change the default ZVOL behavior so requests are handled asynchronously.
    This behavior is functionally the same as in the zfs-0.6.4 release.
    
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #5902

[33mcommit bc17f1047a83cc8c4065e0ef84333a0d9b9d73aa[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Fri Jul 11 14:35:58 2014 -0400

    Enable Linux read-ahead for a single page on ZVOLs
    
    Linux has read-ahead logic designed to accelerate sequential workloads.
    ZFS has its own read-ahead logic called zprefetch that operates on both
    ZVOLs and datasets. Having two prefetchers active at the same time can
    cause overprefetching, which unnecessarily reduces IOPS performance on
    CoW filesystems like ZFS.
    
    Testing shows that entirely disabling the Linux prefetch results in
    a significant performance penalty for reads while commensurate benefits
    are seen in random writes. It appears that read-ahead benefits are
    inversely proportional to random write benefits, and so a single page
    of Linux-layer read-ahead appears to offer the middle ground for both
    workloads.
    
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Issue #5902

[33mcommit 5731140eaf4aaf2526a8bfdbfe250195842e79eb[m
Author: RageLtMan <rageltman [at] sempervictus>
Date:   Sat Mar 18 00:51:36 2017 -0400

    Disable write merging on ZVOLs
    
    The current ZVOL implementation does not explicitly set merge
    options on ZVOL device queues, which results in the default merge
    behavior.
    
    Explicitly set QUEUE_FLAG_NOMERGES on ZVOL queues allowing the
    ZIO pipeline to do its work.
    
    Initial benchmarks (tiotest with no O_DIRECT) show random write
    performance going up almost 3X on 8K ZVOLs, even after significant
    rewrites of the logical space allocation.
    
    Reviewed-by: Richard Yao <ryao@gentoo.org>
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: RageLtMan <rageltman@sempervictus>
    Issue #5902

[33mcommit 4cb932d95140e358426cb7ca8505ee5e66939bcc[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu May 4 14:32:43 2017 -0700

    Update rsend_014_pos and send-c_volume test cases
    
    The send-c_volume test case has been observed to occasionally
    fail on 32-bit systems.  Until this issue is fully understood
    disable this test case.
    
    The rsend_014_pos test case can occasionally fail due to an
    EBUSY during export.  This can lead to subsequent test failures.
    Resolve the issue by retrying the export on EBUSY.  Additionally,
    remove the gratuitous use of eval.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6088

[33mcommit 35b7842f6821ecbf019e64204730cc0425ecc331[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed May 3 18:27:59 2017 -0700

    Enable all zfs_destroy test cases
    
    * zfs_destroy_001_pos - Unable to reproduce the failures locally.
      Re-enabled to determine observed buildbot failure rate.
    
    * zfs_destroy_005_neg - Updated for expected Linux behavior.
      Busy mount points, even snapshots, are expected to fail.
    
    * zfs_destroy_010_pos - Resolved transient EBUSY with retry.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #5635
    Issue #5893
    Closes #6091

[33mcommit dddef7d600580ea35177299fe8394f665cc13387[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Wed May 3 18:31:05 2017 +0200

    More ashift improvements
    
    This commit allow higher ashift values (up to 16) in 'zpool create'
    
    The ashift value was previously limited to 13 (8K block) in b41c990
    because the limited number of uberblocks we could fit in the
    statically sized (128K) vdev label ring buffer could prevent the
    ability the safely roll back a pool to recover it.
    
    Since b02fe35 the largest uberblock size we support is 8K: this
    allow us to store a minimum number of 16 uberblocks in the vdev
    label, even with higher ashift values.
    
    Additionally change 'ashift' pool property behaviour: if set it will
    be used as the default hint value in subsequent vdev operations
    ('zpool add', 'attach' and 'replace'). A custom ashift value can still
    be specified from the command line, if desired.
    
    Finally, fix a bug in add-o_ashift.ksh caused by a missing variable.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #2024
    Closes #4205
    Closes #4740
    Closes #5763

[33mcommit 9d3f7b87919b7d0d869153ca72844f565cd0bf52[m
Author: Olaf Faaland <faaland1@llnl.gov>
Date:   Tue May 2 13:55:24 2017 -0700

    Write label 2,3 uberblocks when vdev expands
    
    When vdev_psize increases, the location of labels 2 and 3 changes
    because their location is relative to the end of the device.
    
    The configs for labels 2 and 3 are written during the next spa_sync()
    because the vdev is added to the dirty config list.  However, the
    uberblock rings are not re-written in their new location, leaving the
    device vulnerable to the beginning of the device being overwritten or
    damaged.
    
    This patch copies the uberblock ring from label 0 to labels 2 and 3,
    in their new locations, at the next sync after vdev_psize increases.
    
    Also, add a test zpool_expand_004_pos.ksh to confirm the uberblocks
    are copied.
    
    Reviewed-by: BearBabyLiu <liu.huang@zte.com.cn>
    Reviewed-by: Andreas Dilger <andreas.dilger@intel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>
    Closes #5108

[33mcommit e7fbeb606a18b9f04daadddc19b9c4f9a9b34841[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Tue May 2 22:43:53 2017 +0200

    Add zfs_nicebytes() to print human-readable sizes
    
    * Add zfs_nicebytes() to print human-readable sizes
    
    Some 'zfs', 'zpool' and 'zdb' output strings can be confusing to the
    user when no units are specified. This add a new zfs_nicenum_format
    "ZFS_NICENUM_BYTES" used to print bytes in their human-readable form.
    
    Additionally, update some test cases to use machine-parsable 'zfs get'.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #2414
    Closes #3185
    Closes #3594
    Closes #6032

[33mcommit 03b60eee78b0bf1125878dbad0fcffd717def61f[m
Author: Debabrata Banerjee <dbanerje@akamai.com>
Date:   Wed Mar 15 21:34:56 2017 -0400

    Allow scaling of arc in proportion to pagecache
    
    When multiple filesystems are in use, memory pressure causes arc_cache
    to collapse to a minimum. Allow arc_cache to maintain proportional size
    even when hit rates are disproportionate. We do this only via evictable
    size from the kernel shrinker, thus it's only in effect under memory
    pressure.
    
    AKAMAI: zfs: CR 3695072
    Reviewed-by: Tim Chase <tim@chase2k.com>
    Reviewed-by: Richard Yao <ryao@gentoo.org>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Debabrata Banerjee <dbanerje@akamai.com>
    Closes #6035

[33mcommit 4149bf498a3490a8ab506109e3893087f35fd23f[m
Author: Debabrata Banerjee <dbanerje@akamai.com>
Date:   Wed Mar 15 21:01:31 2017 -0400

    Correct signed operation
    
    Could return the wrong pages value
    
    AKAMAI: zfs: CR 3695072
    Reviewed-by: Tim Chase <tim@chase2k.com>
    Reviewed-by: Richard Yao <ryao@gentoo.org>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Debabrata Banerjee <dbanerje@akamai.com>
    Issue #6035

[33mcommit 44813aefad9a685be92214a331f413806974a419[m
Author: Debabrata Banerjee <dbanerje@akamai.com>
Date:   Wed Mar 15 19:31:56 2017 -0400

    Don't run the reaper if we didn't shrink the cache
    
    Calling it when nothing is evictable will cause extra kswapd cpu. Also
    if we didn't shrink it's unlikely to have memory to reap because we
    likely just called it microseconds ago. The exception is if we are in
    direct reclaim.
    
    You can see how hard this is being hit in kswapd with a light test
    workload:
    
      34.95%  [zfs]             [k] arc_kmem_reap_now
       5.40%  [spl]             [k] spl_kmem_cache_reap_now
       3.79%  [kernel]          [k] _raw_spin_lock
       2.86%  [spl]             [k] __spl_kmem_cache_generic_shrinker.isra.7
       2.70%  [kernel]          [k] shrink_slab.part.37
       1.93%  [kernel]          [k] isolate_lru_pages.isra.43
       1.55%  [kernel]          [k] __wake_up_bit
       1.20%  [kernel]          [k] super_cache_count
       1.20%  [kernel]          [k] __radix_tree_lookup
    
    With ZFS just mounted but only ext4/pagecache memory pressure
    arc_kmem_reap_now still consumes excessive CPU:
    
      12.69%  [kernel]  [k] isolate_lru_pages.isra.43
      10.76%  [kernel]  [k] free_pcppages_bulk
       7.98%  [kernel]  [k] drop_buffers
       7.31%  [kernel]  [k] shrink_page_list
       6.44%  [zfs]     [k] arc_kmem_reap_now
       4.19%  [kernel]  [k] free_hot_cold_page
       4.00%  [kernel]  [k] __slab_free
       3.95%  [kernel]  [k] __isolate_lru_page
       3.09%  [kernel]  [k] __radix_tree_lookup
    
    Same pagecache only workload as above with this patch series:
    
      11.58%  [kernel]  [k] isolate_lru_pages.isra.43
      11.20%  [kernel]  [k] drop_buffers
       9.67%  [kernel]  [k] free_pcppages_bulk
       8.44%  [kernel]  [k] shrink_page_list
       4.86%  [kernel]  [k] __isolate_lru_page
       4.43%  [kernel]  [k] free_hot_cold_page
       4.00%  [kernel]  [k] __slab_free
       3.44%  [kernel]  [k] __radix_tree_lookup
    
       (arc_kmem_reap_now has 0 samples in perf)
    
    AKAMAI: zfs: CR 3695042
    Reviewed-by: Tim Chase <tim@chase2k.com>
    Reviewed-by: Richard Yao <ryao@gentoo.org>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Debabrata Banerjee <dbanerje@akamai.com>
    Issue #6035

[33mcommit 1a31dcf53cd71c3c71db343fc4c9ab1dfa326d3f[m
Author: Debabrata Banerjee <dbanerje@akamai.com>
Date:   Wed Mar 15 19:30:29 2017 -0400

    Only wakeup waiters if we've actually done work
    
    AKAMAI: zfs: CR 3695072
    Reviewed-by: Tim Chase <tim@chase2k.com>
    Reviewed-by: Richard Yao <ryao@gentoo.org>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Debabrata Banerjee <dbanerje@akamai.com>
    Issue #6035

[33mcommit 2e91c2fb1a47f98c2dc06725c284db16d852a618[m
Author: Debabrata Banerjee <dbanerje@akamai.com>
Date:   Wed Mar 15 18:50:32 2017 -0400

    Do not stop kernel shrinker on lock contention
    
    Lock contention, by itself, shouldn't indicate a stop condition to the
    kernel's slab shrinker. Doing so can cause stalls when the kernel is
    trying to free large parts of the cache such as is done by drop_caches
    
    Also, perhaps arc_reclaim_lock should be a spinlock, and this code
    eliminated.
    
    AKAMAI: zfs: CR 3593801
    Reviewed-by: Tim Chase <tim@chase2k.com>
    Reviewed-by: Richard Yao <ryao@gentoo.org>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Debabrata Banerjee <dbanerje@akamai.com>
    Issue #6035

[33mcommit b855550c336c04b2bde85d9ffbd893b196fdd7b5[m
Author: Debabrata Banerjee <dbanerje@akamai.com>
Date:   Wed Mar 15 18:46:46 2017 -0400

    Stop double reclaiming or not reclaiming at all
    
    Move arcstat_need_free increment from all direct calls to when
    arc_reclaim_lock is busy and we exit wihout doing anything. Data will
    be reclaimed in reclaim thread. The previous location meant that we
    both reclaim the memory in this thread, and also schedule the same
    amount of memory for reclaim in arc_reclaim, effectively doubling the
    requested reclaim.
    
    AKAMAI: zfs: CR 3695072
    Reviewed-by: Tim Chase <tim@chase2k.com>
    Reviewed-by: Richard Yao <ryao@gentoo.org>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Debabrata Banerjee <dbanerje@akamai.com>
    Issue #6035

[33mcommit 30fffb90218fd44466288d3a3d359271504c4f76[m
Author: Debabrata Banerjee <dbanerje@akamai.com>
Date:   Wed Mar 15 18:39:40 2017 -0400

    Make arc_need_free updates atomic
    
    Ensures proper accounting of bytes we requested to free
    
    AKAMAI: zfs: CR 3695072
    Reviewed-by: Tim Chase <tim@chase2k.com>
    Reviewed-by: Richard Yao <ryao@gentoo.org>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Debabrata Banerjee <dbanerje@akamai.com>
    Issue #6035

[33mcommit 9b50146dc444239112610284a0872310701289c4[m
Author: Debabrata Banerjee <dbanerje@akamai.com>
Date:   Sun Feb 26 20:32:13 2017 -0500

    Don't report ghost buffers as evictable mem
    
    Ghost meta/data buffers are not actually allocated
    
    AKAMAI: zfs: CR 3695072
    Reviewed-by: Tim Chase <tim@chase2k.com>
    Reviewed-by: Richard Yao <ryao@gentoo.org>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Debabrata Banerjee <dbanerje@akamai.com>
    Issue #6035

[33mcommit 2b91b5119c16539a074ae08e0998e2b527a976b4[m
Author: jxiong <jinshan.xiong@gmail.com>
Date:   Tue May 2 10:06:18 2017 -0700

    minor improvement to abd_free_pages()
    
    It doesn't need to have a loop to free page in a single scatterlist
    entry because it should be single or compound page. The pages can be
    freed in one invocation to __free_pages() for both cases.
    
    Reviewed-by: Gvozden Neskovic <neskovic@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Jinshan Xiong <jinshan.xiong@gmail.com>
    Closes #6057

[33mcommit 24fa20340dda244270a1382bfdb8d94f579ae7df[m
Author: jxiong <jinshan.xiong@gmail.com>
Date:   Tue May 2 10:04:30 2017 -0700

    Guarantee PAGESIZE alignment for large zio buffers
    
    In current implementation, only zio buffers in 16KB and bigger are
    guaranteed PAGESIZE alignment. This breaks Lustre since it assumes
    that 'arc_buf_t::b_data' must be page aligned when zio buffers are
    greater than or equal to PAGESIZE.
    
    This patch will make the zio buffers to be PAGESIZE aligned when
    the sizes are not less than PAGESIZE.
    
    This change may cause a little bit memory waste but that should be
    fine because after ABD is introduced, zio buffers are used to hold
    data temporarily and live in memory for a short while.
    
    Reviewed-by: Don Brady <don.brady@intel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Jinshan Xiong <jinshan.xiong@gmail.com>
    Signed-off-by: Jinshan Xiong <jinshan.xiong@intel.com>
    Closes #6084

[33mcommit 7dae2c81e7b2e68a596c5b431444be0fae308156[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue May 2 09:46:18 2017 -0700

    Linux 4.12 compat: super_setup_bdi_name()
    
    All filesystems were converted to dynamically allocated BDIs.  The
    destruction of backing_dev_info structures is handled as part of
    super block destruction.  Refactor the code to abstract away the
    details of creating and destroying a BDI.
    
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6089

[33mcommit 153b2285545509c082be56dbf3ba5041de5d6e48[m
Author: Yuri Pankov <yuri.pankov@nexenta.com>
Date:   Wed Apr 26 14:55:10 2017 -0400

    OpenZFS 7786 - zfs`vdev_online() needs better notification about state changes
    
    Authored by: Yuri Pankov <yuri.pankov@nexenta.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Albert Lee <trisk@forkgnu.org>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: bunder2015 <omfgbunder@gmail.com>
    
    OpenZFS-issue: https://www.illumos.org/issues/7786
    OpenZFS-commit: http://github.com/openzfs/openzfs/commit/db8498f
    Closes #6074

[33mcommit e99932f7dec6efeb006e225e0bf0901c30345cac[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon May 1 13:01:39 2017 -0700

    Limit zfs_dirty_data_max_max to 4G
    
    Reinstate default 4G zfs_dirty_data_max_max limit.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #6072
    Closes #6081

[33mcommit 692e55b8fea00a0d0bd46188d68031292f04e4a8[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Wed Feb 22 16:08:04 2017 -0800

    Reinstate zvol_taskq to fix aio on zvol
    
    Commit 37f9dac removed the zvol_taskq for processing zvol requests.
    This was removed as part of switching to make_request_fn and was
    motivated by a concern at the time over dispatch latency.
    
    However, this also made all bio request synchronous, and caused
    serious performance issues as the bio submitter would wait for
    every bio it submitted, effectively making the IO depth 1.
    
    This patch reinstate zvol_taskq, and to make sure overlapped I/Os
    are ordered properly, we take range lock in zvol_request, and pass
    it along with bio to the I/O functions zvol_{write,discard,read}.
    
    In order to facilitate benchmarks a zvol_request_sync module
    option was added to switch between sync and async request handling.
    For the moment, the default behavior is synchronous but this is
    likely to change pending additional testing.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #5824

[33mcommit e815485fe9e1716d92e0e0e1e6e4ce1b95d3bb00[m
Author: Tim Chase <tim@chase2k.com>
Date:   Mon Apr 24 23:01:04 2017 -0500

    Update documentation for zfs_vdev_queue_depth_pct
    
    It was documented as being related to zfs_vdev_async_max_active
    when it is actually related to zfs_vdev_async_write_max_active.
    Also, expand the documentation to describe the allocation throttle
    which was introduced as part of OpenZFS 7090 in 3dfb57a.
    
    Reviewed-by: Richard Yao <ryao@gentoo.org>
    Reviewed-by: Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Closes #6064

[33mcommit a7004725d0ad52fa005c29f68ce55273f11d95ac[m
Author: Dan Kimmel <dan.kimmel@delphix.com>
Date:   Tue Apr 11 21:56:54 2017 +0000

    OpenZFS 7252 - compressed zfs send / receive
    
    OpenZFS 7252 - compressed zfs send / receive
    OpenZFS 7628 - create long versions of ZFS send / receive options
    
    Authored by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: John Kennedy <john.kennedy@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Reviewed by: Sebastien Roy <sebastien.roy@delphix.com>
    Reviewed by: David Quigley <dpquigl@davequigley.com>
    Reviewed by: Thomas Caputi <tcaputi@datto.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: David Quigley <dpquigl@davequigley.com>
    Reviewed-by: loli10K <ezomori.nozomu@gmail.com>
    Ported-by: bunder2015 <omfgbunder@gmail.com>
    Ported-by: Don Brady <don.brady@intel.com>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    Porting Notes:
    - Most of 7252 was already picked up during ABD work.  This
      commit represents the gap from the final commit to openzfs.
    - Fixed split_large_blocks check in do_dump()
    - An alternate version of the write_compressible() function was
      implemented for Linux which does not depend on fio.  The behavior
      of fio differs significantly based on the exact version.
    - mkholes was replaced with truncate for Linux.
    
    OpenZFS-issue: https://www.illumos.org/issues/7252
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/5602294
    Closes #6067

[33mcommit 7a25f0891eef4adbe00dd03e26b6128dc99e170d[m
Author: wli5 <weigang.li@intel.com>
Date:   Wed Apr 26 08:41:58 2017 +0800

    Change U16 to U32 due to atomic_inc_32_nv
    
    After run a long time with QAT compression, the variable "inst_num"
    is overflow by "atomic_inc_32_nv", which causes its neighbor
    variable overwritten. Change its definition from U16 to U32.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Weigang Li <weigang.li@intel.com>
    Closes #6051

[33mcommit 603a1784792f61e79f8b53d707a46d99cfc927e6[m
Author: bunder2015 <omfgbunder@gmail.com>
Date:   Mon Apr 24 13:56:44 2017 -0400

    Fix typo in zfs-module-parameters man page
    
    Fix typo in zfs-module-parameters man page
    
    Reviewed-by: Richard Laager <rlaager@wiktel.com>
    Reviewed-by: Mike McQuaid <mike@mikemcquaid.com>
    Reviewed-by: Paul Dagnelie <pcd@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Gvozden Neskovic <neskovic@gmail.com>
    Reviewed-by: Neal Gompa <ngompa13@gmail.com>
    Reviewed-by: Jason Zaman <jason@perfinion.com>
    Reviewed-by: Ned Bass <bass6@llnl.gov>
    Reviewed-by: Jorgen Lundman <lundman@lundman.net>
    Reviewed-by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed-by: Hajo Möller <dasjoe@gmail.com>
    Reviewed-by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Reviewed-by: Richard Yao <ryao@gentoo.org>
    Reviewed-by: Tim Chase <tim@chase2k.com>
    Reviewed-by: DHE <git@dehacked.net>
    Reviewed-by: Matthew Thode <prometheanfire@gentoo.org>
    Reviewed-by: Thomas Caputi <tcaputi@datto.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: kernelOfTruth <kerneloftruth@gmail.com>
    Reviewed-by: Kash Pande <kash@tripleback.net>
    Reviewed-by: ilovezfs <ilovezfs@icloud.com>
    Reviewed-by: @jwittlincohen
    Reviewed-by: Jack Draak <jackdraak@gmail.com>
    Reviewed-by: @ptx0
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: @Kokokokoka
    Reviewed-by: @JCount <JCount@hush.ai>
    Signed-off-by: bunder2015 <omfgbunder@gmail.com>
    Closes #6054

[33mcommit a00433837236507e6ce90c22bf09e6699deef991[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Thu Apr 13 14:35:00 2017 -0700

    OpenZFS 8025 - dbuf_read() creates unnecessary zio_root() for bonus buf
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Reviewed by: Prashanth Sreenivasa <pks@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    dbuf_read() creates a zio_root() to track and wait for all the zio's
    that may happen as part of this call. However, if the blkptr_t for
    this buffer is NULL or a hole, we will not create any more zio's, so
    this zio_root() is unnecessary. This is always the case when calling
    dbuf_read() on a bonus buffer, because it has no blkptr (it's part of
    the containing dnode). For workloads that read a lot of bonus buffers
    (e.g. file creation and removal), creating and destroying these
    unnecessary zio's can decrease performance by around 3%.
    
    The fix is to only create/destroy the zio_root() in dbuf_read() if the
    blkptr is not NULL and not a hole.
    
    Porting Notes:
    - The error handling for when dbuf_read_impl() fails which was
      originally added in commit 5f6d0b6f5 has been preserved.
    
    OpenZFS-issue: https://www.illumos.org/issues/8025
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/8ec5c7c
    Closes #6048

[33mcommit 321204bec61042d7785e1aa3c3362529e8e8373b[m
Author: DeHackEd <DeHackEd@users.noreply.github.com>
Date:   Mon Apr 24 13:34:37 2017 -0400

    Typo in zfs-module-parameters(5)
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: DHE <git@dehacked.net>
    Closes #6061

[33mcommit 5034557bdd5f770ce67143600a98fad3114ff3bd[m
Author: DeHackEd <DeHackEd@users.noreply.github.com>
Date:   Mon Apr 24 13:33:28 2017 -0400

    Fix 'zpool iostat -v' cache and log output
    
    Fixes formatting errors from commit d6418de057
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: loli10K <ezomori.nozomu@gmail.com>
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Signed-off-by: DHE <git@dehacked.net>
    Closes #6060

[33mcommit e102363a663802082775edf2460d4af7e7fd6e47[m
Author: Don Brady <don.brady@intel.com>
Date:   Mon Apr 24 11:31:45 2017 -0600

    Fixed zdb -e regression for active cacheless pools
    
    zdb -e for active cache-less pools fails:
    
    $ sudo zpool create -o cachefile=none basic mirror sdk sdl
    $ sudo zdb -e -b basic
    zdb: can't open 'basic': No such file or directory
    
    This is a recent regression introduce by commit c30d8de.
    
    Reviewed-by: Richard Yao <ryao@gentoo.org>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Don Brady <don.brady@intel.com>
    Closes #6059

[33mcommit 6e03ec4fa26110dcdf817401a375399f3432ae21[m
Author: dbavatar <dbavatar@gmail.com>
Date:   Mon Apr 24 12:38:31 2017 -0400

    Fix lseek result when dnode is dirty
    
    Fixup commit 66aca24.  We should have equivalent return
    values as generic_file_llseek() and advance to end of file.
    
    Reviewed-by: Richard Yao <ryao@gentoo.org>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Tested-by: bunder2015 <omfgbunder@gmail.com>
    Signed-off-by: Debabrata Banerjee <dbanerje@akamai.com>
    Closes #6050
    Closes #6053

[33mcommit b717b11cb0267a024ece6dc424b6575c685196fc[m
Author: Tony Hutter <hutter2@llnl.gov>
Date:   Mon Apr 24 09:31:39 2017 -0700

    Fix shellcheck warning in pre-baked script
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Closes #6055

[33mcommit 0091d66f4ebfeb83f70212ab92a4d5a8e4a9c4dc[m
Author: Olaf Faaland <faaland1@llnl.gov>
Date:   Fri Apr 21 14:26:43 2017 -0700

    Correct lock ASSERTs in vdev_label_read/write
    
    The existing assertions in vdev_label_read() and vdev_label_write(),
    testing which config locks are held, are incorrect. The assertions
    test for locks which exceed what is required for safety.
    
    Both vdev_label_{read,write}() are changed to assert SCL_STATE is held
    as RW_READER or RW_WRITER. This is safe because:
    
    Changes to the vdev tree occur under SCL_ALL as RW_WRITER, via
    spa_vdev_enter() and spa_vdev_exit().
    
    Changes to vdev state occur under SCL_STATE_ALL as RW_WRITER, via
    spa_vdev_state_enter() and spa_vdev_state_exit().
    
    Therefore, the new assertions guarantee that the vdev cannot change
    out from under a zio, and I/O to a specified leaf vdev's label is
    safe.
    
    Furthermore, this is consistent with the SPA locking discussion in
    spa_misc.c, "For any zio operation that takes an explicit vdev_t
    argument ... zio_read_phys(), or zio_write_phys() ... SCL_STATE as
    reader suffices."
    
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>
    Closes #5983

[33mcommit d6418de057ecb71fb4cdc1b0a89d5265d13d121a[m
Author: Tony Hutter <hutter2@llnl.gov>
Date:   Fri Apr 21 09:27:04 2017 -0700

    Prebaked scripts for zpool status/iostat -c
    
    This patch updates the "zpool status/iostat -c" commands to only run
    "pre-baked" scripts from the /etc/zfs/zpool.d directory (or wherever
    you install to).  The scripts can only be run from -c as an unprivileged
    user (unless the ZPOOL_SCRIPTS_AS_ROOT environment var is
    set by root).  This was done to encourage scripts to be written is such
    a way that normal users can use them, and to be cautious.  If your
    script needs to run a privileged command, consider adding the
    appropriate line in /etc/sudoers.  See zpool(8) for an example of how
    to do this.
    
    The patch also allows the scripts to output custom column names.  If
    the script outputs a line like:
    
    name=value
    
    then "name" is used for the column name, and "value" is its value.
    Multiple columns can be specified by outputting multiple lines.  Column
    names and values can have spaces.  If the value is empty, a dash (-) is
    printed instead.
    
    After all the "name=value" lines are read (if any), zpool will take the
    next the next line of output (if any) and print it without a column
    header.  After that, no more lines will be processed. This can be
    useful for printing errors.
    
    Lastly, this patch also disables the -c option with the latency and
    request size histograms, since it produced awkward output and made the
    code harder to maintain.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Closes #5852

[33mcommit 038091fd4f8d24f308708987192065e55574bbe9[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Thu Apr 20 21:12:50 2017 +0200

    Documentation fixes for zfs(8) and 'zfs' binary
    
    * bookmarks are not supported when sending all intermediary snaps (-I)
    * add missing compressed (-c) option to the 'zfs' help and manpage
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed by: Richard Laager <rlaager@wiktel.com>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #6028

[33mcommit 2a152383a2bc54d43a7b478bd3c868b7165f2dca[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Thu Apr 20 12:10:55 2017 -0700

    vdev_id: fix failure due to multipath -l bug
    
    Udev may fail to create the expected symbolic links in
    /dev/disk/by-vdev on systems with the
    device-mapper-multipath-0.4.9-100.el6 package installed. This affects
    RHEL 6.9 and possibly other downstream distributions.
    
    That version of the multipath command may incorrectly list a drive
    state as "unkown" instead of "running". The issue was introduced
    in the patch for https://bugzilla.redhat.com/show_bug.cgi?id=1401769
    
    The vdev_id udev helper uses the state reported by "multipath -l" to
    detect an online component disk of a multipath device in order to
    resolve its physical slot and enclosure. Changing the command
    invocation to "multipath -ll" works around the above issue by causing
    multipath to consult additional sources of information to determine
    the drive state.
    
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Closes #6039

[33mcommit 587e228a6fcc03aa1135fda368666841dcb0e4c8[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Thu Apr 20 21:09:40 2017 +0200

    Allow bookmark short name in 'zfs bookmark'
    
    This lets users create a bookmark from the command line by its name
    only, without the need to specify the dataset path which is extacted
    from the snapshot parameter.
    
    These commands are now equivalent:
    
       zfs bookmark poolname/fs@snap poolname/fs#bookmark
       zfs bookmark @snap poolname/fs#bookmark
       zfs bookmark poolname/fs@snap \#bookmark
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #3665
    Closes #6027

[33mcommit 3e67c38c3457989fc212bea8361adf9f38a51452[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Thu Apr 20 23:05:39 2017 +0400

    zfs_receive_010_pos: change dd arguments
    
    The  `dd` command as written will not create a hole in the file.
    Additionally, the `stride` argument isn't understood by `dd` so
    it's replaced with `seek` which isn't equivilant but will result in
    a single whole which is sufficient for the test case.  Finally,
    `conv=notrunc` is added to avoid truncating the file.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: George Melikov <mail@gmelikov.ru>
    Closes #6023

[33mcommit ad7e908ad52b96edf52167670b970483c3c2b95a[m
Author: Tim Crawford <crawfxrd@users.noreply.github.com>
Date:   Wed Apr 19 19:36:32 2017 -0400

    Fix leak in send_iterate_fs
    
    Fix a leak when generating a replication stream of a cloned dataset.
    
    Reviewed-by: Matt Ahrens <mahrens@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Tim Crawford <tcrawford@datto.com>
    Closes #6034

[33mcommit 066753103feac707b1b6b0e0032a0ca9b0f764ea[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Thu Apr 13 14:28:46 2017 -0700

    OpenZFS 6392 - zdb: introduce -V for verbatim import
    
    Authored by: Richard Yao <ryao@gentoo.org>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: Yuri Pankov <yuri.pankov@gmail.com>
    Reviewed by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Reviewed by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    Porting Notes:
      This was already implemented in ZFS on Linux. This patch
      is to resolved the deltas present in our version.
    
    OpenZFS-issue: https://www.illumos.org/issues/6392
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/9bb97de
    Closes #6020

[33mcommit f995e5ec43aa25c3e131e431606d141e121786f0[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Tue Apr 18 09:45:45 2017 -0700

    Clean up correctly in zpool_scrub_004_pos
    
    Ensure `zinject -c` all gets called whenever
    zpool_scrub_004_pos exits.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Issue #5444
    Closes #6021

[33mcommit 6faad211e348e565a2725278cf5edb7fec7eaf4b[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Tue Apr 18 20:44:17 2017 +0400

    zfstest: add dmesg command to $PATH
    
    Error example in `zfs_list_007_pos`:
    `sudo: dmesg: command not found`
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: George Melikov <mail@gmelikov.ru>
    Closes #6024

[33mcommit 06226b5936eefa16372cc370c584f4287bbc58c4[m
Author: DHE <git@dehacked.net>
Date:   Sat Mar 25 22:36:28 2017 -0400

    Increase zfs_vdev_async_write_min_active to 2
    
    Resilver operations frequently cause only a small amount of dirty data
    to be written to disk at a time, resulting in the IO scheduler to only
    issue 1 write at a time to the resilvering disk. When it is rotational
    media the drive will often travel past the next sector to be written
    before receiving a write command from ZFS, significantly delaying the
    write of the next sector.
    
    Raise zfs_vdev_async_write_min_active so that drives are kept fed
    during resilvering.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: DHE <git@dehacked.net>
    Issue #4825
    Closes #5926

[33mcommit f6d4ce8e34e8b051ccc8823604b53b5b27ba6407[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Thu Apr 13 14:38:16 2017 -0700

    OpenZFS 8061 - sa_find_idx_tab can be declared more type-safely
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Chris Williamson <chris.williamson@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    sa_find_idx_tab() is declared as taking and returning "void *" parameters.
    These can be declared to be the specific types.
    
    OpenZFS-issue: https://www.illumos.org/issues/8061
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/4e64aff
    Closes #6017

[33mcommit a5c3a1efaf8a47b0988a27ae429c4b28467abae3[m
Author: Alan Somers <asomers@gmail.com>
Date:   Thu Apr 13 14:22:32 2017 -0700

    OpenZFS 7900 - zdb shouldn't print the path of a znode at verbosity < 5
    
    Authored by: Alan Somers <asomers@gmail.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    There are two reasons:
    1) Finding a znode's path is slower than printing any other znode
       information at verbosity < 5.
    2) On a corrupted pool like the one mentioned below, zdb will crash when it
       tries to determine the znode's path. But with this patch, zdb can still
       extract useful information from such pools.
    
    OpenZFS-issue: https://www.illumos.org/issues/7900
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/2b0dee1
    Closes #6016

[33mcommit 87a275d97aa5b7bb47c0601c8b005e8ae85be2f7[m
Author: Andriy Gapon <avg@FreeBSD.org>
Date:   Thu Apr 13 14:32:08 2017 -0700

    OpenZFS 6101 - attempt to lzc_create() a filesystem under a volume results in a panic
    
    Authored by: Andriy Gapon <avg@FreeBSD.org>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    When querying ZPL properties verify that the objset is of type
    DMU_OST_ZFS.
    
    OpenZFS-issue: https://www.illumos.org/issues/6101
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/ce2243a
    Closes #6015

[33mcommit 31b6bc74b91ba659689dab1d316d72af27625e4d[m
Author: Andriy Gapon <avg@FreeBSD.org>
Date:   Fri Apr 14 01:42:15 2017 -0400

    OpenZFS 8026 - retire zfs_throttle_delay and zfs_throttle_resolution
    
    Authored by: Andriy Gapon <avg@FreeBSD.org>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Serapheim Dimitropoulos <serapheim@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/8026
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/9b33e07
    Closes #6014

[33mcommit 66aca24730adfb2e3875e5148a03dd1fb435d438[m
Author: Debabrata Banerjee <dbanerje@akamai.com>
Date:   Fri Mar 24 17:28:38 2017 -0400

    SEEK_HOLE should not block on txg_wait_synced()
    
    Force flushing of txg's can be painfully slow when competing for disk
    IO, since this is a process meant to execute asynchronously. Optimize
    this path via allowing data/hole seeking if the file is clean, but if
    dirty fall back to old logic. This is a compromise to disabling the
    feature entirely.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Debabrata Banerjee <dbanerje@akamai.com>
    Closes #4306
    Closes #5962

[33mcommit a44e7faa6c63998a4c058901a5c587706abe56ab[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Apr 13 09:40:56 2017 -0700

    OpenZFS 6410 - teach zdb to perform object lookups by path
    
    Authored by: Yuri Pankov <yuri.pankov@nexenta.com>
    Reviewed by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Will Andrews <will@freebsd.org>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    Porting Notes:
    - Replaced zdb.8 with upstream mdoc zdb.1m version.  Updated to
      include Linux specific features: -V verbatium imports and
      improved label printing (-u, and -l).
    - Minor changes to `zdb -h` output to honor 80 character limit.
    
    OpenZFS-issue: https://www.illumos.org/issues/6410
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/ed61ec1
    Closes #6006

[33mcommit e550644f0cdd5c3f312e8fc92846b8b1fc4290f2[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Apr 13 09:40:00 2017 -0700

    OpenZFS 5120 - zfs should allow large block/gzip/raidz boot pool (loader project)
    
    Authored by: Toomas Soome <tsoome@me.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Yuri Pankov <yuri.pankov@nexenta.com>
    Reviewed by: Andrew Stormont <andyjstormont@gmail.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Don Brady <don.brady@intel.com>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    Porting Notes:
    - grub-2.02-beta2-422-gcad5cc0 includes support for large blocks.
    - Commit 8aab121 allowed GZIP[1-9].
    - Grub allows pools with multiple top-level vdevs.
    
    OpenZFS-issue: https://www.illumos.org/issues/5120
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/c8811bd
    Closes #6007

[33mcommit a167aa7cd45b045047a75c07e06f3697bed8440c[m
Author: Giuseppe Di Natale <dinatale2@llnl.gov>
Date:   Wed Apr 12 15:49:31 2017 -0700

    Invalidate cache during a zpool labelclear
    
    Be sure to invalidate a vdev's cache before performing
    a zpool labelclear. There are cases where the cache is
    stale because we did some operation that bypassed it,
    and since we are doing an open with only O_RDWR, we
    should invalidate it to be safe.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #6009

[33mcommit 00481e7dad1d5608ae244eb053517e2c36d9a6de[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Apr 12 13:36:48 2017 -0700

    OpenZFS 7503 - zfs-test should tail ::zfs_dbgmsg on test failure
    
    Authored by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Reviewed by: John Kennedy <john.kennedy@delphix.com>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Approved by: Gordon Ross <gordon.w.ross@gmail.com>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    Porting Notes:
    - Enable internal log for DEBUG builds and in zfs-tests.sh.
    - callbacks/zfs_dbgmsg.ksh - Dump interal log via kstat.
    - callbacks/zfs_dmesg.ksh - Dump dmesg log.
    - default.cfg - 'Test Suite Specific Commands' dropped.
    
    OpenZFS-issue: https://www.illumos.org/issues/7503
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/55a1300
    Closes #6002

[33mcommit 120ff39a75ad52efc359308a5e128a58998dd2f3[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Sat Apr 8 12:51:04 2017 -0400

    Fix header inclusions for standards conformance
    
    musl's sys/errno.h is literally:
    
    /#warning redirecting incorrect #include <sys/errno.h> to <errno.h>
    /#include <errno.h>
    
    It does the same for sys/{poll,signal}.h. This is rather noisy when
    building ZoL against musl. musl is also correct in pointing out that the
    correct headers are outside of sys/ according to the single unix
    specification:
    
    http://pubs.opengroup.org/onlinepubs/7908799/xsh/errno.h.html
    http://pubs.opengroup.org/onlinepubs/7908799/xsh/poll.h.html
    http://pubs.opengroup.org/onlinepubs/7908799/xsh/signal.h.html
    
    Lets implement our own sys/* versions of these headers to redirect to
    the proper userland ones when building in userspace. That will silence
    the warning.
    
    There are also some instances where we include incorrectly from sys/ or
    from outside of sys/ in userspace only code. In these instances, lets
    just fix the includes directly.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: loli10K <ezomori.nozomu@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Closes #5993

[33mcommit 281f1fa30ac3558d0e5e1573bdb9113291815bcd[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Sun Apr 9 15:00:03 2017 -0400

    Fix `zpool iostat -T d 1` on musl
    
    When building on Gentoo against musl, GCC complains:
    
    timestamp.c: In function ‘print_timestamp’:
    timestamp.c:32:19: warning: passing argument 1 of ‘nl_langinfo’ makes
    integer from pointer without a cast
     #define _DATE_FMT "%+"
                       ^
    timestamp.c:47:21: note: in expansion of macro ‘_DATE_FMT’
       fmt = nl_langinfo(_DATE_FMT);
                         ^
    The error was wrapped to meet comment style requirements.
    
    This code is used by `zpool iostat -T d 1` to print a date and upon
    testing it, I see no date printed. Lets use D_T_FMT so that something
    gets printed and if D_T_FMT is not avaliable, then we can fall back to
    "%+".
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: loli10K <ezomori.nozomu@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Closes #5993

[33mcommit bc482ac2ed80d77cf0186ccf670e02545f4ba883[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Sat Apr 8 13:14:14 2017 -0400

    Add missing includes to zed_log.c
    
    GCC 4.9.4 complains about implicit function declarations when building
    against musl on Gentoo.
    
    zed_log.c: In function ‘zed_log_pipe_open’:
    zed_log.c:69:7: warning: implicit declaration of function ‘getpid’
           (int)getpid());
           ^
    zed_log.c:71:2: warning: implicit declaration of function ‘pipe’
      if (pipe(_ctx.pipe_fd) < 0)
      ^
    zed_log.c: In function ‘zed_log_pipe_close_reads’:
    zed_log.c:90:2: warning: implicit declaration of function ‘close’
      if (close(_ctx.pipe_fd[0]) < 0)
      ^
    zed_log.c: In function ‘zed_log_pipe_wait’:
    zed_log.c:141:3: warning: implicit declaration of function ‘read’
       n = read(_ctx.pipe_fd[0], &c, sizeof (c));
    
    The [-Wimplicit-function-declaration] at the end of each warning has
    been removed to meet comment style requirements.
    
    The man pages say to include <sys/types.h> and <unistd.h>. Doing that
    silences the warnings.
    
    Reviewed-by: loli10K <ezomori.nozomu@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Closes #5993

[33mcommit dd49132a1d727c7363bbad82f390c06c40d140c6[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Apr 12 08:47:42 2017 -0700

    OpenZFS 7535 - need test for resumed send of top most filesystem
    
    Authored by: John Kennedy <john.kennedy@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    Porting Notes:
    - zfs_share_001_pos.ksh - Older versions of exportfs will match
      multiple exports that share a common prefix.  Reorder the 'fs'
      list so unshares occur from most to least unique.
    - zfs_share_005_pos.ksh - Enabled and updated for Linux.
    
    OpenZFS-issue: https://www.illumos.org/issues/7535
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/ac89d1e
    Closes #5979

[33mcommit 17b43f96f9cfeb0deef7350cc016a8e28c500867[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Tue Apr 11 18:37:45 2017 -0700

    Skip rate limiting events in zfs_ereport_post
    
    In zfs_ereport_post, if an event is a rate limiting
    event, immediately return before any processing is done.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #5998

[33mcommit dbb38f660509073f43284c6c745a4449ffd46385[m
Author: Yuri Pankov <yuri.pankov@nexenta.com>
Date:   Fri Jan 13 09:25:15 2017 -0800

    OpenZFS 6865 - want zfs-tests cases for zpool labelclear command
    
    Authored by: Yuri Pankov <yuri.pankov@nexenta.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: John Kennedy <john.kennedy@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: loli10K <ezomori.nozomu@gmail.com>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    Porting Notes:
    - Updated 'zpool labelclear' and 'zdb -l' such that they attempt
      to find a vdev given solely its short name.  This behavior is
      consistent with the upstream OpenZFS code and the test cases
      depend on it.  The actual implementation differs slightly due
      to device naming conventions on Linux.
    - auto_online_001_pos, auto_replace_001_pos and add-o_ashift
      test cases updated to expect failure when no label exists.
    - read_efi_label() and zpool_label_disk_check() are read-only
      operations and should use O_RDONLY at open time to enforce this.
    - zpool_label_disk() and zpool_relabel_disk() write the partition
      information using O_DIRECT an fsync() and page cache invalidation
      to ensure a consistent view of the device.
    - dump_label() in zdb should invalidate the page cache in order
      to get the authoritative label from disk.
    
    OpenZFS-issue: https://www.illumos.org/issues/6865
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/c95076c
    Closes #5981

[33mcommit 047187c1bd4a893e7a89e8795fa8f4ecc3eb0732[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Tue Apr 11 00:28:21 2017 +0200

    Fix size inflation in spa_get_worst_case_asize()
    
    When we try assign a new transaction to a TXG we must know beforehand
    if there is sufficient free space on disk. This is to decide,
    in dmu_tx_assign(), if we should reject the TX with ENOSPC.
    
    We rely on spa_get_worst_case_asize() to inflate the size of our
    logical writes by a factor of spa_asize_inflation which is
    calculated as:
    
       (VDEV_RAIDZ_MAXPARITY + 1) * SPA_DVAS_PER_BP * 2 == 24
    
    The problem with the current implementation is that we don't take
    into account what happens with very small writes on VDEVs with large
    physical block sizes.
    Consider the case of writes to a dataset with recordsize=512,
    copies=3 on a VDEV with ashift=13 (usually SSD with 8K block size):
    every logical IO will end up allocating 3 * 8K = 24K on disk, so 512
    bytes multiplied by 48, which is double the size we account for.
    If we allow this kind of writes to be assigned a TX it is possible,
    when the pool is almost full, to trigger an allocation failure
    (ENOSPC) in the ZIO pipeline, which will in turn result in the whole
    pool being suspended.
    
    The bug is fixed by using, in spa_get_worst_case_asize(), the MAX()
    value chosen between the logical io size from zfs_write() and the
    maximum physical block size used among our VDEVs.
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #5941

[33mcommit 8542ef852aabf63e8a951aa2a8dfd612b0fea597[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Mon Apr 10 15:21:45 2017 -0700

    OpenZFS 8005 - poor performance of 1MB writes on certain RAID-Z configurations
    
    Authored by: Matt Ahrens <mahrens@delphix.com>
    Reviewed by: Saso Kiselkov <saso.kiselkov@nexenta.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Don Brady <don.brady@intel.com>
    Ported-by: Matt Ahrens <mahrens@delphix.com>
    
    RAID-Z requires that space be allocated in multiples of P+1 sectors,
    because this is the minimum size block that can have the required amount
    of parity.  Thus blocks on RAIDZ1 must be allocated in a multiple of 2
    sectors; on RAIDZ2 multiple of 3; and on RAIDZ3 multiple of 4.  A sector
    is a unit of 2^ashift bytes, typically 512B or 4KB.
    
    To satisfy this constraint, the allocation size is rounded up to the
    proper multiple, resulting in up to 3 "pad sectors" at the end of some
    blocks.  The contents of these pad sectors are not used, so we do not
    need to read or write these sectors.  However, some storage hardware
    performs much worse (around 1/2 as fast) on mostly-contiguous writes
    when there are small gaps of non-overwritten data between the writes.
    Therefore, ZFS creates "optional" zio's when writing RAID-Z blocks that
    include pad sectors.  If writing a pad sector will fill the gap between
    two (required) writes, we will issue the optional zio, thus doubling
    performance.  The gap-filling performance improvement was introduced in
    July 2009.
    
    Writing the optional zio is done by the io aggregation code in
    vdev_queue.c.  The problem is that it is also subject to the limit on
    the size of aggregate writes, zfs_vdev_aggregation_limit, which is by
    default 128KB.  For a given block, if the amount of data plus padding
    written to a leaf device exceeds zfs_vdev_aggregation_limit, the
    optional zio will not be written, resulting in a ~2x performance
    degradation.
    
    The problem occurs only for certain values of ashift, compressed block
    size, and RAID-Z configuration (number of parity and data disks).  It
    cannot occur with the default recordsize=128KB.  If compression is
    enabled, all configurations with recordsize=1MB or larger will be
    impacted to some degree.
    
    The problem notably occurs with recordsize=1MB, compression=off, with 10
    disks in a RAIDZ2 or RAIDZ3 group (with 512B or 4KB sectors).  Therefore
    this problem has been known as "the 1MB 10-wide RAIDZ2 (or 3) problem".
    
    The problem also occurs with the following configurations:
    
    With recordsize=512KB or 256KB, compression=off, the problem occurs only
    in rarely-used configurations:
    * 4-wide RAIDZ1 with recordsize=512KB and ashift=12 (4KB sectors)
    * 4-wide RAIDZ2 (either recordsize, either ashift)
    * 5-wide RAIDZ2 with recordsize=512KB (either ashift)
    * 6-wide RAIDZ2 with recordsize=512KB (either ashift)
    
    With recordsize=1MB, compression=off, ashift=9 (512B sectors)
    * RAIDZ1 with 4 or 8 disks
    * RAIDZ2 with 4, 8, or 10 disks
    * RAIDZ3 with 6, 8, 9, or 10 disks
    
    With recordsize=1MB, compression=off, ashift=12 (4KB sectors)
    * RAIDZ1 with 7 or 8 disks
    * RAIDZ2 with 4, 5, or 10 disks
    * RAIDZ3 with 6, 9, or 10 disks
    
    With recordsize=2MB and larger (which can only be selected by changing
    kernel tunables), many configurations are affected, including with
    higher numbers of disks (up to 18 disks with recordsize=2MB).
    
    Increase zfs_vdev_aggregation_limit to allow the optional zio to be
    aggregated, thus eliminating the problem.  Setting it to 256KB fixes all
    commonly-used configurations.
    
    The solution is to aggregate optional zio's regardless of the
    aggregation size limit.
    
    Analysis sponsored by Intel Corp.
    
    OpenZFS-issue: https://www.illumos.org/issues/8005
    OpenZFS-commit: https://github.com/openzfs/openzfs/pull/321
    Closes #5931

[33mcommit 42db43e982a243342a38e13f513513bb164d45e3[m
Author: Giuseppe Di Natale <dinatale2@llnl.gov>
Date:   Thu Apr 6 08:25:47 2017 -0700

    OpenZFS 2932 - support crash dumps to raidz, etc. pools
    
    Authored by: Bill Pijewski <wdp@joyent.com>
    Reviewed by: Jerry Jelinek <jerry.jelinek@joyent.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Dan McDonald <danmcd@nexenta.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/2932
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/810e43b
    Closes #5984
    Closes #5216

[33mcommit a8d6ae1e16b253ac2bdb362b9a76945627faa7db[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Mon Apr 10 03:17:55 2017 +0400

    zfstest - replace dircmp with diff
    
    `dircmp` doesn't exist in Linux while `diff` is already used
    by zfstests on all platforms.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: John Wren Kennedy <john.kennedy@delphix.com>
    Signed-off-by: George Melikov <mail@gmelikov.ru>
    Closes #5996

[33mcommit f94a5dccf76a68a8a3a6bf7914474a5e401fdb8a[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Mon Apr 10 03:15:44 2017 +0400

    zfstest reservation_009_pos.sh missed backslash
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: John Wren Kennedy <john.kennedy@delphix.com>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: George Melikov <mail@gmelikov.ru>
    Closes #5997

[33mcommit 3b7f360c9606079c518829c5bd82fe8f8a89e3c0[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Fri Apr 7 13:50:18 2017 -0700

    OpenZFS 8023 - Panic destroying a metaslab deferred range tree
    
    Authored by: George Wilson <george.wilson@delphix.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: Brad Lewis <brad.lewis@delphix.com>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Saso Kiselkov <saso.kiselkov@nexenta.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    We don't want to dirty any data when we're in the final txgs of the pool
    export logic. This change introduces checks to make sure that no data is
    dirtied after a certain point. It also addresses the culprit of this
    specific bug – the space map cannot be upgraded when we're in final
    stages of pool export. If we encounter a space map that wants to be
    upgraded in this phase, then we simply ignore the request as it will get
    retried the next time we set the fragmentation metric on that metaslab.
    
    OpenZFS-issue: https://www.illumos.org/issues/8023
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/2ef00f5
    Closes #5991

[33mcommit 4c3c6b6c73e31c789a2c0ce2a70912c077f15421[m
Author: Andriy Gapon <avg@FreeBSD.org>
Date:   Fri Apr 7 13:54:29 2017 -0700

    OpenZFS 5380 - receive of a send -p stream doesn't need to try renaming snapshots
    
    Authored by: Andriy Gapon <avg@FreeBSD.org>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    recv_incremental_replication() takes care of things like removing
    datasets that have been removed on the sending side, detecting renamed
    datasets, ensuring that all datasets in the affected hierarchy have the
    same properties as their counterparts on the sending side.
    All of the above are not necessary if we are receiving a stream for a
    single dataset that has been generated with zfs send -p, that is, a
    stream that includes properties.  zfs_receive_one() already takes care
    of applying the properties to the received datasets.
    
    OpenZFS-issue: https://www.illumos.org/issues/5380
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/b8ab927
    Closes #5990

[33mcommit f9ea47db3d2e9494321131f789e8e5e9513b26dc[m
Author: Pedro Giffuni <pfg@freebsd.org>
Date:   Fri Apr 7 13:36:06 2017 -0700

    OpenZFS 8046 - Let calloc() do the multiplication in libzfs_fru_refresh
    
    Authored by: Pedro Giffuni <pfg@freebsd.org>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/8046
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/3a3c0d5
    Closes #5989

[33mcommit c0c8cc7b4359b2f6e9c08a4bf56f0be377e3995b[m
Author: Andriy Gapon <avg@FreeBSD.org>
Date:   Fri Apr 7 13:52:26 2017 -0700

    OpenZFS 8027 - tighten up dsl_pool_dirty_delta
    
    Authored by: Andriy Gapon <avg@FreeBSD.org>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Reviewed by: Serapheim Dimitropoulos <serapheim@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/8027
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/642668d
    Closes #5988

[33mcommit 316da928253005187cd487b38d2c43dacef8eddd[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Mon Apr 10 03:01:54 2017 +0400

    zfs_receive_010_pos.ksh local => typeset change
    
    Ksh uses `typeset`, `local` is a Bash analog.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: John Wren Kennedy <john.kennedy@delphix.com>
    Signed-off-by: George Melikov <mail@gmelikov.ru>
    Closes #5995

[33mcommit d3b1783e445485ae1ee47e144160ac8852a7a246[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Mon Apr 10 03:00:43 2017 +0400

    zfstests cli_user/misc/setup.ksh space missed
    
    Ksh syntax requires a space after `!` in if statement.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: John Wren Kennedy <john.kennedy@delphix.com>
    Signed-off-by: George Melikov <mail@gmelikov.ru>
    Closes #5994

[33mcommit 8aab12182184802afb3937f1fa35be4368a45f0d[m
Author: Toomas Soome <tsoome@me.com>
Date:   Fri Dec 2 23:13:44 2016 -0800

    OpenZFS 7404 - rootpool_007_neg, bootfs_006_pos and bootfs_008_neg tests fail with the loader project bits
    
    Authored by: Toomas Soome <tsoome@me.com>
    Reviewed by: Igor Kozhukhov <igor@dilos.org>
    Reviewed by: Marcel Telka <marcel@telka.sk>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    Porting Notes:
    - Removed gzip and zle compression restriction on bootfs
      datasets.  Grub added support for these long ago.  Ay
      version of grub which understands lz4 also supports this.
    - Enabled rootpool tests in runfile but skipped by default
      in setup on Linux since they modify the rootpool.
    - bootfs_006_pos.ksh, striped pools are allowed as bootfs.
    
    OpenZFS-issue: https://www.illumos.org/issues/7404
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/55a424c
    Closes #5982

[33mcommit 10f251191f16d53d8a64a934e83c3bfe6cd9195f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Apr 7 09:30:05 2017 -0700

    OpenZFS 7629 - Fix for 7290 neglected to remove some escape sequences
    
    Authored by: John Wren Kennedy <john.kennedy@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    Porting Notes:
    - Multiple changes in this commit were applied in c1d9abf.
    
    OpenZFS-issue: https://www.illumos.org/issues/7629
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/f5fb56d
    Closes #5980

[33mcommit 7469863167a111516303670d936ead4edec7026b[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Thu Apr 6 17:16:41 2017 -0700

    Correct shellcheck make recipe
    
    Consolidated the shellcheck call in the
    make recipe down to a single call of
    shellcheck. Corrected script errors that
    have been skipped. Corrected script errors
    that have been introduced because make
    wasn't reporting any errors from shellcheck.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #5976

[33mcommit bbfd6354a893775f7f1456b2d91479716a507be0[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Apr 6 17:15:30 2017 -0700

    Skip xfstests on Amazon Linux
    
    The ZFS enabled versions of xfstests fails to build cleanly on
    Amazon Linux.  This issue should be resolved by rebasing the ZFS
    patches against the latest xfstests and pushing those patches
    upstream.  This would allow us to use an unmodified xfstests.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #5481
    Closes #5977

[33mcommit f02ad0dc751662dd15537c54c3e25bca9ccefa6c[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Thu Apr 6 13:18:22 2017 -0700

    Fix coverity defects: CID 161288
    
    CID 161288:  Null pointer dereferences  (REVERSE_INULL)
    
    Ensure physpath != NULL before the strcmp.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #5974

[33mcommit c1d9abf9059a19c2b48eaa645dbce2e1fba3e0b1[m
Author: John Wren Kennedy <john.kennedy@delphix.com>
Date:   Wed Apr 5 20:18:22 2017 -0400

    OpenZFS 7290 - ZFS test suite needs to control what utilities it can run
    
    Authored by: John Wren Kennedy <john.kennedy@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Approved by: Gordon Ross <gordon.w.ross@gmail.com>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    Porting Notes:
    - Utilities which aren't available under Linux have been removed.
    - Because of sudo's default secure path behavior PATH must be
      explicitly reset at the top of libtest.shlib.  This avoids the
      need for all users to customize secure path on their system.
    - Updated ZoL infrastructure to manage constrained path
    - Updated all test cases
    - Check permissions for usergroup tests
    - When testing in-tree create links under bin/
    - Update fault cleanup such that missing files during
      cleanup aren't fatal.
    - Configure su environment with constrained path
    
    OpenZFS-issue: https://www.illumos.org/issues/7290
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/1d32ba6
    Closes #5903

[33mcommit 7a4500a10102c00a67442628df2ac2395484757e[m
Author: Sydney Vanda <sydney.m.vanda@intel.com>
Date:   Thu Mar 2 09:47:26 2017 -0700

    Added auto-replace FMA test for the ZFS Test Suite
    
    Also included are updates to auto-online test
    
    Automated auto-replace test to go along with ZED FMA integration
    (PR 4673) auto-replace_001.pos works using a scsi_debug device
    (the only usable virtual device currently due to whole_disk var
    needing to be set)
    
    Functionality for automated FMA auto-replace test to work with
    scsi_debug devs:  Some functionality/exceptions needed to be
    added for automation of auto-replace to work correctly.
    
    In the test an alias vdev_id rule is added for any scsi_debug
    device which sets the phys_path="scsidebug" after a udevadm
    trigger command.
    
    A symlink is created for the vdev_id.conf file (in /etc/zfs/ by
    default) to be used in-tree for the test suite
    (/var/tmp/zfs/vdev_id.conf).  "./scripts/zfs-helpers.sh -i" needs
    to be run before fault tests in the ZTS (to use udev rules in-tree)
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Don Brady <don.brady@intel.com>
    Reviewed-by: David Quigley <david.quigley@intel.com>
    Signed-off-by: Sydney Vanda <sydney.m.vanda@intel.com>
    Closes #5944

[33mcommit 6ba1ce9ee9741b1ce65f4a71549099d94392012e[m
Author: Håkan Johansson <f96hajo@chalmers.se>
Date:   Thu Apr 6 00:21:13 2017 +0200

    Accept raidz and mirror with similar redundancy
    
    Allow a pool to be created with both raidz and mirror members,
    without giving -f, as long as they have matching redundancy.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Haakan T Johansson <f96hajo@chalmers.se>
    Closes #5915

[33mcommit 177c91d06e493c436315e324fc7a3ac32ffa2ca7[m
Author: Don Brady <don.brady@intel.com>
Date:   Wed Apr 5 15:24:26 2017 -0600

    Fix regression in zfs_ereport_start()
    
    On 32-bit platforms spa_state is 32 bits without cast, and thus
    caused a NULL pointer dereference when treated as 64bit in
    var arg.  Accidentally introduced by bcdb96a.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Nathaniel Clark <nathaniel.l.clark@intel.com>
    Signed-off-by: Don Brady <don.brady@intel.com>
    Closes #5966
    Closes #5965

[33mcommit 6b0ecd2f2f069769218d3001998a78ed8d0a19bc[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Wed Apr 5 13:21:10 2017 -0700

    Fix coverity defects: CID 161264
    
    CID 161264:  Uninitialized variables  (UNINIT)
    
    In _zed_event_add_nvpair, when handling DATA_TYPE_UINT64,
    we should be using i64 throughout the entire case.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Don Brady <don.brady@intel.com>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #5964

[33mcommit 2e215fecbe97167cd5408cea19aa50b80601248c[m
Author: Steven Hartland <steven.hartland@multiplay.co.uk>
Date:   Mon Apr 3 16:38:51 2017 -0700

    OpenZFS 7885 - zpool list can report 16.0e for expandsz
    
    Authored by: Steven Hartland <steven.hartland@multiplay.co.uk>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Gordon Ross <gordon.w.ross@gmail.com>
    
    When a member of a RAIDZ has been replaced with a device smaller than
    the original, then the top level vdev can report its expand size as
    16.0E.
    The reduced child asize causes the RAIDZ to have a vdev_asize lower than
    its vdev_max_asize which then results in an underflow during the
    calculation of the parents expand size.
    Fix this by updating the vdev_asize if it shrinks, which is already
    protected by a check against vdev_min_asize so should always be safe.
    Also for RAIDZ vdevs, ensure that the sum of their child vdev_min_asize
    is always greater than the parents vdev_min_size.
    
    Reviewed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7885
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/bb0dbaa
    Closes #5963

[33mcommit d456708525b9c12b0416bdfd68f2ecec5121c78e[m
Author: Tom Matthews <tomtastic@users.noreply.github.com>
Date:   Tue Apr 4 19:03:33 2017 +0100

    list -o props should be alloc,free not used,avail
    
    Manpage suggests the zpool list properties include 'used'
    and 'available', when these are invalid property names.
    Use alloc and free in their place.
    
    ```
    $ zpool list -o name,size,used   2>&1 |head -1
    bad property list: invalid property 'used'
    $ zpool list -o name,size,avail   2>&1 |head -1
    bad property list: invalid property 'avail'
    $ zpool list -o name,size,available   2>&1 |head -1
    bad property list: invalid property 'available'
    $ zpool list -o name,size,alloc,free
    NAME    SIZE  ALLOC   FREE
    apool   464M   203M   261M
    bpool  3.62T  1.97T  1.65T
    ```
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: loli10K <ezomori.nozomu@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tom Matthews <tom@axiom-partners.com>
    Closes #5959

[33mcommit bcdb96a3e197ebe64048464c19f505637b8bb7ba[m
Author: N Clark <Nathaniel.Clark@misrule.us>
Date:   Mon Apr 3 17:23:02 2017 -0400

    Additional Information for Zedlets
    
    * Add ZPOOL pool state to zfs_post_common to
      allow differentiation between export and destroy
      by zedlets.
    
    * Add pool name as standard export  This ensures
      pool name is exported to zedlets.
    
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Reviewed-by: Don Brady <don.brady@intel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Nathaniel Clark <nathaniel.l.clark@intel.com>
    Closes #5942

[33mcommit 3f2da6cb739f9d288f81abebb0f4bf94d266075d[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Mon Apr 3 14:20:01 2017 -0700

    Prevent commitcheck.sh from running twice
    
    A stray semicolon was causing commitcheck.sh
    to run twice when running make checkstyle.
    Updated regexes for matching tagged lines.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #5952

[33mcommit e55ebf6afdebec0e48c49ba912e02166bd6a3bc9[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Mon Apr 3 22:06:04 2017 +0400

    zfs_get_005_neg.ksh fix typos
    
    `test_options_bookmark` function must have an `s` at the end.
    
    Reviewed-by: Marcel Telka <marcel@telka.sk>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: George Melikov <mail@gmelikov.ru>
    Closes #5957

[33mcommit cb524aa23aa6f5bc4242e3b585a58bdd3292ae0f[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Fri Mar 31 09:33:38 2017 -0700

    Commit message format in contributing guidelines
    
    Add the need to have a commit message with a specific
    format to the contributing guidelines. Provide a script
    to help enforce commit message style.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #5943

[33mcommit 10cb2e0a19e46ecfe1378ccf79e71d986936f17e[m
Author: Olaf Faaland <faaland1@llnl.gov>
Date:   Fri Mar 31 09:32:00 2017 -0700

    glibc 2.5 compat: use correct header for makedev() et al.
    
    In glibc 2.5, makedev(), major(), and minor() are defined in
    sys/sysmacros.h.  They are also defined in types.h for backward
    compatability, but using these definitions triggers a compile warning.
    This breaks the ZFS build, as it builds with -Werror.
    
    autoconf email threads indicate these macros may be defined in
    sys/mkdev.h in some cases.
    
    This commit adds configure checks to detect where makedev() is defined:
      sys/sysmacros.h
      sys/mkdev.h
    
    It assumes major() and minor() are defined in the same place.
    
    The libspl types.h then includes
    	sys/sysmacros.h (preferred) or
    	sys/mkdev.h (2nd choice)
    if one of those defines makedev().
    
    This is done before including the system types.h.
    
    An alternative would be to remove uses of major, minor, and makedev,
    instead comparing the st_dev returned from stat64.  These configure
    checks would then be unnecessary.
    
    This change revealed that __NORETURN was being defined unnecessarily in
    libspl/include/sys/sysmacros.h.  That definition is removed.
    
    The files in which __NORETURN are used all include types.h, and so all
    will get the definition provided by feature_tests.h
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>
    Closes #5945

[33mcommit 8be64caabc662aaf332fd16c7b81d0dfe58fde69[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Mar 31 09:25:23 2017 -0700

    Fix add-o_ashift.ksh permissions
    
    Test cases must be executable or they will be skipped.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: loli10K <ezomori.nozomu@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5947

[33mcommit 84c07adadb2486e4049032e43e1f38650ca75289[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Thu Jan 5 14:10:07 2017 -0500

    Remove dependency on linear ABD
    
    Wherever possible it's best to avoid depending on a linear ABD.
    Update the code accordingly in the following areas.
    
    - vdev_raidz
    - zio, zio_checksum
    - zfs_fm
    - change abd_alloc_for_io() to use abd_alloc()
    
    Reviewed-by: David Quigley <david.quigley@intel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Closes #5668

[33mcommit 2035575fd67fd7dd14f072e1cb6f4bae8ca62c7d[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Tue Mar 28 17:22:46 2017 -0700

    OpenZFS 7990 - libzfs: snapspec_cb() does not need to call zfs_strdup()
    
    Authored by: Marcel Telka <marcel@telka.sk>
    Reviewed by: Yuri Pankov <yuri.pankov@gmail.com>
    Reviewed by: Toomas Soome <tsoome@me.com>
    Approved by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/7990
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/d8584ba
    Closes #5939

[33mcommit ff61d1a4959065aa99d52489438f6737765987c6[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Wed Mar 29 02:21:11 2017 +0200

    Check ashift validity in 'zpool add'
    
    df83110 added the ability to specify a custom "ashift" value from the command
    line in 'zpool add' and 'zpool attach'. This commit adds additional checks to
    the provided ashift to prevent invalid values from being used, which could
    result in disastrous consequences for the whole pool.
    
    Additionally provide ASHIFT_MAX and ASHIFT_MIN definitions in spa.h.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #5878

[33mcommit 12aec7dcd9b1f4c86eb71d5b9dc737433ee93167[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Tue Mar 28 11:06:22 2017 -0700

    Fix wrong offset args in vdev_cache_write
    
    The offset arguments is wrong when changing to abd_copy_off in a6255b7
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Gvozden Neskovic <neskovic@gmail.com>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #5932
    Closes #5936

[33mcommit 7c4f1514ff65c547d6cab6d0720bf0678a59eec9[m
Author: Sen Haerens <sen@senhaerens.be>
Date:   Tue Mar 28 19:47:50 2017 +0200

    Fix "undefined reference to xdr_control" when building raidz_test cmd
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: SenH <sen@senhaerens.be>
    Closes #5933

[33mcommit 4ffeb12fa845996f6f22c6d7fc4bb8ace8ddea31[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 28 09:58:23 2017 -0700

    Disable rsend_009_pos
    
    Test rsend_009_pos has been observed to fail pretty frequently
    when testing using a kmemleak enabled kernel.  For the moment
    disable this test case until the underlying issue is resolved.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #5887
    Closes #5934

[33mcommit 39ccc909677b3e13c05ec7942a3219a1565f1d44[m
Author: wli5 <weigang.li@intel.com>
Date:   Tue Mar 28 03:33:57 2017 +0800

    Update documentation for new parameter "zfs_qat_disable"
    
    Update documentation in zfs-module-parameters.5 for new
    parameter "zfs_qat_disable" which was introduced by #5846.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Weigang Li <weigang.li@intel.com>
    Closes #5914

[33mcommit 06480b2790e4a07fefa5a2bbaaf1e26d1eb00d33[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Mar 27 12:31:15 2017 -0700

    Allow c99 when building ZFS in the kernel tree
    
    Commit 4a5d7f82 enabled building c99 out of the kernel tree.
    However, when building as part of the kernel different Makefiles
    are used and -std=gnu99 must additionially be added there.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5919

[33mcommit 7b0dc2a317a3d149d396bc48dae7b8e9bf1a1a6b[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Fri Mar 24 02:57:54 2017 +0100

    Fix 'zdb -o' segmentation fault
    
    Fix a regression accidentally introduced by OpenZFS 7280 in ed828c0: since
    whether to accept NULL as a valid first parameter in strchr() is implementation
    specific we add an additional check to avoid crashing.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #5917

[33mcommit 8d703987407acfcbd992ba4a7926f2d76ca3779c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Mar 23 18:26:50 2017 -0700

    Retry zfs_znode_alloc() in zfs_mknode()
    
    For historical reasons zfs_mknode() was written such that it could
    never fail.  This poses a problem for Linux since zfs_znode_alloc()
    could potentually failure due to low memory.  Handle this gracefully
    by retrying zfs_znode_alloc() until it succeeds, direct reclaim
    will eventually be able to allocate memory.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: loli10K <ezomori.nozomu@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5535
    Closes #5908

[33mcommit b25c5b0639e0d2281ccbd3b5766762dc3bebfc02[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Mar 23 18:24:09 2017 -0700

    Fix undefined reference to `libzfs_fru_compare'
    
    Add trivial libzfs_fru_compare() function which can be used when
    HAVE_LIBTOPO is not defined.  The only caller is find_vdev() and
    this function should never be reached because search_fru must be
    NULL unless HAVE_LIBTOPO is defined.
    
    Rename _HAS_FMD_TOPO to existing HAVE_LIBTOPO which was
    originally added for this purpose.  This macro will never be defined.
    
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5402
    Closes #5909

[33mcommit 55922e73b4294fc6c3014be27b61201b7962088c[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Sat Nov 5 20:43:56 2016 -0700

    OpenZFS 3821 - Race in rollback, zil close, and zil flush
    
    Authored by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Reviewed by: Andriy Gapon <avg@FreeBSD.org>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/3821
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/43297f9
    Closes #5905

[33mcommit 56a6054d553fd7f1cf7d7c86bf4b33951e1d009f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Mar 22 18:08:55 2017 -0700

    Fix `zpool status -v` error message
    
    When a pool is suspended it's impossible to read the list
    of damaged files from disk.  This would result in a generic
    misleading "insufficient permissions" error message.
    
    Update zpool_get_errlog() to use the standard zpool error
    logging functions to generate a useful error message.  In
    this case:
    
      errors: List of errors unavailable: pool I/O is currently suspended
    
    This patch does not address the related issue of potentially
    not being able to resume a suspend pool when the underlying
    device names have changed.
    
    Additionally, remove the error handling from zfs_alloc()
    in zpool_get_errlog() for readability since this function
    can never fail.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4031
    Closes #5731
    Closes #5907

[33mcommit 6a9d6359982cbff298dd17f68c3103d1269602fa[m
Author: wli5 <weigang.li@intel.com>
Date:   Thu Mar 23 08:58:47 2017 +0800

    GZIP compression offloading with QAT accelerator
    
    This patch implement the hardware accelerator method in GZIP compression
    in ZFS. When the ZFS pool is enabled GZIP compression, the compression
    API will be automatically transferred to the hardware accelerator to
    free up CPU resource and speed up the compression time.
    
    * To enable Intel QAT hardware acceleration in ZOL you need to have QAT
      hardware and the driver installed:
      * QAT hardware DH8950:
      http://ark.intel.com/products/79483/Intel-QuickAssist-Adapter-8950
      * QAT driver:
      https://01.org/intel-quickassist-technology
    * Start QAT driver in your system:
      service qat_service start
    * Enable QAT in ZFS, e.g.:
      ./configure --with-qat=<qat-driver-path>/QAT1.6
      make
    * Set GZIP compression in ZFS dataset:
      zfs set compression = gzip <dataset>
    * Get QAT hardware statistics by:
      cat /proc/spl/kstat/zfs/qat
    * To disable QAT in ZFS:
      insmod zfs.ko zfs_qat_disable=1
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Jinshan Xiong <jinshan.xiong@intel.com>
    Signed-off-by: Weigang Li <weigang.li@intel.com>
    Closes #5846

[33mcommit d48be524ce96a1a6011bb658985c5b7087d576d2[m
Author: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
Date:   Thu Mar 23 01:55:00 2017 +0100

    libspl: Fix incorrect use of platform defines on sparc64
    
    libspl tries to detect sparc64 by checking whether __sparc64__
    is defined. Unfortunately, this assumption is not correct as
    sparc64 does not define __sparc64__ but it defines __sparc__
    and __arch64__ instead. This leads to sparc64 being detected
    as 32-Bit sparc and the build fails because both _ILP32 and
    _LP64 are defined in this case.
    
    To fix the problem, remove the checks for __sparc64__ and
    just check __arch64__ if a sparc host was previously
    detected with __sparc__.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
    Closes #5913

[33mcommit 64fc776208ad14b0078b89317b0f3b24338e10c1[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Mon Mar 20 18:36:00 2017 -0700

    OpenZFS 7968 - multi-threaded spa_sync()
    
    Reviewed by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Reviewed by: Brad Lewis <brad.lewis@delphix.com>
    Reviewed by: Saso Kiselkov <saso.kiselkov@nexenta.com>
    Reviewed by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Matthew Ahrens <mahrens@delphix.com>
    
    spa_sync() iterates over all the dirty dnodes and processes each of them
    by calling dnode_sync(). If there are many dirty dnodes (e.g. because we
    created or removed a lot of files), the single thread of spa_sync()
    calling dnode_sync() can become a bottleneck. Additionally, if many
    dnodes are dirtied concurrently in open context (e.g. due to concurrent
    file creation), the os_lock will experience lock contention via
    dnode_setdirty().
    
    The solution is to track dirty dnodes on a multilist_t, and for
    spa_sync() to use separate threads to process each of the sublists in
    the multilist.
    
    OpenZFS-issue: https://www.illumos.org/issues/7968
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/4a2a54c
    Closes #5752

[33mcommit a3478c074752610814f894375c3d947ece4938fe[m
Author: Olaf Faaland <faaland1@llnl.gov>
Date:   Mon Mar 20 17:51:16 2017 -0700

    Linux 4.11 compat: iops.getattr and friends
    
    In torvalds/linux@a528d35, there are changes to the getattr family of functions,
    struct kstat, and the interface of inode_operations .getattr.
    
    The inode_operations .getattr and simple_getattr() interface changed to:
    
    int (*getattr) (const struct path *, struct dentry *, struct kstat *,
        u32 request_mask, unsigned int query_flags)
    
    The request_mask argument indicates which field(s) the caller intends to use.
    Fields the caller has not specified via request_mask may be set in the returned
    struct anyway, but their values may be approximate.
    
    The query_flags argument indicates whether the filesystem must update
    the attributes from the backing store.
    
    Currently both fields are ignored.  It is possible that getattr-related
    functions within zfs could be optimized based on the request_mask.
    
    struct kstat includes new fields:
    u32               result_mask;  /* What fields the user got */
    u64               attributes;   /* See STATX_ATTR_* flags */
    struct timespec   btime;        /* File creation time */
    
    Fields attribute and btime are cleared; the result_mask reflects this.  These
    appear to be optional based on simple_getattr() and vfs_getattr() within the
    kernel, which take the same approach.
    
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>
    Closes #5875

[33mcommit f974e414268448fbb5507e91ed98be7fdf45054b[m
Author: DeHackEd <DeHackEd@users.noreply.github.com>
Date:   Mon Mar 20 18:14:28 2017 -0400

    zfs(8) fixes
    
    Documentation fixes for zfs(8)
    
    * White space issue in the userused@user property section
    * zfs send supports using bookmarks as the origin snapshot
    
    Reviewed by: Ned Bass <bass6@llnl.gov>
    Reviewed by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: DHE <git@dehacked.net>
    Closes #5906

[33mcommit 9522bd24297620b0b5a6f96231c59875363194c1[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Mar 15 08:49:59 2017 -0400

    OpenZFS 7801 - add more by-dnode routines (lint)
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/7801
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/f25efb3
    Closes #5894

[33mcommit 8614ddf9b42d7aca60f7a4218b62f3c5957fe5a0[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Tue May 10 20:49:02 2016 -0700

    OpenZFS 6874 - rollback and receive need to reset ZPL state to what's on disk
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    When we do a clone swap (caused by "zfs rollback" or "zfs receive"), the
    ZPL doesn't completely reload the state from the DMU; some values remain
    cached in the zfsvfs_t.
    
    OpenZFS-issue: https://www.illumos.org/issues/6874
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/1fdcbd0
    Closes #5888

[33mcommit 09ec770c2cfdb105e1d4a6e7470f2456d37c65e0[m
Merge: ef1bdf3 1c2555e
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Mar 13 15:08:40 2017 -0700

    Align mount options handling and type/function names with OpenZFS
    
    Refactor the temporary mount option in a way which minimizes
    differences with upstream.  Additionally, replace the zfs_sb_t
    type with zfsvfs_t and rename several functions to be consistent
    with the upstream names.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5876

[33mcommit 1c2555ef926521671eaca918f0aaaa97dbef02af[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Mar 8 19:56:09 2017 -0500

    Restructure mount option handling
    
    Restructure the handling of mount options to be consistent with
    upstream OpenZFS.  This required making the following changes.
    
    - The zfs_mntopts_t was renamed vfs_t and adjusted to provide
      the minimal needed functionality.  This includes a pointer
      back to the associated zfsvfs_t.  Plus it made it possible
      to revert zfs_register_callbacks() and zfsvfs_create() back
      to their original prototypes.
    
    - A zfs_mnt_t structure was added for the sole purpose of
      providing a structure to pass the osname and raw mount
      pointer to zfs_domount() without having to copy them.
    
    - Mount option parsing was moved down from the zpl_* wrapper
      functions in to the zfs_* functions.  This allowed for the
      code to be simplied and it's where similar functionality
      appears on other platforms.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit f298b24ddf9695fb74603a257e2a58dd7baf0159[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Mar 8 17:56:19 2017 -0500

    Rename zfs_* functions
    
    Several functions were renamed when ZFS was originally ported to
    Linux.  Revert the code to the original names to minimize the
    delta with upstream OpenZFS.
    
      zfs_sb_teardown -> zfsvfs_teardown
      zfs_sb_create -> zfsvfs_create
      zfs_sb_setup -> zfsvfs_setup
      zfs_sb_free -> zfsvfs_free
      get_zfs_sb -> getzfsvfs
      zfs_sb_hold -> zfsvfs_hold
      zfs_sb_rele -> zfsvfs_rele
    
      zfs_sb_prune_aliases  -> zfs_prune_aliases (Linux-only)
      zfs_sb_prune -> zfs_prune (Linux only)
    
    Align the zfs_vnops.h and zfs_vfsops.h with upstream as much
    as possible.  Several prototypes were removed and those that
    remain were reordered.
    
    Move the EXPORT_SYMBOL lines to the end of the source files
    for consistency with the other source files.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 0037b49e833a7073bee0ef3f6680f330f727769e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 7 19:21:37 2017 -0500

    Rename zfs_sb_t -> zfsvfs_t
    
    The use of zfs_sb_t instead of zfsvfs_t results in unnecessary
    conflicts with the upstream source.  Change all instances of
    zfs_sb_t to zfsvfs_t including updating the variables names.
    
    Whenever possible the code was updated to be consistent with
    hope it appears in the upstream OpenZFS source.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit ef1bdf363c021525c1db9630647dea73498c6bfd[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Mar 9 17:43:36 2017 -0800

    Fix ZVOL BLKFLSBUF ioctl
    
    The BLKFLSBUF ioctl is expected to do two things:
    
      - flush dirty pages to stable storage, and
      - invalidate clean pages
    
    Unfortunately, the existing implementation of BLKFLSBUF in
    zvol_ioctl() only flushes pages which are part of the current
    TXG to disk.  There may be additional dirty pages in the
    page cache which haven't yet been submitted to the DMU and
    therefore aren't part of any TXG.
    
    Furthermore because zvol_ioctl() returns 0 the generic
    blkdev_flushbuf() does not invalidate the page cache.
    
    Resolve the issue by moving bdev_flush() in to zvol_ioctl()
    and explicitly waiting for a full TXG sync.  Then invalidate
    the page cache.  The associated ARC buffers need not be
    evicted since they cannot be bypassed using O_DIRECT.
    
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5871
    Closes #5879

[33mcommit 589bb918ef39058b1f06da72092e895835a7aaff[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Thu Mar 9 17:40:21 2017 -0800

    Suppress cppcheck nullPointer error in zfs_write
    
    Newer versions of cppcheck find the potential NULL pointer
    bug in zfs_write(). The function is difficult to refactor without
    extensive work, so suppress the potential NULL pointer error
    which cannot occur for now.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #5882

[33mcommit c3d043817305efebce89db5d9146e70807c4043b[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Thu Mar 9 10:21:59 2017 -0800

    Correct arc_summary and dbufstat python style
    
    arc_summary and dbufstat should have two spaces
    after their last function definitions.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #5881

[33mcommit c552fbc5f025f3c1e74b85c1c0d536ee272defd0[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Thu Mar 9 10:20:15 2017 -0800

    Enable shellcheck to run for select scripts
    
    Enable shellcheck to run on zed scripts,
    paxcheck.sh, zfs-tests.sh, zfs.sh, and zloop.sh.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #5812

[33mcommit 9b77d1c9585572b7ce3af204d40278752d5f5842[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Wed Mar 8 09:26:33 2017 -0800

    Fix nfs snapdir automount
    
    The current implementation for allowing nfs to access snapdir is very buggy.
    It uses a special fh for snapdirs, such that the next time nfsd does
    fh_to_dentry, it actually returns the root inode inside the snapshot. So nfsd
    never knows it cross a mountpoint.
    
    The problem is that nfsd will not hold a reference on the vfsmount of the
    snapshot. This cause auto unmounter to unmount the snapshot even though nfs is
    still holding dentries in it.
    
    To fix this, we return the inode for the snapdirs themselves. However, we also
    trigger automount upon fh_to_dentry, and return ESTALE so nfsd will revalidate
    and see the mountpoint and do crossmnt.
    
    Because nfsd will now be aware that these are different filesystems users
    must add crossmnt to their export options to access snapshot directories.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #3794
    Closes #4716
    Closes #5810
    Closes #5833

[33mcommit 463009865fb4398b32a825d7c00cd8a942637fae[m
Author: Tony Hutter <hutter2@llnl.gov>
Date:   Wed Mar 8 09:20:21 2017 -0800

    Fix harmless "BARRIER is deprecated" kernel warning on Centos 6.8
    
    A one time warning after module load that "BARRIER is deprecated" was seen
    on the heavily patched 2.6.32-642.13.1.el6.x86_64 Centos 6.8 kernel.  It seems
    that kernel had both the old BARRIER and the newer FLUSH/FUA interfaces
    defined.  This fixes the warning by prefering the newer FLUSH/FUA interface
    if it's available.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Closes #5739
    Closes #5828

[33mcommit 423e7b62613d0a359e488cf2599a44174d073805[m
Author: Andriy Gapon <avg@FreeBSD.org>
Date:   Mon Feb 27 14:47:33 2017 -0800

    OpenZFS 7867 - ARC space accounting leak
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Tim Chase <tim@chase2k.com>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/7867
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/aa1f740d
    Closes #5874

[33mcommit db4ed56538db7fa3ec63bf279b8a2a1311991bed[m
Author: bunder2015 <omfgbunder@gmail.com>
Date:   Tue Mar 7 16:01:39 2017 -0500

    Corrected highlight for zpool man page
    
    SS is already highlighted and the fB/fR tags break the highlighting
    prematurely, removing the tags highlights the entire line.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: bunder2015 <omfgbunder@gmail.com>
    Closes #5873

[33mcommit 650383f2838d5864f127e9d8595b97ad024c9648[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Tue Mar 7 21:59:31 2017 +0100

    [icp] fpu and asm cleanup for linux
    
    Properly annotate functions and data section so that objtool does not complain
    when CONFIG_STACK_VALIDATION and CONFIG_FRAME_POINTER are enabled.
    
    Pass KERNELCPPFLAGS to assembler.
    
    Use kfpu_begin()/kfpu_end() to protect SIMD regions in Linux kernel.
    
    Reviewed-by: Tom Caputi <tcaputi@datto.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Closes #5872
    Closes #5041

[33mcommit 5fc73c46f9f94d2697b77a830dd9fb8a85368d23[m
Author: bunder2015 <omfgbunder@gmail.com>
Date:   Tue Mar 7 12:54:55 2017 -0500

    Fix multi-line error messages in blkdev_compat.h
    
    Fix multi-line error messages in blkdev_compat.h by changing
    error-generating multi-line error messages to single line errors.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: bunder2015 <omfgbunder@gmail.com>
    Closes #5860

[33mcommit 3ec3bc2167352df525c10c99cf24cb24952c2786[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 7 09:51:59 2017 -0800

    OpenZFS 7793 - ztest fails assertion in dmu_tx_willuse_space
    
    Reviewed by: Steve Gonczi <steve.gonczi@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    Background information: This assertion about tx_space_* verifies that we
    are not dirtying more stuff than we thought we would. We “need” to know
    how much we will dirty so that we can check if we should fail this
    transaction with ENOSPC/EDQUOT, in dmu_tx_assign(). While the
    transaction is open (i.e. between dmu_tx_assign() and dmu_tx_commit() —
    typically less than a millisecond), we call dbuf_dirty() on the exact
    blocks that will be modified. Once this happens, the temporary
    accounting in tx_space_* is unnecessary, because we know exactly what
    blocks are newly dirtied; we call dnode_willuse_space() to track this
    more exact accounting.
    
    The fundamental problem causing this bug is that dmu_tx_hold_*() relies
    on the current state in the DMU (e.g. dn_nlevels) to predict how much
    will be dirtied by this transaction, but this state can change before we
    actually perform the transaction (i.e. call dbuf_dirty()).
    
    This bug will be fixed by removing the assertion that the tx_space_*
    accounting is perfectly accurate (i.e. we never dirty more than was
    predicted by dmu_tx_hold_*()). By removing the requirement that this
    accounting be perfectly accurate, we can also vastly simplify it, e.g.
    removing most of the logic in dmu_tx_count_*().
    
    The new tx space accounting will be very approximate, and may be more or
    less than what is actually dirtied. It will still be used to determine
    if this transaction will put us over quota. Transactions that are marked
    by dmu_tx_mark_netfree() will be excepted from this check. We won’t make
    an attempt to determine how much space will be freed by the transaction
    — this was rarely accurate enough to determine if a transaction should
    be permitted when we are over quota, which is why dmu_tx_mark_netfree()
    was introduced in 2014.
    
    We also won’t attempt to give “credit” when overwriting existing blocks,
    if those blocks may be freed. This allows us to remove the
    do_free_accounting logic in dbuf_dirty(), and associated routines. This
    logic attempted to predict what will be on disk when this txg syncs, to
    know if the overwritten block will be freed (i.e. exists, and has no
    snapshots).
    
    OpenZFS-issue: https://www.illumos.org/issues/7793
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/3704e0a
    Upstream bugs: DLPX-32883a
    Closes #5804
    
    Porting notes:
    - DNODE_SIZE replaced with DNODE_MIN_SIZE in dmu_tx_count_dnode(),
      Using the default dnode size would be slightly better.
    - DEBUG_DMU_TX wrappers and configure option removed.
    - Resolved _by_dnode() conflicts these changes have not yet been
      applied to OpenZFS.

[33mcommit e2fcb562759f32d3ca6f3764914222132ce2cfd9[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 7 09:47:40 2017 -0800

    OpenZFS 7843 - get_clones_stat() is suboptimal for lots of clones
    
    Reviewed by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/7843
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/4d519e7
    Closes #5868

[33mcommit 3c9e0d673e1d47622e6be0bdb06d53fa8655cdf3[m
Author: Olaf Faaland <faaland1@llnl.gov>
Date:   Mon Mar 6 16:01:45 2017 -0800

    Dump unique configurations and Uberblocks in zdb -lu
    
    For zdb -l, detect when the configuration nvlist in some label l (l>0)
    is the same as a configuration already dumped.  If so, do not dump it.
    
    Make a similar check when dumping Uberblocks for zdb -lu.  Check whether
    a label already dumped contains an identical Uberblock.  If so, do not
    dump the Uberblock.
    
    When dumping a configuration or Uberblock, state which labels it is
    found in (0-3), for example: labels = 1 2 3
    
    Detecting redundant uberblocks or configurations is accomplished by
    calculating checksums of the uberblocks and the packed nvlists
    containing the configuration.
    
    If there is nothing unique to be dumped for a label (ie the
    configuration and uberblocks have checksums matching those already
    dumped) print nothing for that label.
    
    With additional l's or u's, increase verbosity as follows:
    
    -l      Dump each unique configuration only once.
            Indicate which labels it appears in.
    -ll     In addition, dump label space usage stats.
    -lll    Dump every configuration, unique or not.
    
    -u      Dump each unique, valid, uberblock only once.
            Indicate which labels it appears in.
    -uu     In addition, state which slots are invalid.
    -uuu    Dump every uberblock, unique or not.
    -uuuu   Dump the uberblock blockpointer (used to be -uuu)
    
    Make exit values conform to the manual page.  Failing to unpack a
    configuration nvlist is considered an error, as well as failing to open
    or read from the device.
    
    Add three tests, zdb_00{3,4,5}_pos to verify the above functionality.
    
    An example of the output:
    	------------------------------------
    	LABEL 0
    	------------------------------------
    	    version: 5000
    	    name: 'pool'
    	    state: 1
    	    txg: 880
    	    < ... redacted ... >
    	    features_for_read:
    		com.delphix:hole_birth
    		com.delphix:embedded_data
    	    labels = 0
    	    Uberblock[0]
    		magic = 0000000000bab10c
    		version = 5000
    		txg = 0
    		guid_sum = 3038694082047428541
    		timestamp = 1487715500 UTC = Tue Feb 21 14:18:20 2017
    		labels = 0 1 2 3
    	    Uberblock[4]
    		magic = 0000000000bab10c
    		version = 5000
    		txg = 772
    		guid_sum = 9045970794941528051
    		timestamp = 1487727291 UTC = Tue Feb 21 17:34:51 2017
    		labels = 0
    	    < ... redacted ... >
    	------------------------------------
    	LABEL 1
    	------------------------------------
    	    version: 5000
    	    name: 'pool'
    	    state: 1
    	    txg: 14
    	    < ... redacted ... >
    		com.delphix:embedded_data
    	    labels = 1 2 3
    	    Uberblock[4]
    		magic = 0000000000bab10c
    		version = 5000
    		txg = 4
    		guid_sum = 7793930272573252584
    		timestamp = 1487727521 UTC = Tue Feb 21 17:38:41 2017
    		labels = 1 2 3
    	    < ... redacted ... >
    
    Reviewed-by: Tim Chase <tim@chase2k.com>
    Reviewed-by: Don Brady <don.brady@intel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>
    Closes #5738

[33mcommit 7a789346afec87a89c4cde465faf9be4996db556[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Mon Mar 6 09:20:20 2017 -0800

    Fix loop device becomes read-only
    
    Commit 933ec99 removes read and write from f_op because the vfs layer will
    select iter_write or aio_write automatically. However, for Linux <= 4.0,
    loop_set_fd will actually check f_op->write and set read-only if not exists.
    This patch add them back and use the generic do_sync_{read,write} for
    aio_{read,write} and new_sync_{read,write} for {read,write}_iter.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #5776
    Closes #5855

[33mcommit fb963d33ee0dd350143ba1c9cd35d5f7d86910d2[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Mar 6 09:17:24 2017 -0800

    Fix powerpc build
    
    Unlike other architectures which sanitize the LDFLAGS from the
    environment in arch/<arch>/Makefile.  The powerpc Makefile
    allows LDFLAGS to be passed through resulting in the following
    build failure.
    
      /usr/bin/ld: unrecognized option '-Wl,-z,relro'
    
    LDFLAGS is set in /usr/lib/rpm/redhat/macros by default.  Clear
    the environment variable when building kmods for powerpc.
    
    Additionally, now that ppc64le exists it's not longer safe to
    assume a powerpc system is big endian.  Rely on the endianness
    provided by the compiler.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5856

[33mcommit ebd9aa8c17596db4990979bb2f0df3f23d438115[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Wed Mar 1 12:58:12 2017 -0800

    Reduce size of zvol and enforce 4k blocksize in zvol tests
    
    32-bit builders in the buildbot are having trouble completing
    their ENOSPC testing in less than the timeout. Reduce the
    zvol size and use a 4k block size to reduce read-modify-writes
    which are particularly expensive on 32-bit systems due to the
    reduced maximum ARC size.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Kash Pande <kash@tripleback.net>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #5845

[33mcommit d25534f875ba302fab8fcce3c21d7ddd9e775fbf[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Tue Feb 28 18:02:48 2017 -0800

    Bug fixes for single test runs in zfs-tests
    
    Correctly remove the temporary runfile after the
    single test is run.
    
    Cleanup and setup scripts are relative to the
    test suite's location, correct how we look for
    those scripts.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #5844

[33mcommit ec0e24c232cac7afa801ca8d247f212c24eb02a3[m
Author: Sydney Vanda <sydney.m.vanda@intel.com>
Date:   Fri Sep 23 13:51:08 2016 -0700

    Add auto-online test for ZED/FMA as part of the ZTS
    
    Automated auto-online test to go along with ZED FMA integration (PR 4673)
    auto_online_001.pos works with real devices (sd- and mpath) and with non-real
    block devices (loop) by adding a scsi_debug device to the pool
    
    Note: In order for test group to run, ZED must not currently be running.
    Kernel 3.16.37 or higher needed for scsi_debug to work properly
    If timeout occurs on test using a scsi_debug device (error noticed on Ubuntu
    system), a reboot might be needed in order for test to pass. (more
    investigation into this)
    
    Also suppressed output from is_real_device/is_loop_device/is_mpath_device -
    was making the log file very cluttered with useless error messages
    "ie /dev/mapper/sdc is not a block device" from previous patch
    
    Reviewed-by: Don Brady <don.brady@intel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: David Quigley <david.quigley@intel.com>
    Signed-off-by: Sydney Vanda <sydney.m.vanda@intel.com>
    Closes #5774

[33mcommit 4859fe796c5b03687a7b2ab3735b882c4f5cad66[m
Author: Olaf Faaland <faaland1@llnl.gov>
Date:   Tue Feb 28 16:10:18 2017 -0800

    Linux 4.11 compat: avoid refcount_t name conflict
    
    Linux 4.11 introduces a new type, refcount_t, which conflicts with the
    type of the same name defined within ZFS.
    
    Rename the ZFS type zfs_refcount_t.  Within the ZFS code, use a macro to
    cause references to refcount_t to be changed to zfs_refcount_t at
    compile time.  This reduces conflicts when later landing OpenZFS
    patches.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>
    Closes #5823
    Closes #5842

[33mcommit 912e2ba92f45b61df476e7e15da33e0ea3eb0ae5[m
Author: Matt Kemp <matt@mattikus.com>
Date:   Mon Feb 27 14:03:23 2017 -0600

    Fix initramfs hook for merged /usr/lib and /lib
    
    Under a merged `/lib` -> `/usr/lib` which renders `/lib` as a symlink,
    `find /lib -type f -name libgcc_s.so.1` will not return a result as
    `find` will not traverse the symlink. Modifying it to `find /lib/ -type
    f -name libgcc_s.so.1` should work for both symlinked and non-symlinked
    `/lib` directories.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Matt Kemp <matt@mattikus.com>
    Closes #5834

[33mcommit 66eead53c9d2480f2a464ef170920953431ad200[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Fri Feb 24 13:34:26 2017 -0800

    Clean up by-dnode code in dmu_tx.c
    
    https://github.com/zfsonlinux/zfs/commit/0eef1bde31d67091d3deed23fe2394f5a8bf2276
    introduced some changes which we slightly improved the style of when
    porting to illumos.
    
    There is also one minor error-handling fix, in zap_add() the "zap" may
    become NULL in case of an error re-opening the ZAP.
    
    Originally suggested at: https://github.com/openzfs/openzfs/pull/276
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Signed-off-by: Matthew Ahrens <mahrens@delphix.com>
    Closes #5805

[33mcommit f7e76821c525a7764a01f4a0e16aa9e2b77e3170[m
Author: Isaac Huang <he.huang@intel.com>
Date:   Fri Feb 24 13:05:42 2017 -0700

    ABD style cleanups
    
    The commit a6255b7fce400d485a0e87cbe369aa0ed7dc5dc4 removed a few
    assertions which help catch errors and improve code readability. It also
    duplicated two conditionals, which was unnecessary and made the code
    confusing to read. This patch cleans it up.
    
    Reviewed-by: David Quigley <david.quigley@intel.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Isaac Huang <he.huang@intel.com>
    Closes #5802

[33mcommit 384328e544b1847236a07df231e1b7b10e4cc6ce[m
Author: Tim Crawford <crawfxrd@users.noreply.github.com>
Date:   Fri Feb 24 14:29:47 2017 -0500

    Fix checksumflags assignment in cksummer
    
    drr_checksumflags was incorrectly set to drr_checksumtype.
    
    Reviewed-by: Matt Ahrens <mahrens@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Tim Crawford <tcrawford@datto.com>
    Closes #5830

[33mcommit 3ae35478d75c3a94d3b23e2dd5e826a5ed9b6057[m
Author: Ahmed G <ahmedg@delphix.com>
Date:   Tue Jan 17 16:53:31 2017 -0800

    OpenZFS 7736 - ZFS Performance tests should log FIO summary output
    
    Authored by: Ahmed G <ahmedg@delphix.com>
    Reviewed by: John Kennedy <john.kennedy@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Stephen Blinick <stephen.blinick@delphix.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    Porting Notes:
    - Using $FIO until 7290 is ported.
    
    OpenZFS-issue: https://www.illumos.org/issues/7736
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/7a61309
    Closes #5827

[33mcommit 9e2c3bb4b977bb6c5091b63bf6a736466ba25d1a[m
Author: Daniel Hoffman <dj.hoffman@delphix.com>
Date:   Fri Feb 17 11:48:20 2017 -0800

    OpenZFS 7812 - Remove gender specific language
    
    Authored by: Daniel Hoffman <dj.hoffman@delphix.com>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Steve Gonczi <steve.gonczi@delphix.com>
    Reviewed by: Chris Williamson <chris.williamson@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Igor Kozhukhov <igor@dilos.org>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    This change removes all gendered language that did not refer specifically
    to an individual person or pet. The convention taken was to use
    variations on "they" when referring to users and/or human beings, while
    using "it" when referring to code, functions, and/or libraries.
    Additionally, we took the liberty to fix up any whitespace issues that
    were found in any files that were already being modified.
    
    OpenZFS-issue: https://www.illumos.org/issues/7812
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/ad626db
    Closes #5822

[33mcommit cbeeb4afb35ecd77e70f5019ac4f3f0f88fb8df6[m
Author: Prakash Surya <prakash.surya@delphix.com>
Date:   Wed Jan 11 16:36:58 2017 -0800

    OpenZFS 7761 - bootfs_005_neg's pool destruction must handle EBUSY
    
    Authored by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Yuri Pankov <yuri.pankov@gmail.com>
    Reviewed by: John Kennedy <john.kennedy@delphix.com>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7761
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/ad309d3
    Closes #5818

[33mcommit 0efd97912a14bcbc9dceae3de70b9ceaafcb12a9[m
Author: Andriy Gapon <andriy.gapon@clusterhq.com>
Date:   Mon Nov 21 15:09:54 2016 -0800

    OpenZFS 7199 - dsl_dataset_rollback_sync may try to free already free blocks
    
    7200 no blocks must be born in a txg after a snaphot is created
    Authored by: Andriy Gapon <andriy.gapon@clusterhq.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Brad Lewis <brad.lewis@delphix.com>
    Approved by: Gordon Ross <gordon.w.ross@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7199
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/bfaed0b
    Closes #5817

[33mcommit 409b4127eea9bcf276f3bdaf5c2b8a907ccd1d59[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Fri Sep 23 20:44:15 2016 -0700

    OpenZFS 7337 - inherit_001_pos occasionally times out
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: John Kennedy <john.kennedy@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7337
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/b021ac0
    Closes #5800
    
    Porting notes:
    - Additional code refactor for better Zol and OpenZFS codebase sync

[33mcommit d8fa599fab81109c22253fbe0946cbe0f98ea1c4[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Fri Feb 24 10:59:24 2017 -0800

    Allow zfs-tests to run a single test
    
    Add a -t flag to zfs-tests to allow a user
    to run a single test by providing the path
    to the test relative to STF_SUITE.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #5775

[33mcommit 6d82f98c3d9f83045a801df60f904421b101faa9[m
Author: Isaac Huang <he.huang@intel.com>
Date:   Thu Feb 23 11:32:15 2017 -0700

    Fix incorrect spare vdev state after replacing
    
    After a hot spare replaces an OFFLINE vdev, the new
    parent spare vdev state is set incorrectly to OFFLINE.
    The correct state should be DEGRADED. The incorrect
    OFFLINE state will prevent top-level vdev from reading
    the spare vdev, thus causing unnecessary reconstruction.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Don Brady <don.brady@intel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Isaac Huang <he.huang@intel.com>
    Closes #5766
    Closes #5770

[33mcommit 100790a8dd7c7cbbcf35871d7361429e2ae09435[m
Author: Christopher Voltz <cjunk@voltz.ws>
Date:   Thu Feb 16 15:41:48 2017 -0600

    Retry setting LED
    
    If the LED is being accessed by another process when we try to update
    it, the update will be lost. Add a retry loop which will read the state
    of the LED and update it until the LED is in the correct state. The
    number of times this will occur is limited to ensure that the ZEDlet
    won't hang ZED.
    
    Refactor to remove duplication so setting of the LED occurs in only one
    place.
    
    Cleanup a couple of the warnings generated by shellcheck which weren't
    the result of specific choices by the author. Several notes and warnings
    are still present but removing them would make the code less clear or
    require adding lines to tell shellcheck to ignore the warning.
    
    Remove ",i" from the documentation at the top of the file which appears
    to be a typographic error.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Signed-off-by: Christopher Voltz <christopher.voltz@hpe.com>
    Closes #5795

[33mcommit 43bd43f9ce3bb690be3bc83f9797c7fce01c6047[m
Author: Hans Rosenfeld <hans.rosenfeld@nexenta.com>
Date:   Thu May 26 17:32:26 2016 +0200

    OpenZFS 7001 - zvol_misc tests should not depend on /sbin or /usr/sbin being in PATH
    
    Authored by: Hans Rosenfeld <hans.rosenfeld@nexenta.com>
    Reviewed by: Toomas Soome <tsoome@me.com>
    Reviewed by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7001
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/258c9c7
    Closes #5801
    
    Porting notes:
    - Most of the changes were previously applied.

[33mcommit 906091718936ded06aeef49096964b6fba1e2475[m
Author: John Wren Kennedy <john.kennedy@delphix.com>
Date:   Tue Aug 30 12:01:41 2016 -0700

    OpenZFS 7248 - large block support breaks rsend_009_pos
    
    7249 rsend_015_pos produces false failures due to race
    7250 testrunner can miss options specific to individual tests in runfiles
    
    Authored by: John Wren Kennedy <john.kennedy@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7248
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/f9a78bf
    Closes #5799

[33mcommit ce456d483c6a30223bbbfd2308f44945d34dec8d[m
Author: Prakash Surya <prakash.surya@delphix.com>
Date:   Tue Jan 17 17:08:12 2017 -0800

    OpenZFS 7762 - avoid division by zero in property_alias_001_pos
    
    Authored by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: John Kennedy <john.kennedy@delphix.com>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/7762
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/ebaf15cb
    Closes #5798

[33mcommit c30e58c4628de46c36870cdedea9052711092a85[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Feb 15 15:49:33 2017 -0800

    zfs_arc_num_sublists_per_state should be common to all multilists
    
    The global tunable zfs_arc_num_sublists_per_state is used by the ARC and
    the dbuf cache, and other users are planned. We should change this
    tunable to be common to all multilists.  This tuning may be overridden
    on a per-multilist basis.
    
    Reviewed-by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Reviewed-by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Matthew Ahrens <mahrens@delphix.com>
    Closes #5764

[33mcommit 3d3fe9f9bb4364718cb8c54d8c86bccc84ae3141[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Sun May 15 08:09:13 2016 -0700

    OpenZFS 6404 - zvol_swap_006_pos can occasionally fail due to swaplen being < 16
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    6405 zvol test setup is non deterministic
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: John Kennedy <john.kennedy@delphix.com>
    Reviewed by: Will Andrews <will@freebsd.org>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/6404
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/24e268f
    Closes #5792
    
    Porting notes:
    - Converted zfs to $ZFS until OpenZFS 7290 is ported.
      openzfs/openzfs@1d32ba6

[33mcommit f9caf08a7497d3ad64bd4878c0fd8b5c78d21751[m
Author: Christopher Voltz <cjunk@voltz.ws>
Date:   Wed Feb 15 13:15:38 2017 -0600

    Fix broken URL
    
    Google moved their style guides to GitHub. Update the shell style guide
    URL to the new location.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Christopher Voltz <christopher.voltz@hpe.com>
    Closes #5797

[33mcommit 2171eb71122933c5fd07a0ec192bb7d6a9e11ace[m
Author: John Wren Kennedy <john.kennedy@delphix.com>
Date:   Mon Aug 8 09:41:07 2016 -0700

    OpenZFS 7260 - disable libdiskmgmt in zfstest unless it's required
    
    Authored by: John Wren Kennedy <john.kennedy@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Reviewed by: Yuri Pankov <yuri.pankov@nexenta.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7260
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/447b1e1
    Closes #5794
    
    Porting notes:
    - The library libdiskmgmt is specific to illumos so these changes
      currently have no impact under Linux.  This mechanism could be
      potentially leveraged in the future.

[33mcommit a454868b0c631bb37e4ffb7a0b7cd672c2ae4c22[m
Author: Olaf Faaland <faaland1@llnl.gov>
Date:   Mon Feb 13 15:30:22 2017 -0800

    Use file-based pools for zpool_expand test 002 and enable it
    
    Use -pH flags in get_pool_prop so that numeric properties such as size
    can be compared.  The zpool_expand test suite is currently the only one
    which uses get_pool_prop for a numeric property.
    
    Add TEMPFILE and TEMPFILE{0,1,2} to default.cfg for tests that must
    build pools on top of files, such as this one where expansion is
    necessary but the entries in DISKS may not point to entities that can be
    expanded.
    
    Base the pool used for testing on file-type VDEVs instead of using zvols
    within an underlying pool, to avoid issues that come up when pools are
    backed by other pools.
    
    Remove shell variables EX_1GB and EX_2GB used to recognize correct expansion,
    and instead calculate the appropriate values based on the variables used to
    control file or volume size, org_size and exp_size.  This change is also
    made in test 001 although that test is not enabled because it depends on
    FMA.
    
    Finally, enable zpool_expand_002_pos.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Don Brady <don.brady@intel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>
    Closes #5757

[33mcommit 6dd95a910a258c38f239785d7275cd93ab29da37[m
Author: Akash Ayare <aayare@delphix.com>
Date:   Thu Jun 2 21:00:23 2016 -0700

    OpenZFS 7027 - zfs_written_property_001_pos makes unreasonable assumptions about metadata space usage
    
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: John Kennedy <john.kennedy@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Approved by: Gordon Ross <gordon.ross@nexenta.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/7027
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/48cb8b9
    Issue #2441
    Closes #5778

[33mcommit 8db2dc32cdd50c5517851eab33bc31756e78975c[m
Author: Yuri Pankov <yuri.pankov@gmail.com>
Date:   Sat Mar 19 00:11:23 2016 +0300

    OpenZFS 6754 - zfs-tests: get_substr() function is redundant
    
    Authored by: Yuri Pankov <yuri.pankov@gmail.com>
    Reviewed by: John Kennedy <john.kennedy@delphix.com>
    Approved by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/6754
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/01ff411
    Closes #5787
    
    Porting notes:
    - Only the ACL test cases used this function and they have been
      dropped from ZoL since Linux used POSIX style ACLs.
    
      - functional/acl/nontrivial/zfs_acl_chmod_aclmode_001_pos.ksh
      - functional/acl/nontrivial/zfs_acl_chmod_inherit_003_pos.ksh
      - functional/acl/nontrivial/zfs_acl_chmod_rwx_002_pos.ksh

[33mcommit 501558ee6e7465533cb6740fd643c0ec362f28d9[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Mon Feb 13 23:02:22 2017 +0300

    Disable racy snapshot_008_pos
    
    Sometimes zfstests check freed space just after
    `zfs destroy snapshot` and get wrong output, because the
    space being freed asynchronously in the background.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: George Melikov <mail@gmelikov.ru>
    Issue #5740
    Issue #5784
    Closes #5785

[33mcommit 0dc8347c30475c9b50061343e15bab428a2005ee[m
Author: Igor Kozhukhov <ikozhukhov@gmail.com>
Date:   Thu Jun 9 16:38:35 2016 -0400

    OpenZFS 7036 - zvol_swap_004_pos test failed
    
    Authored by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Reviewed by: - John Kennedy <john.kennedy@delphix.com>
    Approved by: - Dan McDonald <danmcd@omniti.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7036
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/3f85b2a
    Closes #5783

[33mcommit 37bb2fc7dc794536dbdad0375557cdb48924519b[m
Author: Marcel Telka <marcel@telka.sk>
Date:   Thu Sep 22 15:36:32 2016 +0200

    OpenZFS 7398 - zfs test zfs_get_005_neg does not work as expected
    
    Authored by: Marcel Telka <marcel@telka.sk>
    Reviewed by: Yuri Pankov <yuri.pankov@nexenta.com>
    Reviewed by: John Kennedy <john.kennedy@delphix.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7398
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/4220fdc
    Closes #5782

[33mcommit 94cc33f017b45dfdc137672e8e6feddc5ff56a9e[m
Author: Marcel Telka <marcel@telka.sk>
Date:   Wed Oct 19 10:50:39 2016 -0700

    OpenZFS 7103 - failed test cli_root/zfs_snapshot/zfs_snapshot_009_pos
    
    Authored by: Marcel Telka <marcel@telka.sk>
    Reviewed by: - Igor Kozhukhov <ikozhukhov@gmail.com>
    Reviewed by: - Yuri Pankov <yuri.pankov@nexenta.com>
    Reviewed by: - John Kennedy <john.kennedy@delphix.com>
    Approved by: - Matthew Ahrens <mahrens@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7103
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/3bfdbb4
    Closes #5780

[33mcommit a115cf35f8b4a85907e9879a18476e9b89b3c981[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Tue Jul 19 16:10:27 2016 -0700

    OpenZFS 7162 - Intermittent failures from ro_props_001_pos
    
    Reviewed by: John Kennedy <john.kennedy@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/7162
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/9ec0cbeb
    Closes #5511
    Closes #5779

[33mcommit 544596c59e49b25584c58007d04b94097e8a8292[m
Author: Tim Chase <tim@chase2k.com>
Date:   Mon Feb 13 12:59:05 2017 -0600

    Fix zfs_compressed_arc_enabled parameter description
    
    A likely cut/paste error caused the description to be applied to
    zfs_arc_average_blocksize.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Closes #5788

[33mcommit 8b2174b9a492d620d7bef45e5fb661b9f18c51a9[m
Author: Yuri Pankov <yuri.pankov@gmail.com>
Date:   Sat Apr 9 09:36:54 2016 -0700

    OpenZFS 6580 - zfs-tests use undefined variable WRAPPER
    
    Authored by: Yuri Pankov <yuri.pankov@gmail.com>
    Reviewed by: John Kennedy <john.kennedy@delphix.com>
    Approved by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/6580
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/9498083
    Closes #5789
    
    Porting notes:
    - deleted in ZoL: functional/utils_test/utils_test_007_pos.ksh

[33mcommit 510e66db854633aed7a05ee865c140384b2dec87[m
Author: John Wren Kennedy <john.kennedy@delphix.com>
Date:   Sat Nov 5 20:32:44 2016 -0700

    OpenZFS 7496 - cmp_ds_cont has never worked
    
    Authored by: John Wren Kennedy <john.kennedy@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Approved by: Gordon Ross <gordon.w.ross@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7496
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/5dc1fd7
    Closes #5781

[33mcommit 717afc132631155beae9b8da183a4734b859140d[m
Author: John Wren Kennedy <john.kennedy@delphix.com>
Date:   Wed Feb 24 21:13:41 2016 -0800

    OpenZFS 6642 - testrunner output can be displayed in the wrong order
    
    6643 zfstest should enforce the required privileges before running.
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Jonathan Mackenzie <jonathan.mackenzie@delphix.com>
    Reviewed by: Yuri Pankov <yuri.pankov@nexenta.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed by: John Kennedy <john.kennedy@delphix.com>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov
    
    OpenZFS-issue: https://www.illumos.org/issues/6642
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/412db4e
    Closes #5777
    
    Porting notes:
    - The 6643 changes were dropped a different version of this script
      is used to configure the environment under Linux.

[33mcommit d6df043c530e850e907a8391025c2989eb7a9949[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Sat Feb 11 12:42:17 2017 -0800

    Fix off by one in zpl_lookup
    
    Doing the following command would return success with zfs creating an orphan
    object.
    
    	touch $(for i in $(seq 256); do printf "n"; done)
    
    The funny thing is that this will only work once for each directory, because
    after upgraded to fzap, zfs_lookup would fail properly since it has additional
    length check.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5768

[33mcommit b291029e8661dfc2f03118921e854eec4e5bbb75[m
Author: Tony Hutter <hutter2@llnl.gov>
Date:   Fri Feb 10 16:09:45 2017 -0800

    Enclosure LED fixes
    
    - Pass $VDEV_ENC_SYSFS_PATH to 'zpool [iostat|status] -c' to include
      enclosure LED sysfs path.
    
    - Set LEDs correctly after import.  This includes clearing any erroniously
      set LEDs prior to the import, and setting the LED for any UNAVAIL drives.
    
    - Include symlink for vdev_attach-led.sh in Makefile.am.
    
    - Print the VDEV path in all-syslog.sh, and fix it so the pool GUID actually
      prints.
    
    Reviewed-by: Don Brady <don.brady@intel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Closes #5716
    Closes #5751

[33mcommit 65a736bc0df16561bac14bee6bf9a6752cf8bc39[m
Author: Tony Hutter <hutter2@llnl.gov>
Date:   Fri Feb 10 15:18:31 2017 -0800

    Clear enclosure sysfs path from VDEV label when sysfs path isn't present
    
    This clears vdev_enc_sysfs_path from the label if the VDEV's
    /sys/class/block/<dev>/device/enclosure_device path isn't present.
    
    This is important in the case where a disk that is labeled with
    vdev_enc_sysfs_path is pulled out and put into another enclosure.
    In that case, it's possible that the old sysfs path would be used to
    turn on the fault LED for the disk's old slot postion, assuming the
    new slot didn't have a LED sysfs entry.
    
    Reviewed-by: Don Brady <don.brady@intel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Closes #5524
    Closes #5773

[33mcommit 449705dbef3008f1cf69ea59276bd07720e4beb2[m
Author: Simon Klinkert <simon.klinkert@gmail.com>
Date:   Wed Mar 11 11:02:08 2015 +0100

    OpenZFS 5704 - libzfs can only handle 255 file descriptors
    
    Authored by: Simon Klinkert <simon.klinkert@gmail.com>
    Reviewed by: Josef 'Jeff' Sipek <josef.sipek@nexenta.com>
    Reviewed by: John Kennedy <john.kennedy@delphix.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed by: Ned Bass <bass6@llnl.gov>
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/5704
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/bde3d61
    Closes #5767

[33mcommit d7958b4cda27b82bd24dd4d4b2a539e26c62a409[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Jul 13 16:48:01 2016 -0700

    OpenZFS 7104 - increase indirect block size
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7104
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/4b5c8e9
    Closes #5679

[33mcommit df7eeccc7597980efd3cb1efd9377ad5e0483042[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Thu Feb 9 10:19:12 2017 -0800

    panic in bpobj_space(): null pointer dereference
    
    This is a race condition in the deadlist code.
    
    A thread executing an administrative command that uses
    dsl_deadlist_space_range() holds the lock of the whole deadlist_t to
    protect the access of all its entries that the deadlist contains in an
    avl tree.
    
    Sync threads trying to insert a new entry in the deadlist (through
    dsl_deadlist_insert() -> dle_enqueue()) do not hold the deadlist lock at
    that moment.  If the dle_bpobj is the empty bpobj (our sentinel value),
    we close and reopen it.  Between these two operations, it is possible
    for the dsl_deadlist_space_range() thread to dereference that bpobj
    which is NULL during that window.
    
    Threads should hold the a deadlist's dl_lock when they manipulate its
    internal data so scenarios like the one above are avoided.
    
    Reviewed-by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed-by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Matthew Ahrens <mahrens@delphix.com>
    Closes #5762

[33mcommit b0eac56a4d69c6f2ae7cb1937cf59e05c52e3a60[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Feb 7 20:12:53 2017 -0500

    Move ziltest.sh to the ZTS framework
    
    The ziltest.sh script is a test case designed to verify the correct
    functioning of the ZIL.  For historical reasons it was never added
    to the test suite and was always run independantly.
    
    This change rectifies that.  The existing ziltest.sh has been
    translated in to `slog_015_pos.ksh` and added to the existing
    slog test cases.
    
    Reviewed-by: Don Brady <don.brady@intel.com>
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5758

[33mcommit ea7e86d8dbbfbaa96a3b018a80397cb24befcb72[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Feb 7 18:57:50 2017 -0500

    Fix iput() calls within a tx
    
    As explicitly stated in section 2 of the 'Programming rules'
    comments at the top of zfs_vnops.c.
    
      If you must call iput() within a tx then use zfs_iput_async().
    
    Move iput() calls after dmu_tx_commit() / dmu_tx_abort when
    possible.  When not possible convert the iput() calls to
    zfs_iput_async().
    
    Reviewed-by: Don Brady <don.brady@intel.com>
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5758

[33mcommit d834b9ce5ba6be96ce13c31351cf92c89f7762fe[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Thu Feb 9 02:27:37 2017 +0300

    Add `wait_freeing` helper function to ZTS
    
    Sometimes the ZTS checks freed space just after `zfs destroy snapshot` and
    gets an unexpected value because of space being freed asynchronously.
    For cases like this add a `wait_freeing` function which blocks until the
    pools `freeing` property drops to zero.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: George Melikov <mail@gmelikov.ru>
    Closes #5740

[33mcommit d32d25c5c26c8d1e254bc0fcb8a8ae059e95cebc[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Feb 8 10:17:29 2017 -0800

    Fix zfs-mount.service failure on boot
    
    The mount(8) command will helpfully try to resolve any device name
    which is passed in.  It does this by applying some simple heuristics
    before passing it along to the registered mount helper.
    
    Normally this fine.  However, one of these heuristics is to prepend
    the current working directory to the passed device name.  If that
    resulting directory name exists mount(8) will perform the mount(2)
    system call and never invoke the helper utility.
    
    Since the cwd for systemd when running as the system instance is
    the root directory the default mount points created by zfs(8) can
    cause a mount failure.
    
    This change avoids the issue by explicitly setting the cwd to
    a different path when performing the mount.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5719

[33mcommit 97dde9211d95bbd219b3fac38ff60615e80c0ac1[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Wed Feb 8 21:06:02 2017 +0300

    Fix coverity defects: CID 155964, 155965
    
    CID 155964: Missing break in switch
    CID 155965: Missing break in switch
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: George Melikov <mail@gmelikov.ru>
    Closes #5759

[33mcommit 4a5d7f82679d848bcfb95d6c841f0418b24bfeab[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Feb 8 09:27:48 2017 -0800

    Allow c99 code to compile
    
    Add the appropriate compiler flags to accept c99 code.  This will help to
    minimize differences with upstream, and aid porting changes.  One change was
    necessary in zvol.c because the DEFINE_IDA() macro does not work with the new
    compiler flags.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Matthew Ahrens <mahrens@delphix.com>
    Closes #5756

[33mcommit 23d70cdef108005ecf4d862e0af01d08dabbc9c7[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Wed Feb 8 01:02:27 2017 +0300

    OpenZFS 6931 - lib/libzfs: cleanup gcc warnings
    
    Authored by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/6931
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/88f61de
    Closes #5741

[33mcommit bef78122e606945efbf2e08845e7d5e8ead93c3c[m
Author: David Quigley <dpquigl@users.noreply.github.com>
Date:   Tue Feb 7 10:44:03 2017 -0700

    Add missing module_param for zfs_per_txg_dirty_frees_percent
    
    When the code was added this tunable was not exposed via module params. Also it
    was not documented. This patch changes the type from a uint32 to a ulong as
    done with other percentage tunables and also documents it in the
    zfs-module-parameters man page.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: David Quigley <david.quigley@intel.com>
    Closes #5750

[33mcommit cd5083c00c6215f4f15c04e30feeb5f9457ec896[m
Author: Don Brady <don.brady@intel.com>
Date:   Tue Feb 7 10:29:47 2017 -0700

    Fix coverity defects: CID 155928
    
    CID 155928: Integer handling issues (DIVIDE_BY_ZERO)
    
    In the current vdev label, the leaf count is always non-zero
    but it doesn't hurt to check the count for future proofing.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Don Brady <don.brady@intel.com>
    Closes #5749

[33mcommit 582cc0141699991da38ba8bfc8eb938ecb2d9856[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Mon Feb 6 19:08:10 2017 +0100

    Fix ZFS Test Suite failures caused by ksh brace expansion feature
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #5669
    Closes #5743

[33mcommit 298ec40b6d9edcbde7b1fbbf172bd05be0eb9b97[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Sat Feb 4 20:23:50 2017 +0300

    OpenZFS 7448 - ZFS doesn't notice when disk vdevs have no write cache
    
    Authored by: Hans Rosenfeld <hans.rosenfeld@nexenta.com>
    Reviewed by: Dan Fields <dan.fields@nexenta.com>
    Reviewed by: Alek Pinchuk <alek.pinchuk@nexenta.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed-by: Don Brady <don.brady@intel.com>
    Reviewed-by: Tim Chase <tim@chase2k.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7448
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/295438b
    Closes #5737

[33mcommit 0a252daed3bafb71740ed37bd039bd421277bc82[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Sat Feb 4 20:21:25 2017 +0300

    OpenZFS 7504 - kmem_reap hangs spa_sync and administrative tasks
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Tim Chase <tim@chase2k.com>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7504
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/405a5a0
    Closes #5736

[33mcommit 2e0e443ac40c7e825a02519a497328226bd866ff[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Sat Feb 4 20:10:24 2017 +0300

    OpenZFS 7247 - zfs receive of deduplicated stream fails
    
    Authored by: Chris Williamson <chris.williamson@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: loli10K <ezomori.nozomu@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7247
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/2ad25b4
    Closes #5689
    
    Porting notes:
    - tests/zfs-tests/tests/functional/cli_root/zfs_receive/zfs_receive_013_pos.ksh
      renamed as zfs_receive_015_pos.ksh, zfs_receive_013_pos.ksh is now
      used for OpenZFS test.
    - libzfs_sendrecv.c: SMALLEST_POSSIBLE_MAX_DDT_MB is always used
      for all 32-bit builds.

[33mcommit 57c6a9174d9e1d3844181267e34d9510b1250b4a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 3 19:00:00 2017 -0800

    Disable sparse_001_pos / truncate_001_pos.ksh on 32-bit systems
    
    Commit 539d33c seems to have significantly increased the run time
    of the sparse_001_pos.ksh and truncate_001_pos.ksh test cases on
    32-bit systems.  This is likely due to dirty blocks from frees
    being deferred to later txgs.
    
    At the moment this is resulting in frequent failures on the
    32-bit builders.  Disable this test case until the issue can be
    analyzed and resolved.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #5727
    Closes #5728

[33mcommit 35a357a9efe1be317d41f926732e38e18644a830[m
Author: Don Brady <don.brady@intel.com>
Date:   Fri Feb 3 15:18:28 2017 -0700

    OpenZFS 6866 - zdb -l non-zero status if no label
    
    Authored by: Yuri Pankov <yuri.pankov@nexenta.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: John Kennedy <john.kennedy@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Ported-by: Don Brady <don.brady@intel.com>
    
    OpenZFS-issue: https://www.illumos.org/issues/6866
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/3e4fae5
    Closes #5730
    
    Porting Notes:
    - Omitted the illumos-specific `/dev/dsk` and `/dev/rdsk`
    path conversions since they don't apply on linux.

[33mcommit dffaa61ded206d620a0db88231e56aece56b8422[m
Author: Olaf Faaland <faaland1@llnl.gov>
Date:   Fri Feb 3 13:42:49 2017 -0800

    Add tmpfile_003_pos to .gitignore
    
    Earlier commit added a test that created tmpfile_003_pos,
    but did not add it to the appropriate .gitignore.
    
    ace1eae Add support for O_TMPFILE
    
    Fix the omission.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>
    Closes #5735

[33mcommit d21d5b8248cf38d1518c9beccc350bc9081ff6be[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Fri Feb 3 13:24:44 2017 -0800

    OpenZFS 4521 - zfstest is trying to execute evil "zfs unmount -a"
    
    Authored by: Yuri Pankov <yuri.pankov@nexenta.com>
    Reviewed by: Andriy Gapon <avg@FreeBSD.org>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: John Kennedy <john.kennedy@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    Porting Notes:
    - Correctly set __ZFS_POOL_RESTRICT in inherit_001_pos
    
    OpenZFS-issue: https://www.illumos.org/issues/4521
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/8808ac5
    Closes #5674

[33mcommit 9b7b9cd370ed2ec4c8ee346bcb95cb30ba7e9ba9[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Fri Feb 3 01:13:41 2017 +0300

    OpenZFS 1300 - filename normalization doesn't work for removes
    
    Authored by: Kevin Crowe <kevin.crowe@nexenta.com>
    Reviewed by: Yuri Pankov <yuri.pankov@nexenta.com>
    Reviewed by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/1300
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/8f1750d
    Closes #5725
    
    Porting notes:
    - zap_micro.c: all `MT_EXACT` are replaced by `0`

[33mcommit 96f1b347f8f726163c105704576110a4a8be4b84[m
Author: Don Brady <don.brady@intel.com>
Date:   Thu Feb 2 15:03:48 2017 -0700

    Add nvlist payload stats for zdb -ll dump
    
    When dumping the ZFS vdev label with 'zdb -ll', also dump
    some nvlist stats to help analyze the current footprint.
    
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Don Brady <don.brady@intel.com>
    Closes #5724

[33mcommit c7af63d62aba273554d6c8457e26c870ed207b40[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Thu Feb 2 09:43:42 2017 -0800

    Fix write(2) returns zero bug from 933ec99
    
    For generic_write_checks with 2 args, we can exit when it returns zero because
    it means count is zero. However this is not the case for generic_write_checks
    with 4 args, where zero means no error.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Haakan T Johansson <f96hajo@chalmers.se>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #5720
    Closes #5726

[33mcommit fc386db1916dd946512d9b965d4d354582be1f9e[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Wed Feb 1 16:47:04 2017 -0800

    Remove lint ifdef checks in zdb and dbuf
    
    This is effectively dead code for the Linux implementation which can
    be removed to improve readability.  We want to linter to check the
    real production/debug build as much as possible.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #5722

[33mcommit 8eecd4a2de217b3f7a40982dcf7765bc0c4104ba[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Feb 1 16:28:01 2017 -0800

    Fix reservation test cases for large disks
    
    Convert explicit `typeset -i` and `typeset -l` declarations to
    `typeset` in order to prevent 32-bit overflow from occurs with
    disks >2G.
    
    TEST_ZFSTESTS_DISKSIZE=4G
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5715
    Closes #5714

[33mcommit 0f676dc228862ce0b4f9e27d06d394e9cbaa32e3[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Thu Feb 2 00:14:02 2017 +0300

    OpenZFS 7072 - zfs fails to expand if lun added when os is in shutdown state
    
    Authored by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Alex Reece <alex@delphix.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7072
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/c39a2aa
    Closes #5694
    
    Porting notes:
    - vdev.c: 'vdev_get_stats' changes are moved to 'vdev_get_stats_ex'.
    - vdev_disk.c: ignored, Linux specific code is different.

[33mcommit 3b6425cb5bfd0fc2a14eee451ba36873318a96d9[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Feb 1 09:36:47 2017 -0800

    Fix atomic_sub_64() i386 assembly implementation
    
    The atomic_sub_64() should use sbbl instead of adcl.  In user
    space these atomics are used for statistics tracking and aren't
    critical which explain how this was overlooked.  The kernel
    space implementation of these atomics are layered on the
    architecture specific implementations provided by the kernel.
    
    Reviewed by: Stefan Ring <stefanrin@gmail.com>
    Reviewed-by: Gvozden Neskovic <neskovic@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5671
    Closes #5717

[33mcommit 2fe36b0bfb80a4955f6ff42b2448f432223f6011[m
Author: David Quigley <dpquigl@users.noreply.github.com>
Date:   Wed Feb 1 10:34:22 2017 -0700

    Use fletcher_4 routines natively with `abd_iterate_func()`
    
    This patch adds the necessary infrastructure for ABD to make use
    of the vectorized fletcher 4 routines.
    
    - export ABD compatible interface from fletcher_4
    - add ABD fletcher_4 tests for data and metadata ABD types.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Original-patch-by: Gvozden Neskovic <neskovic@gmail.com>
    Signed-off-by: David Quigley <david.quigley@intel.com>
    Closes #5589

[33mcommit 544b8053dbb03de69950c232d1f1970bc36535b6[m
Author: Tim Crawford <crawfxrd@users.noreply.github.com>
Date:   Tue Jan 31 17:47:32 2017 -0500

    Match on word for excluding pools from tests
    
    Running tests locally were failing on cleanup scripts due to having a
    pool named "pool". Match on word so the cleanup logic will cleanup
    "testpool.*" while ignoring "pool".
    
    Reviewed-by: loli10K <ezomori.nozomu@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Tim Crawford <tcrawford@datto.com>
    Closes #5703

[33mcommit 539d33c791da2f970cfa5a1bddf0533b23146265[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Wed Feb 1 01:44:03 2017 +0300

    OpenZFS 6569 - large file delete can starve out write ops
    
    Authored by: Alek Pinchuk <alek@nexenta.com>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Reviewed by: Sanjay Nadkarni <sanjay.nadkarni@nexenta.com>
    Reviewed by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    Tested-by: kernelOfTruth <kerneloftruth@gmail.com>
    
    OpenZFS-issue: https://www.illumos.org/issues/6569
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/1bf4b6f2
    Closes #5706

[33mcommit a873815b95a4a66294c31db70cdce0e1a6ff650f[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Wed Feb 1 01:41:23 2017 +0300

    OpenZFS 7742 - zfs send wrong error message with invalid long opts
    
    There are two cases:
    
        1. if an invalid flag is passed, and
        2. if a valid flag is not given a parameter.
    
    In the case of (1), the flag is either short or long. For short flags,
    optopt contains the character of the flag. For long, it contains zero,
    and we can access the long flag using argv and optind.
    
    In the case of (2), if the flag is short, optopt contains the character
    of the flag. If the flag is long, the value in the 4th column of the
    long_options table, for that flag, is returned.
    
    We could case over all those values, or we could simply use argv and
    optind again.
    
    Note that in the case of something like `--resume`, which is also `-t`,
    "t" will be returned if an argument is not provided; so the error
    message will say `'t': argument not provided` or similar. This could be
    fixed by making it so long and short options don't use the same
    character flag, and then combining them in the switch/case statement,
    but I didn't think the ugliness of the code would be worth the small
    usability enhancement.
    
    Authored by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Steve Gonczi <steve.gonczi@delphix.com>
    Reviewed by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7742
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/6d69b40
    Closes #5702

[33mcommit d69a321e567bf57c08f243969031545866abaf9d[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Tue Jan 31 14:36:35 2017 -0800

    OpenZFS 7545 - zdb should disable reference tracking
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Steve Gonczi <steve.gonczi@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    Porting Notes: Moved reference_tracking_enable and
    reference_history outside of ZFS_DEBUG.
    
    OpenZFS-issue: https://www.illumos.org/issues/7545
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/4dd77f9
    Closes #5701

[33mcommit 3d91261599447833fb96e99055d1108ea2b0c171[m
Author: Aron Xu <happyaron@users.noreply.github.com>
Date:   Wed Feb 1 06:25:49 2017 +0800

    contrib/dracut: fix syntax error in module-setup.sh
    
    The dracut/02zfsexpandknowledge/module-setup.sh.in has a syntax error
    which makes the script unusable by a POSIX compliant shell like Dash
    on Debian based systems.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Aron Xu <happyaron.xu@gmail.com>
    Closes #5712

[33mcommit b81a3ddc3207dd832bd236f2ff20d409a0aee0b4[m
Author: Tim Chase <tim@chase2k.com>
Date:   Tue Jan 31 16:19:08 2017 -0600

    Update deadman operation to better align with upstream OpenZFS
    
    The deadman in ZoL didn't behave quite as it did in upstream
    OpenZFS.  In addition to the 2 purposes for which OpenZFS used the
    zfs_deadman_synctime_ms parameter, ZoL also used it to determine how
    frequently the deadman would fire once it has been triggered.
    
    This patch adds the zfs_deadman_checktime_ms parameter to control how
    frequently the subsequent checks are performed.
    
    The deadman is now disabled for suspended pools.
    
    As had been the case, unlike upstream OpenZFS, ZoL will not panic when
    a hung IO is detected.
    
    The module parameter documentation has been upated to include the new
    parameter and to better describe the operation of the deadmen.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Closes #5695

[33mcommit e24548975ccda48907bd7661ac0ef96b396c6d73[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Tue Jan 31 21:48:45 2017 +0300

    OpenZFS 7745 - print error if lzc_* is called before libzfs_core_init
    
    The problem is that consumers of `libZFS_Core` that forget to call
    `libzfs_core_init()` before calling any other function of the library
    are having a hard time realizing their mistake. The library's internal
    file descriptor is declared as global static, which is ok, but it is not
    initialized explicitly; therefore, it defaults to 0, which is a valid
    file descriptor. If `libzfs_core_init()`, which explicitly initializes
    the correct fd, is skipped, the ioctl functions return errors that do
    not have anything to do with `libZFS_Core`, where the problem is
    actually located.
    
    Even though assertions for that existed within `libZFS_Core` for debug
    builds, they were never enabled because the `-DDEBUG` flag was missing
    from the compiler flags.
    
    This patch applies the following changes:
    
        1. It adds `-DDEBUG` for debug builds of `libZFS_Core` and `libzfs`,
           to enable their assertions on debug builds.
    
        2. It corrects an assertion within `libzfs`, where a function had
           been spelled incorrectly (`zpool_prop_unsupported()`) and nobody
           knew because the `-DDEBUG` flag was missing, and the preprocessor
           was taking that part of the code away.
    
        3. The library's internal fd is initialized to `-1` and `VERIFY`
           assertions have been placed to check that the fd is not equal to
           `-1` before issuing any ioctl. It is important here to note, that
           the `VERIFY` assertions exist in both debug and non-debug builds.
    
        4. In `libzfs_core_fini` we make sure to never increment the
           refcount of our fd below 0, and also reset the fd to `-1` when no
           one refers to it. The reason for this, is for the rare case that
           the consumer closes all references but then calls one of the
           library's functions without using `libzfs_core_init()` first, and
           in the mean time, a previous call to `open()` decided to reuse
           our previous fd. This scenario would have passed our assertion in
           non-debug builds.
    
        5. Once the `ASSERTION` macros were enabled again, two tests from
           the test suite were failing in `libzfs_sendrecv.c` at a
           `ZIO_CHECKSUM_IS_ZERO` check within `dump_record()`. We now zero
           the kernel filled checksums in all `dmu_replay_record`s that we
           read in `cksummer()`, except the ones that are of type
           `DRR_BEGIN`.
    
    I considered making all assertions available for both debug and
    non-debug builds, but I figured that it would not be appropriate if, for
    example, an outside consumer of `libZFS_Core` suddenly triggers an
    assertion failure because they happened to call `libzfs_core_fini()`,
    even if previously the reference counter was `0`. Therefore, all the
    reference counter related assertions are only enabled for debug builds,
    and fd related assertions are enabled for debug and non-debug builds.
    
    Porting notes:
    - `ASSERT3S(g_refcount, >, 0);` added to `recv_impl` in
      lib/libzfs_core/libzfs_core.c .
    
    Authored by: Serapheim Dimitropoulos <serapheim@delphix.com>
    Reviewed by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7745
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/7e3139a
    Closes #5698

[33mcommit 005e27e3b3086a65499d81923551be68e8c3400a[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Tue Jan 31 21:24:23 2017 +0300

    OpenZFS 7019 - zfsdev_ioctl skips secpolicy when FKIOCTL is set
    
    Authored by: Alex Wilson <alex.wilson@joyent.com>
    Reviewed by: Robert Mustacchi <rm@joyent.com>
    Reviewed by: Richard Lowe <richlowe@richlowe.net>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7019
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/45b1747
    Closes #5709

[33mcommit 6325e48f950a9e6dcfaeac248f8a8f2e4404867f[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Tue Jan 31 21:19:36 2017 +0300

    OpenZFS 7136 - ESC_VDEV_REMOVE_AUX ought to always include vdev information
    
    Authored by: Alan Somers <asomers@gmail.com>
    7115 6922 generates ESC_ZFS_VDEV_REMOVE_AUX a bit too often
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Josef 'Jeff' Sipek <jeffpc@josefsipek.net>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7136
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/b72b6bb
    Closes #5691
    
    Porting notes:
    - Functionally this patch behaves the same as the OpenZFS
      version but it was adapted because because ZoL doesn't
      have the same illumos sysevent_t infrastructure and functionality.

[33mcommit ed828c0c375477ff27d5fa9a7bf46ae6b6f2e57a[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Tue Jan 31 21:13:10 2017 +0300

    OpenZFS 7280 - Allow changing global libzpool variables in zdb and ztest through command line
    
    Authored by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7280
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/0e60744
    Closes #5676

[33mcommit 41425f79dabc58e5ddb16cc701cc435a5480e56a[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Tue Jan 31 04:12:58 2017 +0300

    OpenZFS 7490 - real checksum errors are silenced when zinject is on
    
    Authored by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7490
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/6cedfc3
    Closes #5693

[33mcommit e2da829cc1a92b9f0ebd1eeefc6fadc1ec9f325a[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Tue Jan 31 02:33:46 2017 +0300

    OpenZFS 6922 - Emit ESC_ZFS_VDEV_REMOVE_AUX after removing an aux device
    
    Authored by: Alan Somers <asomers@gmail.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/6922
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/63364b0
    Closes #5690

[33mcommit 28b40c8a6e31308531de0ab128887e65c28d891c[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Tue Jan 31 00:20:55 2017 +0300

    OpenZFS 7541 - zpool import/tryimport ioctl returns ENOMEM
    
    Authored by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    
    The refresh_config() calls into the kernel with ZFS_IOC_POOL_TRYIMPORT.
    This ioctl returns the config of the pool in a buffer pre-allocated in
    userland. The original estimate for the size is too conservative since
    it doesn't account for the large size of vdev stats that are added to
    the config before returning.
    This fix simply increases the size of the buffer passed. This results in
    a speed up of the zpool import process, and less spam in zfs_dbgmsg.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7541
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/a3c7690
    Closes #5704

[33mcommit 456079d48dcc3e1394d1f519a17abae2177c5ffa[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Mon Jan 30 22:34:36 2017 +0300

    OpenZFS 7502 - ztest should run zdb with -G (debug mode)
    
    Authored by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Approved by: Gordon Ross <gordon.w.ross@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7502
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/c3c65d1
    Closes #5677

[33mcommit fa603f823331a948038dd8e56113df36d7293932[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Sat Jan 28 23:16:43 2017 +0300

    OpenZFS 7277 - zdb should be able to print zfs_dbgmsg's
    
    Porting notes:
    - 'zfs_dbgmsg_print()' reintroduced to userspace.
    
    Authored by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7277
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/29bdd2f
    Closes #5684

[33mcommit a32494d22ac25c35c5d26eb0b2607ea68adb93cd[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sat Jan 28 12:13:34 2017 -0800

    Fix suspend Godfather I/Os io_reexecute bits
    
    After resuming a pool the godfather zio could have both the
    ZIO_REEXECUTE_NOW and ZIO_REEXECUTE_SUSPEND bits set.  This
    can occur if some child zios set ZIO_REEXECUTE_NOW while
    other set ZIO_REEXECUTE_SUSPEND.  The godfather zio can
    inherit both flags in zio_notify_parent().
    
    The child zios which assigned the ZIO_REEXECUTE_SUSPEND flag
    will be removed from the godfather's child list and added to
    the spa->spa_suspend_zio_root child list.   While child zios
    with the ZIO_REEXECUTE_NOW bit set remain being monitored
    by the godfather zio.
    
    When the godfather zio executes zio_done() the presence of
    the ZIO_REEXECUTE_SUSPEND bit results in all io_reexecute
    being cleared.  These child zios will then not be re-executed
    and instead will be destroyed and lost.
    
    The most straight forward way to address this situation is
    to only clear the ZIO_REEXECUTE_SUSPEND bit and leave the
    ZIO_REEXECUTE_NOW bit set.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: yuxiang <guo.yong33@zte.com.cn>

[33mcommit 3130b84e94717fe9aad67a14defe79bb7f10fa9f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sat Jan 28 12:12:25 2017 -0800

    Add -Wno-declaration-after-statement to KERNELCPPFLAGS
    
    Disable the warnings regarding ISO C90 forbidding mixed
    declarations and code.  While this functionality was
    introduced as part of C99 gcc does allow this in C90
    mode as an extension.
    
    https://gcc.gnu.org/onlinedocs/gcc/Mixed-Declarations.html#Mixed-Declarations
    
    Allowing this usage helps minimize the changes required
    when porting patches from OpenZFS.  The downside here is
    that this functionality is specific to gcc.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5686

[33mcommit 721ed0ee86463cb3e4a562d86783fd1372182367[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Sat Jan 28 23:11:09 2017 +0300

    OpenZFS 7580 - ztest failure in dbuf_read_impl
    
    Authored by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Reviewed by: Steve Gonczi <steve.gonczi@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7580
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/3105d95
    Closes #5678

[33mcommit 160af771081bc21313ad0c111d66b348932fe5d2[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Fri Jan 27 22:47:54 2017 +0300

    OpenZFS 7340 - receive manual origin should override automatic origin
    
    Authored by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7340
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/ed4e7a6
    Closes #5681

[33mcommit a08abc1bb3e354d8c352c91d22cc733a84fafb50[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Fri Jan 27 22:46:39 2017 +0300

    OpenZFS 7301 - zpool export -f should be able to interrupt file freeing
    
    Authored by: Alek Pinchuk <alek@nexenta.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Sanjay Nadkarni <sanjay.nadkarni@nexenta.com>
    Reviewed by: Saso Kiselkov <saso.kiselkov@nexenta.com>
    Reviewed by: John Kennedy <john.kennedy@delphix.com>
    Approved by: Gordon Ross <gordon.ross@nexenta.com>
    Reviewed-by: Tim Chase <tim@chase2k.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7301
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/eb72182
    Closes #5680

[33mcommit cc9bb3e58e926d4e056a89046301c1349755957b[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Fri Jan 27 22:43:42 2017 +0300

    OpenZFS 7254 - ztest failed assertion in ztest_dataset_dirobj_verify: dirobjs + 1 == usedobjs
    
    Authored by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Steve Gonczi <steve.gonczi@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7254
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/c166b69
    Closes #5670

[33mcommit 687e612f9a56763d82c78ed75656896ce9cace17[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Fri Jan 27 22:10:10 2017 +0300

    Add realloc() success check in zpool_history_unpack()
    
    Correctly handle the unlikely case where the memory buffer cannot be resized.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: George Melikov <mail@gmelikov.ru>
    Closes #5575

[33mcommit 933ec999511f3d29de005bfa8966ae007b161c0f[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Fri Jan 27 10:43:39 2017 -0800

    Retire .write/.read file operations
    
    The .write/.read file operations callbacks can be retired since
    support for .read_iter/.write_iter and .aio_read/.aio_write has
    been added.  The vfs_write()/vfs_read() entry functions will
    select the correct interface for the kernel.  This is desirable
    because all VFS write/read operations now rely on common code.
    
    This change also add the generic write checks to make sure that
    ulimits are enforced correctly on write.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #5587
    Closes #5673

[33mcommit 986dd8aacc9a00ceedf61f63cbe641786f540611[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jan 27 10:40:02 2017 -0800

    OpenZFS 5561 - support root pools on EFI/GPT partitioned disks
    
    Reviewed by: Jean McCormack <jean.mccormack@nexenta.com>
    Reviewed by: Josef 'Jeff' Sipek <josef.sipek@nexenta.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/5561
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/1a902ef
    Closes #5672

[33mcommit 258553d3d79252030421b93d23cbce4d84a42dbb[m
Author: Tim Chase <tim@chase2k.com>
Date:   Thu Jan 26 17:27:19 2017 -0600

    OpenZFS 7613 - ms_freetree[4] is only used in syncing context
    
    metaslab_t:ms_freetree[TXG_SIZE] is only used in syncing context. We
    should replace it with two trees: the freeing tree (ranges that we are
    freeing this syncing txg) and the freed tree (ranges which have been
    freed this txg).
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Alex Reece <alex@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Tim Chase <tim@chase2k.com>
    
    OpenZFS-issue: https://www.illumos.org/issues/7613
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/a8698da2
    Closes #5598

[33mcommit 9c9531cb6f085174e90d1262aba177ffb8b88753[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Fri Jan 27 02:15:48 2017 +0300

    OpenZFS 7500 - Simplify dbuf_free_range by removing dn_unlisted_l0_blkid
    
    Authored by: Stephen Blinick <stephen.blinick@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Approved by: Gordon Ross <gordon.w.ross@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7500
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/653af1b
    Closes #5639

[33mcommit 39efbde7c551ae0edcd57db3aab28fd7f2d29d18[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Fri Jan 27 01:43:28 2017 +0300

    OpenZFS 6676 - Race between unique_insert() and unique_remove() causes ZFS fsid change
    
    Authored by: Josef 'Jeff' Sipek <josef.sipek@nexenta.com>
    Reviewed by: Saso Kiselkov <saso.kiselkov@nexenta.com>
    Reviewed by: Sanjay Nadkarni <sanjay.nadkarni@nexenta.com>
    Reviewed by: Dan Vatca <dan.vatca@gmail.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Sebastien Roy <sebastien.roy@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/6676
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/40510e8
    Closes #5667

[33mcommit aeacdefedc31b498cfccc0026b83be0bab197a3b[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Fri Jan 27 01:42:15 2017 +0300

    OpenZFS 7386 - zfs get does not work properly with bookmarks
    
    Authored by: Marcel Telka <marcel@telka.sk>
    Reviewed by: Simon Klinkert <simon.klinkert@gmail.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Approved by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7386
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/edb901a
    Closes #5666

[33mcommit 0a3d2673de4958094b5c178efd7bd991bcd84f3f[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Thu Jan 26 23:47:40 2017 +0300

    OpenZFS 5142 - libzfs support raidz root pool (loader project)
    
    Authored by: Toomas Soome <tsoome@me.com>
    Reviewed by: - George Wilson <george.wilson@delphix.com>
    Reviewed by: - Yuri Pankov <yuri.pankov@nexenta.com>
    Reviewed by: - Andrew Stormont <andyjstormont@gmail.com>
    Reviewed by: - Albert Lee <trisk@omniti.com>
    Approved by: - Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/5142
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/d5f26ad
    Closes #5663

[33mcommit 1149ba6478a498de65d6a8b9a289e45015a1409c[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Thu Jan 26 23:46:02 2017 +0300

    OpenZFS 7606 - dmu_objset_find_dp() takes a long time while importing pool
    
    When importing a pool with a large number of filesystems within the same
    parent filesystem, we see that dmu_objset_find_dp() takes a long time.
    It is called from 3 places: spa_check_logs(), spa_ld_claim_log_blocks(),
    and spa_load_verify().
    
    There are several ways to improve performance here:
    
        1. We don't really need to do spa_check_logs() or
           spa_ld_claim_log_blocks() if the pool was closed cleanly.
    
        2. spa_load_verify() uses dmu_objset_find_dp() to check that no
           datasets have too long of names.
    
        3. dmu_objset_find_dp() is slow because it's doing
           zap_value_search() (which is O(N sibling datasets)) to determine
           the name of each dsl_dir when it's opened. In this case we
           actually know the name when we are opening it, so we can provide
           it and avoid the lookup.
    
    This change implements fix #3 from the above list; i.e. make
    dmu_objset_find_dp() provide the name of the dataset so that we don't
    have to search for it.
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Steve Gonczi <steve.gonczi@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Prashanth Sreenivasa <prashksp@gmail.com>
    Reviewed-by: David Quigley <david.quigley@intel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7606
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/cac6bab
    Closes #5662

[33mcommit 89d43feb0ba1fb86ca67b215c1449b28008a4709[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Thu Jan 26 23:42:48 2017 +0300

    OpenZFS 6412 - zfs receive: -u can be ignored sometimes
    
    Authored by: Andriy Gapon <andriy.gapon@clusterhq.com>
    Reviewed by: - Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: - Paul Dagnelie <pcd@delphix.com>
    Approved by: - Richard Lowe <richlowe@richlowe.net>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/6412
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/9185393
    Closes #5659

[33mcommit d96e5439541bce02c44efa56800c022ec9b43aa7[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Thu Jan 26 12:40:22 2017 -0800

    OpenZFS 7348 - cstyle can't handle ellipsis on continuation line
    
    Authored by: Hans Rosenfeld <hans.rosenfeld@nexenta.com>
    Reviewed by: Yuri Pankov <yuri.pankov@nexenta.com>
    Reviewed by: Jason King <jason.brian.king@gmail.com>
    Reviewed by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Reviewed by: Robert Mustacchi <rm@joyent.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/7348
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/c667d21
    Closes #5655

[33mcommit d4e004078176e3c48fda891a62fc5dc48ca314c8[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Thu Jan 26 12:36:56 2017 -0800

    OpenZFS 6999 - fix 'Use of uninitialized value $picky in numeric eq (==)' in cstyle
    
    Authored by: Richard PALO <richard@NetBSD.org>
    Reviewed by: Garrett D'Amore <garrett@damore.org>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/6999
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/002ec3e
    Closes #5653

[33mcommit 2014c09f64a484b8fc3690f1a4c1e749f5fdda48[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Thu Jan 26 23:34:29 2017 +0300

    OpenZFS 7163 - ztest failures due to excess error injection
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7163
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/f34284d
    Closes #4484
    Closes #5661

[33mcommit dc1fbc43be19d69a39b3e5374b106d6b0474958f[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Thu Jan 26 23:32:36 2017 +0300

    OpenZFS 7253 - ztest failure: dsl_destroy_head(name) == 0 (0x10 == 0x0), file ../ztest.c, line 3235 (#5660)
    
    Authored by: Chris Williamson <chris.williamson@delphix.com>
    Reviewed by: - Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: - Paul Dagnelie <pcd@delphix.com>
    Approved by: - Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7253
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/754998c
    Closes #5660

[33mcommit 546d32ca102675caed534075f9e7517890707d7b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jan 26 12:30:43 2017 -0800

    OpenZFS 7147 - ztest: ztest_ddt_repair fails with ztest_pattern_match assertion
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Ported-by:  Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/7147
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/aab80726
    Closes #5652

[33mcommit 774ee3c7cec223521f41a4c533f2561da43ee425[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Thu Jan 26 23:28:29 2017 +0300

    OpenZFS 7336 - vfork and O_CLOEXEC causes zfs_mount EBUSY
    
    Porting notes:
    - statvfs64 is replaced by statfs64.
    - ZFS_SUPER_MAGIC definition moved in include/sys/fs/zfs.h
      to share it between user and kernel space.
    
    Authored by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7336
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/dd862f6d
    Closes #5651

[33mcommit f925de3a20e97d3b9ee854c8435c6f3d8d17e02c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jan 26 12:25:35 2017 -0800

    Refresh Linux test suite runfile
    
    Associate disabled test cases with existing open issues, update
    comments to be consistent, disable a few additional test cases.
    The goal is for all enabled test to pass 100% reliably.
    
    The following test cases have been disabled due to infrequent
    failures during automated testing.  Several of these test cases
    were previous disabled only for the kmemleak builder but have
    subsequently been observed on other automated builders.
    
    - zfs_destroy_001_pos - https://github.com/zfsonlinux/zfs/issues/5635
    - zfs_rename_006_pos  - https://github.com/zfsonlinux/zfs/issues/5647
    - zfs_rename_009_neg  - https://github.com/zfsonlinux/zfs/issues/5648
    - zpool_clear_001_pos - https://github.com/zfsonlinux/zfs/issues/5634
    - zfs_allow_010_pos   - https://github.com/zfsonlinux/zfs/issues/5646
    - reservation_018_pos - https://github.com/zfsonlinux/zfs/issues/5642
    - snapused_004_pos    - https://github.com/zfsonlinux/zfs/issues/5513
    - rsend_022_pos       - https://github.com/zfsonlinux/zfs/issues/5654
    - rsend_024_pos       - https://github.com/zfsonlinux/zfs/issues/5665
    - history_008_pos     - https://github.com/zfsonlinux/zfs/issues/5658
    - history_006_neg     - https://github.com/zfsonlinux/zfs/issues/5657
    - history_008_pos     - https://github.com/zfsonlinux/zfs/issues/5658
    - zfs_inherit_003_pos - https://github.com/zfsonlinux/zfs/issues/5669
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5649

[33mcommit 935550f1bb12f9f461e662181aa2febbc94ffde7[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Tue Jan 24 20:23:34 2017 +0300

    OpenZFS 6872 - zfs libraries should not allow uninitialized variables
    
    Porting notes:
    - Many changes were already made in ZoL (for ex. in d4ed66734).
    
    Authored by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Yuri Pankov <yuri.pankov@nexenta.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/6872
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/f83b46b
    Closes #5640

[33mcommit 7e8dbd93e214566c4955933990f78f78b6c88d74[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Tue Jan 24 20:15:35 2017 +0300

    OpenZFS 7571 - non-present readonly numeric ZFS props do not have default value
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7571
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/ad2760a
    Closes #5638

[33mcommit e2a65adbb83ddad0d8a97dd1415ad30850216336[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Tue Jan 24 20:13:49 2017 +0300

    OpenZFS 6871 - libzpool implementation of thread_create should enforce length is 0
    
    Porting notes:
    - Several direct callers of zk_thread_create() are passing TS_RUN for the
    length.  The `len` and `state` were inverted,this commit fixes them.
    
    Authored by: Eli Rosenthal <eli.rosenthal@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov mail@gmelikov.ru
    
    OpenZFS-issue: https://www.illumos.org/issues/6871
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/8fc9228
    Closes #5621

[33mcommit 9ef3906a5ab1185e9941bca252c87105fdf77a94[m
Author: Håkan Johansson <f96hajo@chalmers.se>
Date:   Tue Jan 24 18:09:02 2017 +0100

    Minor man-page formatting fixes
    
    fB -> \fB in zpool.8 (Properties -> cachefile)
    \fN -> \fB in zfs-module-parameters.5 (zfs_dirty_data_max_max_percent)
    Three | -> \fR|\fI fixes for arguments of diff and inherit in zfs.8.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: loli10K <ezomori.nozomu@gmail.com>
    Signed-off-by: Haakan T Johansson <f96hajo@chalmers.se>
    Closes #5645

[33mcommit a39ce906602ce721774f4e17671c05bd5c710d1e[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Tue Jan 24 19:59:08 2017 +0300

    OpenZFS 6880 - zdb incorrectly reports feature count mismatch when feature is disabled
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/6880
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/c5d1600
    Closes #5641

[33mcommit e82dbae1ee33170ed3924c5229db651caf384333[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jan 24 08:50:15 2017 -0800

    Fix build-it compilation regression
    
    Accidentally introduced by 4ea3f86.  The BEGIN CSTYLE block cannot
    appear half way through a continued #define.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5643
    Closes #5644

[33mcommit e85d62faaea9871293c1c26675ee665ebe3733e4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jan 23 17:04:26 2017 -0800

    Fix pool_names_001_pos test case
    
    After volume creation wait until the new block devices have settled
    before destroying them.  Failure to do some can result in EBUSY
    being returned and the test case failing.
    
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5636
    Closes #5637

[33mcommit 3d43125fd465d869c813eb30a0233c0b6aae1209[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Mon Jan 23 22:22:11 2017 +0300

    OpenZFS 7604 - if volblocksize property is the default, it displays as "-" rather than 8K
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: John Kennedy <john.kennedy@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7604
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/586fd65
    Closes #5629

[33mcommit b87baa7ed2374bf8138f2c9f6b260498c0252eb6[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Mon Jan 23 22:13:15 2017 +0300

    OpenZFS 6428 - set canmount=off on unmounted filesystem tries to unmount children
    
    Authored by: Andriy Gapon <andriy.gapon@clusterhq.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Gordon Ross <gordon.w.ross@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/6428
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/c079fa4
    Closes #5628

[33mcommit ec923db25c823dd460fdb5db44a5a202a0975f27[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Mon Jan 23 21:53:46 2017 +0300

    OpenZFS 7180 - potential race between zfs_suspend_fs+zfs_resume_fs and zfs_ioc_rename
    
    Authored by: Andriy Gapon <andriy.gapon@clusterhq.com>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Reviewed by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7180
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/690041b
    Closes #5627

[33mcommit cffd6e116711640d070d9690480b95c5a6de7154[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Mon Jan 23 21:35:58 2017 +0300

    OpenZFS 3746 - ZRLs are racy
    
    Authored by: Will Andrews <will@freebsd.org>
    Reviewed by: Boris Protopopov <bprotopopov@hotmail.com>
    Reviewed by: Pavel Zakharov <pavel.zakha@gmail.com>
    Reviewed by: Yuri Pankov <yuri.pankov@gmail.com>
    Reviewed by: Justin T. Gibbs <gibbs@scsiguy.com>
    Approved by: Matt Ahrens <mahrens@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/3746
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/260af64
    Closes #5625

[33mcommit 911c41af2d7642fd25b563315c8d9e79b2dd1511[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Mon Jan 23 21:17:35 2017 +0300

    OpenZFS 7304 - zfs filesystem/snapshot counts should be read-only
    
    Authored by: Jerry Jelinek <jerry.jelinek@joyent.com>
    Reviewed by: Garrett D'Amore <garrett@damore.org>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7304
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/007a6c1
    Closes #5624

[33mcommit 3cbe6b29f5832ef350b0ec4ecbba882e5210b56b[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Mon Jan 23 21:07:09 2017 +0300

    OpenZFS 7233 - dir_is_empty should open directory with CLOEXEC
    
    Authored by: Alex Reece <alex@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov mail@gmelikov.ru
    
    OpenZFS-issue: https://www.illumos.org/issues/7233
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/d420209
    Closes #5623

[33mcommit e67a7ffb5d1f4255a89d7511ea3554c7c7488e5a[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Mon Jan 23 20:49:57 2017 +0300

    OpenZFS 6052 - decouple lzc_create() from the implementation details
    
    Authored by: Andriy Gapon <andriy.gapon@clusterhq.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov mail@gmelikov.ru
    
    OpenZFS-issue: https://www.illumos.org/issues/6052
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/26455f9
    Closes #5622

[33mcommit f85c06bedfd2a60f5b5d6a7492ed847c2bffd9fe[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Mon Jan 23 20:36:24 2017 +0300

    OpenZFS 7054 - dmu_tx_hold_t should use refcount_t to track space
    
    Authored by: Igor Kozhukhov ikozhukhov@gmail.com
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov mail@gmelikov.ru
    
    OpenZFS-issue: https://www.illumos.org/issues/7054
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/0c779ad
    Closes #5600

[33mcommit 4ea3f86426f76e59244ec6f66504da688d90193c[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Sat Jan 21 00:17:55 2017 +0300

    codebase style improvements for OpenZFS 6459 port

[33mcommit ec441a9c534815b379468a2d349011cbd5bcd884[m
Author: Paul Dagnelie <pcd@delphix.com>
Date:   Wed Jan 18 01:47:50 2017 +0300

    OpenZFS 6459 - cstyle doesn't detect opening braces on the same line as function header
    Authored by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Alex Reece <alex@delphix.com>
    Reviewed by: Albert Lee <trisk@omniti.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Ported-by: George Melikov mail@gmelikov.ru
    
    OpenZFS-issue: https://www.illumos.org/issues/6459
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/c4567a6
    
    Porting notes:
    These changes are adopted for ZoL codebase because of
    many false positive warnings.

[33mcommit bb7ffdaf5ad1c7e65af598830957b6b19835f93f[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Sat Jan 21 22:33:11 2017 +0300

    OpenZFS 7729 - libzfs_core`lzc_rollback() leaks result nvl
    
    Authored by: Yuri Pankov <yuri.pankov@nexenta.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov mail@gmelikov.ru
    
    OpenZFS-issue: https://www.illumos.org/issues/7729
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/882877e
    Closes #5620

[33mcommit 1b61fa935ca0543ecb2beb8f2cb567bba28a426e[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Sat Jan 21 10:54:06 2017 -0800

    Partial revert "Disable slow tests for kmemleak"
    
    Enable zpool_clear_001_pos, zpool_create_024_pos and inherit_001_pos. These
    are no longer slow.
    
    Also disable zfs_destroy_001_pos, zfs_allow_010_pos and snapused_004_pos,
    as they fail very often.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #5613

[33mcommit 10a3f8885904558c2a406151c4cf960371c34934[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jan 20 10:18:28 2017 -0800

    Tag 0.7.0-rc3
    
    Third release candidate.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit beabc5e46c7bbe4f1ab3f6ed7b92dc9a7a314c99[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jan 19 17:09:04 2017 -0800

    Fix unused variable warning
    
    The local mg variable is unused in non-debug builds.
    Wrap the variable in ASSERTV() so that it's only present
    in the debug build.  Introduced by OpenZFS 7303.
    
    Reviewed-by: Don Brady <don.brady@intel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5616

[33mcommit 040dab993936d832df4c7624bbcdb71c3fb9b34b[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Thu Jan 19 13:56:36 2017 -0800

    Suspend/resume zvol for recv and rollback
    
    When doing recv and rollback, dsl_dataset_clone_swap_sync_impl will be
    called to swap out the ds_objset and do dmu_objset_evict on the old one.
    However, currently zv->zv_objset will not be swapped out accordingly, so
    if anyone currently holds a fd on the zvol, we risk hitting a use-after-free.
    
    We fix this by introducing the suspend and resume mechanism of zsb to
    zv.  Before recv or rollback, we use zvol_suspend to block all access to
    zv_objset and shut it down. After the recv or rollback, we use zvol_resume
    to swap in zv_objset with the new ds_objset and unblock the access.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #4866
    Closes #5609

[33mcommit 76fe529b392068dfb7575739542cd4f69d2d4343[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Fri Jan 20 00:50:22 2017 +0300

    OpenZFS 6529 - Properly handle updates of variably-sized SA entries
    
    Porting notes:
    - This issue was first fixed in ZoL by commit d862cb0d.  That fix was
    then modified and an equivalent version of the patch landed in the
    upstream code base.  For additional details see the discussion in
    https://github.com/openzfs/openzfs/pull/24 .
    
    This commit aligns ZoL with OpenZFS codebase.
    
    Authored by: Andriy Gapon <avg@icyb.net.ua>
    Reviewed by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Ned Bass <bass6@llnl.gov>
    Reviewed by: Tim Chase <tim@chase2k.com>
    Approved by: Gordon Ross <gwr@nexenta.com>
    Ported-by: George Melikov mail@gmelikov.ru
    
    OpenZFS-issue: https://www.illumos.org/issues/6529
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/e7e978b
    Closes #5606

[33mcommit 4faf8b6f6f1edeb2ef0fed31c74ab0b321a11f2d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jan 19 10:24:27 2017 -0800

    Disable racy test cases
    
    The following test cases may currently fail for benign reasons.
    Disable them until they can be updated to run reliably.
    
    - ro_props_001_pos - only recently enabled in ce43e88
    - nopwrite_volume
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5614

[33mcommit 34a6b4284495b979c923e056b23d87fd6c20f380[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Thu Jan 19 02:10:35 2017 +0300

    OpenZFS 7659 - Missing thread_exit() in dmu_send.c
    
    Two threads send_traverse_thread() and receive_writer_thread() should
    end with thread_exit();
    
    Mostly a cosmetic issue under IllumOS.
    
    Authored by: Jorgen Lundman <lundman@lundman.net>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7659
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/a569268
    Closes #5603

[33mcommit a0aacd3741530ac20e796cb471ab1e35b3929704[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Wed Jan 18 02:30:01 2017 +0300

    OpenZFS 7257 - zfs manpage user property length needs to be updated
    
    Since zpool version 16, this limit is actually 8192 characters.
    Additionally, this limit is actually 8192 bytes, as it supports UTF-8.
    
    Authored by: Eli Rosenthal <eli.rosenthal@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Yuri Pankov <yuri.pankov@nexenta.com>
    Reviewed by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Reviewed by: Robert Mustacchi <rm@joyent.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7257
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/3bc7169
    Closes #5608

[33mcommit 7330fc57b738e9d3bdd57eb4e1b4505bed1a9d16[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Wed Jan 18 02:22:56 2017 +0300

    OpenZFS 7235 - remove unused func dsl_dataset_set_blkptr
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Alex Reece <alex@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7235
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/bd56f80
    Closes #5604

[33mcommit 61ca48ff382b56894ec4b6fa9aeba60c278512b1[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Wed Jan 18 02:18:59 2017 +0300

    OpenZFS 7256 - low probability race in zfs_get_data
    
    Authored by: Andriy Gapon <andriy.gapon@clusterhq.com>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Reviewed by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7256
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/6ed18a8
    Closes #5601

[33mcommit e88551d52f0490578ec6d2aa2c36563dfdbdd3b3[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Wed Jan 18 01:52:17 2017 +0300

    OpenZFS 7071 - lzc_snapshot does not fill in errlist on ENOENT
    
    Authored by: Igor Kozhukhov ikozhukhov@gmail.com
    Reviewed by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7071
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/25f7d99
    Closes #5597

[33mcommit cf7d1484bf5bd94aa248babade69226b6dc4c0e2[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Wed Jan 18 01:49:24 2017 +0300

    OpenZFS 7082 - bptree_iterate() passes wrong args to zfs_dbgmsg()
    
    Authored by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7082
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/10e67aa
    Closes #5596

[33mcommit 832805d9515894a6567abcb95359f41f4cc61bfc[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jan 17 14:46:28 2017 -0800

    OpenZFS 6586 - Whitespace inconsistencies in the spa feature dependency arrays in zfeature_common.c
    
    Porting Notes:
    - Preserved 'static const spa_feature_t hole_birth_deps[]'.
    
    Authored by: ilovezfs <ilovezfs@icloud.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Richard Laager <rlaager@wiktel.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/6586
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/22b6687
    Closes #5592

[33mcommit 648a09adc25cc1b8b9bec72130ab219a3e544b56[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jan 17 14:45:02 2017 -0800

    OpenZFS 6550 - cmd/zfs: cleanup gcc warnings
    
    Porting Notes:
    - Many of the fixes proposed by this patch were already applied.
    In the cases where a different but equivalent fix was made the
    code was updated with the OpenZFS version to minimize differences.
    
    Authored by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Andy Stormont <astormont@racktopsystems.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/6550
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/c16bcc4
    Closes #5591

[33mcommit 8e896579562385b76fd44b7c86084f452043e7fd[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jan 17 14:42:56 2017 -0800

    OpenZFS 6551 - cmd/zpool: cleanup gcc warnings
    
    Porting Notes:
    - Many of the fixes proposed by this patch were already applied.
    In the cases where a different but equivalent fix was made the
    code was updated with the OpenZFS version to minimize differences.
    - The zpool_get_vdev_by_name() function was previously removed
    by commit  235db0a.
    
    Authored by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Andy Stormont <astormont@racktopsystems.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Haakan T Johansson <f96hajo@chalmers.se>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/6551
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/b327cd3
    Closes #5590

[33mcommit 2dbf1bf8296f66f24d5e404505c991bfbeec7808[m
Author: clefru <clemens@endorphin.org>
Date:   Sat Jan 14 00:57:34 2017 +0100

    Don't hardcode perl path but use env instead
    
    Also replace the deprecated "-w" argument with "use warnings;", as
    otherwise env would invoke a command called "perl -w".
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Clemens Fruhwirth <clemens@endorphin.org>
    Closes #5552

[33mcommit 08f0510d87186575db00269fff17a3409de5ceb6[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Sat Jan 14 00:47:34 2017 +0100

    Fix unallocated object detection for large_dnode datasets
    
    Fix dmu_object_next() to correctly handle unallocated objects on
    large_dnode datasets.
    
    We implement this by scanning the dnode block until we find the correct
    offset to be used in dnode_next_offset(). This is necessary because we
    can't assume *objectp is a hole even if dmu_object_info() returns
    ENOENT.
    
    This fixes a couple of issues with zfs receive on large_dnode datasets.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #5027
    Closes #5532

[33mcommit 5043684ae51195fc8b7ce7ff15241f17fe23d993[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jan 13 15:33:14 2017 -0800

    OpenZFS 7603 - xuio_stat_wbuf_* should be declared (void)
    
    Porting Notes:
    - include/sys/dmu.h prototypes were already updated in 0bc8fd7
    
    Authored by: Prashanth Sreenivasa <pks@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/7603
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/99aa8b5
    Closes #5586

[33mcommit 9775e98844c393229183ebbbd75a877cd8a3a293[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jan 13 15:29:32 2017 -0800

    OpenZFS 7181 - race between zfs_mount and zfs_ioc_rollback
    
    Authored by: Andriy Gapon <andriy.gapon@clusterhq.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Gordon Ross <gordon.w.ross@gmail.com>
    Reviewed-by: Richard Yao <ryao@gentoo.org>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/7181
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/90f2c09
    Closes #5585

[33mcommit e254c8d8ee8783fd547165d4a754f9d8d9d386c4[m
Author: Jörg Thalheim <joerg@higgsboson.tk>
Date:   Sat Jan 14 00:18:34 2017 +0100

    module/Makefile.in: use relative cp
    
    Assuming /bin/cp causes problems on systems where cp is
    not in /bin such as NixOS.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Joerg Thalheim <joerg@higgsboson.tk>
    Closes #5548

[33mcommit 0eef1bde31d67091d3deed23fe2394f5a8bf2276[m
Author: bzzz77 <bzzz.tomas@gmail.com>
Date:   Sat Jan 14 01:58:41 2017 +0300

    Add *_by-dnode routines
    
    Add *_by_dnode() routines for accessing objects given their
    dnode_t *, this is more efficient than accessing the object by
    (objset_t *, uint64_t object).  This change converts some but
    not all of the existing consumers.  As performance-sensitive
    code paths are discovered they should be converted to use
    these routines.
    
    Reviewed-by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Alex Zhuravlev <bzzz@whamcloud.com>
    Closes #5534
    Issue #4802

[33mcommit 38640550f28c5acd94621f3452fab428df469bdb[m
Author: Don Brady <don.brady@intel.com>
Date:   Fri Jan 13 14:50:22 2017 -0700

    OpenZFS 7743 - per-vdev-zaps init path for upgrade
    
    Authored by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Reviewed by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Don Brady <don.brady@intel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Joe Stein <jas14@cs.brown.edu>
    Ported-by: Don Brady <don.brady@intel.com>
    
    When loading a pool that had been created before the existance of
    per-vdev zaps, on a system that knows about per-vdev zaps, the
    per-vdev zaps will not be allocated and initialized.
    
    This appears to be because the logic that would have done so, in
    spa_sync_config_object(), is not reached under normal operation. It is
    only reached if spa_config_dirty_list is non-empty.
    
    The fix is to add another `AVZ_ACTION_` enum that will allow this code
    to be reached when we detect that we're loading an old pool, even when
    there are no dirty configs.
    
    OpenZFS-issue: https://www.illumos.org/issues/7743
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/e2d29d0
    Closes #5582

[33mcommit fdbaf44ffbff109613fee5a04f190df5a34fdfcc[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Sat Jan 14 00:31:29 2017 +0300

    OpenZFS 7276 -  zfs(1m) manpage could better describe space properties
    
    Authored by: Pavel Zakharov <pavel.zakharov@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/7276
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/d750135
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/29c6739
    Closes #5549

[33mcommit 181bd8cf5360d55ba5b2b7290669e3eac539da94[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Fri Jan 13 22:24:17 2017 +0100

    Fix zfs-share systemd unit file
    
    Use the system /bin directory rather than the package install
    @bindir@.  This allows --prefix=/usr/local to work as intended.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #5559

[33mcommit 0bc63d83f62374f688366caed69946a93e29f57d[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Thu Jan 12 22:58:04 2017 +0300

    OpenZFS 6603 - zfeature_register() should verify ZFEATURE_FLAG_PER_DATASET implies SPA_FEATURE_EXTENSIBLE_DATASET
    
    Authored by: ilovezfs <ilovezfs@icloud.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Richard Laager <rlaager@wiktel.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/6603
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/0803e91
    Closes #5573

[33mcommit 4e21fd060a567a9c8a1bd0e640985412181c1e33[m
Author: Don Brady <don.brady@intel.com>
Date:   Thu Jan 12 12:52:56 2017 -0700

    OpenZFS 7303 - dynamic metaslab selection
    
    This change introduces a new weighting algorithm to improve
    metaslab selection. The new weighting algorithm relies on the
    SPACEMAP_HISTOGRAM feature. As a result, the metaslab weight
    now encodes the type of weighting algorithm used (size-based
    vs segment-based).
    
    Porting Notes: The metaslab allocation tracing code is conditionally
    removed on linux (dependent on mdb debugger).
    
    Authored by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Alex Reece <alex@delphix.com>
    Reviewed by: Chris Siden <christopher.siden@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Paul Dagnelie <paul.dagnelie@delphix.com>
    Reviewed by: Pavel Zakharov pavel.zakharov@delphix.com
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Don Brady <don.brady@intel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Don Brady <don.brady@intel.com>
    
    OpenZFS-issue: https://www.illumos.org/issues/7303
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/d5190931bd
    Closes #5404

[33mcommit 5727b00e06a4208a7040489d582f13bc3c183384[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Thu Jan 12 22:25:27 2017 +0300

    OpenZFS 6637 - replacing "dontclose" with "should_close"
    
    Authored by: David Schwartz <dschwartz783@gmail.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    I find that this is a lot easier to read. "not don't close" is somewhat tough on the eyes.
    
    OpenZFS-issue: https://www.illumos.org/issues/6637
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/d189620
    Closes #5572

[33mcommit e9aa730c49b91694b146e0cd28192f1aaf843d0e[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Thu Jan 12 20:42:11 2017 +0300

    OpenZFS 6328 - Fix cstyle errors in zfs codebase
    
    Authored by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Alex Reece <alex@delphix.com>
    Reviewed by: Richard Elling <Richard.Elling@RichardElling.com>
    Reviewed by: Jorgen Lundman <lundman@lundman.net>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    OpenZFS-issue: https://www.illumos.org/issues/6328
    OpenZFS-commit: https://github.com/illumos/illumos-gate/commit/9a686fb
    Closes #5579

[33mcommit 42b64e50c093a4ad499458a6258254e399a4de52[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Wed Jan 4 00:01:48 2017 +0300

    Further work on Github usability (issue templates)
    
    Make issue template more obvious about importance of
    searching the issue tracker first, and wrap logs appropriately.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #5542

[33mcommit 5eac94bffd3b98c585eecfbf3fbf444362573142[m
Author: Johnny Stenback <github@jstenback.com>
Date:   Tue Jan 3 10:29:23 2017 -0800

    Fix TypeError: unorderable types: str() > int() in arc_summary.py
    
    Running arc_summary.py with a l2arc cache device around produces
    the following error:
    
      Traceback (most recent call last):
        File "/usr/bin/arc_summary.py", line 1148, in <module>
          main()
        File "/usr/bin/arc_summary.py", line 1144, in main
          page(Kstat)
        File "/usr/bin/arc_summary.py", line 724, in _l2arc_summary
          arc["l2_arc_evicts"]["reading"] > 0:
      TypeError: unorderable types: str() > int()
    
    This is due to arc["l2_arc_evicts"]['lock_retries'] and
    arc["l2_arc_evicts"]["reading"] both being strings, returned
    from fHits() earlier. Rather than adding them up and checking
    if the result is > 0, this checks if either string is != '0'.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #5538

[33mcommit 24d42e22211b68f3a6fa514c28ffdfe265d44fef[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Tue Jan 3 21:03:05 2017 +0300

    OpenZFS 7259 - DS_FIELD_LARGE_BLOCKS is unused
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: George Melikov <mail@gmelikov.ru>
    
    The DS_FIELD_LARGE_BLOCKS macro has been unused since the integration of
    this patch: 241b541 Illumos 5959 - clean up per-dataset feature count code.
    
    This patch simply removes this macro from dsl_dataset.h.
    
    OpenZFS-issue: https://www.illumos.org/issues/7259
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/faa8036
    Closes #5544

[33mcommit 4e33ba4c389f59b74138bf7130e924a4230d64e9[m
Author: ka7 <ka7@la-evento.com>
Date:   Tue Jan 3 18:31:18 2017 +0100

    Fix spelling
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>>
    Reviewed-by: George Melikov <mail@gmelikov.ru>
    Reviewed-by: Haakan T Johansson <f96hajo@chalmers.se>
    Closes #5547
    Closes #5543

[33mcommit a5e046eaacad20487188c9eef231554e1401d8c9[m
Author: Tim Chase <tim@chase2k.com>
Date:   Fri Dec 30 16:03:59 2016 -0600

    4.10 compat - BIO flag changes and others
    
    [bio] The req_op enum was changed to req_opf.  Update the "Linux 4.8 API"
    autotools checks to use an int to determine whether the various REQ_OP
    values are defined.  This should work properly on kernels >= 4.8.
    
    [bio] bio_set_op_attrs() is now an inline function and can't be detected
    with #ifdef.  Add a configure check to determine whether bio_set_op_attrs()
    is defined.  Move the local definition of it from vdev_disk.c to
    blkdev_compat.h for consistency with other related compability shims.
    
    [bio] The read/write flags and their modifiers, including WRITE_FLUSH,
    WRITE_FUA and WRITE_FLUSH_FUA have been removed from fs.h.  Add the new
    bio_set_flush() compatibility wrapper to replace VDEV_WRITE_FLUSH_FUA
    and set the flags appropriately for each supported kernel version.
    
    [vfs] The generic_readlink() function has been made static.  If .readlink
    in inode_operations is NULL, generic_readlink() is used.
    
    [zol typo] Completely unrelated to 4.10 compat, fix a typo in the check
    for REQ_OP_SECURE_ERASE so that the proper macro is defined:
    
        s/HAVE_REQ_OP_SECURE_DISCARD/HAVE_REQ_OP_SECURE_ERASE/
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Closes #5499

[33mcommit 3500a145952e0dfb7b7efe1c6b7856319815628c[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Thu Dec 22 19:39:00 2016 +0100

    Don't persist temporary pool name on devices
    
    Fix a regression accidentally introduced by e0ab3ab.
    
    Additionally, add a new script zpool_import_014_pos.ksh to
    the ZFS test suite to exercise 'zpool import -t' functionality.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #5466
    Closes #5515

[33mcommit 547c5936613ef296559eda5177b6391cfbbfb5c6[m
Author: GeLiXin <ge.lixin@zte.com.cn>
Date:   Thu Dec 22 03:27:24 2016 +0800

    Fix coverity defects: CID 147587
    
    CID 147587: Out-of-bounds read
    
    Future changes may cause an array overrun of 4096 bytes at byte
    offset 4096 by dereferencing pointer dstp.  Adding this additional
    check ensures correctness.
    
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: GeLiXin <ge.lixin@zte.com.cn>
    Closes #5297

[33mcommit 53ed2db212320e99e1426be832f4968eb7c42adf[m
Author: bunder2015 <omfgbunder@gmail.com>
Date:   Wed Dec 21 14:06:02 2016 -0500

    Remove extra + from zfs man page
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: bunder2015 <omfgbunder@gmail.com>
    Closes #5508

[33mcommit da8f51e16aa4e1832f8c1a9ddc3082e4469b4485[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Wed Dec 21 10:47:15 2016 -0800

    Use a dedicated taskq for vdev_file
    
    The introduction of parallel zvol prefetch causes deadlock when using
    vdev_file.
    
    spa_async->(spa_namespace_lock)->txg_wait_synced->(wait for txg_sync)
    txg_sync->zio_wait->(wait for vdev_file_io_fsync on system_taskq)
    zvol_prefetch_minors_impl (on system_taskq)->spa_open_common->(wait for spa_namespace_lock)
    
    We fix this by using dedicated taskq for vdev_file.  This same change
    was originally made in commit bc25c93 but reverted in commit aa9af22
    when dynamic taskqs were added.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Closes #5506
    Closes #5495

[33mcommit 5f1346c29997dd4e02acf4c19c875d5484f33b1e[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Wed Dec 21 03:46:59 2016 +0100

    Fix dsl_props_set_sync_impl to work with nested nvlist
    
    When iterating over the input nvlist in dsl_props_set_sync_impl() when we don't
    preserve the nvpair name before looking up ZPROP_VALUE, so when we later go to
    process it nvpair_name() is always "value" and not the actual property name.
    
    This fixes a couple of bugs in zfs_ioc_recv():
    * Received properties were not restored correctly when failing to receive an
    incremental send stream
    * Received properties were not completely replaced by the new ones when
    successfully receiving an incremental send stream
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #5497

[33mcommit a3823f428deb8f15dd383dc6210b2e16926f4217[m
Merge: 58bf046 b4d8e2b
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Dec 19 13:01:10 2016 -0800

    Fix file attributes
    
    This branch contains the following fixes/improvements.
    
    * Fix setting i_flags
    * Fix wrong operator in xvattr.h
    * Fix fchange macro in zpl_ioctl_setflags()
    * Added configure check to use inode_set_flags()
    * Added a test case for chattr for better test coverage
    
    Reviewed-by: Tim Chase <tim@chase2k.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #5486
    Closes #5470
    Closes #5469

[33mcommit 58bf046ab304482775355b21eacd9f9ccbf62c12[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Tue Dec 20 02:26:15 2016 +0800

    Fix coverity defects: CID 155008
    
    CID 155008:  Resource leaks  (RESOURCE_LEAK)
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Reviewed-by: Gvozden Neskovic <neskovic@gmail.com>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5500

[33mcommit 6c01a4af2b5466fbdceba7304fa8b0dfb0dac839[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Mon Dec 19 09:46:29 2016 -0800

    Fix zmo leak when zfs_sb_create fails
    
    zfs_sb_create would normally takes ownership of zmo, and it will be freed in
    zfs_sb_free. However, when zfs_sb_create fails we need to explicit free it.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #5490
    Closes #5496

[33mcommit 1528bfdb148b44eaa0522109fee1ab61f4f3214b[m
Author: Tony Hutter <hutter2@llnl.gov>
Date:   Fri Dec 16 16:10:45 2016 -0800

    Don't run 'zpool iostat -c CMD' command on all vdevs, if vdevs specified
    
    zpool iostat allows you to specify only certain vdevs to display.
    Currently, if you run 'zpool iostat -c CMD vdev1 vdev2 ...'
    on specific vdevs, it will actually run the command on *all* vdevs,
    and just display the results for the vdevs you specify.  This patch
    corrects the behavior to only run the command on the specified vdevs,
    and also enables the zpool_iostat_005_pos.ksh tests.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Closes #5443

[33mcommit b4d8e2be036891dcf2fdb510571bdeb9f2c64faa[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Fri Dec 16 15:15:48 2016 -0800

    Add test for chattr
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>

[33mcommit a5248129b865d9b9675a6952c40a9f68e0374b83[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Fri Dec 16 13:54:51 2016 -0800

    Use inode_set_flags when available
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>

[33mcommit c360af541117a0978b7fe146b59c12ad2f80d162[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Fri Dec 16 12:41:56 2016 -0800

    Fix fchange in zpl_ioctl_setflags
    
    The fchange in zpl_ioctl_setflags was for detecting flag change. However it
    was incorrect and would always fail to detect a flag change from set to unset,
    causing users without CAP_LINUX_IMMUTABLE to be able to unset flags.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>

[33mcommit 81eb8a1fbb5dae86bebdc6c518071ae3ab062e3f[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Sat Dec 17 01:11:17 2016 +0800

    Fix coverity defects: CID 147534
    
    CID 147534: Negative array index read
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5467

[33mcommit 01017962908392b83764f29b21e687844636eed6[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Fri Dec 16 02:31:33 2016 +0100

    ABD: Adapt avx512bw raidz assembly
    
    Adapt avx512bw implementation for use with abd buffers. Mul2 implementation
    is rewritten to take advantage of the BW instruction set.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Romain Dolbeau <romain.dolbeau@atos.net>
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Closes #5477

[33mcommit 05100ec8f06589896fcd2a847a12c5b6fcb67b81[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Wed Dec 14 14:53:56 2016 -0800

    Fix wrong operator in xvattr.h
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>

[33mcommit 7bb1325f95d0c11a2145ff99ae15057adfbae0ac[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Wed Dec 14 14:18:53 2016 -0800

    Fix i_flags issue caused by 64c688d
    
    Fix zfs_xvattr_set to set S_IMMUTABLE and S_APPEND flags correctly.
    
    Reinstate zfs_set_inode_flags and use it when zfs_xvatter_set and also when
    setting up inode in zfs_znode_alloc and zfs_rezget.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>

[33mcommit f2d8bdc62ef779a632615b8a4be90009517f457a[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Wed Dec 14 09:41:39 2016 -0800

    Add ida_destroy in zvol_fini to fix memleak
    
    User of ida needs to call ida_destroy after using it. Otherwise
    ida->free_bitmap and/or other stuff may leak.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #5484

[33mcommit db2c364ffde84125de5aceb0c3eb6062abb0199c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Dec 14 09:36:14 2016 -0800

    Skip xfstests on Ubuntu 16.04 and CentOS 7
    
    The ZFS enabled versions of xfstests fails to build cleanly on
    Ubuntu 16.04 and CentOS 7.  This issue should be resolved by
    rebasing the ZFS patches against the latest xfstests and pushing
    those patches upstream.  This would allow us to use an unmodified
    xfstests.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #5481
    Closes #5482

[33mcommit c6ced7261c1986aac7ced7f46a960025a4e053a2[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Dec 14 09:33:07 2016 -0800

    Skip slow tests when kmemleak is enabled
    
    When running the ZFS Test Suite with a kmemleak enabled kernel
    the following test cases run far slower than usual and may hit
    their timeout threshold.  Skip the following test cases.
    
    Test: cli_root/zfs_get/zfs_get_009_pos (run as root) [55:43]
    Test: cli_root/zpool_clear/zpool_clear_001_pos (run as root) [11:32]
    Test: cli_root/zpool_create/zpool_create_024_pos (run as root) [11:01]
    Test: features/async_destroy/async_destroy_001_pos (run as root) [41:15]
    Test: inheritance/inherit_001_pos (run as root) [09:08]
    
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #5479
    Closes #5480

[33mcommit f974e25dc14e8b611d792839bffabd09b9f74b43[m
Author: bunder2015 <omfgbunder@gmail.com>
Date:   Tue Dec 13 17:21:02 2016 -0500

    Fix typos in dbuf.c
    
    This removes two large whitespaces in "modinfo zfs" as well as correcting
    a couple typos.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: bunder2015 <omfgbunder@gmail.com>
    Closes #5475

[33mcommit 02730c333c4fce8c0ead1f7f3404caca5cdb3936[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Dec 12 10:46:26 2016 -0800

    Use cstyle -cpP in `make cstyle` check
    
    Enable picky cstyle checks and resolve the new warnings.  The vast
    majority of the changes needed were to handle minor issues with
    whitespace formatting.  This patch contains no functional changes.
    
    Non-whitespace changes are as follows:
    
    * 8 times ; to { } in for/while loop
    * fix missing ; in cmd/zed/agents/zfs_diagnosis.c
    * comment (confim -> confirm)
    * change endline , to ; in cmd/zpool/zpool_main.c
    * a number of /* BEGIN CSTYLED */ /* END CSTYLED */ blocks
    * /* CSTYLED */ markers
    * change == 0 to !
    * ulong to unsigned long in module/zfs/dsl_scan.c
    * rearrangement of module_param lines in module/zfs/metaslab.c
    * add { } block around statement after for_each_online_node
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Håkan Johansson <f96hajo@chalmers.se>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5465

[33mcommit d57f03e40ec3bbf109e75b83699b58157b9a867d[m
Author: George Melikov <mail@gmelikov.ru>
Date:   Fri Dec 9 20:48:12 2016 +0100

    Add CONTRIBUTING information and templates
    
    Guidelines for developers and users describing how they can
    participle in the project.
    
    Reviewed-by: Manuel Mendez <mmendez534@gmail.com>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: George Melikov <mail@gmelikov.ru>
    Closes #672
    Closes #4776
    Closes #5361

[33mcommit 00155d395f4154b5de2526bbc0c8a679282cfaee[m
Author: liaoyuxiangqin <guo.yong33@zte.com.cn>
Date:   Sat Dec 10 02:59:36 2016 +0800

    Fix coverity defects: CID 147475
    
    CID 147475: Logically dead code (DEADCODE)
    
    Reviewed-by: Tim Chase <tim@chase2k.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: yuxiang <guo.yong33@zte.com.cn>
    Closes #5421

[33mcommit a806cb6a89589d4e1e57a01161b4ce0e2d53523a[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Fri Dec 9 10:52:08 2016 -0800

    Don't count '@' for dataset namelen if not a snapshot
    
    Don't count '@' for dataset namelen if not a snapshot.  This
    fixes making a pool unimportable when the  dataset namelen
    is 255.
    
    Add test file for zfs create name length 255.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #5432
    Closes #5456

[33mcommit c077090a9b11d42c0734f0741ca08d0c9b6b37b0[m
Author: luozhengzheng <luo.zhengzheng@zte.com.cn>
Date:   Fri Dec 9 05:48:09 2016 +0800

    Fix coverity defects: CID 154617
    
    CID 154617: Memory - illegal accesses (UNINIT)
    
    The value here just needs to be initialized to make Coverity happy.
    When dsize == 0, then value of daiter.iter_mapaddr is irrelevant. That
    address won't be accessed, it's only used for some arithmetic. dsize
    can be zero either if dabd is null, or if code column is longer than the
    current data column.
    
    Reviewed-by: Gvozden Neskovic <neskovic@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: luozhengzheng <luo.zhengzheng@zte.com.cn>
    Closes #5437

[33mcommit f95e64789157c2fa373cb424f2b5713be4c8a639[m
Merge: 27f2b90 899662e
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 8 14:05:02 2016 -0700

    Speed up zvol import and export speed
    
    Speed up import and export speed by:
    
    * Add system delay taskq
    * Parallel prefetch zvol dnodes during zvol_create_minors
    * Parallel zvol_free during zvol_remove_minors
    * Reduce list linear search using ida and hash
    
    Reviewed-by: Boris Protopopov <boris.protopopov@actifio.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #5433

[33mcommit 27f2b90d3e365dbe20d736792b390674e8236b17[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 8 13:57:42 2016 -0700

    Revert "Disable zio_dva_throttle_enabled by default"
    
    Enable zio_dva_throttle_enabled=1 by default. Subsequent
    testing has been unable to reproduce the suspected regression.
    
    Tested-by: kernelOfTruth kerneloftruth@gmail.com
    Reviewed-by: Olaf Faaland <faaland1@llnl.gov>
    Signed-off-by: Brian Behlendorf behlendorf1@llnl.gov
    Reverts #5335
    Closes #5289
    Closes #5457

[33mcommit e8a2014436147d07442e52f854e197082748fca6[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Sat Dec 3 00:59:35 2016 +0100

    Cache ddt_get_dedup_dspace() value if there was no ddt changes
    
    Save and reuse ddt dspace calculation when there have been no ddt changes.
    This avoids unnecessary traversal of 168KiB of ddt histograms.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Closes #5425

[33mcommit baf67d15a59025fb53fc60bf439ef291397366e8[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Dec 2 16:57:49 2016 -0700

    Refactor txg history kstat
    
    It was observed that even when the txg history is disabled by
    setting `zfs_txg_history=0` the txg_sync thread still fetches
    the vdev stats unnecessarily.
    
    This patch refactors the code such that vdev_get_stats() is no
    longer called when `zfs_txg_history=0`.  And it further reduces
    the  differences between upstream and the ZoL txg_sync_thread()
    function.
    
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5412

[33mcommit 899662e344b150037180a6f61acd186fec773c5f[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Wed Nov 30 13:56:50 2016 -0800

    zvol_remove_minors do parallel zvol_free
    
    On some kernel version, blk_cleanup_queue and put_disk will wait for more then
    10ms. So a pool with a lot of zvols will easily wait for more then 1 min if we
    do zvol_free sequentially.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Requires-spl: refs/pull/588/head

[33mcommit 7ac557cef18a23269b76a63924ae866c7e9de668[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Wed Nov 30 13:56:50 2016 -0800

    zpool_create_minors parallel prefetch
    
    Do parallel prefetch all zvol dnodes before actually creating each individual.
    This will greatly reduce the import time when having a lot of zvols and disk
    is slow.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>

[33mcommit 6c09d3e5a04db023536aab467064cad3f7858776[m
Author: ChaoyuZhang <zhang.chaoyu@zte.com.cn>
Date:   Sat Dec 3 02:20:57 2016 +0800

    Enable mountpoint_003_pos
    
    Update the test case to correctly interpret how Linux reports
    the mount options.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: ChaoyuZhang <zhang.chaoyu@zte.com.cn>
    Closes #5410

[33mcommit 4dec26e49a8c2fefb357158a87c9756f14c31697[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Dec 2 10:10:23 2016 -0700

    Skip zpool_scrub_004_pos on 32-bit systems
    
    The zpool_scrub_004_pos test case currently fails when testing on
    a 32-bit system.  Conditionally skip this test case on 32-bit
    systems until the root cause is identified and resolved.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #5444
    Closes #5445

[33mcommit b0319c1faae5a77e553ae74bf899efbc6629674d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 1 16:50:11 2016 -0700

    OpenZFS 7143 - dbuf_read() creates unnecessary zio_root() for bonus buf
    
    dbuf_read() creates a zio_root() to track and wait for all the
    zio's that may happen as part of this call. However, if the blkptr_t
    for this buffer is NULL or a hole, we will not create any more zio's,
    so this zio_root() is unnecessary. This is always the case when calling
    dbuf_read() on a bonus buffer, because it has no blkptr (it's part of
    the containing dnode). For workloads that read a lot of bonus buffers
    (e.g. file creation and removal), creating and destroying these
    unnecessary zio's can decrease performance by around 3%.
    
    The fix is to only create/destroy the zio_root() in dbuf_read() if
    the blkptr is not NULL and not a hole.
    
    Changes sponsored by Intel Corp.
    
    Authored by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed-by:  Alex Zhuravlev <alexey.zhuravlev@intel.com>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue openzfs/openzfs#137
    Closes #4803
    Closes #5382

[33mcommit ba712624d6a0df121d5dfc5440ba83cf53224916[m
Author: luozhengzheng <luo.zhengzheng@zte.com.cn>
Date:   Fri Dec 2 07:45:16 2016 +0800

    Fix incorrect operator in abd_alloc_sametype()
    
    This should be & and not | so is_metadata is set correctly.
    
    Reviewed-by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: luozhengzheng <luo.zhengzheng@zte.com.cn>
    Closes #5438

[33mcommit e2c7d3785ad97399478421293121d7853463a3e4[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Fri Dec 2 07:39:06 2016 +0800

    Remove unused sa_update_from_cb()
    
    It looks like this was functionality which was added in the
    original SA implementation and then never needed.  It can
    be safely removed now and easily added back if we find a
    use for it.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5440

[33mcommit 6a8fd57fa7f76e07172aa2c517f2c79296ba322e[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Fri Dec 2 07:36:25 2016 +0800

    Compile zio.h and zio_impl.h mutual include
    
    zio.h includes zio_impl.h but zio_impl.h also includes zio.h, so the
    header files to contain each other.  Get rid of the zio_impl.h include
    in zio.h and update zio_inject.c to include zio.h instead of zio_impl.h.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5439

[33mcommit d45e010dceffc3bf86600787f4d116f891b8bf23[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Wed Nov 30 13:56:50 2016 -0800

    zvol: reduce linear list search
    
    Use kernel ida to generate minor number, and use hash table to find zvol with
    name.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>

[33mcommit 57ddcda1647daac93057dd520a9dc5187c643264[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Wed Nov 30 13:56:50 2016 -0800

    Use system_delay_taskq for long delay tasks
    
    Use it for spa_deadman, zpl_posix_acl_free, snapentry_expire.
    This free system_taskq from the above long delay tasks, and allow us to do
    taskq_wait_outstanding on system_taskq without being blocked forever, making
    system_taskq more generic and useful.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>

[33mcommit 5f20c145df3ca45f86cd1892137edb117d4c8a82[m
Author: Håkan Johansson <f96hajo@chalmers.se>
Date:   Thu Dec 1 01:46:16 2016 +0100

    Do not force VDEV_NAME_TYPE_ID in max_width()
    
    Do not force VDEV_NAME_TYPE_ID in max_width(), instead add it
    in the relevant calls to max_width().
    
    The first location of max_width() where VDEV_NAME_TYPE_ID is
    now added in show_import() is followed by print_import_config() and
    print_logs().  Both these print children vdev names that have been
    retrieved using an explicit VDEV_NAME_TYPE_ID added.
    
    The second location is in status_callback().  This is followed by
    print_status_config(), print_logs(), print_l2cache(), and
    print_spares(). For l2cache and spares it should not matter as there
    are no mirror-X or raidz-X involved.  print_status_config() as above
    retrieves the name using explicit VDEV_NAME_TYPE_ID before
    calling itself to print children.
    
    The call of max_width() in get_namewidth() is not changed, as this is
    used by zpool_do_iostat(), followed by print_iostat(), which does not
    add VDEV_NAME_TYPE_ID.
    
    Overall, we should consider adding VDEV_NAME_TYPE_ID to the
    relevant name_flags / cb_name_flags fields, and remove the explicit
    adding in called routines.
    
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Haakan T Johansson <f96hajo@chalmers.se>
    Closes #5401

[33mcommit a3fd9d9e1525d5df18b7f8c2895270689d292ec2[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Nov 30 16:18:20 2016 -0700

    Convert zio_buf_alloc() consumers
    
    In multiple cases zio_buf_alloc() was used instead of kmem_alloc()
    or vmem_alloc().  This was often done because the allocations
    could be large and it was easy to use zfs_buf_alloc() for them.
    
    But this isn't ideal for allocations which are small or short
    lived.  In these cases it is better to use kmem_alloc() or
    vmem_alloc().  If possible we want to avoid the case where
    we have slabs allocated for kmem caches which are rarely used.
    
    Note for small allocations vmem_alloc() will be internally
    converted to kmem_alloc().  Therefore as long as large
    allocations are infrequent and short lived the penalty for
    using vmem_alloc() is small.
    
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5409

[33mcommit 7657defc48b7c47a8bf0c8f21c78783d293dc5ed[m
Merge: ce43e88 9829574
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Nov 30 14:48:16 2016 -0700

    Introduce ARC Buffer Data (ABD)
    
    ZFS currently uses ARC buffers which are backed by virtual memory.
    While functional, there are some major problems with this approach
    which can be observed on all OpenZFS platforms.  ABD was designed
    to address these issues and includes contributions from OpenZFS
    developers from multiple platforms.
    
    While all OpenZFS platforms will benefit from ABD this functionality
    is critical for Linux.  Unlike the other OpenZFS platforms the Linux
    kernel discourages extensive use of virtual memory.  The provided
    interfaces are not optimized for frequent allocations from the virtual
    address space.  To maintain good performance a kmem cache is
    used which contains relatively long lived slabs backed by virtual
    memory.  The downside to the approach is that those slabs can
    become highly fragmented resulting in an inefficient use of memory.
    
    Another issue is that on 32-bit systems the available virtual
    address space in the kernel is only a small fraction of total
    system memory.  This means the ARC size is highly constrained
    which hurts performance and make allocating memory difficult
    and OOMs more likely.
    
    ABD is designed to address these issues by using scatter lists
    of pages for data buffers.  This removes the need for slabs
    which resolves the fragmentation issue.  It also allows high
    memory pages to be allocated which alleviates the virtual
    address space pressure on 32-bit systems.
    
    For metadata buffers, which are small, linear ABDs are allocated
    from the slab.  This is preferable because there are many places
    in the code which expect to be able to read from a given offset
    in the buffer.  Using linear ABDs means none of that code needs
    to be modified.  The majority of these buffers are allocated with
    kmalloc so there's minimal impact of the virtual address space.
    
    Tested-by: Kash Pande <kash@tripleback.net>
    Tested-by: kernelOfTruth <kerneloftruth@gmail.com>
    Tested-by: RageLtMan <rageltman@sempervictus>
    Tested-by: DHE <git@dehacked.net>
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Reviewed-by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed-by: David Quigley <david.quigley@intel.com>
    Reviewed-by: Gvozden Neskovic <neskovic@gmail.com>
    Reviewed-by: Tom Caputi <tcaputi@datto.com>
    Reviewed-by: Isaac Huang <he.huang@intel.com>
    Reviewed-by: Jinshan Xiong <jinshan.xiong@intel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3441
    Closes #5135

[33mcommit ce43e88dd65509a4cf62c4acc76619e571d8518a[m
Author: ChaoyuZhang <zhang.chaoyu@zte.com.cn>
Date:   Thu Dec 1 02:27:04 2016 +0800

    Enable ro_props_001_pos
    
    This script was disabled as the avail/used space changed slightly.
    Add sync_pool() and a short delay after snapshots are created to
    ensure everything in flight has been written.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: ChaoyuZhang <zhang.chaoyu@zte.com.cn>
    Closes #5201
    Closes #5419

[33mcommit 2d44b04b79317df32b509a381d023ba2d5b80f39[m
Author: luozhengzheng <luo.zhengzheng@zte.com.cn>
Date:   Thu Dec 1 01:48:01 2016 +0800

    Fix coverity defects: CID 154591
    
    CID 154591: Incorrect expression (SIZEOF_MISMATCH)
    
    Reviewed-by: Gvozden Neskovic <neskovic@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: luozhengzheng <luo.zhengzheng@zte.com.cn>
    Closes #5435

[33mcommit 982957483450d53683681f456d1c84cfeb56afad[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Wed Oct 26 00:32:23 2016 -0400

    ABD optimized page allocation code
    
    * Convert ABD to use the Linux Kernel scatterlist implementation
      instead of the hand rolled one from illumos.
    
    * Scatter ABDs are preferentially populated with higher order
      compound pages from a single zone.  Allocation size is
      progressively decreased until it can be satisfied without
      performing reclaim or compaction.
    
    * An alternate page allocator is provided for kernels older
      than 3.6 and for CONFIG_HIGHMEM systems.  This allocator
      is designed as a fallback for maximum compatibility.
    
    * Extended abdstats to provide visibility in the the allocator.
    
    * Add cached value for PAGESIZE in userspace.
    
    Contributions-by:
    Chunwei Chen <david.chen@osnexus.com>
    Gvozden Neskovic <neskovic@gmail.com>
    Jinshan Xiong <jinshan.xiong@intel.com>
    Isaac Huang <he.huang@intel.com>
    David Quigley <david.quigley@intel.com>
    Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 4f60152910c6bbc1c7975409f852af7ef11c7007[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Tue Sep 27 17:30:02 2016 -0400

    ABD kmap to kmap_atomic
    
    Convert usage of kmap to kmap_atomic while correctly saving off
    irq state.

[33mcommit 88cc2352eaf6bdd87be8349097b4a3784aeafc51[m
Author: Romain Dolbeau <romain.dolbeau@atos.net>
Date:   Tue Nov 22 08:38:34 2016 +0100

    ABD raidz NEON support
    
    Port NEON implementation of RAID-Z functions to ABD.
    
    Signed-off-by: Roomain Dolbeau <romain.dolbeau@atos.net>

[33mcommit 65d71d4212a813937f2eba36981b236cdba292f7[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Sun Nov 20 06:01:31 2016 +0100

    ABD raidz avx512f support
    
    Implement shift based multiplication for 512f. Higher IPC over lookup based
    methods yields up to 40% better performance on the current hardware.
    
    Results on Xeon Phi(TM) CPU 7210:
    implementation   gen_p           gen_pq          gen_pqr         rec_p           rec_q           rec_r           rec_pq          rec_pr          rec_qr          rec_pqr
    original         142232671       24411492        12948205        283053705       22348167        4215911         9171609         2265548         2378370         1648495
    scalar           295711162       49851491        33253815        293198109       88179448        61866752        27941684        25764416        17384442        12138153
    sse2             410055998       199642658       117973654       406240463       152688682       121092250       84968180        79291076        47473657        20779719
    ssse3            411641595       199669571       117937647       406211024       137638508       117050346       81263322        76120405        46281559        32696722
    avx2             616485806       311515332       188595628       605455115       260602390       230554476       148198817       138800254       92273356        62937819
    avx512f          832191523       408509425       253599522       810094481       404325734       317590971       218235687       197204920       133101937       94001219
    fastest          avx512f         avx512f         avx512f         avx512f         avx512f         avx512f         avx512f         avx512f         avx512f         avx512f
    
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>

[33mcommit cbf484f8ad26b84a17c5308af47d2c202e1dc9e9[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Wed Aug 24 15:51:33 2016 +0200

    ABD Vectorized raidz
    
    Enable vectorized raidz code on ABD buffers.  The avx512f,
    avx512bw, neon and aarch64_neonx2 are disabled in this commit.
    With the exception of avx512bw these implementations are
    updated for ABD in the subsequent commits.
    
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>

[33mcommit a206522c4fd31f03f14ba174d6159b72acfae0a9[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Wed Aug 24 15:42:51 2016 +0200

    ABD changes for vectorized RAIDZ
    
    * userspace: aligned buffers. Minimum of 32B alignment is
      needed for AVX2. Kernel buffers are aligned 512B or more.
    * add abd_get_offset_size() interface
    * abd_iter_map(): fix calculation of iter_mapsize
    * add abd_raidz_gen_iterate() and abd_raidz_rec_iterate()
    
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>

[33mcommit b0be93e81a4ace96a799d3705da6832633eb4325[m
Author: Isaac Huang <he.huang@intel.com>
Date:   Wed Aug 31 00:26:43 2016 -0600

    ABD page support to vdev_disk.c
    
    Signed-off-by: Isaac Huang <he.huang@intel.com>

[33mcommit a6255b7fce400d485a0e87cbe369aa0ed7dc5dc4[m
Author: David Quigley <david.quigley@intel.com>
Date:   Fri Jul 22 11:52:49 2016 -0400

    DLPX-44812 integrate EP-220 large memory scalability

[33mcommit 616fa7c02b0cc373f011998f56ed53bb37742d13[m
Author: Tim Chase <tim@chase2k.com>
Date:   Tue Nov 29 15:47:05 2016 -0600

    zstreamdump needs to initialize fletcher 4 support
    
    Otherwise, the checksum function pointer isn't initialized.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Closes #5411

[33mcommit 8720e9e7482fa2dce4f34c56d3c7451833413d7d[m
Author: Tony Hutter <hutter2@llnl.gov>
Date:   Tue Nov 29 13:45:38 2016 -0800

    Add -c to zpool iostat & status to run command
    
    This patch adds a command (-c) option to zpool status and zpool iostat.  The
    -c option allows you to run an arbitrary command on each vdev and display
    the first line of output in zpool status/iostat.  The environment vars
    VDEV_PATH and VDEV_UPATH are set to the vdev's path and "underlying path"
    before running the command.  For device mapper, multipath, or partitioned
    vdevs, VDEV_UPATH is the actual underlying /dev/sd* disk.  This can be useful
    if the command you're running requires a /dev/sd* device.
    
    The patch also uses /sys/block/<dev>/slaves/ to lookup the underlying device
    instead of using libdevmapper.  This not only removes the libdevmapper
    requirement at build time, but also allows you to resolve device mapper
    devices without being root.  This means that UDEV_UPATH get set correctly
    when running zpool status/iostat as an unprivileged user.
    
    Example:
    
    $ zpool status -c 'echo I am $VDEV_PATH, $VDEV_UPATH'
    
    NAME        STATE     READ WRITE CKSUM
    mypool      ONLINE       0     0     0
      mirror-0  ONLINE       0     0     0
        mpatha  ONLINE       0     0     0  I am /dev/mapper/mpatha, /dev/sdc
        sdb     ONLINE       0     0     0  I am /dev/sdb1, /dev/sdb
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Closes #5368

[33mcommit 2f71caf2d926249920d1b9162550c56715cc6461[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Tue Nov 29 20:22:38 2016 +0100

    Allow zfs unshare <protocol> -a
    
    Allow `zfs unshare <protocol> -a` command to share or unshare all datasets
    of a given protocol, nfs or smb.
    
    Additionally, enable most of ZFS Test Suite zfs_share/zfs_unshare test cases.
    To work around some Illumos-specific functionalities ($SHARE/$UNSHARE) some
    function wrappers were added around them.
    
    Finally, fix and issue in smb_is_share_active() that would leave SMB shares
    exported when invoking 'zfs unshare -a'
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #3238
    Closes #5367

[33mcommit 251cb8dfacb51b9ad7a0e3da305c0bc5bbc1cb9e[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Mon Nov 28 16:24:47 2016 -0800

    Ensure that perf regression tests cleanup properly
    
    Each test in the performance regression test suite
    creates a pool and a dataset for use. Unfortunately,
    these tests do not cleanup the pool and dataset
    correctly once they complete. Each test now kills
    fio and iostat, destroys the dataset, and finally
    destroys the pool. Each test also now traps the
    SIGTERM signal to handle cases where test-runner
    kills a test.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Requires-builders: all
    Closes #5407

[33mcommit ce4197c1ca987dad9cd1d65fc8c50226dd19d863[m
Author: ChaoyuZhang <zhang.chaoyu@zte.com.cn>
Date:   Sat Nov 19 08:25:06 2016 +0800

    Enable user_property_002_pos
    
    The user_property_002_pos passes as expected.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: ChaoyuZhang <zhang.chaoyu@zte.com.cn>
    Closes #5406

[33mcommit 7ca25051b6470e8471b4ed454d8c66ff21338de3[m
Author: DeHackEd <DeHackEd@users.noreply.github.com>
Date:   Tue Nov 15 12:20:46 2016 -0500

    Kernel 4.9 compat: file_operations->aio_fsync removal
    
    Linux kernel commit 723c038475b78 removed this field.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: DHE <git@dehacked.net>
    Closes #5393

[33mcommit 6146e17ebe48da1be8b4e2bf38c879273b7c34e5[m
Author: DeHackEd <DeHackEd@users.noreply.github.com>
Date:   Mon Nov 14 20:03:57 2016 -0500

    Fix man page formatting in zfs-module-parameters
    
    Bold and Normal codes were mixed up in a few places resulting in
    bad highlighting.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: DHE <git@dehacked.net>
    Closes #5397

[33mcommit 1c9116125830fa4734422cfd7dcdd2f3d333b5c5[m
Author: Håkan Johansson <f96hajo@chalmers.se>
Date:   Mon Nov 14 18:47:49 2016 +0100

    Repair indent of zpool.8 man page
    
    Repair indent of zpool.8 man page, just before zpool labelclear
    details.  Accidentally introduced by 193a37cb2 (git bisect).
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Haakan T Johansson <f96hajo@chalmers.se>
    Closes #5394

[33mcommit c30d8ded0c8c64a9a144cf478502bb4e512ab9fa[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Nov 14 09:40:18 2016 -0800

    Fix 'zpool import' detection issue
    
    Before adding the entry to the configuration verify that the
    device can be opened exclusively.  This ensures that as long
    as multipathd is running the underlying multipath devices, which
    otherwise appear identical to their /dev/mapper counterpart,
    are pruned from the configuration.
    
    Failure to do so can result in a result in the vdev appearing
    as UNAVAIL when the vdev path provided to the kernel can't be
    opened exclusively.
    
    This check would normally be performed in zpool_open_func()
    but placing it there would result in false positives because
    it is called concurrently for many devices.
    
    
    Reviewed-by: Olaf Faaland <faaland1@llnl.gov>
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5387

[33mcommit 0df15db98f185c948239c236c9e51d7ce14adb71[m
Author: Don Brady <don.brady@intel.com>
Date:   Thu Nov 10 14:52:59 2016 -0700

    Add a statechange notify zedlet
    
    Now that ZED has internal fault diagnosis and the statechange event
    is generated for faulted states, we can replace the io-notify and
    checksum-notify zedlets with one based on statechange.
    
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Don Brady <don.brady@intel.com>
    Closes #5383

[33mcommit 32dec7bd1a0bce6039a65768ed8552164a0130bf[m
Author: luozhengzheng <luo.zhengzheng@zte.com.cn>
Date:   Fri Nov 11 00:50:32 2016 +0800

    Fix coverity defects: CID 147503
    
    CID 147503: Dereference after null check (FORWARD_NULL)
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: luozhengzheng <luo.zhengzheng@zte.com.cn>
    Closes #5326

[33mcommit 3bfd95d5898b1318f9a5c36d1cc43cf23d004f64[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Thu Nov 10 09:35:26 2016 +0800

    Fix coverity defects: CID 147540, 147542
    
    CID 147540: unsigned_compare
    - Cast nsec to a int32_t to properly detect the expected overflow.
    CID 147542: unsigned_compare
    - intval can never be less than ZIO_FAILURE_MODE_WAIT which is
      defined to be zero.  Remove this useless check.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5379

[33mcommit 7e5ea7be7f69231b66c1affddb870fcea8c3a4d8[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Wed Nov 9 22:53:13 2016 +0100

    Fix ZFS_AC_KERNEL_SET_CACHED_ACL_USABLE check
    
    Pass `ACL_TYPE_ACCESS` for type parameter of `set_cached_acl()` and
    `forget_cached_acl()` to avoid removal of dead code after BUG() in
    compile time. Tested on 3.2.0 kernel.
    
    Introduced in 3779913
    
    Reviewed-by: Massimo Maggi <me@massimo-maggi.eu>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Closes #5378

[33mcommit 126ae9f4e9a8e39f65fcd55e3e1cf90d4e9c6f56[m
Author: jxiong <jinshan.xiong@gmail.com>
Date:   Wed Nov 9 13:51:12 2016 -0800

    Export symbol dmu_objset_userobjspace_upgradable
    
    It's used by Lustre to determine if the objset can be upgraded.
    The inline version doesn't work because dmu_objset_is_snapshot()
    is not exported.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Jinshan Xiong <jinshan.xiong@intel.com>
    Closes #5385

[33mcommit 0420c126ce11432590bce1da651334ca07223185[m
Author: tuxoko <tuxoko@gmail.com>
Date:   Wed Nov 9 10:37:17 2016 -0800

    Linux 3.14 compat: assign inode->set_acl
    
    Linux 3.14 introduces inode->set_acl(). Normally, acl modification will come
    from setxattr, which will handle by the acl xattr_handler, and we already
    handles that well. However, nfsd will directly calls inode->set_acl or
    return error if it doesn't exists.
    
    Reviewed-by: Tim Chase <tim@chase2k.com>
    Reviewed-by: Massimo Maggi <me@massimo-maggi.eu>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #5371
    Closes #5375

[33mcommit 66f801f00acbc83206b5c2af9e44de45da2602a3[m
Author: Olaf Faaland <faaland1@llnl.gov>
Date:   Wed Nov 9 10:19:43 2016 -0800

    Fix symlinks for {vdev_clear,statechange}-led.sh
    
    These were named in the zed/Makefile.am as vdev_clear-blinkled.sh
    and statechange-blinkled.sh causing bad symlinks to be created.
    
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>
    Closes #5384

[33mcommit 010782be9197c8e1131be6220fff682c692a23eb[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Wed Nov 9 09:33:23 2016 +0800

    Fix coverity defects: CID 147586
    
    CID 147586: function:allow_usage Type:out-of-bounds read
    
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5364

[33mcommit acc6d0e223e5dcff183a5dd52019cea1dabd981b[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Wed Nov 9 08:41:31 2016 +0800

    Fix coverity defects: CID 147629
    
    CID 147629: Type:Dereference before null check
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov
    Signed-off-by: <cao.xuewen cao.xuewen@zte.com.cn>
    Closes #5376

[33mcommit 70df4c21c0da3baacb6601d924dd1fb2b3cad1b3[m
Author: luozhengzheng <luo.zhengzheng@zte.com.cn>
Date:   Wed Nov 9 06:34:52 2016 +0800

    Fix coverity defects: 154021
    
    CID 154021: Null pointer dereference
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: luozhengzheng <luo.zhengzheng@zte.com.cn>
    Closes #5380

[33mcommit a36cc8d2428259f5cfefb653bff39ca7afc66518[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Wed Nov 9 06:28:17 2016 +0800

    Fix coverity defects: CID 147626, 147628
    
    CID 147626: Type:Dereference before null check
    CID 147628: Type:Dereference before null check
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5304

[33mcommit ffb78320c8040e10e754f1358476beb04c943510[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Nov 8 13:57:17 2016 -0800

    Skip test suites on 32-bit TEST builders
    
    The ztest, filebench, xfstests, and zfsstress test suites should
    be skipped when testing on 32-bit platforms until they pass
    reliably.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5381

[33mcommit 976246fadde25790cec3de50c01c689d98d84e0c[m
Author: Don Brady <don.brady@intel.com>
Date:   Mon Nov 7 16:01:38 2016 -0700

    Add illumos FMD ZFS logic to ZED -- phase 2
    
    The phase 2 work primarily entails the Diagnosis Engine and
    the Retire Agent modules. It also includes infrastructure
    to support a crude FMD environment to host these modules.
    
    The Diagnosis Engine consumes I/O and checksum ereports and
    feeds them into a SERD engine which will generate a corres-
    ponding fault diagnosis when the SERD engine fires. All the
    diagnosis state data is collected into cases, one case per
    vdev being tracked.
    
    The Retire Agent responds to diagnosed faults by isolating
    the faulty VDEV. It will notify the ZFS kernel module of
    the new VDEV state (degraded or faulted). This agent is
    also responsible for managing hot spares across pools.
    When it encounters a device fault or a device removal it
    replaces the device with an appropriate spare if available.
    
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Don Brady <don.brady@intel.com>
    Closes #5343

[33mcommit f4bae2ed6361917660f5238cd35672ad18d7babc[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Tue Nov 8 06:54:32 2016 +0800

    Fix coverity defects: CID 147575, 147577, 147578, 147579
    
    CID 147575, Type:Unintentional integer overflow
    CID 147577, Type:Unintentional integer overflow
    CID 147578, Type:Unintentional integer overflow
    CID 147579, Type:Unintentional integer overflow
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5365

[33mcommit 3779913b35634d9d34ac9eb709203275b28050c2[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Tue Nov 1 17:19:52 2016 -0700

    Use set_cached_acl and forget_cached_acl when possible
    
    Originally, these two function are inline, so their usability is tied to
    posix_acl_release. However, since Linux 3.14, they became EXPORT_SYMBOL, so we
    can always use them. In this patch, we create an independent test for these
    two functions so we can use them when possible.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>

[33mcommit 8e71ab99dc4a591d41ab0d9255ddca3e914f47e4[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Fri Oct 28 13:37:00 2016 -0700

    Batch free zpl_posix_acl_release
    
    Currently every calls to zpl_posix_acl_release will schedule a delayed task,
    and each delayed task will add a timer. This used to be fine except for
    possibly bad performance impact.
    
    However, in Linux 4.8, a new timer wheel implementation[1] is introduced. In
    this new implementation, the larger the delay, the less accuracy the timer is.
    So when we have a flood of timer from zpl_posix_acl_release, they will expire
    at the same time. Couple with the fact that task_expire will do linear search
    with lock held. This causes an extreme amount of contention inside interrupt
    and would actually lockup the system.
    
    We fix this by doing batch free to prevent a flood of delayed task. Every call
    to zpl_posix_acl_release will put the posix_acl to be freed on a lockless
    list. Every batch window, 1 sec, the zpl_posix_acl_free will fire up and free
    every posix_acl that passed the grace period on the list. This way, we only
    have one delayed task every second.
    
    [1] https://lwn.net/Articles/646950/
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>

[33mcommit 83bf769d500a231eac023c9f9f88719ad205694e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Nov 7 10:28:57 2016 -0800

    Fix 'zpool import' detection issues
    
    This patch addresses multiple 'zpool import' block device
    indentification problems which are most likely to occur on a
    system configured to use blkid, by_vdev paths, multipath and
    failover.  The symptom most commonly observed is the import
    uses different path names to import the pool than would
    normally be expected.
    
    * When using blkid to identify vdevs the listed devices may
    be added to the cache in any order.  In order to apply the
    preferred search order heuristic a zfs_path_order() function
    was added to calculate the order given full path names.
    
    * Since it's possible to have multiple block devices with
    different vdev guids which refer to the same ZPOOL_CONFIG_PATH
    the slice cache must be indexed by guid and name.  By avoiding
    collisions the preferred ordering can be maintaining even
    when multiple block devices claim the same ZPOOL_CONFIG_PATH.
    The preferred sorting by partition was never benefitial for
    a Linux system and was removed as part of this change.
    
    * When adding entries to the blkid cache avl_find/avl_insert
    are used instead of avl_add because collisions are possible
    and must be handled gracefully.
    
    * For pools using multipath devices there are, at a minimum,
    three devices where a vdev label may be read.  They are the
    dm-* device and each underlying /dev/sd* device.  Due to the
    way the block cache is implemented each of these devices may
    have a different cached copy of the vdev label.  This can
    result in "ghost pools" which appear to persist even after
    a 'zpool labelclear' has been done to the dm-* device.  In
    order to prevent this the vdev label is read with O_DIRECT
    in order to bypass any caching to get the on-disk version.
    
    * When opening a block device verify that vdev guid read from
    the disk matches the expected vdev guid.  This allows for bad
    labels to be filtered out.
    
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5359

[33mcommit 34328f3cf8a4ca9441a1609878500ef1ff2eeb16[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sat Nov 5 04:54:48 2016 +0000

    Allow 16M zio buffers in user space
    
    Only restrict the maximum zio alloc size to 32-bit kernel space.
    The same virtual address space limitations don't apply to user
    space.  This resolves a memory allocation failure in raidz_test
    where it expects to be able to exercises all valid zio sizes.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 61f9b2cd12a34dcc98e1c94d2988d561ff847b7b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Nov 4 21:10:17 2016 +0000

    Replace ISAINFO with is_32bit function
    
    The isainfo(1) utility was used by the ZFS Test Suite to determine
    when running on a 32-bit platform.  This non-portable check has been
    replaced with an is_32bit helper function which uses getconf(1).
    The getconf(1) utility is available for Linux, FreeBSD, and Illumos.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 1ad9de6d08f8c0261094d322a4507a5cbbb53e66[m
Author: Tony Hutter <hutter2@llnl.gov>
Date:   Fri Nov 4 13:34:13 2016 -0700

    Allow autoreplace even when enclosure LED sysfs entries don't exist
    
    The previous autoreplace code assumed that if you were using autoreplace, then
    you also had the enclosure SES driver loaded.  This could lead to autoreplace
    not working if the SES driver wasn't loaded, or if it wasn't creating the
    proper enclosure_device symlinks (which has happened).  This patch removes
    that assumption.
    
    Reviewed by: Don Brady <don.brady@intel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Closes #5363

[33mcommit 7f3194932d22c667026aff1b263ceaa1ebd012ee[m
Author: Romain Dolbeau <romain.github@dolbeau.name>
Date:   Fri Nov 4 18:53:03 2016 +0100

    Add superscalar fletcher4
    
    This is the Fletcher4 algorithm implemented in pure C, but using
    multiple counters using algorithms identical to those used for
    SSE/NEON and AVX2.
    
    This allows for faster execution on core with strong superscalar
    capabilities but weak SIMD capabilities.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Romain Dolbeau <romain.dolbeau@atos.net>
    Closes #5317

[33mcommit ace1eae84cca8579596f46262d99df19f6d7e963[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Tue Jan 26 12:29:46 2016 -0800

    Add support for O_TMPFILE
    
    Linux 3.11 add O_TMPFILE to open(2), which allow creating an unlinked file on
    supported filesystem. It's basically doing open(2) and unlink(2) atomically.
    
    The filesystem support is added through i_op->tmpfile. We basically copy the
    create operation except we get rid of the link and name related stuff and add
    the new node to unlinked set.
    
    We also add support for linkat(2) to link tmpfile. However, since all previous
    file operation will skip ZIL, we force a txg_wait_synced to make sure we are
    sync safe.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>

[33mcommit 987014903f9d36783547188b6ad00f01d9a076bd[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Wed Oct 12 17:30:46 2016 -0700

    Fix unlinked file cannot do xattr operations
    
    Currently, doing things like fsetxattr(2) on an unlinked file will result in
    ENODATA. There's two places that cause this: zfs_dirent_lock and zfs_zget.
    
    The fix in zfs_dirent_lock is pretty straightforward. In zfs_zget though, we
    need it to not return error when the zp is unlinked. This is a pretty big
    change in behavior, but skimming through all the callers, I don't think this
    change would cause any problem. Also there's nothing preventing z_unlinked
    from being set after the z_lock mutex is dropped before but before zfs_zget
    returns anyway.
    
    The rest of the stuff is to make sure we don't log xattr stuff when owner is
    unlinked.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>

[33mcommit 7f547f85fe783a6ac69ce250b361436b9c4888a6[m
Author: Romain Dolbeau <romain.github@dolbeau.name>
Date:   Wed Nov 2 20:40:23 2016 +0100

    Add parity generation/rebuild using AVX-512 for x86-64
    
    avx512f should work on all AVX512 hardware, since it only uses
    Foundation instructions.
    
    avx512bw should be faster on hardware supporting the AVW512BW
    extension. We can use full-width pshufb (instead of relying on the 256
    bits AVX2 pshufb). As a side-effect, the code is also unrolled more.
    
    Reviewed-by: Richard Laager <rlaager@wiktel.com>
    Reviewed-by: Gvozden Neskovic <neskovic@gmail.com>
    Reviewed-by: Jinshan Xiong <jinshan.xiong@intel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Romain Dolbeau <romain.github@dolbeau.name>
    Closes #5219

[33mcommit 6d4210052be6c63032d693aa487f84955b0dae44[m
Author: BearBabyLiu <liu.huang@zte.com.cn>
Date:   Thu Nov 3 03:34:10 2016 +0800

    Fix dsl_prop_get_all_dsl() memory leak
    
    On error dsl_prop_get_all_ds() does not free the nvlist it allocates.
    This behavior may have been intentional when originally written
    but is atypical and often confusing.  Since no callers rely on this
    behavior the function has been updated to always free the nvlist
    on error.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: BearBabyLiu <liu.huang@zte.com.cn>
    Closes #5320

[33mcommit e676a196249b5e8d23c036548f189cad60d5cd2a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Oct 31 21:16:37 2016 +0000

    Skip async_destroy_001_pos on 32-bit systems
    
    The async_destroy_001_pos test case currently hangs when testing on
    a 32-bit system.  Conditionally skip this test case on 32-bit
    systems until the root cause is identified and resolved.
    
    Reviewed-by: Tom Caputi <tcaputi@datto.com>
    Reviewed-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #5352
    Issue #5347

[33mcommit 9edb36954a0d11ca867d49e23b6b3bd4d1d16c5d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Oct 31 19:24:54 2016 +0000

    Use vmem_size() for 32-bit systems
    
    On 32-bit Linux systems use vmem_size() to correctly size the ARC
    and better determine when IO should be throttle due to low memory.
    
    On 64-bit systems this change has no effect since the virtual
    address space available far exceeds the physical memory available.
    
    Reviewed-by: Tom Caputi <tcaputi@datto.com>
    Reviewed-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #5347

[33mcommit 82ec9d41d85b1643402493bf72a7e7d2896b7310[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Oct 28 23:53:24 2016 +0000

    Fix 32-bit maximum volume size
    
    A limit of 1TB exists for zvols on 32-bit systems.  Update the code
    to correctly reflect this limitation in a similar manor as the
    OpenZFS implementation.
    
    Reviewed-by: Tom Caputi <tcaputi@datto.com>
    Reviewed-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #5347

[33mcommit 4990e576c6aa18048dd2341a736118383a5f063d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Oct 28 22:42:56 2016 +0000

    Enable .zfs/snapshot for 32-bit systems
    
    Originally the .zfs/snapshot directory was disabled for 32-bit systems
    because 64-bit inode numbers were not supported.  This is no longer
    the case and this functionality can be enabled by default.
    
    Reviewed-by: Tom Caputi <tcaputi@datto.com>
    Reviewed-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #5347
    Closes #2002

[33mcommit 48d3eb40c71e5840e4d9e9af7addcfef7c382511[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Oct 28 22:40:14 2016 +0000

    Add TASKQID_INVALID
    
    Add the TASKQID_INVALID macros and update callers to use the macro
    instead of testing against 0.  There is no functional change
    even though the functions in zfs_ctldir.c incorrectly used -1
    instead of 0.
    
    Reviewed-by: Tom Caputi <tcaputi@datto.com>
    Reviewed-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #5347

[33mcommit b3c159fee4ab92832e6a735431b8b5f930665fab[m
Author: Neal Gompa (ニール・ゴンパ) <ngompa13@gmail.com>
Date:   Wed Nov 2 13:56:36 2016 -0400

    Process all systemd services through the systemd scriptlets
    
    This patch ensures that all systemd services are processed through the
    systemd scriptlets, so that services are properly configured per the
    preset file installed by the package.
    
    Without this, zfs.target is set, but none of the services are enabled per
    the preset file, meaning automounting filesystems and such won't work
    out of the box.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Neal Gompa <ngompa13@gmail.com>
    Closes #5356

[33mcommit 51c9163f98f60f585906a2ddec376924ad142f78[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Thu Nov 3 01:26:12 2016 +0800

    Fix sa_legacy_attr_count to use ARRAY_SIZE
    
    Replace magic value 16 with ARRAY_SIZE() to correctly handle
    when the sa_legacy_attrs array size changes.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5354

[33mcommit 981b21260e7ad35b59cee2989477276109b6b3a2[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Wed Nov 2 01:20:24 2016 +0800

    Fix coverity defects: CID 147553
    
    CID 147553: Type:Dereference null return value
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5305

[33mcommit 2bac68145f94012d6e41dffb9f4a7faf80a8e107[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Tue Nov 1 07:56:10 2016 +0800

    Fix coverity defects: CID 147548
    
    CID 147548: Type:Dereference null return value
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5321

[33mcommit b182ac00aa60d1b61d92d70ea399cd39f966fb31[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Tue Nov 1 07:23:56 2016 +0800

    Fix coverity defects: CID 152975
    
    CID 152975: Type:Dereference null return value
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5322

[33mcommit 4aafab91c5033e35217209d121f4c2fb83a8f690[m
Author: GeLiXin <ge.lixin@zte.com.cn>
Date:   Tue Nov 1 07:04:01 2016 +0800

    Fix coverity defects: CID 147509
    
    CID 147509: Explicit null dereferenced
    - l2arc_sublist_lock is fragile as relied on caller too much.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: GeLiXin <ge.lixin@zte.com.cn>
    Closes #5319

[33mcommit 9f38f81ca38e62bc31af1d4086e0f7a963644d38[m
Author: legend-hua <liu.hua130@zte.com.cn>
Date:   Tue Nov 1 05:55:40 2016 +0800

    Update migration tests
    
    Due to the instability of the migration tests, the test will skip.
    The migration tests focus on migrating test file from fs to ZFS fs.
    We can create zpool and ext2 directly by loop device, rather than
    by set_partition
    
    Reviewed-by: Sydney Vanda <sydney.m.vanda@intel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: legend-hua <liu.hua130@zte.com.cn>
    Closes #5315

[33mcommit f26eb428622a6f3dc613d81faf905958e231e8b1[m
Author: Jason Zaman <jasonzaman@gmail.com>
Date:   Sat Oct 29 07:10:00 2016 +0800

    Add paxcheck make lint target
    
    This uses scanelf (from pax-utils) to check for any issues with the
    binaries. It currently checks for executable stacks and textrels.
    The checks are in a script so can be extended easily in the future for
    more checks.
    
    Executable stacks and textrels are frequently caused by issues in asm
    files and lead to security and perf problems.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Jason Zaman <jason@perfinion.com>
    Closes #5338

[33mcommit c6a89b58a997a2b2c672542542e675447efcf4e4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Oct 26 10:36:33 2016 -0700

    Tag 0.7.0-rc2
    
    Second release candidate.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit e02aaf17f15ad274fa1f24c9c826f1477911ea3f[m
Author: Hajo Möller <dasjoe@users.noreply.github.com>
Date:   Wed Oct 26 19:30:43 2016 +0200

    Fix lookup_bdev() on Ubuntu
    
    Ubuntu added support for checking inode permissions to lookup_bdev() in kernel
    commit 193fb6a2c94fab8eb8ce70a5da4d21c7d4023bee (merged in 4.4.0-6.21).
    Upstream bug: https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1636517
    
    This patch adds a test for Ubuntu's variant of lookup_bdev() to configure and
    calls the function in the correct way.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Hajo Möller <dasjoe@gmail.com>
    Closes #5336

[33mcommit 76a87a902ef031432a855fb341cf35291e2be2b6[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Oct 26 09:13:43 2016 -0700

    Disable zio_dva_throttle_enabled by default
    
    Until it can be determined definitively that a performance
    regression wasn't introduced accidentally by 3dfb57a this
    functionality is being disabled by default.  It can be re-
    enabled by setting zio_dva_throttle_enabled=1.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5335
    Issue #5289

[33mcommit e4010f2719e3381ae15563d50b99e51ffe2b2168[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Wed Oct 26 01:17:47 2016 +0200

    Allow for '-o feature@<feature>=disabled' on the command line
    
    Sometimes it is desirable to specifically disable one or several
    features directly on the 'zpool create' command line.
    
    $ zpool create -o feature@<feature>=disabled ...
    
    Original-patch-by: Turbo Fredriksson <turbo@bayour.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #3460
    Closes #5142
    Closes #5324

[33mcommit 16fa68f07d268192552693f83a747c9141ea726b[m
Author: jxiong <jinshan.xiong@gmail.com>
Date:   Wed Oct 26 04:21:05 2016 +0800

    Do not upgrade userobj accounting for snapshot dataset
    
    'zfs recv' could disown a living objset without calling
    dmu_objset_disown(). This will cause the problem that the objset
    would be released while the upgrading thread is still running.
    
    This patch avoids the problem by checking if a dataset is a snapshot
    before calling dmu_objset_userobjspace_upgrade().  Snapshots
    are immutable and therefore it doesn't make sense to update them.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Jinshan Xiong <jinshan.xiong@intel.com>
    Closes #5295
    Closes #5328

[33mcommit 6568379eea8f01ad87a6cbcb66111112a1b5665f[m
Author: Tony Hutter <hutter2@llnl.gov>
Date:   Tue Oct 25 11:05:30 2016 -0700

    Fix statechange-led.sh & unnecessary libdevmapper warning
    
    - Fix autoreplace behaviour on statechange-led.sh script.
    
    ZED sends the following events on an auto-replace:
    
    1. statechange: Disk goes UNAVAIL->ONLINE
    2. statechange: Disk goes ONLINE->UNAVAIL
    3. vdev_attach: Disk goes ONLINE
    
    Events 1-2 happen when ZED first attempts to do an auto-online.  When that
    fails, ZED then tries an auto-replace, generating the vdev_attach event in #3.
    
    In the previous code, statechange-led was only looking at the UNAVAIL->ONLINE
    transition to turn off the LED.  It ignored the #2 ONLINE->UNAVAIL transition,
    assuming it was just the "old" VDEV going offline.  This is problematic, as
    a drive can go from ONLINE->UNAVAIL when it's malfunctioning, and we don't want
    to ignore that.
    
    This new patch correctly turns on the fault LED every time a drive becomes
    UNAVAIL.  It also monitors vdev_attach events to trigger turning off the LED
    when an auto-replaced disk comes online.
    
    - Remove unnecessary libdevmapper warning with --with-config=kernel
    
    This fixes an unnecessary libdevmapper warning when building
    --with-config=kernel.  Kernel code does not use libdevmapper, so the warning
    is not needed.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Closes #2375
    Closes #5312
    Closes #5331

[33mcommit 402c7c27b02ce7c62e1d108f4316a8faadb5f806[m
Author: Jason Zaman <jasonzaman@gmail.com>
Date:   Wed Oct 26 01:44:09 2016 +0800

    icp: mark asm files with noexec stack
    
    Similar to commit a3600a106.  Asm files need an explicit note
    that they do not require an executable stack.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Jason Zaman <jason@perfinion.com>
    Closes #5332

[33mcommit 9fa4db44b76716352b994abd7668bc9565466f7f[m
Author: tuxoko <tuxoko@gmail.com>
Date:   Mon Oct 24 16:41:56 2016 -0700

    Fix cred leak in zpl_fallocate_common
    
    This is caught by kmemleak when running compress_004_pos
    
    Reviewed-by: Tim Chase <tim@chase2k.com>
    Reviewed by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #5244
    Closes #5330

[33mcommit 66392d81f5ba103fc89cd7bb3b99bea76a650d45[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Oct 24 16:39:47 2016 -0700

    Disable zpool_upgrade_002_pos test case
    
    This test case frequently triggers issue #4034.  There exists a
    fix for this which is in the process of being upstreamed.  Until
    that fix is available disable the test case.
    
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5329
    Issue #4034

[33mcommit aed0e9f3e4db75f4b622e1f0623fe61a94a43dc2[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Tue Oct 25 04:37:38 2016 +0800

    Fix coverity defects: CID 147511, 147513
    
    CID 147511: Type:Dereference before null check
    CID 147513: Type:Dereference before null check
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5306

[33mcommit 13d9a004fe533df8613888687650b1b0e272b67d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Oct 24 13:28:58 2016 -0700

    Fix taskq creation failure in vdev_open_children()
    
    When creating and destroying pools in tight loop it's possible to
    exhaust the number of allowed threads on a system.  This results
    in taskq_create() failling and a NULL dereference.
    
    Resolve the issue by falling back to opening the vdevs all
    synchronously.
    
    Reviewed-by: Denys Rtveliashvili <denys@rtveliashvili.name>
    Reviewed-by: Håkan Johansson <f96hajo@chalmers.se>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes zfsonlinux/spl#521
    Closes #4637

[33mcommit 1bbd8770490f0e5b8c575865ab70f6853bca2a2a[m
Author: Tony Hutter <hutter2@llnl.gov>
Date:   Mon Oct 24 10:45:59 2016 -0700

    Turn on/off enclosure slot fault LED even when disk isn't present
    
    Previously when a drive faulted, the statechange-led.sh script would lookup
    the drive's LED sysfs entry in /sys/block/sd*/device/enclosure_device, and
    turn it on.  During testing we noticed that if you pulled out a drive, or if
    the drive was so badly broken that it no longer appeared to Linux, that the
    /sys/block/sd* path would be removed, and the script could not lookup the
    LED entry.
    
    To fix this, this patch looks up the disks's more persistent
    "/sys/class/enclosure/X:X:X:X/Slot N" LED sysfs path at pool import.  It then
    passes that path to the statechange-led script to use, rather than having the
    script look it up on the fly.  This allows the script to turn on/off the slot
    LEDs even when the drive is missing.
    
    Closes #5309
    Closes #2375

[33mcommit a85cefa35c00ab4999038fbed69a6c28d0244366[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Mon Oct 24 10:24:10 2016 -0700

    Change location of current symlink created by test-runner
    
    test-runner should be creating the current symlink in the
    directory above the output directory. In a previous commit,
    the current symlink was placed in the current working
    directory, which could be inaccessible. It is more likely
    that the output directory is always accessible.
    
    This is needed because without this there's no deterministic
    way to get the path to ZFS Test Suite results until after the
    test suite has started. This makes it difficult for buildbot to
    follow the log file.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #5314

[33mcommit 24cdeaf12e9e546621902449699fc6d664aeac2b[m
Author: Romain Dolbeau <romain.github@dolbeau.name>
Date:   Fri Oct 21 19:55:49 2016 +0200

    Fletcher4 algorithm implemented in pure NEON for Aarch64 / ARMv8 64 bits
    
    This is not useful on micro-architecture with a weak NEON
    implementation (only 64 bits); the native version is slower &
    the byteswap barely faster than scalar.  On A53 or A57, it's
    a small improvement on scalar but OK for byteswap.
    
    Results from an A53 system:
    0 0 0x01 -1 0 1499068294333000 1499101101878000
    implementation   native         byteswap
    scalar           1008227510     755880264
    aarch64_neon     1198098720     1044818671
    fastest          aarch64_neon   aarch64_neon
    
    Results from a A57 system:
    0 0 0x01 -1 0 4407214734807033 4407233933777404
    implementation   native         byteswap
    scalar           2302071241     1124873346
    aarch64_neon     2542214946     2245570352
    fastest          aarch64_neon   aarch64_neon
    
    Reviewed-by: Gvozden Neskovic <neskovic@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Romain Dolbeau <romain.dolbeau@atos.net>
    Closes #5248

[33mcommit e4ffa98dcaf2208c742609f0ab2bdb343071446a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Oct 21 08:23:27 2016 -0700

    Fix userquota_compare() function
    
    The AVL tree compare function requires that either -1, 0, or 1 be
    returned.  However the strcmp() function only guarantees that a
    negative, zero, or positive value is returned.  Therefore, the
    return value of strcmp() needs to be sanitized with AVL_ISIGN.
    
    This was initially overlooked because the x86_64 implementation
    of strcmp() happens to only returns the allowed values.  This
    was observed on an aarch64 platform which behaves correctly but
    differently as described above.
    
    Reviewed-by: Jinshan Xiong <jinshan.xiong@intel.com>
    Reviewed-by: Richard Laager <rlaager@wiktel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5311
    Closes #5313

[33mcommit 9523b15ac1881946a7a6b7a145c8e2bb622dc56c[m
Author: luozhengzheng <luo.zhengzheng@zte.com.cn>
Date:   Fri Oct 21 02:54:02 2016 +0800

    Fix coverity defects: CID 153459
    
    CID 153459: Null pointer dereferences (FORWARD_NULL)
    Accidentally introduced by #5159.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: luozhengzheng <luo.zhengzheng@zte.com.cn>
    Closes #5310

[33mcommit 9d01680430377b39dc34aaaf6ef315c49b3943cc[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Fri Oct 21 02:49:50 2016 +0800

    Fix coverity defects: CID 147551, 147552
    
    CID 147551: Type:dereference null return value
    CID 147552: Type:dereference null return value
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5279

[33mcommit 5a6765cf8cad21d22dc172b4089b655c9270d16a[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Fri Oct 21 02:24:01 2016 +0800

    Fix coverity defects: CID 147472
    
    CID 147472: Type: 'Constant' variable guards dead code
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5288

[33mcommit 1f72394443f710a0be11232b557b8a698693668d[m
Author: luozhengzheng <luo.zhengzheng@zte.com.cn>
Date:   Fri Oct 21 02:09:39 2016 +0800

    Fix coverity defects: CID 150919, 150923
    
    CID 150919: Buffer not null terminated (BUFFER_SIZE_WARNING)
    CID 150923: Buffer not null terminated (BUFFER_SIZE_WARNING)
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Tom Caputi <tcaputi@datto.com>
    Signed-off-by: luozhengzheng <luo.zhengzheng@zte.com.cn>
    Closes #5298

[33mcommit 381823d6d2f1b3bcd0ef6a4f391396e5d9406036[m
Author: legend-hua <liu.hua130@zte.com.cn>
Date:   Fri Oct 21 02:04:30 2016 +0800

    Update migration_004_pos, migration_005_pos, migration_006_pos
    
    Log function should be "log_fail", rather than "log_failED"
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: legend-hua <liu.hua130@zte.com.cn>
    Closes #5300

[33mcommit 72ac461cbe30cc4b9221e96b909f60ca1cb4a534[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Oct 20 09:55:03 2016 -0700

    Fix make distclean Makefile.am removal
    
    The file tests/zfs-tests/tests/stress/Makefile.am gets mistakenly
    removed by the distclean target because it's empty.  Adding a
    `SUBDIRS =` line prevents the removal.
    
    This directory is being preserved as the location to add assorted
    stress tests.  These may include but are not limited to.
    
      http://kernel.ubuntu.com/~cking/stress-ng/
      https://github.com/zfsonlinux/zfsstress/
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5308

[33mcommit 3b0ba3ba99b8a3af0fb532bf264629436b1abd84[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Oct 18 23:49:23 2016 +0000

    Linux 4.9 compat: inode_change_ok() renamed setattr_prepare()
    
    In torvalds/linux@31051c8 the inode_change_ok() function was
    renamed setattr_prepare() and updated to take a dentry ratheri
    than an inode.  Update the code to call the setattr_prepare()
    and add a wrapper function which call inode_change_ok() for
    older kernels.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Requires-spl: refs/pull/581/head

[33mcommit 0fedeedd309eca62d15fffd8bd811e2b12660e21[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Wed Oct 19 11:19:17 2016 -0700

    Linux 4.9 compat: remove iops->{set,get,remove}xattr
    
    In Linux 4.9, torvalds/linux@fd50eca, iops->{set,get,remove}xattr and
    generic_{set,get,remove}xattr are removed. xattr operations will directly
    go through sb->s_xattr.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>

[33mcommit b8d9e26440ade0edebfa98af8cb9371810c1aeaf[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Wed Oct 19 11:19:01 2016 -0700

    Linux 4.9 compat: iops->rename() wants flags
    
    In Linux 4.9, torvalds/linux@2773bf0, iops->rename() and iops->rename2() are
    merged together into iops->rename(), it now wants flags.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>

[33mcommit 8ba3f2bf6a66378b36acd70e5616a78396030984[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Wed Oct 19 11:12:20 2016 -0700

    Remove dir inode operations from zpl_inode_operations
    
    These operations are dir specific, there's no point putting them in
    zpl_inode_operations which is for regular files.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>

[33mcommit 9d70aec6fde90112b5b5610ab5c17b6883b97063[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Oct 19 14:29:33 2016 -0700

    Update .gitignore
    
    Two additional files were recently introduced and should be
    ignored by git.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5299

[33mcommit 6078881aa18a45ea065a887e2a8606279cdc0329[m
Author: Tony Hutter <hutter2@llnl.gov>
Date:   Wed Oct 19 12:55:59 2016 -0700

    Multipath autoreplace, control enclosure LEDs, event rate limiting
    
    1. Enable multipath autoreplace support for FMA.
    
    This extends FMA autoreplace to work with multipath disks.  This
    requires libdevmapper to be installed at build time.
    
    2. Turn on/off fault LEDs when VDEVs become degraded/faulted/online
    
    Set ZED_USE_ENCLOSURE_LEDS=1 in zed.rc to have ZED turn on/off the enclosure
    LED for a drive when a drive becomes FAULTED/DEGRADED.  Your enclosure must
    be supported by the Linux SES driver for this to work.  The enclosure LED
    scripts work for multipath devices as well.  The scripts will clear the LED
    when the fault is cleared.
    
    3. Rate limit ZIO delay and checksum events so as not to flood ZED
    
    ZIO delay and checksum events are rate limited to 5/sec in the zfs module.
    
    Reviewed-by: Richard Laager <rlaager@wiktel.com>
    Reviewed by: Don Brady <don.brady@intel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Closes #2449
    Closes #3017
    Closes #5159

[33mcommit 7c502b0b1de8d3d341c026760df5915ad4be794a[m
Author: luozhengzheng <luo.zhengzheng@zte.com.cn>
Date:   Wed Oct 19 02:32:59 2016 +0800

    Fix coverity defects: CID 150926
    
    CID 150926: Unchecked return value (CHECKED_RETURN)
    - This case cannot occur given the existing taskq implementation
      and flags passed to task_dispatch().
    
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: luozhengzheng <luo.zhengzheng@zte.com.cn>
    Closes #5272

[33mcommit 6d00b5e13699c946a3f78c73defe5ff1e18264a3[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Oct 18 10:44:44 2016 -0700

    Fix unused variable
    
    Accidentally introduced by 3dfb57a, when building with debugging
    disabled several variables are unused.  Resolve this by wrapping
    them in ASSERTV to remove them for non-debug builds.
    
    Reviewed by: Don Brady <don.brady@intel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5284

[33mcommit 66826e2285d6ef8162e5cb8e727da5ea2d9f33f2[m
Author: GeLiXin <ge.lixin@zte.com.cn>
Date:   Wed Oct 19 01:43:22 2016 +0800

    Fix coverity defects: CID 147643, 152204, 49339
    
    CID 147643: Type: String not null terminated
    - make sure that the string is null terminated before strlen
      and fprintf.
    
    CID 152204: Type: Copy into fixed size buffer
    - since strlcpy isn't availabe here, use strncpy and terminate
      the string manually.
    
    CID 49339: Type: Buffer not null terminated
    - since strlcpy isn't availabe here, terminate the string
      manually before fprintf.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: GeLiXin <ge.lixin@zte.com.cn>
    Closes #5283

[33mcommit 1b81ab46d060257288ee9739f7e9c5199deb901b[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Wed Oct 19 01:31:57 2016 +0800

    Fix coverity defects: CID 49339, 153393
    
    CID 49339: Type:Buffer not null terminated
    CID 153393: Type:Buffer not null terminated
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: <cao.xuewen cao.xuewen@zte.com.cn>
    Closes #5296

[33mcommit df7492240ab628f245a5400086ab898c8e33b3da[m
Author: Giuseppe Di Natale <dinatale2@users.noreply.github.com>
Date:   Tue Oct 18 10:19:28 2016 -0700

    Create a symlink to current test-runner output
    
    Generate a symlink in the current working directory to
    test-runner.py output. This will make it easier for the
    ZFS buildbot to collect logs.
    
    Reviewed by: John Kennedy <john.kennedy@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Closes #5293

[33mcommit b60eac3d1a7b74e54ac8af9d533ff423c8ce9f8f[m
Author: luozhengzheng <luo.zhengzheng@zte.com.cn>
Date:   Tue Oct 18 03:03:52 2016 +0800

    Fix coverity defects: CID 150924
    
    CID 150924: Unchecked return value (CHECKED_RETURN)
    - On taskq_dispatch failure the reference must be dropped and
      this entry can be safely skipped.  This case should be impossible
      in the existing implementation but should be handled regardless.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: luozhengzheng <luo.zhengzheng@zte.com.cn>
    Closes #5278

[33mcommit f8e87e205c745c1e360230ac9c7631eb4632acfa[m
Author: Rudd-O <rudd-o@rudd-o.com>
Date:   Mon Oct 17 18:51:15 2016 +0000

    Properly use the Dracut cleanup hook to order pool shutdown
    
    When Dracut starts up, it needs to determine whether a pool will remain
    "hanging open" before the system shuts off. In such a case, then the
    code to clean up the pool (using the previous export -F work) must
    be invoked. Since Dracut has had a recent change that makes
    mount-zfs.sh simply not run when the root dataset is already mounted,
    we must use the cleanup hook to order Dracut to do shutdown cleanup.
    
    Important note: this code will not accomplish its stated goal until this
    bug is fixed: https://bugzilla.redhat.com/show_bug.cgi?id=1385432
    
    That bug impacts more than just ZFS. It impacts LUKS, dmraid, and
    unmount during poweroff. It is a Fedora-wide bug.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Manuel Amador (Rudd-O) <rudd-o@rudd-o.com>
    Closes #5287

[33mcommit fea33e4e5010e209a4d05fa3f59b7155859e1593[m
Author: Håkan Johansson <f96hajo@chalmers.se>
Date:   Mon Oct 17 20:46:35 2016 +0200

    Pass status_cbdata_t to print_status_config() and friends
    
    First rename spare_cbdata_t cb -> spare_cb in print_status_config(),
    to free up cb.
    
    Using the structure removes the explicit parameters namewidth
    and name_flags from several functions.  Also use status_cbdata_t
    for print_import_config().  This simplifies print_logs().
    
    Remove the parameter 'verbose' for print_logs().  It does not really
    mean verbose, it selected between the print_status_config and
    print_import_config() paths.  This selection is now done by
    cb_print_config of spare_cbdata_t.
    
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Håkan Johansson <f96hajo@chalmers.se>
    Closes #5259

[33mcommit 7e8a2d0b755ea67291d3f576069706e43abc5e31[m
Author: Rudd-O <rudd-o@rudd-o.com>
Date:   Sun Oct 16 03:30:53 2016 +0000

    Use -F to export pools so as not to dirty up device labels
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Manuel Amador (Rudd-O) <rudd-o@rudd-o.com>
    Closes #5228
    Closes #5238

[33mcommit dabb6f4fab38f5a729e8241425a5394ae7fd96d4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Oct 14 16:11:16 2016 -0700

    Allow partition aliases in vdev_id.conf (#5266)
    
    When pools are assembled from partitions, vdev_id.conf aliases
    do not work.  The directory /dev/disk/by-vdev is not created because
    the associated udev rule for parsing vdev_id.conf is never called.
    Extend to logic to match "disk" and "partition".
    
    Patch-proposed-by: @sparksh
    Reviewed-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3859
    Closes #5266

[33mcommit b6ca6193f7678a9d8790f4319c982cc34b59f150[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Sat Oct 15 02:00:47 2016 +0800

    Fix coverity defects: CID 147488, 147490
    
    CID 147488, Type:explicit null dereferenced
    CID 147490, Type:dereference null return value
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5237

[33mcommit 3691598e26a878df792480e0a97ea5c2bf012e49[m
Author: Akash Ayare <aayare@delphix.com>
Date:   Tue Apr 19 21:07:54 2016 -0700

    OpenZFS 6877 - zfs_rename_006_pos fails due to missing zvol snapshot device file
    
    Authored by: Akash Ayare <aayare@delphix.com>
    Reviewed by: John Kennedy <john.kennedy@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed-by: luozhengzheng <luo.zhengzheng@zte.com.cn>
    Reviewed-by: yuxiang <guo.yong33@zte.com.cn>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    Bug was caused due to a change in functionality. At some point, ZFS
    snapshots no longer created associated device files which were being
    used in the test. To resolve this issue, a clone of the snapshot can be
    produced which will also create the expected device files; then, the
    test will behave as it did historically.
    
    OpenZFS-issue: https://www.illumos.org/issues/6877
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/2200f27
    Closes #5275
    
    Porting Notes:
    - Hardcoded /dev/zvol/rdsk changed to $ZVOL_RDEVDIR for compatibility.
    - Enabled in linux runfile.

[33mcommit 7305538de316c89e68f2c0977ea8dabe14d0f065[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Oct 13 16:00:26 2016 -0700

    Enable zfs_rename_002_pos, zfs_rename_005_neg, zfs_rename_007_pos
    
    These tests all pass once updated to wait for udev to create the
    expected linked under /dev/zvol/.
    
    Reviewed-by: luozhengzheng <luo.zhengzheng@zte.com.cn>
    Reviewed-by: yuxiang <guo.yong33@zte.com.cn>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5275

[33mcommit 9a875c6c5dd1e7cb0dad56d593a428d570ea5111[m
Author: luozhengzheng <luo.zhengzheng@zte.com.cn>
Date:   Sat Oct 15 00:40:08 2016 +0800

    Fix coverity defects: CID 150921, 150927
    
    CID 150921: Unchecked return value (CHECKED_RETURN)
    CID 150927 : Unchecked return value (CHECKED_RETURN)
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: luozhengzheng <luo.zhengzheng@zte.com.cn>
    Closes #5267

[33mcommit 21237e916713e1c53c6314cd86ed0742baf4bbbb[m
Author: liaoyuxiangqin <guo.yong33@zte.com.cn>
Date:   Sat Oct 15 00:33:51 2016 +0800

    Enable quota_002_pos, quota_004_pos and quota_005_pos
    
    In this test the 'ls -ls' command was used to print testfile size in
    blocks.  Because the environment variable BLOCK_SIZE was set
    the 'ls -ls' command detected this and output its block count as the
    number of 8192 blocks.  Rather than change the variable name
    the -k was was added to force ls to return 1k blocks.  This has the
    additional advantage of behaving consistently across platforms.
    
    For additional details on GNU 'ls' behavior regarding block size:
    
    https://www.gnu.org/software/coreutils/manual/html_node/Block-size.html
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: yuxiang <guo.yong33@zte.com.cn>
    Closes #5269

[33mcommit 5f014a0cc464a6bf91094c530f938dd7d85f26f3[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Oct 14 09:17:56 2016 -0700

    Enable zfs_receive_011_pos
    
    The zfs_receive_011_pos test can be enabled now that OpenZFS 6562
    has been merged.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5276

[33mcommit 3dfb57a35e8cbaa7c424611235d669f3c575ada1[m
Author: Don Brady <don.brady@intel.com>
Date:   Thu Oct 13 18:59:18 2016 -0600

    OpenZFS 7090 - zfs should throttle allocations
    
    OpenZFS 7090 - zfs should throttle allocations
    
    Authored by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Alex Reece <alex@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Paul Dagnelie <paul.dagnelie@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Sebastien Roy <sebastien.roy@delphix.com>
    Approved by: Matthew Ahrens <mahrens@delphix.com>
    Ported-by: Don Brady <don.brady@intel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    When write I/Os are issued, they are issued in block order but the ZIO
    pipeline will drive them asynchronously through the allocation stage
    which can result in blocks being allocated out-of-order. It would be
    nice to preserve as much of the logical order as possible.
    
    In addition, the allocations are equally scattered across all top-level
    VDEVs but not all top-level VDEVs are created equally. The pipeline
    should be able to detect devices that are more capable of handling
    allocations and should allocate more blocks to those devices. This
    allows for dynamic allocation distribution when devices are imbalanced
    as fuller devices will tend to be slower than empty devices.
    
    The change includes a new pool-wide allocation queue which would
    throttle and order allocations in the ZIO pipeline. The queue would be
    ordered by issued time and offset and would provide an initial amount of
    allocation of work to each top-level vdev. The allocation logic utilizes
    a reservation system to reserve allocations that will be performed by
    the allocator. Once an allocation is successfully completed it's
    scheduled on a given top-level vdev. Each top-level vdev maintains a
    maximum number of allocations that it can handle (mg_alloc_queue_depth).
    The pool-wide reserved allocations (top-levels * mg_alloc_queue_depth)
    are distributed across the top-level vdevs metaslab groups and round
    robin across all eligible metaslab groups to distribute the work. As
    top-levels complete their work, they receive additional work from the
    pool-wide allocation queue until the allocation queue is emptied.
    
    OpenZFS-issue: https://www.illumos.org/issues/7090
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/4756c3d7
    Closes #5258
    
    Porting Notes:
    - Maintained minimal stack in zio_done
    - Preserve linux-specific io sizes in zio_write_compress
    - Added module params and documentation
    - Updated to use optimize AVL cmp macros

[33mcommit a85a90557dfc70e09475c156a376f6923a6c89f0[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Fri Oct 14 05:38:59 2016 +0800

    Fix coverity defects: CID 147692, 147693, 147694
    
    CID:147692, Type:Uninitialized scalar variable
    CID:147693, Type:Uninitialized scalar variable
    CID:147694, Type:Uninitialized scalar variable
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5252

[33mcommit 3f93077b024d6e7658e655d3b897bcd3bb57504f[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Fri Oct 14 05:30:50 2016 +0800

    Fix coverity defects: CID 150943, 150938
    
    CID:150943, Type:Unintentional integer overflow
    CID:150938, Type:Explicit null dereferenced
    
    Reviewed-by: Tom Caputi <tcaputi@datto.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5255

[33mcommit 05852b3467b44cdf88541ec67624cd1f5f2ded1d[m
Author: luozhengzheng <luo.zhengzheng@zte.com.cn>
Date:   Fri Oct 14 05:25:05 2016 +0800

    Fix coverity defects: CID 147571, 147574
    
    CID 147571: Unintentional integer overflow (OVERFLOW_BEFORE_WIDEN)
    CID 147574: Unintentional integer overflow (OVERFLOW_BEFORE_WIDEN)
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: luozhengzheng <luo.zhengzheng@zte.com.cn>
    Closes #5268

[33mcommit e8d3dcdfb15cdbd946407f6d8f0131e88ff05011[m
Author: liaoyuxiangqin <guo.yong33@zte.com.cn>
Date:   Fri Oct 14 05:21:15 2016 +0800

    Enable refquota_002_pos and refquota_004_pos
    
    The refquota_002_pos and refquota_004_pos test cases can pass
    without modification.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: yuxiang <guo.yong33@zte.com.cn>
    Closes #5273

[33mcommit 45cb520b9d1b8200992f879d1ed6f472e94c6c6b[m
Author: GeLiXin <ge.lixin@zte.com.cn>
Date:   Fri Oct 14 05:02:07 2016 +0800

    Fix coverity defects: CID 147654, 147690
    
    coverity scan CID:147654,type: Copy into fixed size buffer
    - string operation may write past the end of the fixed-size
      destination buffer
    
    coverity scan CID:147690,type: Uninitialized scalar variable
    - call zfs_prop_get first in case we use sourcetype and
      share_sourcetype without initialization
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: GeLiXin <ge.lixin@zte.com.cn>
    Closes #5253

[33mcommit 1f51b525ff67e2c5cc26d968287bd9a7579acebd[m
Author: luozhengzheng <luo.zhengzheng@zte.com.cn>
Date:   Thu Oct 13 04:24:03 2016 +0800

    Fix coverity defects: CID 153394
    
    coverity scan CID 153394, Type:String overflow
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: luozhengzheng <luo.zhengzheng@zte.com.cn>
    Closes #5263

[33mcommit ef78750d98f7389b05567c5abe95aacaece91736[m
Author: Tom Caputi <tcaputi@datto.com>
Date:   Wed Oct 12 15:52:30 2016 -0400

    Fix ICP memleak introduced in #4760
    
    The ICP requires destructors to for each crypto module that is added.
    These do not necessarily exist in Illumos because they assume that
    these modules can never be unloaded from the kernel. Some of this
    cleanup code was missed when #4760 was merged, resulting in leaks.
    This patch simply fixes that.
    
    Reviewed-by: Tony Hutter <hutter2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tom Caputi <tcaputi@datto.com>
    Issue #4760
    Closes #5265

[33mcommit 06cf4d989058a65f72b140d85e2c21effd3b3834[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Thu Oct 13 02:16:47 2016 +0800

    Fix coverity defects: CID 147606, 147609
    
    coverity scan CID:147606, Type:resource leak
    coverity scan CID:147609, Type:resource leak
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5245

[33mcommit af4db70f368d0e9c9ad90f0837a77e511a77b0a7[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Wed Oct 12 02:32:34 2016 +0800

    Fix coverity defects: CID 147452, 147447, 147446
    
    coverity scan CID:147452, Type:Unchecked return value from library
    coverity scan CID:147447, Type:Unchecked return value from library
    coverity scan CID:147446, Type:Unchecked return value from library
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5264

[33mcommit fad5fb01adaf34602969dd3b3ffe250c2cf273cc[m
Author: luozhengzheng <luo.zhengzheng@zte.com.cn>
Date:   Wed Oct 12 01:24:18 2016 +0800

    Fix memory leak in recv_skip
    
    When the exception branch exits, the buf is leaked.
    
    Reviewed by: Richard Laager <rlaager@wiktel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: luozhengzheng <luo.zhengzheng@zte.com.cn>
    Closes #5262

[33mcommit 1697d2dcf1735e6f2493abff1da01001637f14bf[m
Merge: 52f1fe3 5dc1ff2
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Oct 11 09:56:28 2016 -0700

    Fix zfsctl_snapshot_{,un}mount() issues
    
    Fix use after free in zfsctl_snapshot_unmount(). Use /usr/bin/env
    instead of /bin/sh to fix a shell code injection flaw and allow use
    with grsecurity.
    
    Reviewed-by: Richard Laager <rlaager@wiktel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Stian Ellingsen <stian@plaimi.net>
    Closes #5250
    Closes #4377

[33mcommit 52f1fe3cfd35b9414568046ad7456bfbc80a9354[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Oct 11 09:32:31 2016 -0700

    Enable zfs_snapshot_008_neg and zfs_snapshot_009_pos (#5260)
    
    The zfs_snapshot_008_neg test case does not use nested pools and
    can be safely enabled.  The zfs_snapshot_009_pos test case is
    also passing without modification.
    
    Reviewed-by: Richard Laager <rlaager@wiktel.com>
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: ChaoyuZhang <zhang.chaoyu@zte.com.cn>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5260

[33mcommit 45c90a6348f227b1864846c75ba106711dc01a69[m
Author: liaoyuxiangqin <guo.yong33@zte.com.cn>
Date:   Wed Oct 12 00:28:49 2016 +0800

    Enable reservation_012_pos, reservation_015_pos and reservation_016_pos
    
    Enable reservation_012_pos, reservation_015_pos and reservation_016_pos
    test cases which are passing.
    
    Reviewed-by: Richard Laager <rlaager@wiktel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: yuxiang <guo.yong33@zte.com.cn>
    Closes #5254

[33mcommit 8c8cf8a2d8567d00a93963b1d59a7bdc8cede06a[m
Author: GeLiXin <ge.lixin@zte.com.cn>
Date:   Tue Oct 11 06:30:22 2016 +0800

    Fix coverity defects: CID 147639
    
    When array is passed as a parameter it degenerates into a
    pointer so the sizeof(path) in is_shorthand_path() and always
    get return value of 8, instead of the string length we want.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: GeLiXin <ge.lixin@zte.com.cn>
    Closes #5198

[33mcommit d33931a83a33db4034186dfda6dcdd294ace2c75[m
Author: Tim Chase <tim@chase2k.com>
Date:   Mon Oct 10 17:19:14 2016 -0500

    Write issue taskq shouldn't be dynamic
    
    This is as much an upstream compatibility as it's a bit of a performance
    gain.
    
    The illumos taskq implemention doesn't allow a TASKQ_THREADS_CPU_PCT type
    to be dynamic and in fact enforces as much with an ASSERT.
    
    As to performance, if this taskq is dynamic, it can cause excessive
    contention on tq_lock as the threads are created and destroyed because it
    can see bursts of many thousands of tasks in a short time, particularly
    in heavy high-concurrency zvol write workloads.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Closes #5236

[33mcommit 57f16600b981f38585a956ae674488640424f711[m
Author: Tom Caputi <tcaputi@datto.com>
Date:   Mon Oct 10 14:34:57 2016 -0400

    Porting over some ICP code that was missed in #4760
    
    When #4760 was merged tests were added to ensure that the new checksums
    were working properly. However, some of the functionality for sha2
    functions were not ported over, resulting in some Coverity defects and
    code that would be unstable when needed in the future. This patch
    simply ports over the missing code and fixes the defects in the
    process.
    
    Reviewed by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tom Caputi <tcaputi@datto.com>
    Issue #4760
    Closes #5251

[33mcommit 502291b32c311a6b5cfbb5d4717bf9d8d4901f3d[m
Author: ChaoyuZhang <zhang.chaoyu@zte.com.cn>
Date:   Mon Oct 10 08:50:16 2016 +0800

    Enable readonly_001_pos
    
    Enable readonly_001_pos this test is now passing.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: ChaoyuZhang <zhang.chaoyu@zte.com.cn>

[33mcommit 7515f8f63d1f001adb0e752f9a0f3550e16a6315[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sat Oct 8 14:57:56 2016 -0700

    Fix file permissions
    
    The following new test cases need to have execute permissions set:
    
      userquota/groupspace_003_pos.ksh
      userquota/userquota_013_pos.ksh
      userquota/userspace_003_pos.ksh
      upgrade/upgrade_userobj_001_pos.ksh
      upgrade/setup.ksh
      upgrade/cleanup.ksh
    
    The following source files accidentally were marked executable:
    
      lib/libzpool/kernel.c
      lib/libshare/nfs.c
      lib/libzfs/libzfs_dataset.c
      lib/libzfs/libzfs_util.c
      tests/zfs-tests/cmd/rm_lnkcnt_zero_file/rm_lnkcnt_zero_file.c
      tests/zfs-tests/cmd/dir_rd_update/dir_rd_update.c
      cmd/zed/zed_exec.c
      module/icp/core/kcf_sched.c
      module/zfs/dsl_pool.c
      module/zfs/arc.c
      module/nvpair/nvpair.c
      man/man5/zfs-module-parameters.5
    
    Reviewed-by: GeLiXin <ge.lixin@zte.com.cn>
    Reviewed-by: Andreas Dilger <andreas.dilger@intel.com>
    Reviewed-by: Jinshan Xiong <jinshan.xiong@intel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5241

[33mcommit 5dc1ff29ec385bc58d76e76bb367d4391c6ee155[m
Author: Stian Ellingsen <stian@plaimi.net>
Date:   Thu Oct 6 20:03:41 2016 +0200

    Use env, not sh in zfsctl_snapshot_{,un}mount()
    
    Call mount and umount via /usr/bin/env instead of /bin/sh in
    zfsctl_snapshot_mount() and zfsctl_snapshot_unmount().
    
    This change fixes a shell code injection flaw.  The call to /bin/sh
    passed the mountpoint unescaped, only surrounded by single quotes.  A
    mountpoint containing one or more single quotes would cause the command
    to fail or potentially execute arbitrary shell code.
    
    This change also provides compatibility with grsecurity patches.
    Grsecurity only allows call_usermodehelper() to use helper binaries in
    certain paths.  /usr/bin/* is allowed, /bin/* is not.

[33mcommit 00b65db711021d60cc4df57f327d1443ea54a9e1[m
Author: Stian Ellingsen <stian@plaimi.net>
Date:   Thu Oct 6 19:53:27 2016 +0200

    Fix use after free in zfsctl_snapshot_unmount()

[33mcommit 690fe6479e43cb89d5c48ab8981409eef8940e49[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Oct 7 21:02:24 2016 -0700

    Rename hole_birth tunable to match OpenZFS
    
    OpenZFS decided that ignore_hole_birth was too imprecise and
    incorrect a name (and went with send_holes_without_birth_time).
    Rename it in ZoL too, while keeping the name "ignore_hole_birth"
    pointing to the same variable for existing consumers.
    
    Reviewed-by: Giuseppe Di Natale <dinatale2@llnl.gov>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Rich Ercolani <rincebrain@gmail.com>
    Closes #5239

[33mcommit 4770aa0643a7fc62f81b2d60e4a46de4bfd1aa04[m
Author: Håkan Johansson <f96hajo@chalmers.se>
Date:   Fri Oct 7 22:25:35 2016 +0200

    Fix vdev_open_child() race on updating vdev_parent->vdev_nonrot
    
    Updating vd->vdev_parent->vdev_nonrot in vdev_open_child()
    is a race when vdev_open_child is called for many children
    from a task queue.
    
    vdev_open_child() is only called by vdev_open_children(), let
    the latter update the parent vdev_nonrot member.  The update
    was already there, so done twice previously.  Thus using the
    same logic at the end in vdev_open_children() to update
    vdev_nonrot, either we are vdev_uses_zvols() or not.
    
    Reviewed-by: Richard Elling <Richard.Elling@RichardElling.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Haakan T Johansson <f96hajo@chalmers.se>
    Closes #5162

[33mcommit ccc92611b1bd0a78a72f553472a91ef1e83b06c5[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Sat Oct 8 04:19:43 2016 +0800

    Fix coverity defects: CID 147565-147567
    
    coverity scan CID:147567, Type:dereference null return value
    coverity scan CID:147566, Type:dereference null return value
    coverity scan CID:147565, Type:dereference null return value
    
    Reviewed by: Richard Laager <rlaager@wiktel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5166

[33mcommit 482cd9ee69e88710e9241fac220501ea4e101d19[m
Merge: 48f783d 5bf703b
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Oct 7 12:44:12 2016 -0700

    Fletcher4: Incremental updates and ctx calculation
    
    Fixes ABI issues with fletcher4 code, adds support for
    incremental updates, and adds ztest method for testing.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Closes #5164

[33mcommit 48f783de792727c26f43983155bac057c296e44d[m
Author: LOLi <loli10K@users.noreply.github.com>
Date:   Fri Oct 7 19:05:06 2016 +0200

    Fix uninitialized variable snapprops_nvlist in zfs_receive_one
    
    The variable snapprops_nvlist was never initialized, so properties
    were not applied to the received snapshot.
    
    Additionally, add zfs_receive_013_pos.ksh script to ZFS test suite to exercise
    'zfs receive' functionality for user properties.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #4338

[33mcommit 910a571578b0627bf9a1f2a99d89260132f3cba8[m
Merge: 9b7a83c 70c7714
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Oct 7 09:54:02 2016 -0700

    Add python style checking
    
    Introduce a make recipe for flake8 to enable python
    style checking. Ensure all python scripts pass flake8.
    Return an error code of 0 for arcstat.py -v and
    dbufstat.py -v.  Add test cases for python scripts.
    
    Reviewed by: Richard Laager <rlaager@wiktel.com>
    Reviewed-by: Richard Elling <Richard.Elling@RichardElling.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Ian Lee <IanLee1521@gmail.com>
    Closes #5230

[33mcommit 9b7a83cbb6cae54c127fde4c83e73505ad9c9e73[m
Author: Jinshan Xiong <jinshan.xiong@intel.com>
Date:   Wed Sep 21 13:49:47 2016 -0700

    OpenZFS 6988 spa_sync() spends half its time in dmu_objset_do_userquota_updates
    
    Using a benchmark which creates 2 million files in one TXG, I observe
    that the thread running spa_sync() is on CPU almost the entire time we
    are syncing, and therefore can be a performance bottleneck. About 50% of
    the time in spa_sync() is in dmu_objset_do_userquota_updates().
    
    The problem is that dmu_objset_do_userquota_updates() calls
    zap_increment_int(DMU_USERUSED_OBJECT) once for every file that was
    modified (or created). In this benchmark, all the files are owned by the
    same user/group, so all 2 million calls to zap_increment_int() are
    modifying the same entry in the zap. The same issue exists for the
    DMU_GROUPUSED_OBJECT.
    
    We should keep an in-memory map from user to space delta while we are
    syncing, and when we finish, iterate over the in-memory map and modify
    the ZAP once per entry. This reduces the number of calls to
    zap_increment_int() from "number of objects modified" to "number of
    owners/groups of modified files".
    
    This reduced the time spent in spa_sync() in the file create benchmark
    by ~33%, from 11 seconds to 7 seconds.
    
    Upstream bugs: DLPX-44799
    Ported by: Ned Bass <bass6@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/6988
    ZFSonLinux-issue: https://github.com/zfsonlinux/zfs/issues/4642
    OpenZFS-commit: unmerged
    
    Porting notes:
    - Added curly braces around declaration of userquota_cache_t cache to
      quiet compiler warning;
    - Handled the userobj accounting the same way it proposed in this path.
    
    Signed-off-by: Jinshan Xiong <jinshan.xiong@intel.com>

[33mcommit 1de321e6260f5b83eb943b6ce2166a3879f42df4[m
Author: Jinshan Xiong <jinshan.xiong@intel.com>
Date:   Tue Oct 4 11:46:10 2016 -0700

    Add support for user/group dnode accounting & quota
    
    This patch tracks dnode usage for each user/group in the
    DMU_USER/GROUPUSED_OBJECT ZAPs. ZAP entries dedicated to dnode
    accounting have the key prefixed with "obj-" followed by the UID/GID
    in string format (as done for the block accounting).
    A new SPA feature has been added for dnode accounting as well as
    a new ZPL version. The SPA feature must be enabled in the pool
    before upgrading the zfs filesystem. During the zfs version upgrade,
    a "quotacheck" will be executed by marking all dnode as dirty.
    
    ZoL-bug-id: https://github.com/zfsonlinux/zfs/issues/3500
    
    Signed-off-by: Jinshan Xiong <jinshan.xiong@intel.com>
    Signed-off-by: Johann Lombardi <johann.lombardi@intel.com>

[33mcommit 70c7714dca90d01b83a29d15c67e65ff93d034d4[m
Author: Giuseppe Di Natale <dinatale2@llnl.gov>
Date:   Tue Oct 4 15:13:42 2016 -0700

    Introduce tests for python scripts
    
    Implement tests to ensure that python scripts
    that are distributed with ZFS continue to at
    minimum run without errors. This will help prevent
    accidental breaking of these scripts.
    
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>

[33mcommit 46bb91e19307982c2dc829e0d88b012c5f571b8c[m
Author: Giuseppe Di Natale <dinatale2@llnl.gov>
Date:   Thu Oct 6 10:50:15 2016 -0700

    Introduce a make recipe for flake8
    
    Add a make recipe to enable developers
    to easily run flake8 if it is available.
    This will help enforce good python coding
    standards.
    
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>

[33mcommit e169749fc0b87904cb48e8cca0c87501eb46ebac[m
Author: Giuseppe Di Natale <dinatale2@llnl.gov>
Date:   Wed Oct 5 08:41:26 2016 -0700

    Correct exit code for dbufstat -v and arcstat -v
    
    Both scripts were returning an error code of 1
    when using the -v argument. -v should exit with
    an error code of 0.
    
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>

[33mcommit af322debaa11b22c4fe7b6bc8941e562694eabb2[m
Author: Marcel Huber <marcelhuberfoo@gmail.com>
Date:   Thu Oct 6 19:31:42 2016 +0200

    Add icp kernel module to dkms build
    
    Added new section to build icp module.
    
    Reviewed by: Richard Laager <rlaager@wiktel.com>
    Reviewed-by: Tom Caputi <tcaputi@datto.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5232
    Closes #5234

[33mcommit b0f578a8073da49dd0af879944a1b8e8dfd6db56[m
Author: Rudd-O <rudd-o@rudd-o.com>
Date:   Thu Oct 6 17:26:47 2016 +0000

    Use a different technique to detect whether to mount-zfs
    
    The behavior of the Dracut module was very wrong before.
    
    The correct behavior: initramfs should not run `zfs-mount` to completion
    if the two generator files exist.  If, however, one of them is missing,
    it indicates one of three cases:
    
    * The kernel command line did not specify a root ZFS file system, and
      another Dracut module is already handling root mount (via systemd).
      `mount-zfs` can run, but it will do nothing.
    * There is no systemd to run `sysroot.mount` to begin with.
      `mount-zfs` must run.
    * The root parameter is zfs:AUTO, which cannot be run in sysroot.mount.
      `mount-zfs` must run.
    
    In any of these three cases, it is safe to run `zfs-mount` to completion.
    
    `zfs-mount` must also delete itself if it determines it should not run,
    or else Dracut will do the insane thing of running it over and over again.
    Literally, the definition of insanity, doing the same thing that did not
    work before, expecting different results.  Doing that may have had a great
    result before, when we had a race between devices appearing and pools
    being mounted, and `mount-zfs` was tasked with the full responsibility
    of importing the needed pool, but nowadays it is wrong behavior and
    should be suppressed.
    
    I deduced that self-deletion was the correct thing to do by looking at
    other Dracut code, because (as we all are very fully aware of) Dracut
    is entirely, ahem, "implementation-defined".
    
    Tested-by: @wphilips
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Manuel Amador (Rudd-O) <rudd-o@rudd-o.com>
    Closes #5157
    Closes #5204

[33mcommit 9285493adfab4c3f33ffbdb63f16c8c65bdeb8f1[m
Author: Giuseppe Di Natale <dinatale2@llnl.gov>
Date:   Thu Oct 6 10:11:06 2016 -0700

    Correct style in test-runner
    
    Correct test-runner.py so it passes flake8
    python style checking.
    
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>

[33mcommit 0bde1f7cb5e6d5db9b2e8afd66f49239a73e950b[m
Author: Giuseppe Di Natale <dinatale2@llnl.gov>
Date:   Thu Oct 6 10:04:54 2016 -0700

    Correct style in arcstat and arc_summary
    
    Fix arcstat and arc_summary so they pass
    flake8 python code style checks.
    
    Signed-off-by: Giuseppe Di Natale <dinatale2@llnl.gov>

[33mcommit 64c688d7161daac0a799b11b40cb791f6fd264db[m
Author: lorddoskias <lorddoskias@gmail.com>
Date:   Thu Oct 6 00:47:29 2016 +0300

    Refactor updating of immutable/appendonly flags
    
    Move the synchronization of inode/znode i_flgas/pflags into
    the respective internal zfs function. This is mostly
    mechanical work and shouldn't introduce any functional
    changes.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Nikolay Borisov <n.borisov.lkml@gmail.com>
    Issue #227
    Closes #5223

[33mcommit 5bf703b8f381b6a8a89a2c251ba04dc9db59bcd6[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Sun Sep 25 00:56:22 2016 +0200

    Fletcher4: save/reload implementation context
    
    Init, compute, and fini methods are changed to work on internal context object.
    This is necessary because ABI does not guarantee that SIMD registers will be preserved
    on function calls. This is technically the case in Linux kernel in between
    `kfpu_begin()/kfpu_end()`, but it breaks user-space tests and some kernels that
    don't require disabling preemption for using SIMD (osx).
    
    Use scalar compute methods in-place for small buffers, and when the buffer size
    does not meet SIMD size alignment.
    
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>

[33mcommit 37f520db2d19389deb2a68065391ae2b229c6b50[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Fri Sep 23 03:52:29 2016 +0200

    Fletcher4: Incremental using SIMD
    
    Combine incrementally computed fletcher4 checksums. Checksums are combined
    a posteriori, allowing for parallel computation on chunks to be implemented if
    required. The algorithm is general, and does not add changes in each SIMD
    implementation.
    New test in ztest verifies incremental fletcher computations.
    
    Checksum combining matrix for two buffers `a` and `b`, where `Ca` and `Cb` are
    respective fletcher4 checksums, `Cab` is combined checksum, `s` is size of buffer
    `b` (divided by sizeof(uint32_t)) is:
    
    Cab[A] = Cb[A] + Ca[A]
    Cab[B] = Cb[B] + Ca[B] + s * Ca[A]
    Cab[C] = Cb[C] + Ca[C] + s * Ca[B] + s(s+1)/2 * Ca[A]
    Cab[D] = Cb[D] + Ca[D] + s * Ca[C] + s(s+1)/2 * Ca[B] + s(s+1)(s+2)/6 * Ca[A]
    
    NOTE: this calculation overflows for larger buffers. Thus, internally, the calculation
    is performed on 8MiB chunks.
    
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>

[33mcommit e2c292bbfc9f1133c3faa46ac88f794b64da7ce2[m
Author: luozhengzheng <luo.zhengzheng@zte.com.cn>
Date:   Wed Oct 5 09:15:57 2016 +0800

    Fix coverity defects: CID 150953, 147603, 147610
    
    coverity scan CID:150953,type: uninitialized scalar variable
    coverity scan CID:147603,type: Resource leak
    coverity scan CID:147610,type: Resource leak
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: luozhengzheng <luo.zhengzheng@zte.com.cn>
    Closes #5209

[33mcommit 5cc78dc81232bc474d25ccfcacb42d80d83c5310[m
Merge: 0c313d2 7d75815
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Oct 4 11:20:38 2016 -0700

    Merge OpenZFS 4185
    
    OpenZFS 4185 - add new cryptographic checksums to ZFS: SHA-512, Skein, Edon-R
    
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Reviewed-by: Tom Caputi <tcaputi@datto.com>
    Reviewed-by: David Quigley <david.quigley@intel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Closes #4760

[33mcommit 0c313d2f7451041e9cc952fe68fb500efef52fe1[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Tue Oct 4 00:42:13 2016 +0200

    zloop: check if core file is generated by zdb
    
    Run `gdb` core file inspection with correct program.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Closes #5215

[33mcommit 7d75815dc950bdce3fd03cc40a3352d93c270e0f[m
Author: Tony Hutter <hutter2@llnl.gov>
Date:   Mon Aug 15 19:34:02 2016 -0400

    Use 100MB pool for filetest_001_pos.ksh checksum test
    
    As part of its tests, filetest_001_pos.ksh wipes the entire vdev to
    create checksum errors.  This patch uses the setup/cleanup scripts from
    the scrub_mirror test to create a custom 100MB pool, rather than
    using the entire device size that is passed into zfs-tests.sh
    (which defaults to 2GB).  This speeds up the buildbot tests, and also
    makes it possible for someone to use real disks (say, 1TB) without the
    test taking an insanely long amount of time.

[33mcommit 125a406e24fbfaec29557e88746210b9f18f646c[m
Author: ilovezfs <ilovezfs@icloud.com>
Date:   Thu Jan 28 04:51:19 2016 -0800

    OpenZFS 6585 - sha512, skein, and edonr have an unenforced dependency on extensible dataset
    
    Authored by: ilovezfs <ilovezfs@icloud.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Richard Laager <rlaager@wiktel.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Ported by: Tony Hutter <hutter2@llnl.gov>
    
    In any pool without the extensible dataset feature flag already enabled,
    creating a dataset with dedup set to use one of the new checksums would
    result in the following panic as soon as any data was added:
    
    panic[cpu0]/thread=ffffff0006761c40: feature_get_refcount(spa, feature,
    &refcount) != 48 (0x30 != 0x30), file: ../../common/fs/zfs/zfeature.c
    line 390
    
    Inpsection showed that feature->fi_feature was 7, which is the value of
    SPA_FEATURE_EXTENSIBLE_DATASET in the spa_feature enum.  This commit
    adds extensible dataset as a dependency for the sha512, edonr, and skein
    feature flags, which prevents the panic.
    
    OpenZFS-issue: https://www.illumos.org/issues/6585
    OpenZFS-commit: https://github.com/illumos/illumos-gate/commit/892586e8a147c02d7f4053cc405229a13e796928
    Porting Notes:
    This code was originally from Illumos, but I actually ported it from:
    openzfsonosx/zfs@b62a652

[33mcommit 4a2e9a17d5b81ae97b2a1b72437def9ed4996aca[m
Author: ilovezfs <ilovezfs@icloud.com>
Date:   Mon Jan 25 23:41:11 2016 -0800

    OpenZFS 6541 - Pool feature-flag check defeated if "verify" is included in the dedup property value
    
    Authored by: ilovezfs <ilovezfs@icloud.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Richard Laager <rlaager@wiktel.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Ported-by: Tony Hutter <hutter2@llnl.gov>
    
    zio_checksum_to_feature() expects a zio_checksum enum not a raw property
    intval, so the new checksums weren't being detected when the
    ZIO_CHECKSUM_VERIFY flag got in the way.
    
    Given a pool without feature@sha512,
    
        zfs create -o dedup=sha512 naughty/fivetwelve_noverify_ds
    
    would fail as expected since the raw intval would indeed be equal to
    SPA_FEATURE_SHA512.
    
    However,
    
        zfs create -o dedup=sha512,verify naughty/fivetwelve_verify_ds
    
    would incorrectly succeed because ZIO_CHECKSUM_VERIFY would be in the
    way, the raw intval would not be a member of the enum, and
    zio_checksum_to_feature() would return SPA_FEATURE_NONE, with the result
    that spa_feature_is_enabled() would never be called.
    
    This was first detected with edonr, since in that case verify is
    required.
    
    This commit clears the ZIO_CHECKSUM_VERIFY flag before calling
    zio_checksum_to_feature() using the ZIO_CHECKSUM_MASK and verifies in
    zio_checksum_to_feature() that ZIO_CHECKSUM_MASK has been applied by the
    caller to attempt to prevent the same bug from occurring again in the
    future.
    
    OpenZFS-issue: https://www.illumos.org/issues/6541
    OpenZFS-commit: https://github.com/illumos/illumos-gate/commit/971640e6aa954c91b0706543741aa4570299f4d7
    
    Porting notes:
    This code was originally from Illumos, but I actually ported it from:
    openzfsonosx/zfs@bef06e1

[33mcommit 3c67d83a8afb391f20bc53d36a0cebea6897b3e2[m
Author: Tony Hutter <hutter2@llnl.gov>
Date:   Wed Jun 15 15:47:05 2016 -0700

    OpenZFS 4185 - add new cryptographic checksums to ZFS: SHA-512, Skein, Edon-R
    
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Saso Kiselkov <saso.kiselkov@nexenta.com>
    Reviewed by: Richard Lowe <richlowe@richlowe.net>
    Approved by: Garrett D'Amore <garrett@damore.org>
    Ported by: Tony Hutter <hutter2@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/4185
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/45818ee
    
    Porting Notes:
    This code is ported on top of the Illumos Crypto Framework code:
    
        https://github.com/zfsonlinux/zfs/pull/4329/commits/b5e030c8dbb9cd393d313571dee4756fbba8c22d
    
    The list of porting changes includes:
    
    - Copied module/icp/include/sha2/sha2.h directly from illumos
    
    - Removed from module/icp/algs/sha2/sha2.c:
    	#pragma inline(SHA256Init, SHA384Init, SHA512Init)
    
    - Added 'ctx' to lib/libzfs/libzfs_sendrecv.c:zio_checksum_SHA256() since
      it now takes in an extra parameter.
    
    - Added CTASSERT() to assert.h from for module/zfs/edonr_zfs.c
    
    - Added skein & edonr to libicp/Makefile.am
    
    - Added sha512.S.  It was generated from sha512-x86_64.pl in Illumos.
    
    - Updated ztest.c with new fletcher_4_*() args; used NULL for new CTX argument.
    
    - In icp/algs/edonr/edonr_byteorder.h, Removed the #if defined(__linux) section
      to not #include the non-existant endian.h.
    
    - In skein_test.c, renane NULL to 0 in "no test vector" array entries to get
      around a compiler warning.
    
    - Fixup test files:
    	- Rename <sys/varargs.h> -> <varargs.h>, <strings.h> -> <string.h>,
    	- Remove <note.h> and define NOTE() as NOP.
    	- Define u_longlong_t
    	- Rename "#!/usr/bin/ksh" -> "#!/bin/ksh -p"
    	- Rename NULL to 0 in "no test vector" array entries to get around a
    	  compiler warning.
    	- Remove "for isa in $($ISAINFO); do" stuff
    	- Add/update Makefiles
    	- Add some userspace headers like stdio.h/stdlib.h in places of
    	  sys/types.h.
    
    - EXPORT_SYMBOL *_Init/*_Update/*_Final... routines in ICP modules.
    
    - Update scripts/zfs2zol-patch.sed
    
    - include <sys/sha2.h> in sha2_impl.h
    
    - Add sha2.h to include/sys/Makefile.am
    
    - Add skein and edonr dirs to icp Makefile
    
    - Add new checksums to zpool_get.cfg
    
    - Move checksum switch block from zfs_secpolicy_setprop() to
      zfs_check_settable()
    
    - Fix -Wuninitialized error in edonr_byteorder.h on PPC
    
    - Fix stack frame size errors on ARM32
      	- Don't unroll loops in Skein on 32-bit to save stack space
      	- Add memory barriers in sha2.c on 32-bit to save stack space
    
    - Add filetest_001_pos.ksh checksum sanity test
    
    - Add option to write psudorandom data in file_write utility

[33mcommit dc03fa3092472c40bf1b6c7d7ea3170e3ffa9e38[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Sun Sep 25 10:35:12 2016 +0200

    Fletcher4: Init in libzfs_init()
    
    All users of fletcher4 methods must call `fletcher_4_init()/_fini()`
    There's no benchmarking overhead when called from user-space.
    
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>

[33mcommit 62a65a654e15a1388bfb571727e69b46e7cc07ab[m
Author: Romain Dolbeau <romain.github@dolbeau.name>
Date:   Mon Oct 3 18:44:00 2016 +0200

    Add parity generation/rebuild using 128-bits NEON for Aarch64
    
    This re-use the framework established for SSE2, SSSE3 and
    AVX2. However, GCC is using FP registers on Aarch64, so
    unlike SSE/AVX2 we can't rely on the registers being left alone
    between ASM statements. So instead, the NEON code uses
    C variables and GCC extended ASM syntax. Note that since
    the kernel explicitly disable vector registers, they
    have to be locally re-enabled explicitly.
    
    As we use the variable's number to define the symbolic
    name, and GCC won't allow duplicate symbolic names,
    numbers have to be unique. Even when the code is not
    going to be used (e.g. the case for 4 registers when
    using the macro with only 2). Only the actually used
    variables should be declared, otherwise the build
    will fails in debug mode.
    
    This requires the replacement of the XOR(X,X) syntax
    by a new ZERO(X) macro, which does the same thing but
    without repeating the argument. And perhaps someday
    there will be a machine where there is a more efficient
    way to zero a register than XOR with itself. This affects
    scalar, SSE2, SSSE3 and AVX2 as they need the new macro.
    
    It's possible to write faster implementations (different
    scheduling, different unrolling, interleaving NEON and
    scalar, ...) for various cores, but this one has the
    advantage of fitting in the current state of the code,
    and thus is likely easier to review/check/merge.
    
    The only difference between aarch64-neon and aarch64-neonx2
    is that aarch64-neonx2 unroll some functions some more.
    
    Reviewed-by: Gvozden Neskovic <neskovic@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Romain Dolbeau <romain.dolbeau@atos.net>
    Closes #4801

[33mcommit d1502e9ed05e0acf46172a4c9791d353f810ea8c[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Sun Oct 2 13:34:17 2016 -0500

    Correct zpool_vdev_remove() error message
    
    The error message in zpool_vdev_remove() said top-level devices
    could be removed, but that has never been true.
    
    Reported-by: Colin Ian King <colin.king@canonical.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Laager <rlaager@wiktel.com>
    Closes #4506
    Closes #5213

[33mcommit aecdc70604df56d010f99f3ba1c0780d242ac357[m
Author: luozhengzheng <luo.zhengzheng@zte.com.cn>
Date:   Mon Oct 3 02:24:54 2016 +0800

    Fix coverity defects: CID 147448, 147449, 147450, 147453, 147454
    
    coverity scan CID:147448,type: unchecked return value
    coverity scan CID:147449,type: unchecked return value
    coverity scan CID:147450,type: unchecked return value
    coverity scan CID:147453,type: unchecked return value
    coverity scan CID:147454,type: unchecked return value
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: luozhengzheng <luo.zhengzheng@zte.com.cn>
    Closes #5206

[33mcommit 0ca5261be44abd9f6587792df1dc0c8ff73d2f7c[m
Author: candychencan <chen.can2@zte.com.cn>
Date:   Sat Oct 1 07:04:43 2016 +0800

    Fix NULL deref in kcf_remove_mech_provider
    
    In the default case the function must return to avoid dereferencing
    'prov_mech' which will be NULL.
    
    Reviewed-by: Tom Caputi <tcaputi@datto.com>
    Reviewed-by: Richard Laager <rlaager@wiktel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: candychencan <chen.can2@zte.com.cn>
    Closes #5134

[33mcommit 0a8f18f9327a6275759393c5fc2f14664f172add[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Sat Oct 1 06:56:17 2016 +0800

    Fix coverity defects: CID 147563, 147560
    
    coverity scan CID:147563, Type:dereference null return value
    coverity scan CID:147560, Type:dereference null return value
    
    Reviewed-by: Richard Laager <rlaager@wiktel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5168

[33mcommit 470f12d631764d3706e2702762e9f3ae924cab43[m
Author: GeLiXin <ge.lixin@zte.com.cn>
Date:   Sat Oct 1 06:47:57 2016 +0800

    Fix coverity defects: CID 147531 147532 147533 147535
    
    coverity scan CID:147531,type: Argument cannot be negative
    - may copy data with negative size
    coverity scan CID:147532,type: resource leaks
    - may close a fd which is negative
    coverity scan CID:147533,type: resource leaks
    - may call pwrite64 with a negative size
    coverity scan CID:147535,type: resource leaks
    - may call fdopen with a negative fd
    
    Reviewed-by: Richard Laager <rlaager@wiktel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: GeLiXin <ge.lixin@zte.com.cn>
    Closes #5176

[33mcommit ed3ea30fb9341c860c94bf71e771f115ee4801ea[m
Author: GeLiXin <ge.lixin@zte.com.cn>
Date:   Sat Oct 1 06:40:07 2016 +0800

    Fix coverity defects: CID 147536, 147537, 147538
    
    coverity scan CID:147536, type: Argument cannot be negative
    - may write or close fd which is negative
    coverity scan CID:147537, type: Argument cannot be negative
    - may call dup2 with a negative fd
    coverity scan CID:147538, type: Argument cannot be negative
    - may read or fchown with a negative fd
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: GeLiXin <ge.lixin@zte.com.cn>
    Closes #5185

[33mcommit 292d573e70d254f5011f20f0c4882e928fac594b[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Sat Oct 1 00:19:51 2016 +0200

    raidz_test: respect wall time
    
    When timeout is specified (-t), stop worker threads in the middle of work units.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Issue #5180
    Closes #5190

[33mcommit 2db28197feb44d102f55e49d8193444ec6f47d29[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Sep 30 15:04:21 2016 -0700

    Fix cppcheck warning in buf_init()
    
    Cppcheck 1.63 erroneously complains about an uninitialized value
    in buf_init().  Newer versions of cppcheck (1.72) handle this
    correctly but we'll initialize the value anyway to silence the
    warning.
    
    Reviewed-by: Richard Elling <Richard.Elling@RichardElling.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5203

[33mcommit f4ce6d464c218eb4dc1fc94c8931a1e76b6742c5[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Sep 30 12:12:53 2016 -0700

    Disable zpool_import_002_pos and ro_props_001_pos
    
    These test cases fail some percentage of the time resulting
    in automated testing failures.  Disable the offending tests
    until they can be made reliable.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #5201
    Issue #5202
    Closes #5194

[33mcommit 8047715ab40836a27b742a808d6c2a0496478bd4[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Sat Oct 1 01:49:16 2016 +0800

    Fix coverity defects: CID 147707
    
    coverity scan CID:147707, Type:Double free.
    
    Reviewed-by: Richard Laager <rlaager@wiktel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5097

[33mcommit ec009855c4a43c83837741f787ab26cb7f8edfdc[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Thu Sep 29 21:01:50 2016 -0700

    Add a script to change file names when upstreaming to OpenZFS/illumos
    
    Add a script to change file names when upstreaming to OpenZFS/illumos.
    
    Reviewed-by: Reviewed by: Prashanth Sreenivasa <prashksp@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Matt Ahrens <mahrens@delphix.com>
    Closes #5178

[33mcommit 6ca636a1526ea08a7e0a972fa164b22815529d4b[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Fri Sep 2 15:10:34 2016 +0200

    Avoid undefined shift overflow in fzap_cursor_retrieve()
    
    Avoid calculating (1<<64) if lh_prefix_len == 0. Semantics of the method remain
    the same.
    
    Assert (lh_prefix_len > 0) in zap_expand_leaf() to detect possibly the same
    problem.
    
    Issue #4883
    
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>

[33mcommit 4ca9c1de129f8250c446c2355349e6b300d84586[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Fri Sep 2 15:07:00 2016 +0200

    Explicit integer promotion for bit shift operations
    
    Explicitly promote variables to correct type. Undefined behavior is
    reported because length of int is not well defined by C standard.
    
    Issue #4883
    
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>

[33mcommit 031d7c2fe6afaa78943bd0a563b91fc84ace42d7[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Wed Aug 31 10:12:08 2016 +0200

    fix: Shift exponent too large
    
    Undefined operation is reported by running ztest (or zloop) compiled with GCC
    UndefinedBehaviorSanitizer. Error only happens on top level of dnode indirection
    with large enough offset values. Logically, left shift operation would work,
    but bit shift semantics in C, and limitation of uint64_t, do not produce desired
    result.
    
    Issue #5059, #4883
    
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>

[33mcommit 0b78aeae927833de580e140375a15ea5ea9d924a[m
Author: BearBabyLiu <liu.huang@zte.com.cn>
Date:   Fri Sep 30 04:33:09 2016 +0800

    Fix coverity defects: CID 147443, 147656, 147655, 147441, 147653
    
    coverity scan CID:147443, Type: Buffer not null terminated
    coverity scan CID:147656, Type: Copy into fixed size buffer
    coverity scan CID:147655, Type: Copy into fixed size buffer
    coverity scan CID:147441, Type: Buffer not null terminated
    coverity scan CID:147653, Type: Copy into fixed size buffer
    
    Reviewed-by: Richard Laager <rlaager@wiktel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: liuhuang <liu.huang@zte.com.cn>
    Closes #5165

[33mcommit e8ac4557af67a46a2cb90bd7db4d426c0b358d51[m
Author: Isaac Huang <he.huang@intel.com>
Date:   Thu Sep 29 14:13:31 2016 -0600

    Explicit block device plugging when submitting multiple BIOs
    
    Without plugging, the default 'noop' scheduler will not merge
    the BIOs which are part of a large ZIO.
    
    Reviewed-by: Andreas Dilger <andreas.dilger@intel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Isaac Huang <he.huang@intel.com>
    Closes #5181

[33mcommit 8a1cf1a5608151635b67d89613e51427b177dab0[m
Author: liaoyuxiangqin <guo.yong33@zte.com.cn>
Date:   Fri Sep 30 04:08:44 2016 +0800

    Fix zfs_clone_010_pos.ksh to verify zfs clones property displays right
    
    Because the macro ZFS_MAXPROPLEN used in function print_dataset
    differs between platforms set it appropriately and calculate the expected
    number of passes.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Richard Laager <rlaager@wiktel.com>
    Signed-off-by: yuxiang <guo.yong33@zte.com.cn>
    Closes #5154

[33mcommit db6597c6ea17ecaeb46423003cc33a79df28b8d7[m
Author: ChaoyuZhang <zhang.chaoyu@zte.com.cn>
Date:   Fri Sep 30 03:56:48 2016 +0800

    Enable ro_props_001_pos and onoffs_001_pos
    
    Enable ro_props_001_pos and onoffs_001_pos which pass reliably.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: ChaoyuZhang <zhang.chaoyu@zte.com.cn>
    Closes #5183

[33mcommit f25bc4938d8b2ac30fcbaaaf80d7867362b2095c[m
Author: liaoyuxiangqin <guo.yong33@zte.com.cn>
Date:   Fri Sep 30 03:46:13 2016 +0800

    Fix zfs_clone_010_pos.ksh to verify the space used by multiple copies
    
    The default blocksize in Linux is 1024 due to a GNU-ism.  Setting the
    expected blocksize resolves the issue.  As mentioned in the PR an
    alternate solution would be to set POSIXLY_CORRECT=1.
    
    Reviewed-by: Richard Laager <rlaager@wiktel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: yuxiang <guo.yong33@zte.com.cn>
    Closes #5167

[33mcommit 9ec0403d6acd3ab362905b74c5db6aaf31c71f47[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Fri Sep 30 03:11:44 2016 +0800

    Fix coverity defects: CID 147610, 147608, 147607
    
    coverity scan CID:147610, Type: Resource leak.
    coverity scan CID:147608, Type: Resource leak.
    coverity scan CID:147607, Type: Resource leak.
    
    Reviewed-by: Richard Laager <rlaager@wiktel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5143

[33mcommit c9d61adbf8f422fe8d3bda45d9de9e82c757d0b0[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Fri Sep 30 03:06:14 2016 +0800

    Fix coverity defects: 147658, 147652, 147651
    
    coverity scan CID:147658, Type:copy into fixed size buffer.
    coverity scan CID:147652, Type:copy into fixed size buffer.
    coverity scan CID:147651, Type:copy into fixed size buffer.
    
    Reviewed-by: Richard Laager <rlaager@wiktel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5160

[33mcommit 12fa7f3436fbd89f4d6b00c2c076405e7a21d62f[m
Author: lorddoskias <lorddoskias@gmail.com>
Date:   Wed Sep 28 00:08:52 2016 +0300

    Refactor inode->i_mode management
    
    Refactor the code in such a way so that inode->i_mode is being set
    at the same time zp->z_mode is being changed. This has the effect of
    keeping both in sync without relying on zfs_inode_update.
    
    Reviewed-by: Richard Laager <rlaager@wiktel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Nikolay Borisov <n.borisov.lkml@gmail.com>
    Closes #5158

[33mcommit df7c4059cb9ace35dfcbe37c68d27614191d0ef0[m
Author: candychencan <chen.can2@zte.com.cn>
Date:   Wed Sep 28 02:49:45 2016 +0800

    Enable property_alias_001_pos.ksh
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Richard Laager <rlaager@wiktel.com>
    Signed-off-by: candychencan <chen.can2@zte.com.cn>
    Closes #5175

[33mcommit 680eada9b05415a8e564eb345f062f357d66f0f1[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Mon Sep 26 06:08:28 2016 +0800

    Fix coverity defects: CID 147650, 147649, 147647, 147646
    
    coverity scan CID:147650, Type:copy into fixed size buffer.
    coverity scan CID:147649, Type:copy into fixed size buffer.
    coverity scan CID:147647, Type:copy into fixed size buffer.
    coverity scan CID:147646, Type:copy into fixed size buffer.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5161

[33mcommit 92bc9278689fcce48183182f2488ead42a9eb790[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Sat Sep 24 06:43:46 2016 +0800

    Fix coverity defects: CID 147602 147604
    
    coverity scan CID:147604, Type: Resource leak.
    coverity scan CID:147602, Type: Resource leak.
    reason: safe_malloc calcvs, goto children but not free calcvs.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5155

[33mcommit 7571033285e2f83bf163e0cec31fd2b352beed30[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Sep 23 10:55:10 2016 -0700

    Fix multilist_create() memory leak
    
    In arc_state_fini() the `arc_l2c_only->arcs_list[*]` multilists
    must be destroyed.  This accidentally regressed in d3c2ae1c.
    
    Reviewed by: Tom Caputi <tcaputi@datto.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #5151
    Closes #5152

[33mcommit d0662a1beb03033480dc0ac36e905b607e1e8eb8[m
Author: luozhengzheng <luo.zhengzheng@zte.com.cn>
Date:   Sat Sep 24 00:10:50 2016 +0800

    Fix coverity defects: CID 147613 147614 147616 147617
    
    coverity scan CID:147617,type: resource leaks
    coverity scan CID:147616,type: resource leaks
    coverity scan CID:147614,type: resource leaks
    coverity scan CID:147613,type: resource leaks
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: luozhengzheng <luo.zhengzheng@zte.com.cn>
    Closes #5150

[33mcommit d5b897a6a1da2f031a708fd267b4de2cc9b7a6e2[m
Author: tuxoko <tuxoko@gmail.com>
Date:   Thu Sep 22 19:09:16 2016 -0700

    Linux 4.7 compat: Fix deadlock during lookup on case-insensitive
    
    We must not use d_add_ci if the dentry already has the real name. Otherwise,
    d_add_ci()->d_alloc_parallel() will find itself on the lookup hash and wait
    on itself causing deadlock.
    
    Tested-by: satmandu
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #5124
    Closes #5141
    Closes #5147
    Closes #5148

[33mcommit 6635624020506a76cb79c65c7ff5a580c4685a0b[m
Author: kernelOfTruth aka. kOT, Gentoo user <kerneloftruth@gmail.com>
Date:   Fri Sep 23 02:22:37 2016 +0200

    OpenZFS 6111 - zfs send should ignore datasets created after the ending snapshot
    
    Authored by: Alex Deiter <alex.deiter@gmail.com>
    Reviewed by: Alex Aizman alex.aizman@nexenta.com
    Reviewed by: Alek Pinchuk alek.pinchuk@nexenta.com
    Reviewed by: Roman Strashkin roman.strashkin@nexenta.com
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Approved by: Garrett D'Amore <garrett@damore.org>
    Ported-by: kernelOfTruth <kerneloftruth@gmail.com>
    
    OpenZFS-issue: https://www.illumos.org/issues/6111
    OpenZFS-commit: https://github.com/illumos/illumos-gate/commit/4a20c933
    Closes #5110
    
    Porting notes:
    
    There were changes from upstream due to the following commits:
    - zfs send -p send properties only for snapshots that are actually sent
      https://github.com/zfsonlinux/zfs/commit/057485504e3a4502c265813ab58e9ec8ffc2a3be
    - Produce a full snapshot list for zfs send -p
      https://github.com/zfsonlinux/zfs/commit/e890dd85a7522730ad46daf68150aafd3952d0c1
    - Implement zfs_ioc_recv_new() for OpenZFS 2605
      https://github.com/zfsonlinux/zfs/commit/43e52eddb13d8accbd052fac9a242ce979531aa4
    - OpenZFS 6314 - buffer overflow in dsl_dataset_name
      ZFS_MAXNAMELEN was changed to the now used ZFS_MAX_DATASET_NAME_LEN since
      https://github.com/zfsonlinux/zfs/commit/eca7b76001a7d33f78bd98884aef8325bdbf98e7

[33mcommit 51907a31bc20a6697ec9a92a58c163a0c0df5de7[m
Author: kernelOfTruth aka. kOT, Gentoo user <kerneloftruth@gmail.com>
Date:   Fri Sep 23 01:01:19 2016 +0200

    OpenZFS 7230 - add assertions to dmu_send_impl() to verify that stream includes BEGIN and END records
    
    Authored by: Matt Krantz <matt.krantz@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Ported-by: kernelOfTruth <kerneloftruth@gmail.com>
    
    OpenZFS-issue: https://www.illumos.org/issues/7230
    OpenZFS-commit: https://github.com/illumos/illumos-gate/commit/12b90ee2
    Closes #5112

[33mcommit 5df39c1e43e8d903ef4317e505cf85e64ef7e172[m
Author: luozhengzheng <luo.zhengzheng@zte.com.cn>
Date:   Fri Sep 23 06:55:41 2016 +0800

    Fix coverity defects
    
    1.coverity scan CID:147445 function zfs_do_send in zfs_main.c
    Buffer not null terminated (BUFFER_SIZE_WARNING)
    
    2.coverity scan CID:147443 function zfs_do_bookmark in zfs_main.c
    Buffer not null terminated (BUFFER_SIZE_WARNING)
    
    3.coverity scan CID:147660 function main in zinject.c
    Passing string argv[0] of unknown size to strcpy
    By the way, the leak of g_zfs is fixed.
    
    4.coverity scan CID: 147442 function make_disks in zpool_vdev.c
    Buffer not null terminated (BUFFER_SIZE_WARNING)
    
    5.coverity scan CID: 147661 function main in dir_rd_update.c
    passing string cp1 of unknown size to strcpy
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: luozhengzheng <luo.zhengzheng@zte.com.cn>
    Closes #5130

[33mcommit 3ec68a4414ececbae227a508bcc7e236c358e64c[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Fri Sep 23 06:28:34 2016 +0800

    Update zfs destroy test scripts
    
    Update and enable zfs_destroy_0[08-13]_*.ksh.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5068

[33mcommit 160987b5762946a2d03fb608149fdc2224ec55d1[m
Author: luozhengzheng <luo.zhengzheng@zte.com.cn>
Date:   Thu Sep 22 09:09:00 2016 +0800

    Fix coverity defects
    
    coverity scan CID:147633,type: sizeof not portable
    coverity scan CID:147637,type: sizeof not portable
    coverity scan CID:147638,type: sizeof not portable
    coverity scan CID:147640,type: sizeof not portable
    
    In these particular cases sizeof (XX **) happens to be equal to sizeof (X *),
    but this is not a portable assumption.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: luozhengzheng <luo.zhengzheng@zte.com.cn>
    Closes #5144

[33mcommit 84347be0986fc0ba99ebb577357328c1e3f50a68[m
Author: candychencan <chen.can2@zte.com.cn>
Date:   Thu Sep 22 04:51:53 2016 +0800

    Fix zfs_destroy_001_pos.ksh
    
    Due to how the Linux VFS was designed busy mount points
    cannot be destroyed even when given the force option.  Update
    the zfs_destroy_001_pos test case to expect this behavior when
    running under Linux.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: candychencan <chen.can2@zte.com.cn>
    Closes #5132

[33mcommit 66e93f5e4e1a6c573fc57f9f76eb09c6cffd085e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Sep 21 13:45:21 2016 -0700

    Fix automatically generated release number
    
    When building from the head of a branch a release number is
    automatically generated with `git describe` using the last tag
    on that branch as the base.  For this to work the last tag on the
    branch needs to be predictable given the current META file.
    
    This logic was accidentally broken when an -rcX tag was added to
    the branch.  Update it to search for a VERSION or VERSION-RELEASE
    tag.
    
    Reviewed-by: Chris Siebenmann <cks.git01@cs.toronto.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5105
    Closes #5140

[33mcommit da8d57488b6cf6078ccb53a6f559a2f64bba7264[m
Author: Isaac Huang <he.huang@intel.com>
Date:   Wed Sep 21 14:37:20 2016 -0600

    Reduce noise in tracing logs
    
    dbuf_read_impl() returns (SET_ERROR(err)) when err can be 0, which adds
    lots of noise in tracing logs.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Isaac Huang <he.huang@intel.com>
    Closes #4430
    Closes #5146

[33mcommit 70cc394d919fb576bc23d3dc2552a55a4c9d1c24[m
Author: Moritz Maxeiner <moritz@ucworks.org>
Date:   Wed Sep 21 22:35:16 2016 +0200

    Fix regression that broke dracut initramfs generation
    
    Based upon @ryao's initial fix for 1c73494394fc9de9283b3fd4f00bcdf4bd300a7
    ( 5e9843405f63fdabe76e87b92b81a127d488abc7 ) this one also uses
    `command -v` instead of `type`, but additionally only applies the
    fix to close zfsonlinux/zfs#4749 when `libgcc_s.so.1` has not been included
    by dracut automatically (verified by whether `zpool` links directly to
    `libgcc_s.so`), as well as change the fallback option to match `libgcc_s.so*`.
    
    Tested-by: Ben Jencks <ben@bjencks.net>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Moritz Maxeiner <moritz@ucworks.org>
    Closes #5089
    Closed #5138

[33mcommit 609603a5d3356c2c69c926038eee6755e0183d27[m
Author: BearBabyLiu <liu.huang@zte.com.cn>
Date:   Wed Sep 21 10:09:22 2016 +0800

    Fix coverity defects
    
    coverity scan CID:147504 Type: Explicit null dereferenced
    Reason: passing null pointer dl to zfs_dirent_unlock
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: BearBabyLiu <liu.huang@zte.com.cn>
    Closes #5131

[33mcommit 9911a9c4c9501112dcb2a64a5195820068676e62[m
Author: legend-hua <liu.hua130@zte.com.cn>
Date:   Wed Sep 21 09:36:24 2016 +0800

    Remove script zfs_commands.cfg
    
    zfs_commands.cfg have printed "No such file or directory", When executing
    script/zfs-test.sh. The script is a symlink to ../../../zfs-script-config.sh
    So delete the symlink, and directly source $SRCDIR/zfs-script-config.sh
    when it exists from default.cfg.in
    
    Reviewed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: legend-hua <liu.hua130@zte.com.cn>
    Closes #5133

[33mcommit 884385a0b25dc36b622e5e427bf29281c3dbca06[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Wed Sep 21 08:45:45 2016 +0800

    Fix coverity defects
    
    Fix coverity defects:
    coverity scan CID:147623, Type: Resource leak.
    coverity scan CID:147622, Type: Resource leak.
    reason: zpool_open zhp, but not zpool_close zhp. so resource leak.
    
    coverity scan CID:147621, Type: Resource fd leak.
    coverity scan CID:147620, Type: Resource fd leak.
    reason: do_write do_read open file fd,but exception not close fd.
    
    delete unuse definition DMU_OS_IS_L2COMPRESSIBLE.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Closes #5137

[33mcommit d2a6f65cfb65ec3079f843542a156704264260be[m
Author: candychencan <chen.can2@zte.com.cn>
Date:   Wed Sep 21 02:27:15 2016 +0800

    Fix strncpy in taskq_create
    
    Assign the copy length to TASKQ_NAMELEN, so if the name length equals
    'TASKQ_NAMELEN+1' , the final '\0' of tq->tq_name is preserved.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: candychencan <chen.can2@zte.com.cn>
    Closes #5136

[33mcommit 792517389fad5c495a2738b61c2e9c65dedaaa9a[m
Author: slashdd <eric.desrochers@canonical.com>
Date:   Tue Sep 20 13:07:58 2016 -0400

    Change /etc/mtab to /proc/self/mounts
    
    Fix misleading error message:
    
     "The /dev/zfs device is missing and must be created.", if /etc/mtab is missing.
    
    Reviewed-by: Richard Laager <rlaager@wiktel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Eric Desrochers <eric.desrochers@canonical.com>
    Closes #4680
    Closes #5029

[33mcommit 25e2ab16be74cb37934e6736a1dc10fd50a00c56[m
Author: Tim Chase <tim@chase2k.com>
Date:   Mon Sep 19 11:28:35 2016 -0500

    Fix arc_adjust_meta_balanced()
    
    The type of "adjustmnt" was erroneously changed to unsigned when the compressed
    ARC code was ported in d3c2ae1c0806b183a315e3d43cc8018cfdca79b5.
    
    As a result of it being unsigned, the balanced metadata eviction logic
    would evict all of the non-metadata.
    
    Reviewed-by: Chris Severance <github.severach@spamgourmet.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed by: David Quigley <david.quigley@intel.com>
    Signed-off-by: Tim Chase <tim@onlight.com>
    Closes #5128
    Closes #5129

[33mcommit a34f7ab332a66c2857b212abb6082fcc0e762519[m
Author: legend-hua <liu.hua130@zte.com.cn>
Date:   Sun Sep 18 06:20:10 2016 +0800

    Fix FALLOC_FL_PUNCH_HOLE use in randfree_file.c
    
    The FALLOC_FL_PUNCH_HOLE flag was introduced in the 2.6.38
    kernel.  To prevent breaking the build on older systems wrap its use
    in a conditional.  When FALLOC_FL_PUNCH_HOLE isn't available
    return a non-zero status and error message.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: legend-hua <liu.hua130@zte.com.cn>
    Closes #5101

[33mcommit 30f3f2e13c01bf1c881b2f3bb1236fca9f87a8e5[m
Author: luozhengzheng <luo.zhengzheng@zte.com.cn>
Date:   Sun Sep 18 06:08:54 2016 +0800

    Fix Coverity defects
    
    CID 147659, 150952 and 147645
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: luozhengzheng <luo.zhengzheng@zte.com.cn>
    Closes #5103

[33mcommit 9ea9e0b9a1f15b1e3b6b89bbc29d2a68df87ab3c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Sep 16 14:05:30 2016 -0700

    Enable ignore_hole_birth module option by default
    
    Enable ignore_hole_birth by default until all known hole birth bugs
    have been resolved and relevant test cases added.
    
    Reviewed-by: Boris Protopopov <boris.protopopov@actifio.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4809
    Closes #5099

[33mcommit f448f8cddd710686e9e17e3e53ac3917f2546e5d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Sep 16 13:25:46 2016 -0700

    Disable zpool_upgrade_004_pos test case
    
    This test cause frequently triggers issue #4034.  Disable this
    test case until the root cause of this issue has been addressed.
    
    Reviewed-by: Olaf Faaland <faaland1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4034
    Closes #5120

[33mcommit 87f9371aefca857e7091dfdee3ec2d36b0de54c4[m
Author: Nikolay Borisov <n.borisov.lkml@gmail.com>
Date:   Mon Sep 12 22:35:56 2016 +0300

    Simplify time handling logic in zfs_settattr
    
    Simplify time handling in zfs_setattr by mimicking the logic in
    setattr_copy from the linux kernel. In order to achieve this
    in the case when ZFS' log is being replayed it is necessary
    to unconditionally set the ctime in zfs_replay_setattr.
    
    Also use the timespec_trunc function when assigning values to the
    generic inode struct. This is currently a noop since zfs sets
    s_time_gran to 1, however in the future rules about precision might
    change.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Nikolay Borisov <n.borisov.lkml@gmail.com>
    Closes #4916

[33mcommit 9f5f0019ab3c03f59060d752b0be69290ec1abb9[m
Author: Nikolay Borisov <n.borisov.lkml@gmail.com>
Date:   Mon Aug 1 23:02:25 2016 +0300

    Refactor generic inode time updating
    
    ZFS doesn't provide a custom update_time method meaning it delegates
    this job to the generic VFS layer. The only time when it needs to
    set the various *time values is when the inode is being marshalled
    to/from the disk. Do this by moving the relevant code from
    zfs_inode_update_impl to zfs_node_alloc and zfs_rezget. As a result
    from this change it is no longer necessary to have multiple versions
    of the zfs_inode_update function - so just nuke them and leave only
    one.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Nikolay Borisov <n.borisov.lkml@gmail.com>
    Issue #227
    Closes #4916

[33mcommit 524b4217b866b4b9385bc3c4e80acf4f77459a89[m
Author: Dan Kimmel <dan.kimmel@delphix.com>
Date:   Wed Jul 13 17:17:41 2016 -0400

    DLPX-44733 combine arc_buf_alloc_impl() with arc_buf_clone()
    
    Authored by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Tom Caputi <tcaputi@datto.com>
    Reviewed by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported by: David Quigley <david.quigley@intel.com>
    Issue #5078

[33mcommit c4434877ae449a637d0f302eca80fcaad354874f[m
Author: Dan Kimmel <dan.kimmel@delphix.com>
Date:   Sun Jun 12 22:47:35 2016 -0400

    Remove lint suppression from dmu.h and unnecessary dmu.h include in spa.h
    
    Authored by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Tom Caputi <tcaputi@datto.com>
    Reviewed by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported by: David Quigley <david.quigley@intel.com>
    Issue #5078

[33mcommit c17bcf83da14f7f05641dfabb7160025a93641c1[m
Author: Tom Caputi <tcaputi@datto.com>
Date:   Mon Sep 12 21:34:19 2016 -0400

    Enable raw writes to perform dedup with verification
    
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed by: David Quigley <david.quigley@intel.com>
    Signed-off-by: Tom Caputi <tcaputi@datto.com>
    Issue #5078

[33mcommit 2aa34383b9362200e19b22ca4a22ea97d70d9ddf[m
Author: Dan Kimmel <dan.kimmel@delphix.com>
Date:   Mon Jul 11 13:45:52 2016 -0400

    DLPX-40252 integrate EP-476 compressed zfs send/receive
    
    Authored by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Tom Caputi <tcaputi@datto.com>
    Reviewed by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported by: David Quigley <david.quigley@intel.com>
    Issue #5078

[33mcommit d3c2ae1c0806b183a315e3d43cc8018cfdca79b5[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Thu Jun 2 00:04:53 2016 -0400

    OpenZFS 6950 - ARC should cache compressed data
    
    Authored by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Tom Caputi <tcaputi@datto.com>
    Reviewed by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported by: David Quigley <david.quigley@intel.com>
    
    This review covers the reading and writing of compressed arc headers, sharing
    data between the arc_hdr_t and the arc_buf_t, and the implementation of a new
    dbuf cache to keep frequently access data uncompressed.
    
    I've added a new member to l1 arc hdr called b_pdata. The b_pdata always hangs
    off the arc_buf_hdr_t (if an L1 hdr is in use) and points to the physical block
    for that DVA. The physical block may or may not be compressed. If compressed
    arc is enabled and the block on-disk is compressed, then the b_pdata will match
    the block on-disk and remain compressed in memory. If the block on disk is not
    compressed, then neither will the b_pdata. Lastly, if compressed arc is
    disabled, then b_pdata will always be an uncompressed version of the on-disk
    block.
    
    Typically the arc will cache only the arc_buf_hdr_t and will aggressively evict
    any arc_buf_t's that are no longer referenced. This means that the arc will
    primarily have compressed blocks as the arc_buf_t's are considered overhead and
    are always uncompressed. When a consumer reads a block we first look to see if
    the arc_buf_hdr_t is cached. If the hdr is cached then we allocate a new
    arc_buf_t and decompress the b_pdata contents into the arc_buf_t's b_data. If
    the hdr already has a arc_buf_t, then we will allocate an additional arc_buf_t
    and bcopy the uncompressed contents from the first arc_buf_t to the new one.
    
    Writing to the compressed arc requires that we first discard the b_pdata since
    the physical block is about to be rewritten. The new data contents will be
    passed in via an arc_buf_t (uncompressed) and during the I/O pipeline stages we
    will copy the physical block contents to a newly allocated b_pdata.
    
    When an l2arc is inuse it will also take advantage of the b_pdata. Now the
    l2arc will always write the contents of b_pdata to the l2arc. This means that
    when compressed arc is enabled that the l2arc blocks are identical to those
    stored in the main data pool. This provides a significant advantage since we
    can leverage the bp's checksum when reading from the l2arc to determine if the
    contents are valid. If the compressed arc is disabled, then we must first
    transform the read block to look like the physical block in the main data pool
    before comparing the checksum and determining it's valid.
    
    OpenZFS-issue: https://www.illumos.org/issues/6950
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/7fc10f0
    Issue #5078

[33mcommit b8eb3c4e3cbdf284087ea0eda58a2681ab3e8e11[m
Author: Paul Dagnelie <pcd@delphix.com>
Date:   Fri Sep 2 21:07:15 2016 -0700

    OpenZFS 7262 - remove seq from zfs_receive_010.ksh
    
    Authored by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: John Wren Kennedy <john.kennedy@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Yuri Pankov <yuri.pankov@nexenta.com>
    Reviewed by: Brian Behlendorf <behlendorf1@llnl.gov>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Ported-by: candychencan <chen.can2@zte.com.cn>
    
    OpenZFS-issue: https://www.illumos.org/issues/7262
    OpenZFS-commit: https://github.com/illumos/illumos-gate/commit/b868f5d
    Closes #5080

[33mcommit a425f5bff92f2db78f588543f49ce3abbd98a7f9[m
Author: luozhengzheng <luo.zhengzheng@zte.com.cn>
Date:   Thu Sep 1 10:23:10 2016 +0800

    Fix memleak in zfs_do_* and zpool_do_*
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: luozhengzheng <luo.zhengzheng@zte.com.cn>
    Closes #5056

[33mcommit e33da554c5daf0103b093f44ab5b90ad6c064c3f[m
Author: loli10K <ezomori.nozomu@gmail.com>
Date:   Wed Sep 7 19:34:20 2016 +0200

    Allow ZVOL bookmarks to be listed recursively
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Closes #4503
    Closes #5072

[33mcommit 43924bfeaa3e027b26af826ce2b7d6ed3288550c[m
Author: Tim Chase <tim@onlight.com>
Date:   Fri Sep 9 11:03:03 2016 -0500

    Remove redundant assignments to arc_c
    
    Several assignments to arc_c had no effect because it is ultimately
    initialized to arc_c_max.
    
    This aligns ZoL better with the upstream code which removed these
    assignments some time ago.
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@onlight.com>
    Closes #5081

[33mcommit 67d60824946ade6b1b71a98dbfbfca5949aee425[m
Author: Nikolay Borisov <n.borisov.lkml@gmail.com>
Date:   Sat Sep 10 23:06:17 2016 +0300

    Refactor spa_load_l2cache to make build happy
    
    In case sav->sav_config was NULL the body of the function
    would skip the iteration of the l2 cache devices and will
    just cleanup the old devices. However, this wasn't very obvious
    since the null check was performed after the loop body and after
    the old devices were cleaned. Refactor the code so that it's now
    obvious when the iteration of the l2cache devices is skipped.
    
    This fixes the following cppcheck warning:
    
    [module/zfs/spa.c:1552]: (error) Possible null pointer dereference: newvdevs
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Nikolay Borisov <n.borisov.lkml@gmail.com>
    Closes #5087

[33mcommit 20aa7a4e319ddf53e4e2dcc5fa9b3b1645e982e3[m
Author: Tim Chase <tim@chase2k.com>
Date:   Sat Sep 10 10:16:13 2016 -0500

    Free property names with spa_strfree() rather than strfree()
    
    Since they're allocated with spa_strdup(), they should be freed with
    spa_strfree() so the proper length buffer is freed.
    
    Reviewed-by: Richard Yao <ryao@gentoo.org>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Closes #5082
    Closes #5086

[33mcommit bd296705d5b6a8d3fb03d93cb2e341ea04c3809f[m
Author: liuhuang <liu.huang@zte.com.cn>
Date:   Sun Sep 11 04:41:19 2016 +0800

    Fix memory/fd leak in check_file() and is_spare()
    
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: liuhuang <liu.huang@zte.com.cn>
    Closes #5085

[33mcommit 89f67518e1c25a586ba2663210ec9791f12f1fba[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Sep 9 11:01:22 2016 -0700

    Fix make lint target
    
    When errors are detected 'make lint' should return a non-zero
    error code.  The value 2 was chosen to indicate these are warnings
    and not fatal.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 8516203d53380bc32f62827afd0c13d16337c4e6[m
Author: Moritz Maxeiner <moritz@ucworks.org>
Date:   Thu Sep 1 18:29:31 2016 +0200

    zfs dracut module should not assume systemd presence
    
    Signed-off-by: Moritz Maxeiner <moritz@ucworks.org>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4749
    Closes #5058

[33mcommit 61c73494394fc9de9283b3fd4f00bcdf4bd300a7[m
Author: Moritz Maxeiner <moritz@ucworks.org>
Date:   Thu Sep 1 18:15:10 2016 +0200

    Adapt genkernel fix for zfsonlinux/zfs#4749 to zfs dracut module
    
    Signed-off-by: Moritz Maxeiner <moritz@ucworks.org>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4749
    Closes #5058

[33mcommit 679d73e98bf5e51a02bc8d550253e4a3f15d58ca[m
Author: John Wren Kennedy <john.kennedy@delphix.com>
Date:   Wed Aug 3 21:26:15 2016 +0000

    OpenZFS - Performance regression suite for zfstest
    
    Author: John Wren Kennedy <john.kennedy@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Don Brady <don.brady@intel.com>
    Reviewed by: Richard Elling <Richard.Elling@RichardElling.com>
    Reviewed by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: David Quigley <david.quigley@intel.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    Ported-by: Don Brady <don.brady@intel.com>
    
    OpenZFS-issue: https://www.illumos.org/issues/6950
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/dcbf3bd6
    Delphix-commit: https://github.com/delphix/delphix-os/commit/978ed49
    Closes #4929
    
    ZFS Test Suite Performance Regression Tests
    
    This was pulled into OpenZFS via the compressed arc featureand was
    separated out in zfsonlinux as a separate pull request from PR-4768.
    It originally came in as QA-4903 in Delphix-OS from John Kennedy.
    
    Expected Usage:
    
    $ DISKS="sdb sdc sdd" zfs-tests.sh -r perf-regression.run
    
    Porting Notes:
    1. Added assertions in the setup script to make sure required tools
       (fio, mpstat, ...) are present.
    2. For the config.json generation in perf.shlib used arcstats and
        other binaries instead of dtrace to query the values.
    3. For the perf data collection:
       - use "zpool iostat -lpvyL" instead of the io.d dtrace script
        (currently not collecting zfs_read/write latency stats)
       - mpstat and iostat take different arguments
       - prefetch_io.sh is a placeholder that uses arcstats instead of
         dtrace
    4. Build machines require fio, mdadm and sysstat pakage (YMMV).
    
    Future Work:
       - Need a way to measure zfs_read and zfs_write latencies per pool.
       - Need tools to takes two sets of output and display/graph the
         differences
       - Bring over additional regression tests from Delphix

[33mcommit 7050a65d5c760aa039d195fe0b6773a20a81048b[m
Author: Sydney Vanda <sydney.m.vanda@intel.com>
Date:   Fri Jul 22 15:07:04 2016 +0000

    Real disk partitioning now enabled in test suite for Linux
    
    When using real devices, specify DISKS="sdb sdc sdd" opposed to
    /dev/sdb in zfs-tests.sh - otherwise errors with directory names and
    disk names registering as "/dev//dev/sdb" for some tests.  The same
    goes for mpath: DISK="mpatha mpathad mpathb"
    
    Expected Usage:
    
    $ DISKS="sdb sdc sdd" zfs-tests.sh
    
    SLICE_PREFIX is now set as "p" for a loop device (ie loop0p2) or
    "" for a real device (ie sdb2), or either for multipath devices
    (ie mpatha1 or mpath1p1) instead of only "p" by default.  Note that
    kpartx partitioning is not currently supported in this patch
    (ie "partx") and may need to be disabled on Debian distributions.
    Functions added for determining test directory (/dev or /dev/mapper)
    as well as slice prefix are determined and exported mostly in the cfg
    file of each test group directory.
    
    Currently zpools cannot be created on whole mpath devices that have
    been partitioned. In order to fix this tests have either been revised
    to use a partition instead, or if there is a size constraint and the
    pool needs to be created on the whole disk, partitions are then deleted
    if the device is a multipath device.  This functionality is added to
    default_cleanup() or to individual cleanup scripts if a non-default
    cleanup method is used.
    
    The max partitions is currently set at 8 to account for all of the
    tests thus far.
    
    Patch changes are generally encompassed in "if is_linux" construct.
    
    Signed-off-by: Sydney Vanda <sydney.m.vanda@intel.com>
    Reviewed-by: John Salinas <John.Salinas@intel.com>
    Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed-by: David Quigley <david.quigley@intel.com>
    Closes #4447
    Closes #4964
    Closes #5074

[33mcommit 178acea364bc19da6cd30c6aaa7147f9a14fdb5a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Sep 7 10:30:52 2016 -0700

    Tag 0.7.0-rc1
    
    First release candidate.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit d02ca379795a37b8541da5a1b37528f7130de1e6[m
Author: Don Brady <don.brady@intel.com>
Date:   Wed Aug 31 15:46:58 2016 -0600

    Bring over illumos ZFS FMA logic -- phase 1
    
    This first phase brings over the ZFS SLM module, zfs_mod.c, to handle
    auto operations in response to disk events. Disk event monitoring is
    provided from libudev and generates the expected payload schema for
    zfs_mod. This work leverages the recently added devid and phys_path
    strings in the vdev label.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Don Brady <don.brady@intel.com>
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Closes #4673

[33mcommit 0b284702b75aa712a7d1353b93e19d5b2c783f27[m
Author: luozhengzheng <luo.zhengzheng@zte.com.cn>
Date:   Wed Aug 31 19:07:36 2016 +0800

    Delete unreferenced function zfs_ereport_send_interim_checksum
    
    Signed-off-by: luozhengzheng <luo.zhengzheng@zte.com.cn>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5055

[33mcommit ca8587a5172628e282b5b0ac1b2165b212e35601[m
Author: luozhengzheng <luo.zhengzheng@zte.com.cn>
Date:   Wed Aug 31 09:32:02 2016 +0800

    kmem_zalloc with KM_SLEEP will never return NULL
    
    These allocations can never fail.  Leaving the error handling
    code here gives the impression they can so it has been removed.
    
    Signed-off-by: luozhengzheng <luo.zhengzheng@zte.com.cn>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5048

[33mcommit 2d96d7aa56ea4a95206478474b2244be67a71853[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Wed Aug 31 18:35:52 2016 +0800

    Fix zfs_unmount() and zfs_unshare_proto() leaks
    
    Always free mnpt memory on failure in the zfs_unmount() function.
    
    In the zfs_unshare_proto() function mountpoint is a const and
    should not be assigned.
    
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5054

[33mcommit ee36c709c3d5f7040e1bd11f5c75318aa03e789f[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Sat Aug 27 20:12:53 2016 +0200

    Performance optimization of AVL tree comparator functions
    
    perf: 2.75x faster ddt_entry_compare()
        First 256bits of ddt_key_t is a block checksum, which are expected
    to be close to random data. Hence, on average, comparison only needs to
    look at first few bytes of the keys. To reduce number of conditional
    jump instructions, the result is computed as: sign(memcmp(k1, k2)).
    
    Sign of an integer 'a' can be obtained as: `(0 < a) - (a < 0)` := {-1, 0, 1} ,
    which is computed efficiently.  Synthetic performance evaluation of
    original and new algorithm over 1G random keys on 2.6GHz Intel(R) Xeon(R)
    CPU E5-2660 v3:
    
    old	6.85789 s
    new	2.49089 s
    
    perf: 2.8x faster vdev_queue_offset_compare() and vdev_queue_timestamp_compare()
        Compute the result directly instead of using conditionals
    
    perf: zfs_range_compare()
        Speedup between 1.1x - 2.5x, depending on compiler version and
    optimization level.
    
    perf: spa_error_entry_compare()
        `bcmp()` is not suitable for comparator use. Use `memcmp()` instead.
    
    perf: 2.8x faster metaslab_compare() and metaslab_rangesize_compare()
    perf: 2.8x faster zil_bp_compare()
    perf: 2.8x faster mze_compare()
    perf: faster dbuf_compare()
    perf: faster compares in spa_misc
    perf: 2.8x faster layout_hash_compare()
    perf: 2.8x faster space_reftree_compare()
    perf: libzfs: faster avl tree comparators
    perf: guid_compare()
    perf: dsl_deadlist_compare()
    perf: perm_set_compare()
    perf: 2x faster range_tree_seg_compare()
    perf: faster unique_compare()
    perf: faster vdev_cache _compare()
    perf: faster vdev_uberblock_compare()
    perf: faster fuid _compare()
    perf: faster zfs_znode_hold_compare()
    
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Signed-off-by: Richard Elling <richard.elling@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5033

[33mcommit 9d69e9b268a1a0af3117871608fd3a87db1ce586[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Aug 30 18:56:36 2016 -0700

    Fix zhack argument processing
    
    The argument processing is zhack makes the assumption that getopt()
    will not permute argv.  This isn't true for the GNU implementation of
    getopt() unless the optstring is prefixed with a '+'.  In which case
    this is equivalent to setting the POSIXLY_CORRECT environment variable
    
    In addition, update the usage() and optstrings to reflect the existing
    supported options.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: liaoyuxiangqin <guo.yong33@zte.com.cn>
    Closes #5047

[33mcommit 3f10fe07d645166d7513448feedd8e3ef3111a12[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Aug 30 18:50:11 2016 -0700

    Update zpool_import_001_pos
    
    Older versions of blkid may not promptly detect ZFS labels when
    they're located on partitions.  In order to ensure this test passes
    reliably always perform a scan of default search paths (-s).
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: liaoyuxiangqin <guo.yong33@zte.com.cn>
    Closes #4987
    Closes #5047

[33mcommit 82ab6848ccff8fa42da56a2b5c74c767f8ad8fb0[m
Author: Hajo Möller <dasjoe@gmail.com>
Date:   Tue Jan 5 22:46:54 2016 +0100

    Fix "zpool get guid,freeing,leaked" source
    
    `zpool get guid,freeing,leaked` shows SOURCE as `default`, it should
    be `-` as those props are not editable.
    
    Changed code to not overwrite `src` for `ZPOOL_PROP_VERSION`, so it
    stays `ZPROP_SRC_NONE`.  Make src const to avoid future mistakes
    
    Signed-off-by: Hajo Möller <dasjoe@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4170

[33mcommit 8fe453b6718c089fdd248f45fd0adee26bd42b66[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Tue Aug 23 10:12:41 2016 +0800

    Update zfs_destroy_004.ksh script
    
    Issues:
    Under Linux, when executing zfs_destroy_004.ksh destroy $fs is an
    error.  The key issue here is that illumos kernel treats this case
    differently than the Linux kernel. On illumos you can unmount and
    destroy a filesystem which is busy and all consumers of it get EIO.
    On Linux the expected behavior is to prevent the unmount and destroy.
    
    Cause analysis:
    When create $fs file system and mount file system to $mntp.
    cd $mntp, linux isn't allow to destroy $fs in this mount contents.
    No matter what destroy with parameters.
    
    Solution:
    So  log_mustnot $ZFS destroy $fs is ok.
    cd $olddir and destroy $fs.
    
    Signed-off-by: caoxuewen cao.xuewen@zte.com.cn
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5012

[33mcommit 43cb1c1212be430f1a94307ac8be1737ca564e58[m
Author: ChaoyuZhang <zhang.chaoyu@zte.com.cn>
Date:   Mon Aug 22 10:27:06 2016 +0800

    Update zfs_create_003_pos.ksh and zfs_create_006_pos.ksh
    
    As the scripts zfs_create_003_pos.ksh and zfs_create_006_pos.ksh can
    run successfully in the linux, add them to the <linux.run> file to
    increase test scene.
    
    Signed-off-by: ChaoyuZhang <zhang.chaoyu@zte.com.cn>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5002

[33mcommit e623aea2ec11b4e3da8ddec50634be6e0be14eaf[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jun 20 14:28:51 2016 -0700

    Add log_must_{retry,busy} helpers
    
    Add helpers which automatically retry the provided command when
    the error message matches the provided keyword.  This provides an
    easy way to handle the asynchronous nature of some ZFS commands.
    
    For example, the `zfs destroy` command may need to be retried in
    the case where the block device is unexpected busy.  This can be
    accomplished as follows:
    
      log_must_busy $ZFS destroy ...
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #5002

[33mcommit 2158b165ed02178a58540b55eca828d32977147c[m
Author: liuhuang <liu.huang@zte.com.cn>
Date:   Mon Aug 22 07:40:54 2016 +0800

    Update zfs_mount_005_pos.ksh and zfs_mount_010_neg.ksh
    
    Update zfs_mount_005_pos.ksh and zfs_mount_010_neg.ksh to reflect
    the expected Linux behavior.  The is_linux wrapper is used so the
    test case may be used on Linux and non-Linux platforms.
    
    Signed-off-by: liuhuang <liu.huang@zte.com.cn>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5000

[33mcommit 8f50bafb04658911a1c2a6be3a969b726cc527c4[m
Author: cao <cao.xuewen@zte.com.cn>
Date:   Tue Aug 30 19:32:22 2016 +0800

    Delete unused zfsctl_snapdir_inactive declaration
    
    zfsctl_snapdir_inactive is defined in zfs-0.6.3.  In zfs-0.6.5.7
    this is declaration remains even though the implementation was
    removed in commit 278bee93.  Removed fastreboot_disable_highpil
    which is also unused.
    
    Signed-off-by: caoxuewen cao.xuewen@zte.com.cn
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5042

[33mcommit db707ad094431a8869123cb2389a4b768d5583a0[m
Author: Simon Klinkert <simon.klinkert@gmail.com>
Date:   Tue Aug 30 15:03:05 2016 +0200

    OpenZFS 6940 - Cannot unlink directories when over quota
    
    From user perspective, I would expect that ZFS is always able
    to remove files and directories even when the quota is exceeded.
    
    Authored by: Simon Klinkert <simon.klinkert@gmail.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/6940
    OpenZFS-issue: https://www.illumos.org/issues/6334
    OpenZFS-commit: https://github.com/illumos/illumos-gate/commit/9918916
    Closes #5044

[33mcommit 755065f3dce1123eac03e2b25c81647026b8e49b[m
Author: Alexander Motin <mav@freebsd.org>
Date:   Mon Aug 29 23:36:39 2016 +0200

    OpenZFS 6322 - ZFS indirect block predictive prefetch
    
    For quite some time I was thinking about possibility to prefetch
    ZFS indirection tables while doing sequential reads or writes.
    Recent changes in predictive prefetcher made that much easier to
    do. My tests on zvol with 16KB block size on 5x striped and 2x
    mirrored pool of 10 disks show almost double throughput on sequential
    read, and almost tripple on sequential rewrite. While for read alike
    effect can be received from increasing maximal prefetch distance
    (though at higher memory cost), for rewrite there is no other
    solution so far.
    
    Authored by: Alexander Motin <mav@freebsd.org>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/6322
    OpenZFS-commit: https://github.com/illumos/illumos-gate/commit/cb92f413
    Closes #5040
    
    Porting notes:
    - Change from upstream in module/zfs/dbuf.c in 'int dbuf_read' due
      to commit 5f6d0b6 'Handle block pointers with a corrupt logical size'
    
    - Difference from upstream in module/zfs/dmu_zfetch.c,
      uint32_t zfetch_max_idistance -> unsigned int zfetch_max_idistance
    
    - Variables have been initialized at the beginning of the function
     (void dmu_zfetch) to resemble the order of occurrence and account
     for C99, C11 mode errors.

[33mcommit 98ace739bd89b541af30d9d627ee42622fbbd861[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Mon Aug 29 11:40:16 2016 -0700

    OpenZFS 7086 - ztest attempts dva_get_dsize_sync on an embedded blockpointer
    
    In dbuf_dirty(), we need to grab the dn_struct_rwlock before looking at
    the db_blkptr, to prevent it from being changed by syncing context.
    
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/7086
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/98fa317
    Closes #5039

[33mcommit c40db193a5e503fffacf6d96a7dd48a0f1b36601[m
Author: GeLiXin <ge.lixin@zte.com.cn>
Date:   Thu Aug 25 16:40:20 2016 +0800

    Fix: Build warnings with different gcc optimization levels in debug mode
    
    This fix resolves warnings reported during compiling with different gcc
    optimization levels in debug mode,
    
    Test tools:
    gcc version 4.4.7 20120313 (Red Hat 4.4.7-16) (GCC)
    Linux version: 2.6.32-573.18.1.el6.x86_64, Red Hat Enterprise Linux Server release 6.1 (Santiago)
    
    List of warnings:
    CFLAGS=-O1 ./configure --enable-debug ;make
    ../../module/icp/core/kcf_sched.c: In function ‘kcf_aop_done’:
    ../../module/icp/core/kcf_sched.c:499: error: ‘fg’ may be used uninitialized in this function
    ../../module/icp/core/kcf_sched.c:499: note: ‘fg’ was declared here
    
    CFLAGS=-Os ./configure --enable-debug ; make
    libzfs_dataset.c: In function ‘zfs_prop_set_list’:
    libzfs_dataset.c:1575: error: ‘nvl_len’ may be used uninitialized in this function
    
    Signed-off-by: GeLiXin <ge.lixin@zte.com.cn>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5022

[33mcommit 67925abb5e12c003e959c87ddec19a3842fe5976[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 25 20:24:01 2016 +0000

    Fix cv_timedwait_hires
    
    The user space implementation of cv_timedwait_hires() was always passing
    a relative time to pthread_cond_timedwait() when an absolute time is
    expected.  This was accidentally introduced in commit 206971d2.
    
    Replace two magic values with their corresponding preprocessor macro.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Closes #5024

[33mcommit 9907cc1cc8c16fa2c7c03aa33264153ca2bdad6c[m
Author: GeLiXin <ge.lixin@zte.com.cn>
Date:   Thu Aug 11 11:15:37 2016 +0800

    Add zfs_arc_meta_limit_percent tunable
    
    ARC will evict meta buffers that exceed the arc_meta_limit. Before a further
    investigating on whether we should take special protection on meta buffers,
    this tunable make arc_meta_limit adjustable for different workloads.
    
    People can set zfs_arc_meta_limit_percent to any value while insmod zfs.ko,
    so some range check is added to guarantee a suitable arc_meta_limit.
    
    Suggested by Tim Chase, zfs_arc_dnode_limit is changed to a percent-style
    tunable as well.
    
    Signed-off-by: GeLiXin <ge.lixin@zte.com.cn>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4957

[33mcommit 3e635ac15c093ad9f1ee263ac8e4b45917a1449c[m
Author: Tim Chase <tim@chase2k.com>
Date:   Sun Aug 21 08:22:32 2016 -0500

    Prevent reclaim in send_traverse_thread()
    
    As is the case with traverse_prefetch_thread(), the deep stacks caused
    by traversal require disabling reclaim in the send traverse thread.
    
    Also, do the same for receive_writer_thread() in which similar problems
    have been observed.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4912
    Closes #4998

[33mcommit 23827a4ca1fbbc95d58398a2ff65dc73e4605ab8[m
Author: GeLiXin <ge.lixin@zte.com.cn>
Date:   Mon Aug 22 11:20:22 2016 +0800

    Fix: Array bounds read in zprop_print_one_property()
    
    If the loop index i comes to (ZFS_GET_NCOLS - 1), the cbp->cb_columns[i + 1]
    actually read the data of cbp->cb_colwidths[0], which means the array
    subscript is above array bounds.
    
    Luckily the cbp->cb_colwidths[0] is always 0 and it seems we haven't
    looped enough times to exceed the array bounds so far, but it's really
    a secluded risk someday.
    
    Signed-off-by: GeLiXin <ge.lixin@zte.com.cn>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #5003

[33mcommit 9cc1844a1dab9cb62743f1f31eca73fcc6aaf0c4[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Sun Aug 21 21:29:49 2016 +0200

    Linux compat: Grsecurity kernel
    
    API Change: Module parameter set/get methods take const parameter in
    Grsecurity kernel v4.7.1
    
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Signed-off-by: Jason Zaman <jason@perfinion.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4997
    Closes #5001

[33mcommit 2bce8049c3d782f4feb72493564754c0595606bf[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Jul 20 15:42:13 2016 -0700

    OpenZFS 7004 - dmu_tx_hold_zap() does dnode_hold() 7x on same object
    
    Using a benchmark which has 32 threads creating 2 million files in the
    same directory, on a machine with 16 CPU cores, I observed poor
    performance. I noticed that dmu_tx_hold_zap() was using about 30% of
    all CPU, and doing dnode_hold() 7 times on the same object (the ZAP
    object that is being held).
    
    dmu_tx_hold_zap() keeps a hold on the dnode_t the entire time it is
    running, in dmu_tx_hold_t:txh_dnode, so it would be nice to use the
    dnode_t that we already have in hand, rather than repeatedly calling
    dnode_hold(). To do this, we need to pass the dnode_t down through
    all the intermediate calls that dmu_tx_hold_zap() makes, making these
    routines take the dnode_t* rather than an objset_t* and a uint64_t
    object number. In particular, the following routines will need to have
    analogous *_by_dnode() variants created:
    
    dmu_buf_hold_noread()
    dmu_buf_hold()
    zap_lookup()
    zap_lookup_norm()
    zap_count_write()
    zap_lockdir()
    zap_count_write()
    
    This can improve performance on the benchmark described above by 100%,
    from 30,000 file creations per second to 60,000. (This improvement is on
    top of that provided by working around the object allocation issue. Peak
    performance of ~90,000 creations per second was observed with 8 CPUs;
    adding CPUs past that decreased performance due to lock contention.) The
    CPU used by dmu_tx_hold_zap() was reduced by 88%, from 340 CPU-seconds
    to 40 CPU-seconds.
    
    Sponsored by: Intel Corp.
    
    Signed-off-by: Matthew Ahrens <mahrens@delphix.com>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/7004
    OpenZFS-commit: https://github.com/openzfs/openzfs/pull/109
    Closes #4641
    Closes #4972

[33mcommit 8bea9815048e4b1a85905e0b381865dedd266f2d[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Jul 20 15:39:55 2016 -0700

    OpenZFS 7003 - zap_lockdir() should tag hold
    
    zap_lockdir() / zap_unlockdir() should take a "void *tag" argument which
    tags the hold on the zap. This will help diagnose programming errors
    which misuse the hold on the ZAP.
    
    Sponsored by: Intel Corp.
    
    Signed-off-by: Matthew Ahrens <mahrens@delphix.com>
    Signed-off-by: Pavel Zakharov <pavel.zakha@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/7003
    OpenZFS-commit: https://github.com/openzfs/openzfs/pull/108
    Closes #4972

[33mcommit ee6370a7a48e416cbd44819d007fdaba120a328d[m
Author: heary-cao <cao.xuewen@zte.com.cn>
Date:   Sat Aug 6 15:08:51 2016 +0800

    Fix spa config generate memory leak in spa_load_best function
    
    When spa retry load succeeds and spa recovery is requested it may
    leak in spa_load_best function.  Always free the generated config
    when it is not assigned to the spa.
    
    Signed-off-by: cao.xuewen <cao.xuewen@zte.com.cn>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4940

[33mcommit 5a5170884a6131c9f4346dd130d50a945d425853[m
Author: ChaoyuZhang <zhang.chaoyu@zte.com.cn>
Date:   Wed Aug 17 08:57:25 2016 +0800

    Update zfs_create_(009,010)_neg.ksh
    
    Just cleanup the new fs created during the test, so the "$found"
    should be "true".
    
    Signed-off-by: ChaoyuZhang <zhang.chaoyu@zte.com.cn>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4978

[33mcommit 32d41fb73a0d04a1d864e7602595b4c6e0d16c10[m
Author: Paul Dagnelie <pcd@delphix.com>
Date:   Tue Aug 9 23:06:39 2016 +0200

    OpenZFS 7176 - Yet another hole birth issue
    
    This is another bug in the long line of hole-birth related issues. In
    this particular case, it was discovered that a previous hole-birth fix
    (illumos bug 6513, commit bc77ba73) did not cover as many cases as we
    thought it did. While the issue worked in the case of hole-punching
    (writing zeroes to a large part of a file), it did not deal with
    truncation, and then writing beyond the new end of the file.
    
    The problem is that dbuf_findbp will return ENOENT if the block it's
    trying to find is beyond the end of the file. If that happens, we assume
    there is no birth time, and so we lose that information when we write
    out new blkptrs. We should teach dbuf_findbp to look for things that are
    beyond the current end, but not beyond the absolute end of the file.
    
    Authored by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Matthew Ahrens mahrens@delphix.com
    Reviewed by: George Wilson george.wilson@delphix.com
    Ported-by: kernelOfTruth <kerneloftruth@gmail.com>
    Signed-off-by: Boris Protopopov <boris.protopopov@actifio.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/7176
    OpenZFS-commit: https://github.com/openzfs/openzfs/pull/173/commits/8b9f3ad
    Upstream-bugs: DLPX-46009
    
    Porting notes:
    - Fix ISO C90 mixed declaration error in dbuf.c ( int nlevels, epbs; ) ;
      keep previous position of the initialization

[33mcommit 8658115c19f84b30d68402c32a33a2157c97e4f1[m
Author: Nikolay Borisov <n.borisov.lkml@gmail.com>
Date:   Tue Aug 16 23:00:16 2016 +0300

    Fix do_link portion of ctime test
    
    From the man page of dirname: " Both dirname() and basename()
    may modify the contents of path, so it may be desirable to pass
    a copy when calling one of these functions." And in fact on linux
    using dirname actually changes the contents of the passed parameter as
    evident from the following failure when running the ctime test:
    
    link(/root/zfs-mount, /root/zfs-mount/link_file)
    
    Fix this by creating a copy of the input parameter and passing that
    to dirname, thus not compromising the original parameter, allowing
    the creation of hard link to succeed.
    
    Signed-off-by: Nikolay Borisov <n.borisov.lkml@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4977

[33mcommit d9eea113f8b8988a8ec4f9c73b717c7311322348[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Jul 20 22:50:26 2016 -0700

    It is not necessary to zero struct dbuf_hold_impl_data
    
    Under a workload which makes heavy use of `dbuf_hold()`, I noticed that a
    considerable amount of time was spent in `dbuf_hold_impl()`, due to its call to
    `kmem_zalloc(sizeof (struct dbuf_hold_impl_data) * DBUF_HOLD_IMPL_MAX_DEPTH)`,
    which is around 2KiB.  This structure is used as a stack, to limit the size of
    the C stack as dbuf_hold() calls itself recursively.  We make a recursive call
    to hold the parent's dbuf when the requested dbuf is not found.  The vast
    majority of the time, the parent or grandparent indirect dbuf is cached, so the
    number of recursive calls is very low.  However, we initialize this entire
    array for every call to dbuf_hold().
    
    To improve performance, this commit changes `dbuf_hold()` to use `kmem_alloc()`
    instead of `kmem_zalloc()`.  __dbuf_hold_impl_init is changed to initialize all
    members of the struct before they are used.  I observed ~5% performance
    improvement on a workload which creates many files.
    
    Signed-off-by: Matthew Ahrens <mahrens@delphix.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4974

[33mcommit f0c26069bdf4ec675c840f0932fcfe7d4036d06f[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Thu Aug 4 16:23:35 2016 +0200

    zdb: fencepost error at zdb_cb.zcb_embedded_histogram[][]
    
    Erroneous access detected by gcc UndefinedBehaviorSanitizer:
    `zdb.c:2424:7: runtime error: index 112 out of bounds for type 'uint64_t [112]'`
    
    Fix: increase histogram size by 1 to accommodate all possible sizes.
    
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4934
    Issue #4883

[33mcommit fc897b24b2efafccb5c9e915b81dc5f797673e72[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Tue Jul 12 17:50:54 2016 +0200

    Rework of fletcher_4 module
    
    - Benchmark memory block is increased to 128kiB to reflect real block sizes more
    accurately. Measurements include all three stages needed for checksum generation,
    i.e. `init()/compute()/fini()`. The inner loop is repeated multiple times to offset
    overhead of time function.
    
    - Fastest implementation selects native and byteswap methods independently in
    benchmark. To support this new function pointers `init_byteswap()/fini_byteswap()`
    are introduced.
    
    - Implementation mutex lock is replaced by atomic variable.
    
    - To save time, benchmark is not executed in userspace. Instead, highest supported
    implementation is used for fastest. Default userspace selector is still 'cycle'.
    
    - `fletcher_4_native/byteswap()` methods use incremental methods to finish
    calculation if data size is not multiple of vector stride (currently 64B).
    
    - Added `fletcher_4_native_varsize()` special purpose method for use when buffer size
    is not known in advance. The method does not enforce 4B alignment on buffer size, and
    will ignore last (size % 4) bytes of the data buffer.
    
    - Benchmark `kstat` is changed to match the one of vdev_raidz. It now shows
    throughput for all supported implementations (in B/s), native and byteswap,
    as well as the code [fastest] is running.
    
    Example of `fletcher_4_bench` running on `Intel(R) Xeon(R) CPU E5-2660 v3 @ 2.60GHz`:
    implementation   native         byteswap
    scalar           4768120823     3426105750
    sse2             7947841777     4318964249
    ssse3            7951922722     6112191941
    avx2             13269714358    11043200912
    fastest          avx2           avx2
    
    Example of `fletcher_4_bench` running on `Intel(R) Xeon Phi(TM) CPU 7210 @ 1.30GHz`:
    implementation   native         byteswap
    scalar           1291115967     1031555336
    sse2             2539571138     1280970926
    ssse3            2537778746     1080016762
    avx2             4950749767     1078493449
    avx512f          9581379998     4010029046
    fastest          avx512f        avx512f
    
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4952

[33mcommit 70b258fc962fd40673b9a47574cb83d8438e7d94[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Wed Jul 6 13:42:04 2016 +0200

    Fletcher4 implementation using avx512f instruction set
    
    Algorithm runs 8 parallel sums, consuming 8x uint32_t elements per
    loop iteration. Size alignment of main fletcher4 methods is adjusted
    accordingly. New implementation is called 'avx512f'.
    
    Note: byteswap method can be implemented more efficiently when avx512bw hardware
    becomes available. Currently, it is ~ 2x slower than native method.
    
    Table shows result of full (native) fletcher4 calculation for different buffer size:
    
    fletcher4   4KB     16KB    64KB    128KB   256KB   1MB     16MB
    --------------------------------------------------------------------
    [scalar]    1213    1228    1231    1231    1225    1200    1160
    [sse2]      2374    2442    2459    2456    2462    2250    2220
    [avx2]      4288    4753    4871    4893    4900    4050    3882
    [avx512f]   5975    8445    9196    9221    9262    6307    5620
    
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4952

[33mcommit 32ffaa3de58981814342fe6d3556c03d41d121f8[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Fri Jul 1 18:33:04 2016 +0200

    Add support for AVX-512 family of instruction sets
    
    This patch adds compiler and runtime tests (user and kernel) for following
    instruction sets: avx512f, avx512cd, avx512er, avx512pf, avx512bw, avx512dq,
    avx512vl, avx512ifma, avx512vbmi.
    
    note: Linux support for AVX-512F (Foundation) instruction set started with
    linux v3.15
    
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4952

[33mcommit 6d836e6f8b358270d55a57ad8e8868c957f15bf3[m
Author: Rich Ercolani <rincebrain@gmail.com>
Date:   Fri Jul 8 16:51:50 2016 -0400

    Add tunable to ignore hole_birth
    
    Adds a module option which disables the hole_birth optimization
    which has been responsible for several recent bugs, including
    issue #4050.
    
    Original-patch: https://gist.github.com/pcd1193182/2c0cd47211f3aee623958b4698836c48
    Signed-off-by: Rich Ercolani <rincebrain@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4833

[33mcommit e35c5a8265e791d5856ef24e567cde5879844dc5[m
Author: GeLiXin <ge.lixin@zte.com.cn>
Date:   Tue Aug 9 17:49:51 2016 +0800

    Fix incorrect pool state after import
    
    Import a raidz pool which has a vdev with a bad label, zpool status
    shows the right state of the dev, but the wrong state of the pool.
    The pool state should be DEGRADED, not ONLINE.
    
    We examine the label in vdev_validate while in spa_load_impl, the bad
    label can be detected but doesn't propagate its state to the parent.
    There are other chances to propagate state in the following vdev_load
    if we failed to load DTL, but our pool is raidz1 which can tolerate a
    faulted disk.  So we lost the last chance to correct the pool state.
    
    Propagate the leaf vdev's state to parent if its label was corrupted,
    as is done elsewhere in vdev_validate.
    
    Signed-off-by: GeLiXin <ge.lixin@zte.com.cn>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Don Brady <don.brady@intel.com>
    Closes #4948

[33mcommit fb390aafc8338c62115e611dbe1917bbe7435eef[m
Author: Hans Rosenfeld <hans.rosenfeld@nexenta.com>
Date:   Wed Jul 27 15:29:15 2016 -0700

    OpenZFS 5997 - FRU field not set during pool creation and never updated
    
    Authored by: Hans Rosenfeld <hans.rosenfeld@nexenta.com>
    Reviewed by: Dan Fields <dan.fields@nexenta.com>
    Reviewed by: Josef Sipek <josef.sipek@nexenta.com>
    Reviewed by: Richard Elling <richard.elling@gmail.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Signed-off-by: Don Brady <don.brady@intel.com>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/5997
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/1437283
    
    Porting Notes:
    
    In addition to the OpenZFS changes this patch realigns the events
    with those found in OpenZFS.
    
    Events which would be logged as sysevents on illumos have been
    been mapped to the 'sysevent' class for Linux.  In addition, several
    subclass names have been changed to match what is used in OpenZFS.
    In all cases this means a '.' was changed to an '_' in the subclass.
    
    The scripts provided by ZoL have been updated, however users which
    provide scripts for any of the following events will need to rename
    them based on the new subclass names.
    
      ereport.fs.zfs.config.sync         sysevent.fs.zfs.config_sync
      ereport.fs.zfs.zpool.destroy       sysevent.fs.zfs.pool_destroy
      ereport.fs.zfs.zpool.reguid        sysevent.fs.zfs.pool_reguid
      ereport.fs.zfs.vdev.remove         sysevent.fs.zfs.vdev_remove
      ereport.fs.zfs.vdev.clear          sysevent.fs.zfs.vdev_clear
      ereport.fs.zfs.vdev.check          sysevent.fs.zfs.vdev_check
      ereport.fs.zfs.vdev.spare          sysevent.fs.zfs.vdev_spare
      ereport.fs.zfs.vdev.autoexpand     sysevent.fs.zfs.vdev_autoexpand
      ereport.fs.zfs.resilver.start      sysevent.fs.zfs.resilver_start
      ereport.fs.zfs.resilver.finish     sysevent.fs.zfs.resilver_finish
      ereport.fs.zfs.scrub.start         sysevent.fs.zfs.scrub_start
      ereport.fs.zfs.scrub.finish        sysevent.fs.zfs.scrub_finish
      ereport.fs.zfs.bootfs.vdev.attach  sysevent.fs.zfs.bootfs_vdev_attach

[33mcommit 834f1e426caf4e752d2411be6f1c6138f479c96d[m
Author: luozhengzheng <luo.zhengzheng@zte.com.cn>
Date:   Fri Aug 12 17:41:28 2016 +0800

    Fix a typo in ZIL write handling comment
    
    The following comment in zil.h
    
     * WR_COPIED:
     *    If we know we'll immediately be committing the
     *    transaction (FSYNC or FDSYNC), then we allocate a larger
     *    log record here for the data and copy the data in.
    
    The word "the" should be "then".
    
    Signed-off-by: luozhengzheng <luo.zhengzheng@zte.com.cn>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4961

[33mcommit a3600a106deead9ef33466ab95a87cb64e7b995b[m
Author: Jason Zaman <jason@perfinion.com>
Date:   Thu Aug 11 23:59:03 2016 +0800

    icp: mark asm files with noexec stack
    
    If there is no explicit note in the .S files, the obj file will mark it
    as requiring an executable stack. This is unneeded and causes issues on
    hardened systems.
    
    More info:
    https://wiki.gentoo.org/wiki/Hardened/GNU_stack_quickstart
    
    Signed-off-by: Jason Zaman <jason@perfinion.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4947
    Closes #4962

[33mcommit a9947ce77175234fa4e26afc663a75041b37f8f0[m
Author: Jason Zaman <jason@perfinion.com>
Date:   Wed Aug 10 00:56:56 2016 +0800

    icp: add no_const for PaX Compat
    
    The constify plugin will automatically constify a class of types that contain
    only function pointers. The icp structs fail to build if this is enabled with
    the following error. The no_const attribute makes the plugin skip those
    structs.
    
    module/icp/spi/kcf_spi.c: In function ‘copy_ops_vector_v1’:
    module/icp/spi/kcf_spi.c:61:16: error: assignment of read-only location ‘*dst_ops->cou.cou_v1.co_control_ops’
      *((dst)->ops) = *((src)->ops);
                    ^
    module/icp/spi/kcf_spi.c:74:2: note: in expansion of macro ‘KCF_SPI_COPY_OPS’
      KCF_SPI_COPY_OPS(src_ops, dst_ops, co_control_ops);
      ^
    
    Signed-off-by: Jason Zaman <jason@perfinion.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4947
    Closes #4962

[33mcommit 6eb73b00466b4d72c9e0f0df8e000ef68b757c99[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 11 14:58:13 2016 -0700

    Reorder HAVE_BIO_RW_* checks
    
    The HAVE_BIO_RW_* #ifdef's must appear before REQ_* #ifdef's
    in the bio_is_flush() and bio_is_discard() macros.  Linux 2.6.32
    era kernels defined both of values and the HAVE_BIO_RW_* must be
    used in this case.  This resulted in a panic in zconfig test 5.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #4951
    Closes #4959

[33mcommit 169ab07cc8b7417c4a93b4496ef4a11e049b5cdc[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Jan 13 10:45:08 2016 -0800

    OpenZFS 7263 - deeply nested nvlist can overflow stack
    
    nvlist_pack() and nvlist_unpack are implemented recursively, which can
    cause the stack to overflow with a deeply nested nvlist; i.e. an nvlist
    which contains an nvlist, which contains an nvlist, which...
    
    Unprivileged users can pass an nvlist to the kernel via certain ioctls
    on /dev/zfs, which the kernel will unpack without additional permission
    checking or validation. Therefore, an unprivileged user can cause the
    kernel's stack to overflow and panic.
    
    Ideally, these functions would be implemented non-recursively. As a
    quick fix, this patch limits the depth of the recursion and returns an
    error when attempting to pack and unpack a deeply-nested nvlist.
    
    Signed-off-by: Adam Leventhal <ahl@delphix.com>
    Signed-off-by: George Wilson <george.wilson@delphix.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Prakash Surya <prakash.surya@delphix.com>
    
    OpenZFS-issue: https://www.illumos.org/issues/7263
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/0511d6d
    
    -

[33mcommit b320dd91a9262633200c9570442659989a677f0c[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Wed Aug 10 16:28:58 2016 -0700

    Fix infinite loop when zdb -R with d flag
    
    Also print decompress progress to stderr so it wouldn't pollute raw output
    with r flag.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4956

[33mcommit d9c97ec08b995f1a36657accc4bbc6057645a72c[m
Author: Chen Haiquan <oc@yunify.com>
Date:   Thu Aug 4 23:57:35 2016 +0800

    Use file_dentry and file_inode wrappers
    
    Fix bugs due to kernel change in torvalds/linux@4bacc9c9234c ("overlayfs:
    Make f_path always point to the overlay and f_inode to the underlay").
    
    This problem crashes system when use zfs as a layer of overlayfs.
    
    Signed-off-by: Chen Haiquan <oc@yunify.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4914
    Closes #4935

[33mcommit d5884c3453c5de5892eaae672c5186ed02846113[m
Author: GeLiXin <ge.lixin@zte.com.cn>
Date:   Mon Aug 8 16:00:08 2016 +0800

    Fix indefinite article
    
    The indefinite article before nvlist should be "an", not "a".
    
    We have 27 "an nvlist" and 7 "a nvlist" in our comment, they should
    stay the same as we are such a strict filesystem.
    
    Signed-off-by: GeLiXin <ge.lixin@zte.com.cn>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4941

[33mcommit e5fe9ddeec55e3f7f8348330b3d414244f2d0670[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Aug 9 11:53:48 2016 -0700

    Remove custom root pool import code
    
    Non-Linux OpenZFS implementations require additional support to be
    used a root pool.  This code should simply be removed to avoid
    confusion and improve readability.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #4951

[33mcommit cf41432c70c2df282f0f4ed7647154f3f4972d34[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Aug 9 11:22:30 2016 -0700

    Linux 4.8 compat: Fix removal of bio->bi_rw member
    
    All users of bio->bi_rw have been replaced with compatibility wrappers.
    This allows the kernel specific logic to be abstracted away, and for
    each of the supported cases to be documented with the wrapper.  The
    updated interfaces are as follows:
    
    * void blk_queue_set_write_cache(struct request_queue *, bool, bool)
    * boolean_t bio_is_flush(struct bio *)
    * boolean_t bio_is_fua(struct bio *)
    * boolean_t bio_is_discard(struct bio *)
    * boolean_t bio_is_secure_erase(struct bio *)
    * VDEV_WRITE_FLUSH_FUA
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #4951

[33mcommit 689f093ebcfa0d57895495050d2b470ed2bef52e[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Tue Jul 26 21:08:51 2016 +0200

    Build user-space with different gcc optimization levels
    
    This fix resolves warnings reported during compiling of user-space
    libraries with different gcc optimization levels.
    
    Tested with gcc versions: 4.9.2 (Debian), and 6.1.1 (Fedora).
    The patch enables use of following opt levels: O0, O1, O2, O3, Og, Os, Ofast.
    
    List of warnings:
    
    [GCC 4.9.2 -Os]
    libzfs_sendrecv.c:3726:26: error: 'clp' may be used uninitialized in this function [-Werror=maybe-uninitialized]
    
    [GCC 4.9.2 -Og]
    fs_fletcher.c:323:26: error: 'idx' may be used uninitialized in this function [-Werror=maybe-uninitialized]
    dsl_dataset.c:1290:12: error: 'atp' may be used uninitialized in this function [-Werror=maybe-uninitialized]
    
    [GCC 4.9.2 -Ofast]
    u8_textprep.c:1310:9: error: 'tc[3ul]' may be used uninitialized in this function [-Werror=maybe-uninitialized]
    u8_textprep.c:177:23: error: 'u8t[0ul]' may be used uninitialized in this function [-Werror=maybe-uninitialized]
    dsl_dataset.c:2089:37: error: ‘hds’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
    dsl_dataset.c:3216:2: error: ‘ds’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
    dsl_dataset.c:1591:2: error: ‘ds’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
    dsl_dataset.c:3341:2: error: ‘ds’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
    vdev_raidz.c:1153:8: error: 'dcount[2]' may be used uninitialized in this function [-Werror=maybe-uninitialized]
    vdev_raidz.c:1167:17: error: 'dst[2]' may be used uninitialized in this function [-Werror=maybe-uninitialized]
    kernel.c:1005:2: error: ‘resid’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
    libzfs_dataset.c:2826:8: error: ‘val’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
    libzfs_dataset.c:3056:35: error: ‘val’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
    libzfs_dataset.c:1584:13: error: ‘val’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
    libzfs_dataset.c:3056:35: error: ‘val’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
    libzfs_dataset.c:1792:66: error: ‘val’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
    libzfs_dataset.c:3986:35: error: ‘val’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
    
    [GCC 6.1.1]
    Resolved in PR #4907
    
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4937

[33mcommit afb6c031e87d511abd9f0f4ec629ab1972490269[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Mon Aug 8 17:26:21 2016 -0700

    Linux 4.7 compat: fix zpl_get_acl returns invalid acl pointer
    
    Starting from Linux 4.7, get_acl will set acl cache pointer to temporary
    sentinel value before calling i_op->get_acl. Therefore we can't compare
    against ACL_NOT_CACHED and return.
    
    Since from Linux 3.14, get_acl already check the cache for us, so we
    disable this in zpl_get_acl.
    
    Linux 4.7 also does set_cached_acl for us so we disable it in zpl_get_acl.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Nikolay Borisov <n.borisov.lkml@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4944
    Closes #4946

[33mcommit 88c4c7a0671afef9016446e0132ba86622929092[m
Author: GeLiXin <ge.lixin@zte.com.cn>
Date:   Tue Aug 2 10:58:42 2016 +0800

    Fix call zfs_get_name() with invalid parameter
    
    zfs_get_name() expects a parameter of type zfs_handle_t *zhp , but
    gets an invalid parameter type of zfs_handle_t **zhp actually in
    libzfs_dataset_cmp(), which may trigger a coredump if called.
    
    libzfs_dataset_cmp() working normally so far, just because all the
    callers only give datasets of type ZFS_TYPE_FILESYSTEM to it, we
    compared their mountpoint and return, luckily.
    
    Signed-off-by: GeLiXin <ge.lixin@zte.com.cn>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4919

[33mcommit 4b908d32200b6e5c7b5115322b6c8d25e770daa0[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Aug 2 11:11:45 2016 -0700

    Linux 4.8 compat: posix_acl_valid()
    
    The posix_acl_valid() function has been updated to require a
    user namespace.  Filesystem callers should normally provide the
    user_ns from the super block associcated with the ACL; the
    zpl_posix_acl_valid() wrapper has been added for this purpose.
    See https://github.com/torvalds/linux/commit/0d4d717f for
    complete details.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Nikolay Borisov <n.borisov.lkml@gmail.com>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #4922

[33mcommit e85a6396b0f7f3cb5a76cf88e47fc1334f9162b7[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Aug 2 10:50:52 2016 -0700

    Retire HAVE_CURRENT_UMASK and HAVE_POSIX_ACL_CACHING
    
    Remove ZFS_AC_KERNEL_CURRENT_UMASK and ZFS_AC_KERNEL_POSIX_ACL_CACHING
    configure checks, all supported kernel provide this functionality.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Nikolay Borisov <n.borisov.lkml@gmail.com>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #4922

[33mcommit 64aefee1b847b747147016c039f5b0e276a9e1b7[m
Author: Nikolay Borisov <n.borisov.lkml@gmail.com>
Date:   Thu Aug 4 00:31:08 2016 +0300

    Fix interaction between userns uid/gid and SA
    
    * When the uid/gid change is handled in zfs_setattr we want to
    actually adjust the user passed uid to a KUID and write that to disk.
    
    * In trace points use the i_uid member without doing translation,
    since it has already been performed.
    
    * Use kuid in zfs_aclset_common
    
    Signed-off-by: Nikolay Borisov <n.borisov.lkml@gmail.com>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4928

[33mcommit 938cfeb0f27303721081223816d4f251ffeb1767[m
Author: Nikolay Borisov <n.borisov.lkml@gmail.com>
Date:   Wed Aug 3 20:19:04 2016 +0300

    Linux 4.8 compat: new s_user_ns member of struct super_block
    
    Kernel 4.8 paved the way to enabling mounting a file system inside a
    non-init user namespace. To facilitate this a s_user_ns member was
    added holding the userns in which the filesystem's instance was
    mounted. This enables doing the uid/gid translation relative to
    this particular username space and not the default init_user_ns.
    
    Signed-off-by: Nikolay Borisov <n.borisov.lkml@gmail.com>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4928

[33mcommit cf2731e65b2015988b2cae7970886279e11b013f[m
Author: Gaurav Kumar <gaurav.kumar@nutanix.com>
Date:   Wed Jul 27 14:27:31 2016 -0700

    arc_meta_limit should be updated when arc_max is changed.
    
    When arc_max is increased, arc_meta_limit will not be updated to 3/4
    of the new arc_c_max value.  This was done originally to preserve any
    existing maximum value.  This turned out to be counter intuitive to
    users and this fix changes that behavior.  If zfs_arc_meta_limit is
    non-default, it will be picked up later in the ARC tuning function.
    
    Signed-off-by: Gaurav Kumar <gaurav.kumar@nutanix.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4893

[33mcommit f3c9cac14355ba45b4ceced4df32c18bfc2518ed[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Aug 1 17:42:04 2016 +0000

    Fix gcc -Warray-bounds check for dump_object() in zdb
    
    As of gcc 6.1.1 20160621 (Red Hat 6.1.1-3) an array bounds warnings
    is detected in the zdb the dump_object() function.  The analysis is
    correct but difficult to interpret because this is implemented as a
    macro.  Rework the ZDB_OT_NAME in to a function and remove the case
    detected by gcc which is a side effect of the DMU_OT_IS_VALID() macro.
    
      zdb.c: In function ‘dump_object’:
      zdb.c:1931:288: error: array subscript is outside array bounds
          [-Werror=array-bounds]
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Closes #4907

[33mcommit efe7978d89f84f08afd9a3bf84a293773b66632d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jul 29 17:10:11 2016 -0700

    Fix gcc self-comparison warning
    
    As of gcc 6.1.1 20160621 (Red Hat 6.1.1-3) a self-comparison is
    detected by gcc in metaslab_alloc().  Resolve the warning by passing
    a physical size of 0 to BP_SET_BIRTH() as it done by other callers.
    
      module/zfs/metaslab.c: In function ‘metaslab_alloc’:
      module/zfs/metaslab.c:2575:184: error: self-comparison always evaluates
          to true [-Werror=tautological-compare]
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Issue #4907

[33mcommit 5b1bc1a1d8ae284f834f239ab0309c6ce96ab74f[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Fri Jul 29 16:35:33 2016 -0700

    Set proper dependency for string replacement targets
    
    A lot of string replacement target don't have dependency or incorrect
    dependency. We setup proper dependency by pattern rules.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4908

[33mcommit b64e02e5805e84dcaa4b0820b555b9f90aa5afea[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Aug 1 18:00:47 2016 +0000

    Add `make lint` target
    
    Add a `make lint` target which maps to a cppcheck target.  As with
    the shellcheck target it will only run when cppcheck is installed.
    This allows a `make lint` build check to be incrementally added to
    the automated testing for distribution which provide cppcheck.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4915

[33mcommit 4eb0db42d30b2ea8bed018f2227ebafd3ce35c9c[m
Author: Tony Hutter <hutter2@llnl.gov>
Date:   Mon Aug 1 17:32:18 2016 -0700

    Fix possible VDEV stats array overflow
    
    Fix a possible VDEV statistics array overflow when ZIOs with
    ZIO_PRIORITY_NOW complete.
    
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4883
    Closes #4917

[33mcommit e24e62a948e1519fb4c1bfc40d9d51e36fbbe63e[m
Author: liaoyuxiangqin <guo.yong33@zte.com.cn>
Date:   Sat Jul 30 11:03:01 2016 +0800

    Fix memory leak in function add_config()
    
    Config of a hot spare or l2cache device will leak memory in function
    add_config().  At the start of this function, when dealing with a
    config which belongs to a hot spare not currently in use or a l2cache
    device the config should be freed.
    
    Signed-off-by: liaoyuxiangqin <guo.yong33@zte.com.cn>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4910

[33mcommit df053d67a9c07a9763a4c04468083644eb9aa234[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Thu Jul 28 22:10:05 2016 +0200

    ztest: memory leaks reported by AddressSanitizer
    
    Leaks reported by using AddressSanitizer, GCC 6.1.0
    
    Direct leak of 4097 byte(s) in 1 object(s) allocated from:
        #1 0x414f73 in process_options cmd/ztest/ztest.c:721
    
    Direct leak of 5440 byte(s) in 17 object(s) allocated from:
        #1 0x41bfd5 in umem_alloc ../../lib/libspl/include/umem.h:88
        #2 0x41bfd5 in ztest_zap_parallel cmd/ztest/ztest.c:4659
        #3 0x4163a8 in ztest_execute cmd/ztest/ztest.c:5907
    
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4896

[33mcommit 78867a0a0a47eafbf4d02ddb12a84ef86cd7a07a[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Thu Jul 28 22:27:56 2016 +0200

    libzfs_import.c: Uninitialized pointer read
    
    In zpool_find_import_scan: Reads an uninitialized pointer or
    its target Coverity #150966
    
    Found by static analysis with CoverityScan 0.8.5
    
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4897

[33mcommit b264d9b3e5b2b5b8eaeef7b34eb7b1b6caf4e4fb[m
Author: Colin Ian King <colin.king@canonical.com>
Date:   Fri Jul 29 12:40:30 2016 +0100

    libzfs: Fix missing va_end call on ENOSPC and EDQUOT cases
    
    The switch statement in function zfs_standard_error_fmt for the
    ENOSPC and EDQUOT cases returns immediately and unlike all other
    cases in the switch this does not perform the va_end call.
    
    Perform a break which ends up calling va_end rather than returning
    immediately.
    
    Found by static analysis with CoverityScan 0.8.5
    
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4900

[33mcommit ba2fe6affb98543d8c3786fb47e49653391a3405[m
Author: Nikolay Borisov <n.borisov.lkml@gmail.com>
Date:   Fri Jul 29 20:02:59 2016 +0300

    Move assignment of i_blkbits field
    
    Currently i_blkbits is always set to SPA_MINBLOCKSHIFT every time
    zfs_inode_update_impl is called. Since this value never changes
    move its assignment to at inode creation time.
    
    Signed-off-by: Nikolay Borisov <n.borisov.lkml@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4906

[33mcommit e334e828a6d8bbcff51b61acb0f7b4d238a28089[m
Author: Nikolay Borisov <n.borisov.lkml@gmail.com>
Date:   Fri Jul 29 19:43:23 2016 +0300

    Unify license of icp module with the rest of zfs
    
    The newly added icp module uses a hardcoded value of CDDL for the license,
    however in local development one might want to change that to something
    else in order to facilitate compiling against lock debugging enabled kernel.
    All modules of the zfs use the ZFS_META_LICNSE string which is replaced with
    the value held in the META file. One can modify the value in the META file
    once and then rerun the configure to have all modules' licenses changed.
    
    Change the icp module license string to be ZFS_META_LICENSE so that it
    falls under the same paradigm.
    
    Signed-off-by: Nikolay Borisov <n.borisov.lkml@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4905

[33mcommit 9f3d1407dcfa7a8548b17d36ef501dd72a215560[m
Author: heary-cao <cao.xuewen@zte.com.cn>
Date:   Wed Jul 27 14:58:17 2016 +0800

    Fix zfs_allow_log_destroy() NULL dereference
    
    In zfs_ioc_log_history() function the tsd_set() function is called
    with NULL which causes the zfs_allow_log_destroy() to be run.  In
    this case the passed value will be NULL.  This is normally entirely
    safe because strfree() maps directly to kfree() which may be passed
    a NULL.  However, since alternate implementations of strfree() may
    not handle this gracefully add a check for NULL.
    
    Observed under an embedded Linux 2.6.32.41 kernel running the
    automated testing while running the ZFS Test Suite.
    
    Signed-off-by: caoxuewen <cao.xuewen@zte.com.cn>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4872

[33mcommit 3b86aeb2952c91aeb8ed0ebf9d5e43119fa537a0[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Wed Jul 27 17:55:32 2016 +0000

    Linux 4.8 compat: REQ_OP and bio_set_op_attrs()
    
    New REQ_OP_* definitions have been introduced to separate the
    WRITE, READ, and DISCARD operations from the flags.  This included
    changing the encoding of bi_rw.  It places REQ_OP_* in high order
    bits and other stuff in low order bits.  This encoding is done
    through the new helper function bio_set_op_attrs.  For complete
    details refer to:
    
    https://github.com/torvalds/linux/commit/f215082
    https://github.com/torvalds/linux/commit/4e1b2d5
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4892
    Closes #4899

[33mcommit 76e5f6fe10ab8c9c8ae13e4c33ecb68f3d0ce5dc[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jul 27 18:06:17 2016 +0000

    Linux 4.8 compat: REQ_PREFLUSH
    
    The REQ_FLUSH flag was renamed REQ_PREFLUSH to avoid confusion with
    REQ_OP_FLUSH.  See https://github.com/torvalds/linux/commit/28a8f0d3
    for complete details.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4892
    Issue #4899

[33mcommit bbb1b6cea75ff8ff27742ce778664ddeec371a01[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jul 27 02:23:53 2016 +0000

    Linux 4.8 compat: submit_bio()
    
    The rw argument has been removed from submit_bio/submit_bio_wait.
    Callers are now expected to set bio->bi_rw instead of passing it
    in.  See https://github.com/torvalds/linux/commit/4e49ea4a for
    complete details.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4892
    Issue #4899

[33mcommit f26b4b3c8a0db1b215caeeb80868381bc324d449[m
Author: Richard Yao <richard.yao@clusterhq.com>
Date:   Wed Feb 17 16:16:25 2016 -0500

    txg visibility code should not execute under tc_open_lock
    
    The memory allocation and locking in `spa_txg_history_*()` can
    potentially block txg_hold_open for arbitrarily long periods of time.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4333

[33mcommit fcf64f45d9bf4270f6c6bfe9df6ef253a7bfc766[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jun 29 13:59:51 2016 -0700

    Fix zdb crash with 4K-only devices
    
    Here's the problem - on 4K native devices in userland on
    Linux using O_DIRECT, buffers must be 4K aligned or I/O
    will fail with EINVAL, causing zdb (and others) to coredump.
    Since userland probably doesn't need optimized buffer caches,
    we just force 4K alignment on everything.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Closes #4479

[33mcommit a0cacb760a0d9de2be3f2f569cb0febd77d7064a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jul 26 11:15:46 2016 -0700

    Enable history test cases
    
    Updated test case history_001_pos.ksh so it can run in tree.  The
    original test case assumed /usr/sbin/zfs and /usr/sbin/zpool were
    the only valid locations for these utilities.  The same modification
    has already been made too history_common.kshlib.
    
    The only other failing test case was history_010_pos and that was
    the result of the ":linux" suffix not being appended when checking
    the long output in the test case.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4882

[33mcommit bf18fd89f983e86e070cdda2c6ac6d9db4f48cc2[m
Author: Colin Ian King <colin.king@canonical.com>
Date:   Wed Jul 27 09:26:38 2016 +0100

    void integer overflow on computation of refquota_slack
    
    DMU_MAX_ACCESS should be cast to a uint64_t otherwise the
    multiplication of DMU_MAX_ACCESS with spa_asize_inflation will
    be 32 bit and may lead to an overflow. Currently DMU_MAX_ACCESS
    is 64 * 1024 * 1024, so spa_asize_inflation being 64 or more will
    lead to an overflow.
    
    Found by static analysis with CoverityScan 0.8.5
    
    CID 150942 (#1 of 1): Unintentional integer overflow
      (OVERFLOW_BEFORE_WIDEN)
    overflow_before_widen: Potentially overflowing expression
      67108864 * spa_asize_inflation with type int (32 bits, signed)
      is evaluated using 32-bit arithmetic, and then used in a context
      that expects an expression of type uint64_t (64 bits, unsigned).
    
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4889

[33mcommit 8a39abaafad51861daf197b0e9809dfcf77fd3cf[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jun 23 15:25:17 2016 -0700

    Multi-thread 'zpool import' for blkid
    
    Commit 519129f added support to multi-thread 'zpool import' for
    the case where block devices are scanned for under /dev/.  This
    commit generalizes that logic and applies it to the case where
    device names are acquired from libblkid.
    
    The zpool_find_import_scan() and zpool_find_import_blkid()
    functions create an AVL tree containing each device name.  Each
    entry in this tree is dispatched to a taskq where the function
    zpool_open_func() validates the device by opening it and reading
    the label.  This may result in additional entries being added
    to the tree and those device paths being verified.
    
    This is largely how the upstream OpenZFS code behaves but due to
    significant differences the non-Linux code has been dropped for
    readability.  Additionally, this code makes use of taskqs and
    kmutexs which are normally not available to the command line tools.
    Special care has been taken to allow their use in the import
    functions.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>
    Closes #4794

[33mcommit a64f903b06e9135c07f20bc6f8196e2879d2cf57[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Tue Jul 19 18:24:24 2016 +0200

    Fixes for issues found with cppcheck tool
    
    The patch fixes small number of errors/false positives reported by `cppcheck`,
    static analysis tool for C/C++.
    
    cppcheck 1.72
    
    $ cppcheck . --force --quiet
    [cmd/zfs/zfs_main.c:4444]: (error) Possible null pointer dereference: who_perm
    [cmd/zfs/zfs_main.c:4445]: (error) Possible null pointer dereference: who_perm
    [cmd/zfs/zfs_main.c:4446]: (error) Possible null pointer dereference: who_perm
    [cmd/zpool/zpool_iter.c:317]: (error) Uninitialized variable: nvroot
    [cmd/zpool/zpool_vdev.c:1526]: (error) Memory leak: child
    [lib/libefi/rdwr_efi.c:1118]: (error) Memory leak: efi_label
    [lib/libuutil/uu_misc.c:207]: (error) va_list 'args' was opened but not closed by va_end().
    [lib/libzfs/libzfs_import.c:1554]: (error) Dangerous usage of 'diskname' (strncpy doesn't always null-terminate it).
    [lib/libzfs/libzfs_sendrecv.c:3279]: (error) Dereferencing 'cp' after it is deallocated / released
    [tests/zfs-tests/cmd/file_write/file_write.c:154]: (error) Possible null pointer dereference: operation
    [tests/zfs-tests/cmd/randfree_file/randfree_file.c:90]: (error) Memory leak: buf
    [cmd/zinject/zinject.c:1068]: (error) Uninitialized variable: dataset
    [module/icp/io/sha2_mod.c:698]: (error) Uninitialized variable: blocks_per_int64
    
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1392

[33mcommit 25458cbef9e59ef9ee6a7e729ab2522ed308f88f[m
Author: Tim Chase <tim@chase2k.com>
Date:   Wed Jul 13 07:42:40 2016 -0500

    Limit the amount of dnode metadata in the ARC
    
    Metadata-intensive workloads can cause the ARC to become permanently
    filled with dnode_t objects as they're pinned by the VFS layer.
    Subsequent data-intensive workloads may only benefit from about
    25% of the potential ARC (arc_c_max - arc_meta_limit).
    
    In order to help track metadata usage more precisely, the other_size
    metadata arcstat has replaced with dbuf_size, dnode_size and bonus_size.
    
    The new zfs_arc_dnode_limit tunable, which defaults to 10% of
    zfs_arc_meta_limit, defines the minimum number of bytes which is desirable
    to be consumed by dnodes.  Attempts to evict non-metadata will trigger
    async prune tasks if the space used by dnodes exceeds this limit.
    
    The new zfs_arc_dnode_reduce_percent tunable specifies the amount by
    which the excess dnode space is attempted to be pruned as a percentage of
    the amount by which zfs_arc_dnode_limit is being exceeded.  By default,
    it tries to unpin 10% of the dnodes.
    
    The problem of dnode metadata pinning was observed with the following
    testing procedure (in this example, zfs_arc_max is set to 4GiB):
    
        - Create a large number of small files until arc_meta_used exceeds
          arc_meta_limit (3GiB with default tuning) and arc_prune
          starts increasing.
    
        - Create a 3GiB file with dd.  Observe arc_mata_used.  It will still
          be around 3GiB.
    
        - Repeatedly read the 3GiB file and observe arc_meta_limit as before.
          It will continue to stay around 3GiB.
    
    With this modification, space for the 3GiB file is gradually made
    available as subsequent demands on the ARC are made.  The previous behavior
    can be restored by setting zfs_arc_dnode_limit to the same value as the
    zfs_arc_meta_limit.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4345
    Issue #4512
    Issue #4773
    Closes #4858

[33mcommit e6603b7c1fc7ac01f8891b11df34d943812153e9[m
Author: Tim Chase <tim@chase2k.com>
Date:   Fri Jul 8 10:33:01 2016 -0500

    Fix sync behavior for disk vdevs
    
    Prior to b39c22b, which was first generally available in the 0.6.5
    release as b39c22b, ZoL never actually submitted synchronous read or write
    requests to the Linux block layer.  This means the vdev_disk_dio_is_sync()
    function had always returned false and, therefore, the completion in
    dio_request_t.dr_comp was never actually used.
    
    In b39c22b, synchronous ZIO operations were translated to synchronous
    BIO requests in vdev_disk_io_start().  The follow-on commits 5592404 and
    aa159af fixed several problems introduced by b39c22b.  In particular,
    5592404 introduced the new flag parameter "wait" to __vdev_disk_physio()
    but under ZoL, since vdev_disk_physio() is never actually used, the wait
    flag was always zero so the new code had no effect other than to cause
    a bug in the use of the dio_request_t.dr_comp which was fixed by aa159af.
    
    The original rationale for introducing synchronous operations in b39c22b
    was to hurry certains requests through the BIO layer which would have
    otherwise been subject to its unplug timer which would increase the
    latency.  This behavior of the unplug timer, however, went away during the
    transition of the plug/unplug system between kernels 2.6.32 and 2.6.39.
    
    To handle the unplug timer behavior on 2.6.32-2.6.35 kernels the
    BIO_RW_UNPLUG flag is used as a hint to suppress the plugging behavior.
    
    For kernels 2.6.36-2.6.38, the REQ_UNPLUG macro will be available and
    ise used for the same purpose.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4858

[33mcommit 273ff9b5ccc438e3099809c43229cc75503cff68[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jul 25 14:15:01 2016 -0700

    Fix uninitialized variable in avl_add()
    
    Silence the following warning when compiling with gcc 5.4.0.
    Specifically gcc (Ubuntu 5.4.0-6ubuntu1~16.04.1) 5.4.0 20160609.
    
    module/avl/avl.c: In function ‘avl_add’:
    module/avl/avl.c:647:2: warning: ‘where’ may be used uninitialized
        in this function [-Wmaybe-uninitialized]
      avl_insert(tree, new_node, where);
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 2c6abf15ff5bcc979653eef0131f90d4f0fede21[m
Author: Nikolay Borisov <n.borisov.lkml@gmail.com>
Date:   Sun May 22 14:15:57 2016 +0300

    Remove znode's z_uid/z_gid member
    
    Remove duplicate z_uid/z_gid member which are also held in the
    generic vfs inode struct. This is done by first removing the members
    from struct znode and then using the KUID_TO_SUID/KGID_TO_SGID
    macros to access the respective member from struct inode. In cases
    where the uid/gids are being marshalled from/to disk, use the newly
    introduced zfs_(uid|gid)_(read|write) functions to properly
    save the uids rather than the internal kernel representation.
    
    Signed-off-by: Nikolay Borisov <n.borisov.lkml@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4685
    Issue #227

[33mcommit 82a1b2d6289f9ceae0bee6f1e71d3bc29a8c5d16[m
Author: Nikolay Borisov <n.borisov.lkml@gmail.com>
Date:   Mon May 30 20:37:36 2016 +0300

    Check whether the kernel supports i_uid/gid_read/write helpers
    
    Since the concept of a kuid and the need to translate from it to
    ordinary integer type was added in kernel version 3.5 implement necessary
    plumbing to be able to detect this condition during compile time. If
    the kernel doesn't support the kuid then just fall back to directly
    accessing the respective struct inode's members
    
    Signed-off-by: Nikolay Borisov <n.borisov.lkml@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4685
    Issue #227

[33mcommit 77943bc1dc39315feb335b0882dd6c91041538a3[m
Author: Tom Caputi <tcaputi@datto.com>
Date:   Fri Jul 22 16:19:29 2016 -0400

    Fix for metaslab_fastwrite_unmark() assert failure
    
    Currently there is an issue where metaslab_fastwrite_unmark() unmarks
    fastwrites on vdev_t's that have never had fastwrites marked on them.
    The 'fastwrite mark' is essentially a count of outstanding bytes that
    will be written to a vdev and is used in syncing context. The problem
    stems from the fact that the vdev_pending_fastwrite field is not being
    transferred over when replacing a top-level vdev. As a result, the
    metaslab is marked for fastwrite on the old vdev and unmarked on the
    new one, which brings the fastwrite count below zero. This fix simply
    assigns vdev_pending_fastwrite from the old vdev to the new one so
    this count is not lost.
    
    Signed-off-by: Tom Caputi <tcaputi@datto.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4267

[33mcommit 20da056688ef9b41ed4c0a9ee9ff4cd36949c3d8[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Sun Jul 24 21:55:48 2016 +0200

    zloop: print backtrace from core files
    
    Find the core file by using `/proc/sys/kernel/core_pattern`
    
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4874

[33mcommit f4bc1bbe11042de49226c69f0334c77af30024b4[m
Author: Tom Caputi <tcaputi@datto.com>
Date:   Wed Jul 20 23:29:51 2016 -0400

    Fix for compilation error when using the kernel's CONFIG_LOCKDEP
    
    Signed-off-by: Tom Caputi <tcaputi@datto.com>
    Signed-off-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4329

[33mcommit 0b04990a5de594659d2cf20458965277dd6efeb1[m
Author: Tom Caputi <tcaputi@datto.com>
Date:   Thu May 12 10:51:24 2016 -0400

    Illumos Crypto Port module added to enable native encryption in zfs
    
    A port of the Illumos Crypto Framework to a Linux kernel module (found
    in module/icp). This is needed to do the actual encryption work. We cannot
    use the Linux kernel's built in crypto api because it is only exported to
    GPL-licensed modules. Having the ICP also means the crypto code can run on
    any of the other kernels under OpenZFS. I ended up porting over most of the
    internals of the framework, which means that porting over other API calls (if
    we need them) should be fairly easy. Specifically, I have ported over the API
    functions related to encryption, digests, macs, and crypto templates. The ICP
    is able to use assembly-accelerated encryption on amd64 machines and AES-NI
    instructions on Intel chips that support it. There are place-holder
    directories for similar assembly optimizations for other architectures
    (although they have not been written).
    
    Signed-off-by: Tom Caputi <tcaputi@datto.com>
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4329

[33mcommit be88e733a634ad0d7f20350e1a17ede51922d3ff[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Tue Jul 19 12:02:33 2016 -0700

    Fix NULL pointer in zfs_preumount from 1d9b3bd
    
    When zfs_domount fails zsb will be freed, and its caller
    mount_nodev/get_sb_nodev will do deactivate_locked_super and calls into
    zfs_preumount.
    
    In order to make sure we don't touch any nonexistent stuff, we must make sure
    s_fs_info is NULL in the fail path so zfs_preumount can easily check that.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4867
    Issue #4854

[33mcommit 26a08b5ca94ffc96add1d2d9dfe7dc78a0945ef2[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Mon Jul 18 15:10:17 2016 +0200

    RAIDZ parity kstat rework
    
    Print table with speed of methods for each implementation.
    Last line describes contents of [fastest] selection.
    
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4860

[33mcommit c9187d867fee3972de48b71762407ae7dabb2563[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Sun Jul 17 19:41:11 2016 +0200

    Fixes and enhancements of SIMD raidz parity
    
    - Implementation lock replaced with atomic variable
    
    - Trailing whitespace is removed from user specified parameter, to enhance
    experience when using commands that add newline, e.g. `echo`
    
    - raidz_test: remove dependency on `getrusage()` and RUSAGE_THREAD, Issue #4813
    
    - silence `cppcheck` in vdev_raidz, partial solution of Issue #1392
    
    - Minor fixes and cleanups
    
    - Enable use of original parity methods in [fastest] configuration.
    New opaque original ops structure, representing native methods, is added
    to supported raidz methods. Original parity methods are executed if selected
    implementation has NULL fn pointer.
    
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4813
    Issue #1392

[33mcommit 1d9b3bd8fb2b633b7523d9f39149d76e24ffb535[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Thu Jul 14 17:31:00 2016 -0700

    Wait iput_async before evict_inodes to prevent race
    
    Wait for iput_async before entering evict_inodes in
    generic_shutdown_super. The reason we must finish before
    evict_inodes is when lazytime is on, or when zfs_purgedir calls
    zfs_zget, iput would bump i_count from 0 to 1. This would race
    with the i_count check in evict_inodes.  This means it could
    destroy the inode while we are still using it.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4854

[33mcommit b756ff2445e932a48b3a8a33ca6a0df630c8fc15[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jul 15 14:30:52 2016 -0700

    Update arc_summary.py for prefetch changes
    
    Commit 7f60329 removed several kstats which arc_summary.py read.
    Remove these kstats from arc_summary.py in the same way this was
    handled in FreeNAS.
    
    FreeNAS-commit: https://github.com/freenas/freenas/commit/3901f73
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4695

[33mcommit 3d11ecbddd535e37eeb751a830fb5a897881d25d[m
Author: Tyler J. Stachecki <stachecki.tyler@gmail.com>
Date:   Mon Jul 18 17:38:55 2016 -0400

    Prevent segfaults in SSE optimized Fletcher-4
    
    In some cases, the compiler was not respecting the GNU aligned
    attribute for stack variables in 35a76a0. This was resulting in
    a segfault on CentOS 6.7 hosts using gcc 4.4.7-17.  This issue
    was fixed in gcc 4.6.
    
    To prevent this from occurring, use unaligned loads and stores
    for all stack and global memory references in the SSE optimized
    Fletcher-4 code.
    
    Disable zimport testing against master where this flaw exists:
    
    TEST_ZIMPORT_VERSIONS="installed"
    
    Signed-off-by: Tyler J. Stachecki <stachecki.tyler@gmail.com>
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4862

[33mcommit 1b87e0f53249a17f2fbb1d5ca725e65add391ace[m
Author: Roman Strashkin <roman.strashkin@nexenta.com>
Date:   Tue Jul 12 20:53:53 2016 +0300

    Fix filesystem destroy with receive_resume_token
    
    It is possible that the given DS may have hidden child (%recv)
    datasets - "leftovers" resulting from the previously interrupted
    'zfs receieve'.  Try to remove the hidden child (%recv) and after
    that try to remove the target dataset.   If the hidden child
    (%recv) does not exist the original error (EEXIST) will be returned.
    
    Signed-off-by: Roman Strashkin <roman.strashkin@nexenta.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4818

[33mcommit 35a76a0366372d89a0f1ac3cebd5bc7646aadec3[m
Author: Tyler J. Stachecki <stachecki.tyler@gmail.com>
Date:   Thu Jun 23 23:32:40 2016 -0400

    Implementation of SSE optimized Fletcher-4
    
    Builds off of 1eeb4562 (Implementation of AVX2 optimized Fletcher-4)
    This commit adds another implementation of the Fletcher-4 algorithm.
    It is automatically selected at module load if it benchmarks higher
    than all other available implementations.
    
    The module benchmark was also amended to analyze the performance of
    the byteswap-ed version of Fletcher-4, as well as the non-byteswaped
    version. The average performance of the two is used to select the
    the fastest implementation available on the host system.
    
    Adds a pair of fields to an existing zcommon module parameter:
    -  zfs_fletcher_4_impl (str)
        "sse2"    - new SSE2 implementation if available
        "ssse3"   - new SSSE3 implementation if available
    
    Signed-off-by: Tyler J. Stachecki <stachecki.tyler@gmail.com>
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4789

[33mcommit dfbc86309fd8ebb70a55cafa876320dc1ea8e833[m
Author: Chris Dunlop <chris@onthe.net.au>
Date:   Fri Jul 15 00:44:38 2016 +1000

    Use native inode->i_nlink instead of znode->z_links
    
    A mostly mechanical change, taking into account i_nlink is 32 bits vs ZFS's
    64 bit on-disk link count.
    
    We revert "xattr dir doesn't get purged during iput" (ddae16a) as this is a
    more Linux-integrated fix for the same issue.
    
    In addition, setting the initial link count on a new node has been changed
    from setting one less than required in zfs_mknode() then incrementing to the
    correct count in zfs_link_create() (which was somewhat bizarre in the first
    place), to setting the correct count in zfs_mknode() and not incrementing it
    in zfs_link_create(). This both means we no longer set the link count in
    sa_bulk_update() twice (once for the initial incorrect count then again for
    the correct count), as well as adhering to the Linux requirement of not
    incrementing a zero link count without I_LINKABLE (see linux commit
    f4e0c30c).
    
    Signed-off-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #4838
    Issue #227

[33mcommit 02de3e3c5d54bd545b34cccfd35ace80edd1f864[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Tue Jul 12 12:23:43 2016 -0700

    Fix dbuf_stats_hash_table_data race
    
    Dropping DBUF_HASH_MUTEX when walking the hash list is unsafe. The dbuf
    can be freed at any time.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4846

[33mcommit 8887c7d778dce8cadee422de97e557a224555bdf[m
Author: Tim Chase <tim@chase2k.com>
Date:   Sun Jul 10 09:09:02 2016 -0500

    Prevent null dereferences when accessing dbuf kstat
    
    In arc_buf_info(), the arc_buf_t may have no header.  If not, don't try
    to fetch the arc buffer stats and instead just zero them.
    
    The null dereferences were observed while accessing the dbuf kstat with
    awk on a system in which millions of small files were being created in
    order to overflow the system's metadata limit.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #4837

[33mcommit 8d9e12451530418778f57315717e35cc5868d98d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jul 14 09:27:33 2016 -0700

    Enable zpool_upgrade test cases
    
    Creating the pool in a striped rather than mirrored configuration
    provides enough space for all upgrade tests to run.  Test case
    zpool_upgrade_007_pos still fails and must be investigated so
    it has been left disabled.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4852

[33mcommit ae25d222354a8074a4db0d85992fc049e2da3089[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Tue Jun 28 19:49:53 2016 +0200

    Add RAID-Z routines for SSE2 instruction set, in x86_64 mode.
    
    The patch covers low-end and older x86 CPUs.  Parity generation is
    equivalent to SSSE3 implementation, but reconstruction is somewhat
    slower.  Previous 'sse' implementation is renamed to 'ssse3' to
    indicate highest instruction set used.
    
    Benchmark results:
    scalar_rec_p                    4    720476442
    scalar_rec_q                    4    187462804
    scalar_rec_r                    4    138996096
    scalar_rec_pq                   4    140834951
    scalar_rec_pr                   4    129332035
    scalar_rec_qr                   4    81619194
    scalar_rec_pqr                  4    53376668
    
    sse2_rec_p                      4    2427757064
    sse2_rec_q                      4    747120861
    sse2_rec_r                      4    499871637
    sse2_rec_pq                     4    522403710
    sse2_rec_pr                     4    464632780
    sse2_rec_qr                     4    319124434
    sse2_rec_pqr                    4    205794190
    
    ssse3_rec_p                     4    2519939444
    ssse3_rec_q                     4    1003019289
    ssse3_rec_r                     4    616428767
    ssse3_rec_pq                    4    706326396
    ssse3_rec_pr                    4    570493618
    ssse3_rec_qr                    4    400185250
    ssse3_rec_pqr                   4    377541245
    
    original_rec_p                  4    691658568
    original_rec_q                  4    195510948
    original_rec_r                  4    26075538
    original_rec_pq                 4    103087368
    original_rec_pr                 4    15767058
    original_rec_qr                 4    15513175
    original_rec_pqr                4    10746357
    
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4783

[33mcommit 1bf3bf0e2986ac0b8be18b2e2952f39353cc5daa[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Sat Jul 9 18:37:11 2016 +0200

    Fix handling of errors nvlist in zfs_ioc_recv_new()
    
    zfs_ioc_recv_impl() is changed to always allocate the 'errors'
    nvlist, its callers are responsible for freeing it.
    
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4829

[33mcommit 81edd3e83409218879e7af293daa86b0c40eb015[m
Author: Peng <peng.hse@xtaotech.com>
Date:   Wed Jun 8 15:22:07 2016 +0800

    Fix PANIC: metaslab_free_dva(): bad DVA X:Y:Z
    
    The following scenario can result in garbage in the dn_spill field.
    The db->db_blkptr must be set to NULL when DNODE_FLAG_SPILL_BLKPTR
    is clear to ensure the dn_spill field is cleared.
    
    Current txg = A.
    * A new spill buffer is created. Its dbuf is initialized with
      db_blkptr = NULL and it's dirtied.
    
    Current txg = B.
    * The spill buffer is modified. It's marked as dirty in this txg.
    * Additional changes make the spill buffer unnecessary because the
      xattr fits into the bonus buffer, so it's removed. The dbuf is
      undirtied in this txg, but it's still referenced and cannot be
      destroyed.
    
    Current txg = C.
    * Starts syncing of txg A
    * dbuf_sync_leaf() is called for the spill buffer. Since db_blkptr
      is NULL, dbuf_check_blkptr() is called.
    * The dbuf starts being written and it reaches the ready state
      (not done yet).
    * A new change makes the spill buffer necessary again.
      sa_build_layouts() ends up calling dbuf_find() to locate the
      dbuf.  It finds the old dbuf because it has not been destroyed yet
      (it will be destroyed when the previous write is done and there
      are no more references). The old dbuf has db_blkptr != NULL.
    * txg A write is complete and the dbuf released. However it's still
      referenced, so it's not destroyed.
    
    Current txg = D.
    * Starts syncing of txg B
    * dbuf_sync_leaf() is called for the bonus buffer. Its contents are
      directly copied into the dnode, overwriting the blkptr area because,
      in txg B, the bonus buffer was big enough to hold the entire xattr.
    * At this point, the db_blkptr of the spill buffer used in txg C
      gets corrupted.
    
    Signed-off-by: Peng <peng.hse@xtaotech.com>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3937

[33mcommit 62b2d54b2b44d5b37ffebdc43cc736860bbee3d8[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jul 12 15:21:37 2016 -0700

    Fix RAIDZ_TEST tests
    
    Remove stray trailing } which prevented the raidz stress tests from
    running in-tree.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 31b6111fd92a6bc79a34cb18fd919a29c407ff67[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Tue Jul 5 17:24:36 2016 -0700

    Kill zp->z_xattr_parent to prevent pinning
    
    zp->z_xattr_parent will pin the parent. This will cause huge issue
    when unlink a file with xattr. Because the unlinked file is pinned, it
    will never get purged immediately. And because of that, the xattr
    stuff will never be marked as unlinked. So the whole unlinked stuff
    will stay there until shrink cache or umount.
    
    This change partially reverts e89260a.  This is safe because only the
    zp->z_xattr_parent optimization is removed, zpl_xattr_security_init()
    is still called from the zpl outside the inode lock.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chris Dunlop <chris@onthe.net.au>
    Issue #4359
    Issue #3508
    Issue #4413
    Issue #4827

[33mcommit ddae16a9cf0ba84fab4f7f4542efaf68dc87415b[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Tue Jul 5 12:39:47 2016 -0700

    xattr dir doesn't get purged during iput
    
    We need to set inode->i_nlink to zero so iput will purge it. Without this, it
    will get purged during shrink cache or umount, which would likely result in
    deadlock due to zfs_zget waiting forever on its children which are in the
    dispose_list of the same thread.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chris Dunlop <chris@onthe.net.au>
    Issue #4359
    Issue #3508
    Issue #4413
    Issue #4827

[33mcommit 6c2530647ce3f1fe92075b7ed96144fa3541d8f5[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Fri Jul 8 14:51:42 2016 -0700

    fh_to_dentry should return ESTALE when generation mismatch
    
    When generation mismatch, it usually means the file pointed by the file handle
    was deleted. We should return ESTALE to indicate this. We return ENOENT in
    zfs_vget since zpl_fh_to_dentry will convert it to ESTALE.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4828

[33mcommit d4701011efe9c8268dfc3af8d174a16aa6334a9b[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Wed Jul 6 17:07:45 2016 -0700

    Add configure result for xattr_handler
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4828

[33mcommit bffb68a2b863bc43c42b53ba56d3ee7a4a45ca96[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Wed Jul 6 17:06:17 2016 -0700

    Fix Large kmem_alloc in vdev_metaslab_init
    
    This allocation can go way over 1MB, so we should use vmem_alloc
    instead of kmem_alloc.
    
      Large kmem_alloc(1430784, 0x1000), please file an issue...
      Call Trace:
       [<ffffffffa0324aff>] ? spl_kmem_zalloc+0xef/0x160 [spl]
       [<ffffffffa17d0c8d>] ? vdev_metaslab_init+0x9d/0x1f0 [zfs]
       [<ffffffffa17d46d0>] ? vdev_load+0xc0/0xd0 [zfs]
       [<ffffffffa17d4643>] ? vdev_load+0x33/0xd0 [zfs]
       [<ffffffffa17c0004>] ? spa_load+0xfc4/0x1b60 [zfs]
       [<ffffffffa17c1838>] ? spa_tryimport+0x98/0x430 [zfs]
       [<ffffffffa17f28b1>] ? zfs_ioc_pool_tryimport+0x41/0x80 [zfs]
       [<ffffffffa17f5669>] ? zfsdev_ioctl+0x4a9/0x4e0 [zfs]
       [<ffffffff811bacdf>] ? do_vfs_ioctl+0x2cf/0x4b0
       [<ffffffff811baf41>] ? SyS_ioctl+0x81/0xa0
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4752

[33mcommit 7938c2aca741f350921377d0f939e177bc7e84ad[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Wed Jul 6 16:54:19 2016 -0700

    Don't allow accessing XATTR via export handle
    
    Allow accessing XATTR through export handle is a very bad idea. It
    would allow user to write whatever they want in fields where they
    otherwise could not.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4828

[33mcommit 061460dfe222e01f258db7f6bad689c1ebd2634e[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Fri Jul 8 16:59:54 2016 -0700

    Fix get_zfs_sb race with concurrent umount
    
    Certain ioctl operations will call get_zfs_sb, which will holds an active
    count on sb without checking whether it's active or not. This will result
    in use-after-free. We fix this by using atomic_inc_not_zero to make sure
    we got an active sb.
    
    P1                                          P2
    ---                                         ---
    deactivate_locked_super(): s_active = 0
                                                zfs_sb_hold()
                                                ->get_zfs_sb(): s_active = 1
    ->zpl_kill_sb()
    -->zpl_put_super()
    --->zfs_umount()
    ---->zfs_sb_free(zsb)
                                                zfs_sb_rele(zsb)
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 590c9a09946939a389e1f01dadd27efb4b2fe8fd[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Wed Jun 29 22:31:25 2016 +0200

    Allow building with `CFLAGS="-O0"`
    
    If compiled with -O0, gcc doesn't do any stack frame coalescing
    and -Wframe-larger-than=1024 is triggered in debug mode.
    Starting with gcc 4.8, new opt level -Og is introduced for debugging, which
    does not trigger this warning.
    
    Fix bench zio size, using SPA_OLD_MAXBLOCKSHIFT
    
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4799

[33mcommit 5c27b296055301f13103ca0aa98c2ded01dcd9a0[m
Merge: 669cf0a 0dab2e8
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jun 29 11:26:30 2016 -0700

    Merge branch 'illumos-2605'
    
    Adds support for resuming interrupted zfs send streams and include
    all related send/recv bug fixes from upstream OpenZFS.
    
    Unlike the upstream implementation this branch does not change
    the existing ioctl interface.  Instead a new ZFS_IOC_RECV_NEW ioctl
    was added to support resuming zfs send streams.  This was done by
    applying the original upstream patch and then reverting the ioctl
    changes in a follow up patch.  For this reason there are a handful
    on commits between the relevant patches on this branch which are
    not interoperable.  This was done to make it easier to extract
    the new ZFS_IOC_RECV_NEW and submit it upstream.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4742

[33mcommit 0dab2e84fcecff2806287efacb7c6205f346f69d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jun 28 13:31:21 2016 -0700

    Vectorized fletcher_4 must be 128-bit aligned
    
    The fletcher_4_native() and fletcher_4_byteswap() functions may only
    safely use the vectorized implementations when the buffer is 128-bit
    aligned.  This is because both the AVX2 and SSE implementations process
    four 32-bit words per iterations.  Fallback to the scalar implementation
    which only processes a single 32-bit word for unaligned buffers.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Issue #4330

[33mcommit d1d19c785497fafb5e239f67006f534651ed2f27[m
Author: Paul Dagnelie <pcd@delphix.com>
Date:   Wed Jun 15 14:51:27 2016 -0700

    OpenZFS 6876 - Stack corruption after importing a pool with a too-long name
    
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Yuri Pankov <yuri.pankov@nexenta.com>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    Calling dsl_dataset_name on a dataset with a 256 byte buffer is asking
    for trouble. We should check every dataset on import, using a 1024 byte
    buffer and checking each time to see if the dataset's new name is longer
    than 256 bytes.
    
    OpenZFS-issue: https://www.illumos.org/issues/6876
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/ca8674e

[33mcommit eca7b76001a7d33f78bd98884aef8325bdbf98e7[m
Author: Igor Kozhukhov <ikozhukhov@gmail.com>
Date:   Wed Jun 15 14:28:36 2016 -0700

    OpenZFS 6314 - buffer overflow in dsl_dataset_name
    
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/6314
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/d6160ee

[33mcommit 43e52eddb13d8accbd052fac9a242ce979531aa4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jun 9 17:04:12 2016 -0700

    Implement zfs_ioc_recv_new() for OpenZFS 2605
    
    Adds ZFS_IOC_RECV_NEW for resumable streams and preserves the legacy
    ZFS_IOC_RECV user/kernel interface.  The new interface supports all
    stream options but is currently only used for resumable streams.
    This way updated user space utilities will interoperate with older
    kernel modules.
    
    ZFS_IOC_RECV_NEW is modeled after the existing ZFS_IOC_SEND_NEW
    handler.  Non-Linux OpenZFS platforms have opted to change the
    legacy interface in an incompatible fashion instead of adding a
    new ioctl.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 8c62a0d0f39c450d1fdb001b8073193f89611f56[m
Author: Dan McDonald <danmcd@omniti.com>
Date:   Thu Jun 9 12:29:09 2016 -0700

    OpenZFS 6562 - Refquota on receive doesn't account for overage
    
    Authored by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Yuri Pankov <yuri.pankov@nexenta.com>
    Reviewed by: Toomas Soome <tsoome@me.com>
    Approved by: Gordon Ross <gwr@nexenta.com>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/6562
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/5f7a8e6

[33mcommit 671c93546cc0471ff3b4039e82d6f2a77de6d413[m
Author: Dan McDonald <danmcd@omniti.com>
Date:   Thu Jun 9 12:24:29 2016 -0700

    OpenZFS 4986 - receiving replication stream fails if any snapshot exceeds refquota
    
    Authored by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: John Kennedy <john.kennedy@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Gordon Ross <gordon.ross@nexenta.com>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/4986
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/5878fad

[33mcommit f8866f8ae3ad987e8ef4a68ea0066639b5f69bcd[m
Author: Eli Rosenthal <eli.rosenthal@delphix.com>
Date:   Thu Jun 9 12:07:01 2016 -0700

    OpenZFS 6738 - zfs send stream padding needs documentation
    
    Authored by: Eli Rosenthal <eli.rosenthal@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/6738
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/c20404ff

[33mcommit b607405fea86c1cbeb6d1f27d919b315f35d27c9[m
Author: Andrew Stormont <astormont@racktopsystems.com>
Date:   Thu Jun 9 11:46:42 2016 -0700

    OpenZFS 6536 - zfs send: want a way to disable setting of DRR_FLAG_FREERECORDS
    
    Authored by: Andrew Stormont <astormont@racktopsystems.com>
    Reviewed by: Anil Vijarnia <avijarnia@racktopsystems.com>
    Reviewed by: Kim Shrier <kshrier@racktopsystems.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/6536
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/880094b

[33mcommit e6d3a843d6ced970cbc74a3f809d744c30a7ec7c[m
Author: Paul Dagnelie <pcd@delphix.com>
Date:   Thu Jun 9 11:18:16 2016 -0700

    OpenZFS 6393 - zfs receive a full send as a clone
    
    Authored by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Richard Elling <Richard.Elling@RichardElling.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/6394
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/68ecb2e

[33mcommit fd41e93563b0543e2a2bdc17bceb731ed22a04b4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jun 16 10:01:33 2016 -0700

    OpenZFS 6051 - lzc_receive: allow the caller to read the begin record
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/6051
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/620f322

[33mcommit 47dfff3b86c67c6ae184c2b7166eaa529590c2d2[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Jan 6 22:22:48 2016 +0100

    OpenZFS 2605, 6980, 6902
    
    2605 want to resume interrupted zfs send
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Richard Elling <Richard.Elling@RichardElling.com>
    Reviewed by: Xin Li <delphij@freebsd.org>
    Reviewed by: Arne Jansen <sensille@gmx.net>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Ported-by: kernelOfTruth <kerneloftruth@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/2605
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/9c3fd12
    
    6980 6902 causes zfs send to break due to 32-bit/64-bit struct mismatch
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Ported by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/6980
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/ea4a67f
    
    Porting notes:
    - All rsend and snapshop tests enabled and updated for Linux.
    - Fix misuse of input argument in traverse_visitbp().
    - Fix ISO C90 warnings and errors.
    - Fix gcc 'missing braces around initializer' in
      'struct send_thread_arg to_arg =' warning.
    - Replace 4 argument fletcher_4_native() with 3 argument version,
      this change was made in OpenZFS 4185 which has not been ported.
    - Part of the sections for 'zfs receive' and 'zfs send' was
      rewritten and reordered to approximate upstream.
    - Fix mktree xattr creation, 'user.' prefix required.
    - Minor fixes to newly enabled test cases
    - Long holds for volumes allowed during receive for minor registration.

[33mcommit 669cf0ab298dd66e512b37f6c4a42aee2d767b80[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jun 24 14:50:20 2016 -0700

    Sync DMU_BACKUP_FEATURE_* flags
    
    Flag 20 was used in OpenZFS as DMU_BACKUP_FEATURE_RESUMING.  The
    DMU_BACKUP_FEATURE_LARGE_DNODE flag must be shifted to 21 and
    then reserved in the upstream OpenZFS implementation.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Closes #4795

[33mcommit 50c957f702ea6d08a634e42f73e8a49931dd8055[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Wed Mar 16 18:25:34 2016 -0700

    Implement large_dnode pool feature
    
    Justification
    -------------
    
    This feature adds support for variable length dnodes. Our motivation is
    to eliminate the overhead associated with using spill blocks.  Spill
    blocks are used to store system attribute data (i.e. file metadata) that
    does not fit in the dnode's bonus buffer. By allowing a larger bonus
    buffer area the use of a spill block can be avoided.  Spill blocks
    potentially incur an additional read I/O for every dnode in a dnode
    block. As a worst case example, reading 32 dnodes from a 16k dnode block
    and all of the spill blocks could issue 33 separate reads. Now suppose
    those dnodes have size 1024 and therefore don't need spill blocks.  Then
    the worst case number of blocks read is reduced to from 33 to two--one
    per dnode block. In practice spill blocks may tend to be co-located on
    disk with the dnode blocks so the reduction in I/O would not be this
    drastic. In a badly fragmented pool, however, the improvement could be
    significant.
    
    ZFS-on-Linux systems that make heavy use of extended attributes would
    benefit from this feature. In particular, ZFS-on-Linux supports the
    xattr=sa dataset property which allows file extended attribute data
    to be stored in the dnode bonus buffer as an alternative to the
    traditional directory-based format. Workloads such as SELinux and the
    Lustre distributed filesystem often store enough xattr data to force
    spill bocks when xattr=sa is in effect. Large dnodes may therefore
    provide a performance benefit to such systems.
    
    Other use cases that may benefit from this feature include files with
    large ACLs and symbolic links with long target names. Furthermore,
    this feature may be desirable on other platforms in case future
    applications or features are developed that could make use of a
    larger bonus buffer area.
    
    Implementation
    --------------
    
    The size of a dnode may be a multiple of 512 bytes up to the size of
    a dnode block (currently 16384 bytes). A dn_extra_slots field was
    added to the current on-disk dnode_phys_t structure to describe the
    size of the physical dnode on disk. The 8 bits for this field were
    taken from the zero filled dn_pad2 field. The field represents how
    many "extra" dnode_phys_t slots a dnode consumes in its dnode block.
    This convention results in a value of 0 for 512 byte dnodes which
    preserves on-disk format compatibility with older software.
    
    Similarly, the in-memory dnode_t structure has a new dn_num_slots field
    to represent the total number of dnode_phys_t slots consumed on disk.
    Thus dn->dn_num_slots is 1 greater than the corresponding
    dnp->dn_extra_slots. This difference in convention was adopted
    because, unlike on-disk structures, backward compatibility is not a
    concern for in-memory objects, so we used a more natural way to
    represent size for a dnode_t.
    
    The default size for newly created dnodes is determined by the value of
    a new "dnodesize" dataset property. By default the property is set to
    "legacy" which is compatible with older software. Setting the property
    to "auto" will allow the filesystem to choose the most suitable dnode
    size. Currently this just sets the default dnode size to 1k, but future
    code improvements could dynamically choose a size based on observed
    workload patterns. Dnodes of varying sizes can coexist within the same
    dataset and even within the same dnode block. For example, to enable
    automatically-sized dnodes, run
    
     # zfs set dnodesize=auto tank/fish
    
    The user can also specify literal values for the dnodesize property.
    These are currently limited to powers of two from 1k to 16k. The
    power-of-2 limitation is only for simplicity of the user interface.
    Internally the implementation can handle any multiple of 512 up to 16k,
    and consumers of the DMU API can specify any legal dnode value.
    
    The size of a new dnode is determined at object allocation time and
    stored as a new field in the znode in-memory structure. New DMU
    interfaces are added to allow the consumer to specify the dnode size
    that a newly allocated object should use. Existing interfaces are
    unchanged to avoid having to update every call site and to preserve
    compatibility with external consumers such as Lustre. The new
    interfaces names are given below. The versions of these functions that
    don't take a dnodesize parameter now just call the _dnsize() versions
    with a dnodesize of 0, which means use the legacy dnode size.
    
    New DMU interfaces:
      dmu_object_alloc_dnsize()
      dmu_object_claim_dnsize()
      dmu_object_reclaim_dnsize()
    
    New ZAP interfaces:
      zap_create_dnsize()
      zap_create_norm_dnsize()
      zap_create_flags_dnsize()
      zap_create_claim_norm_dnsize()
      zap_create_link_dnsize()
    
    The constant DN_MAX_BONUSLEN is renamed to DN_OLD_MAX_BONUSLEN. The
    spa_maxdnodesize() function should be used to determine the maximum
    bonus length for a pool.
    
    These are a few noteworthy changes to key functions:
    
    * The prototype for dnode_hold_impl() now takes a "slots" parameter.
      When the DNODE_MUST_BE_FREE flag is set, this parameter is used to
      ensure the hole at the specified object offset is large enough to
      hold the dnode being created. The slots parameter is also used
      to ensure a dnode does not span multiple dnode blocks. In both of
      these cases, if a failure occurs, ENOSPC is returned. Keep in mind,
      these failure cases are only possible when using DNODE_MUST_BE_FREE.
    
      If the DNODE_MUST_BE_ALLOCATED flag is set, "slots" must be 0.
      dnode_hold_impl() will check if the requested dnode is already
      consumed as an extra dnode slot by an large dnode, in which case
      it returns ENOENT.
    
    * The function dmu_object_alloc() advances to the next dnode block
      if dnode_hold_impl() returns an error for a requested object.
      This is because the beginning of the next dnode block is the only
      location it can safely assume to either be a hole or a valid
      starting point for a dnode.
    
    * dnode_next_offset_level() and other functions that iterate
      through dnode blocks may no longer use a simple array indexing
      scheme. These now use the current dnode's dn_num_slots field to
      advance to the next dnode in the block. This is to ensure we
      properly skip the current dnode's bonus area and don't interpret it
      as a valid dnode.
    
    zdb
    ---
    The zdb command was updated to display a dnode's size under the
    "dnsize" column when the object is dumped.
    
    For ZIL create log records, zdb will now display the slot count for
    the object.
    
    ztest
    -----
    Ztest chooses a random dnodesize for every newly created object. The
    random distribution is more heavily weighted toward small dnodes to
    better simulate real-world datasets.
    
    Unused bonus buffer space is filled with non-zero values computed from
    the object number, dataset id, offset, and generation number.  This
    helps ensure that the dnode traversal code properly skips the interior
    regions of large dnodes, and that these interior regions are not
    overwritten by data belonging to other dnodes. A new test visits each
    object in a dataset. It verifies that the actual dnode size matches what
    was stored in the ztest block tag when it was created. It also verifies
    that the unused bonus buffer space is filled with the expected data
    patterns.
    
    ZFS Test Suite
    --------------
    Added six new large dnode-specific tests, and integrated the dnodesize
    property into existing tests for zfs allow and send/recv.
    
    Send/Receive
    ------------
    ZFS send streams for datasets containing large dnodes cannot be received
    on pools that don't support the large_dnode feature. A send stream with
    large dnodes sets a DMU_BACKUP_FEATURE_LARGE_DNODE flag which will be
    unrecognized by an incompatible receiving pool so that the zfs receive
    will fail gracefully.
    
    While not implemented here, it may be possible to generate a
    backward-compatible send stream from a dataset containing large
    dnodes. The implementation may be tricky, however, because the send
    object record for a large dnode would need to be resized to a 512
    byte dnode, possibly kicking in a spill block in the process. This
    means we would need to construct a new SA layout and possibly
    register it in the SA layout object. The SA layout is normally just
    sent as an ordinary object record. But if we are constructing new
    layouts while generating the send stream we'd have to build the SA
    layout object dynamically and send it at the end of the stream.
    
    For sending and receiving between pools that do support large dnodes,
    the drr_object send record type is extended with a new field to store
    the dnode slot count. This field was repurposed from unused padding
    in the structure.
    
    ZIL Replay
    ----------
    The dnode slot count is stored in the uppermost 8 bits of the lr_foid
    field. The bits were unused as the object id is currently capped at
    48 bits.
    
    Resizing Dnodes
    ---------------
    It should be possible to resize a dnode when it is dirtied if the
    current dnodesize dataset property differs from the dnode's size, but
    this functionality is not currently implemented. Clearly a dnode can
    only grow if there are sufficient contiguous unused slots in the
    dnode block, but it should always be possible to shrink a dnode.
    Growing dnodes may be useful to reduce fragmentation in a pool with
    many spill blocks in use. Shrinking dnodes may be useful to allow
    sending a dataset to a pool that doesn't support the large_dnode
    feature.
    
    Feature Reference Counting
    --------------------------
    The reference count for the large_dnode pool feature tracks the
    number of datasets that have ever contained a dnode of size larger
    than 512 bytes. The first time a large dnode is created in a dataset
    the dataset is converted to an extensible dataset. This is a one-way
    operation and the only way to decrement the feature count is to
    destroy the dataset, even if the dataset no longer contains any large
    dnodes. The complexity of reference counting on a per-dnode basis was
    too high, so we chose to track it on a per-dataset basis similarly to
    the large_block feature.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3542

[33mcommit 68cbd56e182ab949f58d004778d463aeb3f595c6[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Tue May 17 01:02:29 2016 +0000

    Backfill metadnode more intelligently
    
    Only attempt to backfill lower metadnode object numbers if at least
    4096 objects have been freed since the last rescan, and at most once
    per transaction group. This avoids a pathology in dmu_object_alloc()
    that caused O(N^2) behavior for create-heavy workloads and
    substantially improves object creation rates.  As summarized by
    @mahrens in #4636:
    
    "Normally, the object allocator simply checks to see if the next
    object is available. The slow calls happened when dmu_object_alloc()
    checks to see if it can backfill lower object numbers. This happens
    every time we move on to a new L1 indirect block (i.e. every 32 *
    128 = 4096 objects).  When re-checking lower object numbers, we use
    the on-disk fill count (blkptr_t:blk_fill) to quickly skip over
    indirect blocks that don’t have enough free dnodes (defined as an L2
    with at least 393,216 of 524,288 dnodes free). Therefore, we may
    find that a block of dnodes has a low (or zero) fill count, and yet
    we can’t allocate any of its dnodes, because they've been allocated
    in memory but not yet written to disk. In this case we have to hold
    each of the dnodes and then notice that it has been allocated in
    memory.
    
    The end result is that allocating N objects in the same TXG can
    require CPU usage proportional to N^2."
    
    Add a tunable dmu_rescan_dnode_threshold to define the number of
    objects that must be freed before a rescan is performed. Don't bother
    to export this as a module option because testing doesn't show a
    compelling reason to change it. The vast majority of the performance
    gain comes from limit the rescan to at most once per TXG.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 81285582b9898374e98d1d6d55ccac8340408d72[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Fri Apr 10 15:17:30 2015 -0700

    xattrtest: allow verify with -R and other improvements
    
    - Use a fixed buffer of random bytes when random xattr values are in
      effect.  This eliminates the potential performance bottleneck of
      reading from /dev/urandom for each file. This also allows us to
      verify xattrs in random value mode.
    
    - Show the rate of operations per second in addition to elapsed time
      for each phase of the test. This may be useful for benchmarking.
    
    - Set default xattr size to 6 so that verify doesn't fail if user
      doesn't specify a size. We need at least six bytes to store the
      leading "size=X" string that is used for verification.
    
    - Allow user to execute just one phase of the test. Acceptable
      values for -o and their meanings are:
    
       1 - run the create phase
       2 - run the setxattr phase
       3 - run the getxattr phase
       4 - run the unlink phase
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit d14fa5dba1ad0e68e803435ac48ec1ea78121699[m
Author: smh <smh@FreeBSD.org>
Date:   Fri Jun 24 00:45:19 2016 +1000

    FreeBSD rS271776 - Persist vdev_resilver_txg changes
    
    Persist vdev_resilver_txg changes to avoid panic caused by validation
    vs a vdev_resilver_txg value from a previous resilver.
    
    Authored-by: smh <smh@FreeBSD.org>
    Ported-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/5154
    FreeBSD-issue: https://reviews.freebsd.org/rS271776
    FreeBSD-commit: https://github.com/freebsd/freebsd/commit/c3c60bf
    Closes #4790

[33mcommit 784d15c14c3ce033f863c36299292f40a4c41641[m
Author: Nav Ravindranath <nav@delphix.com>
Date:   Thu Jun 23 18:39:40 2016 +1000

    OpenZFS 6878 - Add scrub completion info to "zpool history"
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Authored by: Nav Ravindranath <nav@delphix.com>
    Ported-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/6878
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/1825bc5
    Closes #4787

[33mcommit 391bba1d28d006586bd8dccbde395c5c81f0476e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jun 24 12:44:02 2016 -0700

    Revert "Add a test case for dmu_free_long_range() to ztest"
    
    This reverts commit d0de2e82df579f4e4edf5643b674a1464fae485f which
    introduced a new test case to ztest which is failing occasionally
    during automated testing.  The change is being reverted until
    the issue can be fully investigated.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4754

[33mcommit d0de2e82df579f4e4edf5643b674a1464fae485f[m
Author: Boris Protopopov <boris.protopopov@actifio.com>
Date:   Wed Dec 16 22:09:13 2015 -0500

    Add a test case for dmu_free_long_range() to ztest
    
    Signed-off-by: Boris Protopopov <bprotopopov@actifio.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4754

[33mcommit bc77ba73fec82d37c0b57949ec29edd9aa207677[m
Author: Paul Dagnelie <pcd@delphix.com>
Date:   Sun May 15 08:02:28 2016 -0700

    OpenZFS 6513 - partially filled holes lose birth time
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Boris Protopopov <bprotopopov@hotmail.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>a
    Ported by: Boris Protopopov <bprotopopov@actifio.com>
    Signed-off-by: Boris Protopopov <bprotopopov@actifio.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/6513
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/8df0bcf0
    
    If a ZFS object contains a hole at level one, and then a data block is
    created at level 0 underneath that l1 block, l0 holes will be created.
    However, these l0 holes do not have the birth time property set; as a
    result, incremental sends will not send those holes.
    
    Fix is to modify the dbuf_read code to fill in birth time data.

[33mcommit 100a91aa3e9773f2a2a373c5cb066b52c780716c[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Fri Jun 17 17:36:01 2016 -0700

    Fix NFS credential
    
    The commit f74b821 caused a regression where creating file through NFS will
    always create a file owned by root. This is because the patch enables the KSID
    code in zfs_acl_ids_create, which it would use euid and egid of the current
    process. However, on Linux, we should use fsuid and fsgid for file operations,
    which is the original behaviour. So we revert this part of code.
    
    The patch also enables secpolicy_vnode_*, since they are also used in file
    operations, we change them to use fsuid and fsgid.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4772
    Closes #4758

[33mcommit ab9f4b0b824ab4cc64a4fa382c037f4154de12d6[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Mon Apr 25 10:04:31 2016 +0200

    SIMD implementation of vdev_raidz generate and reconstruct routines
    
    This is a new implementation of RAIDZ1/2/3 routines using x86_64
    scalar, SSE, and AVX2 instruction sets. Included are 3 parity
    generation routines (P, PQ, and PQR) and 7 reconstruction routines,
    for all RAIDZ level. On module load, a quick benchmark of supported
    routines will select the fastest for each operation and they will
    be used at runtime. Original implementation is still present and
    can be selected via module parameter.
    
    Patch contains:
    - specialized gen/rec routines for all RAIDZ levels,
    - new scalar raidz implementation (unrolled),
    - two x86_64 SIMD implementations (SSE and AVX2 instructions sets),
    - fastest routines selected on module load (benchmark).
    - cmd/raidz_test - verify and benchmark all implementations
    - added raidz_test to the ZFS Test Suite
    
    New zfs module parameters:
    - zfs_vdev_raidz_impl (str): selects the implementation to use. On
      module load, the parameter will only accept first 3 options, and
      the other implementations can be set once module is finished
      loading. Possible values for this option are:
        "fastest" - use the fastest math available
        "original" - use the original raidz code
        "scalar" - new scalar impl
        "sse" - new SSE impl if available
        "avx2" - new AVX2 impl if available
    
    See contents of `/sys/module/zfs/parameters/zfs_vdev_raidz_impl` to
    get the list of supported values. If an implementation is not supported
    on the system, it will not be shown. Currently selected option is
    enclosed in `[]`.
    
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4328

[33mcommit 09fb30e5e91d9f2ed622db6b616084ce1d073384[m
Author: Tim Chase <tim@chase2k.com>
Date:   Thu Jun 16 10:19:32 2016 -0500

    Linux 4.6 compat: Fall back to d_prune_aliases() if necessary
    
    As of 4.6, the icache and dcache LRUs are memcg aware insofar as the
    kernel's per-superblock shrinker is concerned.  The effect is that dcache
    or icache entries added by a task in a non-root memcg won't be scanned
    by the shrinker in the context of the root (or NULL) memcg.  This defeats
    the attempts by zfs_sb_prune() to unpin buffers and can allow metadata to
    grow uncontrollably.  This patch reverts to the d_prune_aliaes() method
    in case the kernel's per-superblock shrinker is not able to free anything.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Closes: #4726

[33mcommit 46ab35954c7a7e4dc6591593c14f672bceee042d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jun 15 14:44:14 2016 -0700

    Remove libzfs_graph.c
    
    The libzfs_graph.c source file should have been removed in 330d06f,
    it is entirely unused.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4766

[33mcommit f74b821a6696fef9e9953aae05941e99bf83800e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jun 7 09:16:52 2016 -0700

    Add `zfs allow` and `zfs unallow` support
    
    ZFS allows for specific permissions to be delegated to normal users
    with the `zfs allow` and `zfs unallow` commands.  In addition, non-
    privileged users should be able to run all of the following commands:
    
      * zpool [list | iostat | status | get]
      * zfs [list | get]
    
    Historically this functionality was not available on Linux.  In order
    to add it the secpolicy_* functions needed to be implemented and mapped
    to the equivalent Linux capability.  Only then could the permissions on
    the `/dev/zfs` be relaxed and the internal ZFS permission checks used.
    
    Even with this change some limitations remain.  Under Linux only the
    root user is allowed to modify the namespace (unless it's a private
    namespace).  This means the mount, mountpoint, canmount, unmount,
    and remount delegations cannot be supported with the existing code.  It
    may be possible to add this functionality in the future.
    
    This functionality was validated with the cli_user and delegation test
    cases from the ZFS Test Suite.  These tests exhaustively verify each
    of the supported permissions which can be delegated and ensures only
    an authorized user can perform it.
    
    Two minor bug fixes were required for test-running.py.  First, the
    Timer() object cannot be safely created in a `try:` block when there
    is an unconditional `finally` block which references it.  Second,
    when running as a normal user also check for scripts using the
    both the .ksh and .sh suffixes.
    
    Finally, existing users who are simulating delegations by setting
    group permissions on the /dev/zfs device should revert that
    customization when updating to a version with this change.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Closes #362
    Closes #434
    Closes #4100
    Closes #4394
    Closes #4410
    Closes #4487

[33mcommit 2627e7524581f5189599df6daccf830e23e89a69[m
Author: Colin Ian King <colin.king@canonical.com>
Date:   Mon Jun 6 22:45:26 2016 +0100

    Fix minor spelling mistakes
    
    Trivial spelling mistake fix in error message text.
    
    * Fix spelling mistake "adminstrator" -> "administrator"
    * Fix spelling mistake "specificed" -> "specified"
    * Fix spelling mistake "interperted" -> "interpreted"
    
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4728

[33mcommit f866a4ea1f188a3a7c4b828f42080089703779c9[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jun 3 09:08:14 2016 -0700

    Fix cstyle.pl warnings
    
    As of perl v5.22.1 the following warnings are generated:
    
    * Redundant argument in printf at scripts/cstyle.pl line 194
    
    * Unescaped left brace in regex is deprecated, passed through
      in regex; marked by <-- HERE in m/\S{ <-- HERE / at
      scripts/cstyle.pl line 608.
    
    They have been addressed by escaping the left braces and by
    providing the correct number of arguments to printf based on
    the fmt specifier set by the verbose option.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4723

[33mcommit 1eeb4562a72ab29345572609e1e4315ecd26c5a1[m
Author: Jinshan Xiong <jinshan.xiong@intel.com>
Date:   Wed Dec 9 15:34:16 2015 -0800

    Implementation of AVX2 optimized Fletcher-4
    
    New functionality:
    - Preserves existing scalar implementation.
    - Adds AVX2 optimized Fletcher-4 computation.
    - Fastest routines selected on module load (benchmark).
    - Test case for Fletcher-4 added to ztest.
    
    New zcommon module parameters:
    -  zfs_fletcher_4_impl (str): selects the implementation to use.
        "fastest" - use the fastest version available
        "cycle"   - cycle trough all available impl for ztest
        "scalar"  - use the original version
        "avx2"    - new AVX2 implementation if available
    
    Performance comparison (Intel i7 CPU, 1MB data buffers):
    - Scalar:  4216 MB/s
    - AVX2:   14499 MB/s
    
    See contents of `/sys/module/zcommon/parameters/zfs_fletcher_4_impl`
    to get list of supported values. If an implementation is not supported
    on the system, it will not be shown. Currently selected option is
    enclosed in `[]`.
    
    Signed-off-by: Jinshan Xiong <jinshan.xiong@intel.com>
    Signed-off-by: Andreas Dilger <andreas.dilger@intel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4330

[33mcommit 8fbbc6b4cf13f73d517ec4e826a7069a958fa5ba[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jun 1 18:10:06 2016 -0700

    Linux 4.7 compat: handler->set() takes both dentry and inode
    
    Counterpart to fd4c7b7, the same approach was taken to resolve
    the compatibility issue.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #4717
    Issue #4665

[33mcommit 6a7967253064a0b8711ca746a1296ee6439d36e6[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Fri May 27 15:48:02 2016 -0700

    Fix memleak in vdev_config_generate_stats
    
    fnvlist_add_nvlist will copy the contents of nvx, so we need to
    free it here.
    
    unreferenced object 0xffff8800a6934e80 (size 64):
      comm "zpool", pid 3398, jiffies 4295007406 (age 214.180s)
      hex dump (first 32 bytes):
        60 06 c2 73 00 88 ff ff 00 7c 8c 73 00 88 ff ff  `..s.....|.s....
        00 00 00 00 00 00 00 00 40 b0 70 c0 ff ff ff ff  ........@.p.....
      backtrace:
        [<ffffffff81810c4e>] kmemleak_alloc+0x4e/0xb0
        [<ffffffff811fac7d>] __kmalloc_node+0x17d/0x310
        [<ffffffffc065528c>] spl_kmem_alloc_impl+0xac/0x180 [spl]
        [<ffffffffc0657379>] spl_vmem_alloc+0x19/0x20 [spl]
        [<ffffffffc07056cf>] nv_alloc_sleep_spl+0x1f/0x30 [znvpair]
        [<ffffffffc07006b7>] nvlist_xalloc.part.13+0x27/0xc0 [znvpair]
        [<ffffffffc07007ad>] nvlist_alloc+0x3d/0x40 [znvpair]
        [<ffffffffc0703abc>] fnvlist_alloc+0x2c/0x80 [znvpair]
        [<ffffffffc07b1783>] vdev_config_generate_stats+0x83/0x370 [zfs]
        [<ffffffffc07b1f53>] vdev_config_generate+0x4e3/0x650 [zfs]
        [<ffffffffc07996db>] spa_config_generate+0x20b/0x4b0 [zfs]
        [<ffffffffc0794f64>] spa_tryimport+0xc4/0x430 [zfs]
        [<ffffffffc07d11d8>] zfs_ioc_pool_tryimport+0x68/0x110 [zfs]
        [<ffffffffc07d4fc6>] zfsdev_ioctl+0x646/0x7a0 [zfs]
        [<ffffffff81232e31>] do_vfs_ioctl+0xa1/0x5b0
        [<ffffffff812333b9>] SyS_ioctl+0x79/0x90
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4707
    Issue #4708

[33mcommit 06ee0031a6d658bbf4ab953070ff4cdf4af64496[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Fri May 27 15:44:52 2016 -0700

    Fix memleak in zpl_parse_options
    
    strsep() will advance tmp_mntopts, and will change it to NULL on last
    iteration.  This will cause strfree(tmp_mntopts) to not free anything.
    
    unreferenced object 0xffff8800883976c0 (size 64):
      comm "mount.zfs", pid 3361, jiffies 4294931877 (age 1482.408s)
      hex dump (first 32 bytes):
        72 77 00 73 74 72 69 63 74 61 74 69 6d 65 00 7a  rw.strictatime.z
        66 73 75 74 69 6c 00 6d 6e 74 70 6f 69 6e 74 3d  fsutil.mntpoint=
      backtrace:
        [<ffffffff81810c4e>] kmemleak_alloc+0x4e/0xb0
        [<ffffffff811f9cac>] __kmalloc+0x16c/0x250
        [<ffffffffc065ce9b>] strdup+0x3b/0x60 [spl]
        [<ffffffffc080fad6>] zpl_parse_options+0x56/0x300 [zfs]
        [<ffffffffc080fe46>] zpl_mount+0x36/0x80 [zfs]
        [<ffffffff81222dc8>] mount_fs+0x38/0x160
        [<ffffffff81240097>] vfs_kern_mount+0x67/0x110
        [<ffffffff812428e0>] do_mount+0x250/0xe20
        [<ffffffff812437d5>] SyS_mount+0x95/0xe0
        [<ffffffff8181aff6>] entry_SYSCALL_64_fastpath+0x1e/0xa8
        [<ffffffffffffffff>] 0xffffffffffffffff
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4706
    Issue #4708

[33mcommit 540c39279322cb278ad45840f260fe4b92c3c8b7[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Fri May 27 15:39:34 2016 -0700

    Fix out-of-bound access in zfs_fillpage
    
    The original code will do an out-of-bound access on pl[] during last
    iteration.
    
     ==================================================================
     BUG: KASAN: stack-out-of-bounds in zfs_getpage+0x14c/0x2d0 [zfs]
     Read of size 8 by task tmpfile/7850
     page:ffffea00017c6dc0 count:0 mapcount:0 mapping:          (null) index:0x0
     flags: 0xffff8000000000()
     page dumped because: kasan: bad access detected
     CPU: 3 PID: 7850 Comm: tmpfile Tainted: G           OE   4.6.0+ #3
      ffff88005f1b7678 0000000006dbe035 ffff88005f1b7508 ffffffff81635618
      ffff88005f1b7678 ffff88005f1b75a0 ffff88005f1b7590 ffffffff81313ee8
      ffffea0001ae8dd0 ffff88005f1b7670 0000000000000246 0000000041b58ab3
     Call Trace:
      [<ffffffff81635618>] dump_stack+0x63/0x8b
      [<ffffffff81313ee8>] kasan_report_error+0x528/0x560
      [<ffffffff81278f20>] ? filemap_map_pages+0x5f0/0x5f0
      [<ffffffff813144b8>] kasan_report+0x58/0x60
      [<ffffffffc12250dc>] ? zfs_getpage+0x14c/0x2d0 [zfs]
      [<ffffffff81312e4e>] __asan_load8+0x5e/0x70
      [<ffffffffc12250dc>] zfs_getpage+0x14c/0x2d0 [zfs]
      [<ffffffffc1252131>] zpl_readpage+0xd1/0x180 [zfs]
    
      [<ffffffff81353c3a>] SyS_execve+0x3a/0x50
      [<ffffffff810058ef>] do_syscall_64+0xef/0x180
      [<ffffffff81d0ee25>] entry_SYSCALL64_slow_path+0x25/0x25
     Memory state around the buggy address:
      ffff88005f1b7500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
      ffff88005f1b7580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
     >ffff88005f1b7600: 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1 00 f4
                                                                     ^
      ffff88005f1b7680: f4 f4 f3 f3 f3 f3 00 00 00 00 00 00 00 00 00 00
      ffff88005f1b7700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
     ==================================================================
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4705
    Issue #4708

[33mcommit 2493dca54e18b24bcd8b7ff5432f4dc51dddc472[m
Author: YunQiang Su <syq@debian.org>
Date:   Sat May 28 20:33:15 2016 +0800

    Add isa_defs for MIPS
    
    GCC for MIPS only defines _LP64 when 64bit,
    while no _ILP32 defined when 32bit.
    
    Signed-off-by: YunQiang Su <syq@debian.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4712

[33mcommit b7faa7aabd420b056c9b9cbf6ab8849130385dca[m
Author: GeLiXin <47034221@qq.com>
Date:   Sat May 21 11:34:06 2016 +0800

    Fix self-healing IO prior to dsl_pool_init() completion
    
    Async writes triggered by a self-healing IO may be issued before the
    pool finishes the process of initialization.  This results in a NULL
    dereference of `spa->spa_dsl_pool` in vdev_queue_max_async_writes().
    
    George Wilson recommended addressing this issue by initializing the
    passed `dsl_pool_t **` prior to dmu_objset_open_impl().  Since the
    caller is passing the `spa->spa_dsl_pool` this has the effect of
    ensuring it's initialized.
    
    However, since this depends on the caller knowing they must pass
    the `spa->spa_dsl_pool` an additional NULL check was added to
    vdev_queue_max_async_writes().  This guards against any future
    restructuring of the code which might result in dsl_pool_init()
    being called differently.
    
    Signed-off-by: GeLiXin <47034221@qq.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4652

[33mcommit 92547bc45ca9a2114662d9343ae53e5098acb627[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed May 25 10:48:12 2016 -0700

    Systemd configuration fixes
    
    * Disable zfs-import-scan.service by default.  This ensures that
    pools will not be automatically imported unless they appear in
    the cache file.  When this service is explicitly enabled pools
    will be imported with the "cachefile=none" property set.  This
    prevents the creation of, or update to, an existing cache file.
    
        $ systemctl list-unit-files | grep zfs
        zfs-import-cache.service                  enabled
        zfs-import-scan.service                   disabled
        zfs-mount.service                         enabled
        zfs-share.service                         enabled
        zfs-zed.service                           enabled
        zfs.target                                enabled
    
    * Change services to dynamic from static by adding an [Install]
    section and adding 'WantedBy' tags in favor of 'Requires' tags.
    This allows for easier customization of the boot behavior.
    
    * Start the zfs-import-cache.service after the root pivot so
    the cache file is available in the standard location.
    
    * Start the zfs-mount.service after the systemd-remount-fs.service
    to ensure the root fs is writeable and the ZFS filesystems can
    create their mount points.
    
    * Change the default behavior to only load the ZFS kernel modules
    in zfs-import-*.service or when blkid(8) detects a pool.  Users
    who wish to unconditionally load the kernel modules must uncomment
    the list of modules in /lib/modules-load.d/zfs.conf.
    
    Reviewed-by: Richard Laager <rlaager@wiktel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4325
    Closes #4496
    Closes #4658
    Closes #4699

[33mcommit 26ef0cc7db03be6f7a5c2d06c7ecdb2449bfa9e1[m
Author: Tony Hutter <hutter2@llnl.gov>
Date:   Mon May 23 10:41:29 2016 -0700

    OpenZFS 6531 - Provide mechanism to artificially limit disk performance
    
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Ported by: Tony Hutter <hutter2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/6531
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/97e8130
    
    Porting notes:
    - Added new IO delay tracepoints, and moved common ZIO tracepoint macros
      to a new trace_common.h file.
    - Used zio_delay_taskq() in place of OpenZFS's timeout_generic() function.
    - Updated zinject man page
    - Updated zpool_scrub test files

[33mcommit 7e945072d18541fb0c30e05b46cce14d01fea8aa[m
Author: Tony Hutter <hutter2@llnl.gov>
Date:   Wed May 25 14:21:35 2016 -0700

    Add request size histograms (-r) to zpool iostat, minor man page fix
    
    Add -r option to "zpool iostat" to print request size histograms for the leaf
    ZIOs. This includes histograms of individual ZIOs ("ind") and aggregate ZIOs
    ("agg"). These stats can be useful for seeing how well the ZFS IO aggregator
    is working.
    
    $ zpool iostat -r
    mypool        sync_read    sync_write    async_read    async_write      scrub
    req_size      ind    agg    ind    agg    ind    agg    ind    agg    ind    agg
    ----------  -----  -----  -----  -----  -----  -----  -----  -----  -----  -----
    512             0      0      0      0      0      0    530      0      0      0
    1K              0      0    260      0      0      0    116    246      0      0
    2K              0      0      0      0      0      0      0    431      0      0
    4K              0      0      0      0      0      0      3    107      0      0
    8K             15      0     35      0      0      0      0      6      0      0
    16K             0      0      0      0      0      0      0     39      0      0
    32K             0      0      0      0      0      0      0      0      0      0
    64K            20      0     40      0      0      0      0      0      0      0
    128K            0      0     20      0      0      0      0      0      0      0
    256K            0      0      0      0      0      0      0      0      0      0
    512K            0      0      0      0      0      0      0      0      0      0
    1M              0      0      0      0      0      0      0      0      0      0
    2M              0      0      0      0      0      0      0      0      0      0
    4M              0      0      0      0      0      0    155     19      0      0
    8M              0      0      0      0      0      0      0    811      0      0
    16M             0      0      0      0      0      0      0     68      0      0
    --------------------------------------------------------------------------------
    
    Also rename the stray "-G" in the man page to be "-w" for latency histograms.
    
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Closes #4659

[33mcommit 4442f60d8e959e9983e58ff534e7302ebf2f9d7e[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Mon May 23 11:58:21 2016 -0700

    Fix arc_prune_task use-after-free
    
    arc_prune_task uses a refcount to protect arc_prune_t, but it doesn't prevent
    the underlying zsb from disappearing if there's a concurrent umount. We fix
    this by force the caller of arc_remove_prune_callback to wait for
    arc_prune_taskq to finish.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4687
    Closes #4690

[33mcommit 83426735026cefc9d8d566615064faaf55074897[m
Author: DHE <git@dehacked.net>
Date:   Wed Dec 30 12:44:46 2015 -0500

    Improve zfs-module-parameters(5)
    
    Various rewrites to the descriptions of module parameters. Corrects
    spelling mistakes, makes descriptions them more user-friendly and
    describes some ZFS quirks which should be understood before changing
    parameter values.
    
    Signed-off-by: DHE <git@dehacked.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4671

[33mcommit cbecb4fb228bbfedec02eb0a172c681b4338d08f[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Thu May 19 17:04:27 2016 -0700

    Skip ctldir znode in zfs_rezget to fix snapdir issues
    
    Skip ctldir in zfs_rezget, otherwise they will always get invalidated. This
    will cause funny behaviour for the mounted snapdirs. Especially for
    Linux >= 3.18, d_invalidate will detach the mountpoint and prevent anyone
    automount it again as long as someone is still using the detached mount.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4514
    Closes #4661
    Closes #4672

[33mcommit de0ef912ecea3d6c039760525c9195f174db7b93[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri May 20 13:50:31 2016 -0700

    Add missing RPM BuildRequires
    
    Both libudev and libattr are recommended build requirements.  As
    such their development headers should lists in the rpm spec file
    so those dependencies are pulled in when building rpm packages.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4676

[33mcommit 3491d6eb06c3e2e6f337bd57b6137ccff4b8c077[m
Author: Christer Ekholm <che@chrekh.se>
Date:   Mon May 23 19:20:42 2016 +0200

    Consistently use parsable instead of parseable
    
    This is a purely cosmetical change, to consistently prefer one of
    two (both acceptable) choises for the word parsable in documentation and
    code. I don't really care which to use, but acording to wiktionary
    https://en.wiktionary.org/wiki/parsable#English parsable is preferred.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4682

[33mcommit 9baaa7deae45c8556dfd79b2011234da5cb37b3a[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Wed May 18 14:30:20 2016 -0700

    Linux 4.7 compat: use iterate_shared for concurrent readdir
    
    Register iterate_shared if it exists so the kernel will used shared
    lock and allowing concurrent readdir.
    
    Also, use shared lock when doing llseek with SEEK_DATA or SEEK_HOLE
    to allow concurrent seeking.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4664
    Closes #4665

[33mcommit e42d46664e81136f3e9b7030fe77f0550e615c3f[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Wed May 18 13:48:08 2016 -0700

    Fix config for posix_acl_release() GPL test
    
    The GPL test for posix_acl_release() didn't include <linux/module.h>.
    Also run this test only when posix_acl_release() exists.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4665

[33mcommit 68e8f59afb0fa1b388c7dbb8720ac6756d390146[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Wed May 18 13:45:39 2016 -0700

    Linux 4.7 compat: replace blk_queue_flush with blk_queue_write_cache
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4665

[33mcommit fd4c7b7a73fda391f94f58530c86ffa5b2ef8e6f[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Wed May 18 13:44:13 2016 -0700

    Linux 4.7 compat: handler->get() takes both dentry and inode
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4665

[33mcommit 278f2236688e70f4097e62ae93537c69968be027[m
Author: Nikolay Borisov <n.borisov.lkml@gmail.com>
Date:   Mon Apr 18 22:08:53 2016 +0300

    Kill znode->z_gen field
    
    This field is a duplicate of the inode->i_generation, so just
    kill it.
    
    Signed-off-by: Nikolay Borisov <n.borisov.lkml@gmail.com>
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4538
    Closes #4654

[33mcommit bc2d809387debb95d82f47185d446f328da4d147[m
Author: Christer Ekholm <che@chrekh.se>
Date:   Mon May 16 21:29:54 2016 +0200

    Make zpool list -vp print individual vdev sizes parsable.
    
    Add argument format to print_one_column(), and use it to call
    zfs_nicenum_format with, instead of just zfs_nicenum. Don't print "%"
    for fragmentation or capacity percent values.
    
    The calls to print_one_colum is made with ZFS_NICENUM_RAW if
    cb->cb_literal (zpool list called with -p), and ZFS_NICENUM_1024 if not.
    
    Also zpool_get_prop is modified to don't add "%" or "x" if literal.
    
    Signed-off-by: Christer Ekholm <che@chrekh.se>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tony Hutter <hutter2@llnl.gov
    Closes #4657

[33mcommit 81b4c075eca2c4c4129933a012cd354f75201f69[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue May 17 15:31:03 2016 -0700

    Remove additional cruft from manpages
    
    These changes should have been part of the original 930b0d4
    commit but were overlooked because 193a37c had not yet been
    merged when the original change was ported.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4631

[33mcommit ada8258141f16da6647fd65aa8721d7ce2c02769[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue May 17 11:44:50 2016 -0700

    Revert "zhack: Add 'feature disable' command"
    
    This reverts commit 83025286175d1ee1c29b842531070f3250a172ba and
    ebecfcd6991bebe71511cb8fd409112798f203b2 which broke the build.
    While these patches do apply cleanly and passed previous test
    runs they need to be updated to account for the changes made in
    commit 241b5415748859a3c272fc8f570f2368e93adde9.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3878

[33mcommit 2587cd8f93ec2ec774e49aafbf536b918f77cff2[m
Author: Marcel Huber <marcelhuberfoo@gmail.com>
Date:   Wed May 11 21:23:42 2016 +0200

    Fixes subtle bug in zio_handle_io_delay()
    
    Fixed bug introduced in commit #c35b1882.  Hinted by gcc:
    
    zio_inject.c: In function ‘zio_handle_io_delay’:
    zio_inject.c:382:3: warning: this ‘if’ clause does not guard... [-Wmisleading-indentation]
       if (handler->zi_record.zi_freq != 0 &&
          ^~
          zio_inject.c:384:4: note: ...this statement, but the latter is misleadingly indented as if it is guarded by the ‘if’
              continue;
    	      ^~~~~~~~
    
    Signed-off-by: Marcel Huber <marcelhuberfoo@gmail.com>
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4632

[33mcommit ebecfcd6991bebe71511cb8fd409112798f203b2[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Oct 1 16:37:02 2015 -0700

    zhack: Add 'feature enable' force option
    
    Add a force option to allow zhack to add features which are
    part of the known set of supported features.  By default
    this is disabled.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3878

[33mcommit 83025286175d1ee1c29b842531070f3250a172ba[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Oct 1 16:32:49 2015 -0700

    zhack: Add 'feature disable' command
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3878

[33mcommit 72c407f8272a4d534da4ecc2c374fd13a49629cc[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Oct 1 16:39:25 2015 -0700

    zhack: Fix 'feature ref' comparison check
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3878

[33mcommit e3a07cd033920c2266a1ffdb8cfae951dfee3bf4[m
Author: Boris Protopopov <boris.protopopov@actifio.com>
Date:   Tue Jan 5 15:47:58 2016 -0500

    Use zfs range locks in ztest
    
    The zfs range lock interface no longer tightly depends on a
    znode_t and therefore can be used in ztest.  This allows the
    previous ztest specific implementation to be removed, and for
    additional test coverage of the shared version.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Boris Protopopov <boris.protopopov@actifio.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4023
    Issue #4024

[33mcommit d88895a069765bc3c6119ac1a3c8ea9edec7a370[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Mon Apr 11 14:53:48 2016 -0700

    Remove dummy znode from zvol_state
    
    struct zvol_state contains a dummy znode, which is around 1KB on x64,
    only for zfs_range_lock. But in reality, other than z_range_lock and
    z_range_avl, zfs_range_lock only need znode on regular file, which
    means we add 1KB on a structure and gain nothing.
    
    In this patch, we remove the dummy znode for zvol_state. In order to
    do that, we also need to refactor zfs_range_lock a bit. We move
    z_range_lock and z_range_avl pair out of znode_t to form zfs_rlock_t.
    This new struct replaces znode_t as the main handle inside the range
    lock functions.
    
    We also add pointers to z_size, z_blksz, and z_max_blksz so range lock
    code doesn't depend on znode_t.  This allows non-ZPL consumers like
    Lustre to use the range locks with their equivalent znode_t structure.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Boris Protopopov <boris.protopopov@actifio.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4510

[33mcommit 61a3d06f8414ae1eb8b278be8776a6b30b351549[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Mon May 16 16:19:57 2016 -0500

    zfs.8: Relative paths must start with ./
    
    Simply containing a slash is not enough, presumably because foo/bar
    could be either a dataset or a mountpoint.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Laager <rlaager@wiktel.com>
    Closes #4655

[33mcommit ee8e9d49fc86a0081691a57b8fc2003063552024[m
Merge: 206971d c5ee751
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon May 16 12:26:42 2016 -0700

    Merge branch 'man-page-fixes'
    
    A collection of corrections and various improvements to the man pages.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4631
    Closes #4651

[33mcommit c5ee75139497374fbcfadf15ece39973e6886e10[m
Author: Matthew Ahrens <matt@delphix.com>
Date:   Wed May 11 13:46:14 2016 -0500

    Illumos 1644 add ZFS "clones" property
    
    Reviewed by: Richard Lowe <richlowe@richlowe.net>
    Reviewed by: George Wilson <gwilson@zfsmail.com>
    Approved by: Gordon Ross <gwr@nexenta.com>
    
    References:
     https://www.illumos.org/issues/1644
    
    Ported-by: Richard Laager <rlaager@wiktel.com>
    Signed-off-by: Richard Laager <rlaager@wiktel.com>

[33mcommit 930b0d4c77b9dfdfbc48e7789233b758560e7d84[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Wed May 11 14:16:21 2016 -0500

    Illumos 1502 Remove conversion cruft from manpages
    
    Reviewed by: Alexander Eremin <alexander.eremin@nexenta.com>
    Reviewed by: Gordon Ross <gordon.w.ross@gmail.com>
    Reviewed by: Garrett D'Amore <garrett.damore@gmail.com>
    
    References:
     https://www.illumos.org/issues/1502
    
    Ported-by: Richard Laager <rlaager@wiktel.com>
    Signed-off-by: Richard Laager <rlaager@wiktel.com>
    
    Conflicts:
    	man/man8/zpool.8

[33mcommit 32a6c3d7568a83582feb4387557ab7bc54a9f90c[m
Author: Ruben Kerkhof <ruben@rubenkerkhof.com>
Date:   Mon May 16 14:14:32 2016 +0200

    zfs.8 & mount.zfs.8: fix a few typos
    
    filesytem -> filesystem
    defntext -> defcontext
    
    Signed-off-by: Ruben Kerkhof <ruben@rubenkerkhof.com>

[33mcommit d919da83faf14a46e20b7974e64617ee65d975d1[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Wed May 11 13:21:06 2016 -0500

    zfs.8 & zpool.8: Standardize property value order
    
    The default value is now always listed first.
    
    Signed-off-by: Richard Laager <rlaager@wiktel.com>

[33mcommit 8fd888baa7be971233a72331f2ae7bc15087a4c8[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Wed May 11 13:19:31 2016 -0500

    zfs.8 & zpool.8: Various documentation edits
    
    Signed-off-by: Richard Laager <rlaager@wiktel.com>

[33mcommit 8e07f9a916c206833b94f047d834bc791661a3ed[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Wed May 11 13:05:33 2016 -0500

    zfs.8: Improve zfs upgrade documentation
    
    Signed-off-by: Richard Laager <rlaager@wiktel.com>

[33mcommit 9ef21991f392630dc5c29384fadc0e4ce701cac2[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Wed May 11 13:04:02 2016 -0500

    zfs.8: Cleanup stray code
    
    Bad copy-and-paste?
    
    Signed-off-by: Richard Laager <rlaager@wiktel.com>

[33mcommit 8c5edae99353bc24b83a3ec7da11607e149b3ae5[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Wed May 11 11:38:51 2016 -0500

    zfs.8 & zpool.8: Drop legal/illegal
    
    There's a convention in documentation that these words not be used to
    mean "invalid".
    
    Signed-off-by: Richard Laager <rlaager@wiktel.com>

[33mcommit 9bb3e153c4de16b3abc913719fbdd7c688466e28[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Wed May 11 11:27:00 2016 -0500

    zfs.8: Fix minor typos and the like
    
    This commit only contains the most trivial of changes.
    
    Signed-off-by: Richard Laager <rlaager@wiktel.com>

[33mcommit 879dbef094af81e38aecb8246921dfdc6260f9b8[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Wed May 11 11:20:14 2016 -0500

    zfs.8: Rework native vs user properties
    
    Signed-off-by: Richard Laager <rlaager@wiktel.com>

[33mcommit 6a107f419978e3fb151291c40f6c987864ec5f26[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Wed May 11 11:11:02 2016 -0500

    zfs.8 & zpool.8: Linux/Solaris differences
    
    Signed-off-by: Richard Laager <rlaager@wiktel.com>

[33mcommit a5eb2d874692ef82e58bd0672e8f1ac5ad268bdc[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Wed May 11 11:02:17 2016 -0500

    zfs.8: Improve mount option documentation
    
    This change is primarily about adding inline references in the
    properties section to the traditional mount option names.
    
    There are some other editorial changes too.
    
    Signed-off-by: Richard Laager <rlaager@wiktel.com>

[33mcommit 7e0754c675b2d29cf2ca79ad7cebf4ce623f42cf[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Wed May 11 10:54:27 2016 -0500

    zfs.8: Improve consistency in size documentation
    
    Signed-off-by: Richard Laager <rlaager@wiktel.com>

[33mcommit cab1aa295e5202aa248d0b5fe3ecda80914e7e39[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Wed May 11 10:40:42 2016 -0500

    zfs.8: Drop references to Oracle documentation
    
    Signed-off-by: Richard Laager <rlaager@wiktel.com>

[33mcommit 76281da4eb07ae2e1e3f0fdb37c04911fcc24e40[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Wed May 11 08:15:20 2016 -0500

    zfs.8: zfs get and zfs list accept mountpoints
    
    Signed-off-by: Richard Laager <rlaager@wiktel.com>

[33mcommit 206971d234431e7599249a2688c4fcea5395acb0[m
Author: Denys Rtveliashvili <denys@rtveliashvili.name>
Date:   Sun May 15 22:18:25 2016 +0000

    OpenZFS 6739 - assumption in cv_timedwait_hires
    
    Userland version of cv_timedwait_hires() always assumes absolute time.
    
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: Robert Mustacchi <rm@joyent.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Ported by: Denys Rtveliashvili <denys@rtveliashvili.name>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/6739
    OpenZFS-commit: https://github.com/illumos/illumos-gate/commit/41c6413
    
    Porting Notes:
    The ported change has revealed a number of problems in the Linux-specific code,
    as it was expecting incorrect return codes from pthread_* functions.
    Reviewed and improved the usage of pthread_* function in lib/libzpool/kernel.c.

[33mcommit dabe1c42f9724ab030dea7fc1db1c924d21a8a6a[m
Author: jyxent <jordanp@gmail.com>
Date:   Fri May 13 21:44:03 2016 -0600

    Fix the test to use the variable
    
    Signed-off-by: Manuel Amador (Rudd-O) <rudd-o@rudd-o.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4645

[33mcommit a9bb2b682785d48b4bcdaca9d382fc87bbf6e2fb[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Wed May 11 16:55:48 2016 -0700

    Use cv_timedwait_sig_hires in arc_reclaim_thread
    
    The was originally using interruptible cv_timedwait_sig, but was changed
    to uninterruptible cv_timedwait_hires in ae6d0c6. Use _sig_hires instead
    to allow interruptible sleep.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4633
    Closes #4634

[33mcommit d402c18dd60124525b253b27c5018f54a030928d[m
Author: Manuel Amador (Rudd-O) <rudd-o@rudd-o.com>
Date:   Sun Apr 24 11:35:44 2016 +0000

    A collection of dracut fixes
    
    - In older systems without sysroot.mount, import before dracut-mount,
      and re-enable old dracut mount hook
    - rootflags MUST be present even if the administrator neglected to
      specify it explicitly
    - Check that mount.zfs exists in sbindir
    - Remove awk and head as (now unused) requirements, add grep, and
      install the right mount.zfs
    - Eliminate one use of grep in Dracut
    - Use a more accurate grepping statement to identify zfsutil in rootflags
    - Ensure that pooldev is nonempty
    - Properly handle /dev/sd* devices and more
    - Use new -P to get list of zpool devices
    - Bail out of the generator when zfs:AUTO is on the root command line
    - Ignore errors from systemctl trying to load sysroot.mount, we only
      care about the output
    - Determine which one is the correct initqueuedir at run time.
    - Add a compatibility getargbool for our detection / setup script.
    - Update dracut .gitignore files
    
    Signed-off-by: <Matthew Thode mthode@mthode.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4558
    Closes #4562

[33mcommit 8adb798aa50849cc3f6e099fcae7c29db1b83e39[m
Author: Dan McDonald <danmcd@omniti.com>
Date:   Wed May 11 12:03:51 2016 -0700

    OpenZFS 6093 - zfsctl_shares_lookup
    
    6093 zfsctl_shares_lookup should only VN_RELE() on zfs_zget() success
    
    Reviewed by: Gordon Ross <gwr@nexenta.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/6093
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/0f92170
    Closes #4630
    
    This function was always implemented slightly differently under Linux
    and therefore never suffered from this issue.  The patch has been
    updated and applied as cleanup in order to minimize differences with
    the upstream OpenZFS code.

[33mcommit c15706490e5d018542ab4bef1a5ab83122a4b351[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu May 12 13:31:55 2016 -0700

    Revert "Kill znode->z_gen field"
    
    This reverts commit 4cd77889b684fd0dd1a0a995b692dda3db76a9ac.  The
    i_generation field in the inode is 32-bit and the SA code expects
    64-bit fixed values.  Revert this optimization for now until
    this is cleanly addressed.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4538

[33mcommit 193a37cb2430960ce759daf12ce5cc804818aba1[m
Author: Tony Hutter <hutter2@llnl.gov>
Date:   Mon Feb 29 10:05:23 2016 -0800

    Add -lhHpw options to "zpool iostat" for avg latency, histograms, & queues
    
    Update the zfs module to collect statistics on average latencies, queue sizes,
    and keep an internal histogram of all IO latencies.  Along with this, update
    "zpool iostat" with some new options to print out the stats:
    
    -l: Include average IO latencies stats:
    
     total_wait     disk_wait    syncq_wait    asyncq_wait  scrub
     read  write   read  write   read  write   read  write   wait
    -----  -----  -----  -----  -----  -----  -----  -----  -----
        -   41ms      -    2ms      -   46ms      -    4ms      -
        -    5ms      -    1ms      -    1us      -    4ms      -
        -    5ms      -    1ms      -    1us      -    4ms      -
        -      -      -      -      -      -      -      -      -
        -   49ms      -    2ms      -   47ms      -      -      -
        -      -      -      -      -      -      -      -      -
        -    2ms      -    1ms      -      -      -    1ms      -
    -----  -----  -----  -----  -----  -----  -----  -----  -----
      1ms    1ms    1ms  413us   16us   25us      -    5ms      -
      1ms    1ms    1ms  413us   16us   25us      -    5ms      -
      2ms    1ms    2ms  412us   26us   25us      -    5ms      -
        -    1ms      -  413us      -   25us      -    5ms      -
        -    1ms      -  460us      -   29us      -    5ms      -
    196us    1ms  196us  370us    7us   23us      -    5ms      -
    -----  -----  -----  -----  -----  -----  -----  -----  -----
    
    -w: Print out latency histograms:
    
    sdb           total           disk         sync_queue      async_queue
    latency    read   write    read   write    read   write    read   write   scrub
    -------  ------  ------  ------  ------  ------  ------  ------  ------  ------
    1ns           0       0       0       0       0       0       0       0       0
    ...
    33us          0       0       0       0       0       0       0       0       0
    66us          0       0     107    2486       2     788      12      12       0
    131us         2     797     359    4499      10     558     184     184       6
    262us        22     801     264    1563      10     286     287     287      24
    524us        87     575      71   52086      15    1063     136     136      92
    1ms         152    1190       5   41292       4    1693     252     252     141
    2ms         245    2018       0   50007       0    2322     371     371     220
    4ms         189    7455      22  162957       0    3912    6726    6726     199
    8ms         108    9461       0  102320       0    5775    2526    2526      86
    17ms         23   11287       0   37142       0    8043    1813    1813      19
    34ms          0   14725       0   24015       0   11732    3071    3071       0
    67ms          0   23597       0    7914       0   18113    5025    5025       0
    134ms         0   33798       0     254       0   25755    7326    7326       0
    268ms         0   51780       0      12       0   41593   10002   10002       0
    537ms         0   77808       0       0       0   64255   13120   13120       0
    1s            0  105281       0       0       0   83805   20841   20841       0
    2s            0   88248       0       0       0   73772   14006   14006       0
    4s            0   47266       0       0       0   29783   17176   17176       0
    9s            0   10460       0       0       0    4130    6295    6295       0
    17s           0       0       0       0       0       0       0       0       0
    34s           0       0       0       0       0       0       0       0       0
    69s           0       0       0       0       0       0       0       0       0
    137s          0       0       0       0       0       0       0       0       0
    -------------------------------------------------------------------------------
    
    -h: Help
    
    -H: Scripted mode. Do not display headers, and separate fields by a single
        tab instead of arbitrary space.
    
    -q: Include current number of entries in sync & async read/write queues,
        and scrub queue:
    
     syncq_read    syncq_write   asyncq_read  asyncq_write   scrubq_read
     pend  activ   pend  activ   pend  activ   pend  activ   pend  activ
    -----  -----  -----  -----  -----  -----  -----  -----  -----  -----
        0      0      0      0     78     29      0      0      0      0
        0      0      0      0     78     29      0      0      0      0
        0      0      0      0      0      0      0      0      0      0
        -      -      -      -      -      -      -      -      -      -
        0      0      0      0      0      0      0      0      0      0
        -      -      -      -      -      -      -      -      -      -
        0      0      0      0      0      0      0      0      0      0
    -----  -----  -----  -----  -----  -----  -----  -----  -----  -----
        0      0    227    394      0     19      0      0      0      0
        0      0    227    394      0     19      0      0      0      0
        0      0    108     98      0     19      0      0      0      0
        0      0     19     98      0      0      0      0      0      0
        0      0     78     98      0      0      0      0      0      0
        0      0     19     88      0      0      0      0      0      0
    -----  -----  -----  -----  -----  -----  -----  -----  -----  -----
    
    -p: Display numbers in parseable (exact) values.
    
    Also, update iostat syntax to allow the user to specify specific vdevs
    to show statistics for.  The three options for choosing pools/vdevs are:
    
    Display a list of pools:
        zpool iostat ... [pool ...]
    
    Display a list of vdevs from a specific pool:
        zpool iostat ... [pool vdev ...]
    
    Display a list of vdevs from any pools:
        zpool iostat ... [vdev ...]
    
    Lastly, allow zpool command "interval" value to be floating point:
        zpool iostat -v 0.5
    
    Signed-off-by: Tony Hutter <hutter2@llnl.gov
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4433

[33mcommit 20c901dc7a96a5f156d28bfb26d9f82026a4fcfb[m
Author: Marcel Huber <marcelhuberfoo@gmail.com>
Date:   Wed May 11 21:28:33 2016 +0200

    Fixes bug in fix_paths()
    
    Fixes bug introduced in commit 7d90f569a.  Hinted by gcc:
    
    libzfs_import.c: In function ‘fix_paths’:
    libzfs_import.c:602:28: warning: self-comparison always evaluates to true [-Wtautological-compare]
        if (best->ne_num_labels == best->ne_num_labels &&
    
    Signed-off-by: Marcel Huber <marcelhuberfoo@gmail.com>
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4632

[33mcommit 04bc461062df8e272aa11268668140c2976ac823[m
Author: Nikolay Borisov <n.borisov.lkml@gmail.com>
Date:   Mon May 9 22:15:30 2016 +0300

    Reduce stack usage of dmu_recv_stream function
    
    The receive_writer_arg and receive_arg structures become large
    when ZFS is compiled with debugging enabled. This results in
    gcc throwing an error about excessive stack usage:
    
      module/zfs/dmu_send.c: In function ‘dmu_recv_stream’:
      module/zfs/dmu_send.c:2502:1: error: the frame size of 1256 bytes is
      larger than 1024 bytes [-Werror=frame-larger-than=]
    
    Fix this by allocating those functions on the heap, rather than
    on the stack.
    
    With patch:    dmu_send.c:2350:1:dmu_recv_stream 240 static
    Without patch: dmu_send.c:2350:1:dmu_recv_stream 1336 static
    
    Signed-off-by: Nikolay Borisov <n.borisov.lkml@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4620

[33mcommit 2a8b84b747cb27a175aa3a45b8cdb293cde31886[m
Author: Adam Stevko <adam.stevko@gmail.com>
Date:   Mon May 9 14:03:18 2016 -0700

    OpenZFS 3993, 4700
    
    3993 zpool(1M) and zfs(1M) should support -p for "list" and "get"
    4700 "zpool get" doesn't support -H or -o options
    
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Ported by: Tony Hutter <hutter2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/3993
    OpenZFS-issue: https://www.illumos.org/issues/4700
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/c58b352
    
    Porting notes:
    I removed ZoL's zpool_get_prop_literal() in favor of
    zpool_get_prop(..., boolean_t literal) since that's what OpenZFS
    uses.  The functionality is the same.

[33mcommit f00828e5d94d4ee386d362aee4e1b37900b1322c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri May 6 10:24:06 2016 -0700

    Add zfs-helpers.sh script
    
    Add a script designed to facilitate in-tree development and testing
    by installing symlinks on your system which refer to in-tree helper
    utilities.  These helper utilities must be installed to in order to
    exercise all ZFS functionality.  By using symbolic links and keeping
    the scripts in-tree during development they can be easily modified
    and those changes tracked.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>
    Closes #4607

[33mcommit 32c8c946ea3228de86946fdd637c85eeeff1726a[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Fri Mar 25 15:21:56 2016 -0400

    OpenZFS 6842 - Fix empty xattr dir causing lockup
    
    Reviewed by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Ported-by: Denys Rtveliashvili <denys@rtveliashvili.name>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    An initial version of this patch was applied in commit 29572cc and
    subsequently refined upstream.  Since the implementations do not
    conflict with each other both are left applied for now.
    
    OpenZFS-issue: https://www.illumos.org/issues/6842
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/02525cd
    Closes #4615

[33mcommit b3744ae611a1920aa37b44aa3b37f02c7f23a5ba[m
Author: Chris Williamson <chris.williamson@delphix.com>
Date:   Tue Apr 19 20:45:04 2016 -0700

    OpenZFS 6873 - zfs_destroy_snaps_nvl leaks errlist
    
    Authored by: Chris Williamson <chris.williamson@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Ported-by: Denys Rtveliashvili <denys@rtveliashvili.name>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    lzc_destroy_snaps() returns an nvlist in errlist.
    zfs_destroy_snaps_nvl() should nvlist_free() it before returning.
    
    OpenZFS-issue: https://www.illumos.org/issues/6873
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/ee06391
    Closes #4614

[33mcommit 9f8026c802bf3ed23c66295ac4a0b07aa2cba528[m
Author: Denys Rtveliashvili <denys@rtveliashvili.name>
Date:   Mon May 9 19:22:00 2016 +0100

    OpenZFS 6879 - Incorrect endianness swap
    
    Authored by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Ported-by: Denys Rtveliashvili <denys@rtveliashvili.name>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    Incorrect endianness swap for drr_spill.drr_length in libzfs_sendrecv.c
    Instead of drr_write.drr_length, we should be assigning the result of
    the byteswap to drr_spill.drr_length.
    
    OpenZFS-issue: https ://www.illumos.org/issues/6879
    OpenZFS-commit: https ://github.com/openzfs/openzfs/commit/74c8720
    Closes #4613

[33mcommit 33cf67cd9ab2edef003ad4c64d12f5a2372c8938[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri May 6 18:14:03 2016 -0700

    Wrap vdev_count_verify_zaps() with ZFS_DEBUG
    
    Commit e0ab3ab introduced two blocks of code which are only needed
    when debugging is enabled.  These blocks should be wrapped with
    ZFS_DEBUG for clarity and to prevent unused variable warnings in
    a production build.
    
    Signed-off-by: Don Brady <don.brady@intel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4515

[33mcommit d5167616bbe090d5050b4a6a4c26662c88230e14[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri May 6 18:13:17 2016 -0700

    Per-vdev ZAP tests must use $ZPOOL and $ZDB
    
    Commit e0ab3ab introduced new per-vdev ZAP tests which should have
    used the $ZPOOL and $ZDB variabled.  The tests passed the automated
    testing since both utilities but when running in-tree all of the new
    tests fail.
    
    Signed-off-by: Don Brady <don.brady@intel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4515

[33mcommit ae6d0c601eb863f8275bf4ec841fbebf774c3d65[m
Author: David Quigley <dpquigl@users.noreply.github.com>
Date:   Fri May 6 12:35:52 2016 -0400

    OpenZFS 6672 - arc_reclaim_thread() should use gethrtime()
    
    6672 arc_reclaim_thread() should use gethrtime() instead of ddi_get_lbolt()
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Josef 'Jeff' Sipek <jeffpc@josefsipek.net>
    Reviewed by: Robert Mustacchi <rm@joyent.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Ported-by: David Quigley <dpquigl@davequigley.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/6672
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/571be5c
    Closes #4600

[33mcommit 4b2a3e0c9d6bcdec1fd279e9bb3b7c4628cd7ba6[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu May 5 16:19:12 2016 -0700

    OpenZFS 6286 - ZFS internal error when set large block on bootfs
    
    6286 ZFS internal error when set large block on bootfs
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Andriy Gapon <avg@FreeBSD.org>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/6286
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/6de9bb5
    Closes #4585

[33mcommit f7c63cda908ac10ecf11e4c3314011eedfbd9e42[m
Author: Tony Hutter <hutter2@llnl.gov>
Date:   Thu May 5 09:30:05 2016 -0700

    OpenZFS 6544 - incorrect comment in libzfs.h about offline status
    
    6544 incorrect comment in libzfs.h about offline status
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Ported-by: Tony Hutter <hutter2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/6544
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/cb605c4
    Closes #4595

[33mcommit 3ac2794cbf7eb6ae76311701ac755fc39616c8ac[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu May 5 09:27:55 2016 -0700

    OpenZFS 5669 - altroot not set in zpool create
    
    5669 altroot not set in zpool create when specified with -o
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george@delphix.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    OpenZFS-issue: https://www.illumos.org/issues/5669
    OpenZFS-commit: https://github.com/openzfs/openzfs/commit/c423721
    Closes #4594

[33mcommit 498056ab1e8b9cf9d124b75d72e24a097bac5b90[m
Author: Denys Rtveliashvili <denys@rtveliashvili.name>
Date:   Thu May 5 17:24:12 2016 +0100

    taskq_create() calls thread_create() with wrong arguments
    
    Correct the arguments passed to `thread_create()`.
    
    Signed-off-by: Isaac Huang <he.huang@intel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4593

[33mcommit e0ab3ab553e36595344d9cbdc240d380ad203b60[m
Author: Joe Stein <joe.stein@delphix.com>
Date:   Mon Apr 11 16:16:57 2016 -0400

    OpenZFS 6736 - ZFS per-vdev ZAPs
    
    6736 ZFS per-vdev ZAPs
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: John Kennedy <john.kennedy@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Don Brady <don.brady@intel.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/6736
      https://github.com/openzfs/openzfs/commit/215198a
    
    Ported-by: Don Brady <don.brady@intel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4515

[33mcommit 4cd77889b684fd0dd1a0a995b692dda3db76a9ac[m
Author: Nikolay Borisov <n.borisov.lkml@gmail.com>
Date:   Mon Apr 18 22:08:53 2016 +0300

    Kill znode->z_gen field
    
    This field is a duplicate of the inode->i_generation, so just kill it
    
    Signed-off-by: Nikolay Borisov <n.borisov.lkml@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4538

[33mcommit ddab862d4cb860c6067b50ed2d040ac6d0f96b65[m
Author: Tim Chase <tim@chase2k.com>
Date:   Mon May 2 12:00:50 2016 -0500

    Enable PF_FSTRANS for ioctl secpolicy callbacks (#4571)
    
    At the very least, the zfs_secpolicy_write_perms ioctl security policy
    callback, which calls dsl_dataset_hold(), can require freeing memory and,
    therefore, re-enter ZFS.  This patch enables PF_FSTRANS for all of the
    security policy callbacks similarly to the manner in which it's enabled
    for the actual ioctl callback.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4554

[33mcommit ef1c27117beae38fb87372b914ed9898ba7ef748[m
Author: Vitaut Bajaryn <vitaut.bayaryn@gmail.com>
Date:   Mon May 2 18:07:04 2016 +0200

    module/.gitignore: Add *.dwo (#4580)
    
    These files get generated when CONFIG_DEBUG_INFO_DWARF4 is enabled in
    Linux .config.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4580

[33mcommit 874bd959f4f15b3d4b007160ee7ad3f4111dd341[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sat Apr 30 12:21:51 2016 -0700

    Fix user namespaces uid/gid mapping
    
    As described in torvalds/linux@5f3a4a2 the &init_user_ns, and
    not the current user_ns, should be passed to posix_acl_from_xattr()
    and posix_acl_to_xattr().  Conveniently the init_user_ns is
    available through the init credential (kcred).
    
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Massimo Maggi <me@massimo-maggi.eu>
    Closes #4177

[33mcommit 1ab3678b5d671b4561a2d63958d56b2f7ca1b69e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Apr 26 17:24:41 2016 -0700

    Add support for libtirpc
    
    While OpenSolaris libc and glibc both include XDR support, the musl libc
    does not in favor of depending on the BSD-licensed libtirpc library.
    
    Adding support is a simple matter of detecting the library, including
    the headers and linking against it.  By default libtirpc will be checked
    for and if available used.  Otherwise, configure will fall back to using
    the xdr implementation provided by libc if available.  The options
    --with-tirpc/--without-tirpc can be used to disable this checking.
    
    In addition, the xdr_control() function has been simplied to only
    handle ZFSs specific use case.
    
    Original-patch-by: stf <s@ctrlc.hu>
    Original-patch-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Signed-off-by: Carlo Landmeter <clandmeter@gmail.com>
    Closes #2254
    Closes #4559

[33mcommit 463a8cfe2b293934edd2ee79115b20c4598353d6[m
Author: Alex Reece <alex@delphix.com>
Date:   Thu Apr 21 11:23:37 2016 -0700

    Illumos 6844 - dnode_next_offset can detect fictional holes
    
    6844 dnode_next_offset can detect fictional holes
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    dnode_next_offset is used in a variety of places to iterate over the
    holes or allocated blocks in a dnode. It operates under the premise that
    it can iterate over the blockpointers of a dnode in open context while
    holding only the dn_struct_rwlock as reader. Unfortunately, this premise
    does not hold.
    
    When we create the zio for a dbuf, we pass in the actual block pointer
    in the indirect block above that dbuf. When we later zero the bp in
    zio_write_compress, we are directly modifying the bp. The state of the
    bp is now inconsistent from the perspective of dnode_next_offset: the bp
    will appear to be a hole until zio_dva_allocate finally finishes filling
    it in. In the meantime, dnode_next_offset can detect a hole in the dnode
    when none exists.
    
    I was able to experimentally demonstrate this behavior with the
    following setup:
    1. Create a file with 1 million dbufs.
    2. Create a thread that randomly dirties L2 blocks by writing to the
    first L0 block under them.
    3. Observe dnode_next_offset, waiting for it to skip over a hole in the
    middle of a file.
    4. Do dnode_next_offset in a loop until we skip over such a non-existent
    hole.
    
    The fix is to ensure that it is valid to iterate over the indirect
    blocks in a dnode while holding the dn_struct_rwlock by passing the zio
    a copy of the BP and updating the actual BP in dbuf_write_ready while
    holding the lock.
    
    References:
      https://www.illumos.org/issues/6844
      https://github.com/openzfs/openzfs/pull/82
      DLPX-35372
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4548

[33mcommit 8a5fc74880251aa651306d1dbcc60715698996f0[m
Author: Josef 'Jeff' Sipek <jeffpc@josefsipek.net>
Date:   Thu Mar 31 23:54:07 2016 -0400

    Illumos 6659 - nvlist_free(NULL) is a no-op
    
    6659 nvlist_free(NULL) is a no-op
    Reviewed by: Toomas Soome <tsoome@me.com>
    Reviewed by: Marcel Telka <marcel@telka.sk>
    Approved by: Robert Mustacchi <rm@joyent.com>
    
    References:
      https://www.illumos.org/issues/6659
      https://github.com/illumos/illumos-gate/commit/aab83bb
    
    Ported-by: David Quigley <dpquigl@davequigley.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4566

[33mcommit 16794374b37fb22c32616fe1f40ade1304628ff9[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Apr 25 11:50:39 2016 -0700

    Fix zfs_copies_001_pos/zfs_copies_004_neg
    
    Call block_device_wait when creating/destroying volumes in order
    to make the operations synchronous as expected by the test cases.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4560

[33mcommit 325414e483a7858c1d10fb30cefe5749207098f4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Apr 20 10:17:01 2016 -0700

    Fix 'zpool import' blkid device names
    
    When importing a pool using the blkid cache only the device
    node path was added to the list of known paths for a device.
    This results in 'zpool import' always using the sdX names
    in preference to the 'path' name stored in the label.
    
    To fix the issue the blkid import path has been updated to
    add both the 'path', 'devid', and 'devname' names from the
    label to the known paths.  A sanity check is done to ensure
    these paths do refer to the same device identified by blkid.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Closes #4523
    Closes #3043

[33mcommit b8faf0cba87f90126e591d354945c79e7e7e3c6e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Apr 20 11:39:15 2016 -0700

    Disable efi_debug in --enable-debug builds
    
    Disable the additional EFI debugging in all builds.  Some users
    run debug builds in production and the extra log messages can
    cause confusion.  Beyond that the log messages are rarely useful.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Closes #4523

[33mcommit 2d82ea8b111103b28b8c9ad0f69dd88736248804[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Apr 19 11:19:12 2016 -0700

    Use udev for partition detection
    
    When ZFS partitions a block device it must wait for udev to create
    both a device node and all the device symlinks.  This process takes
    a variable length of time and depends on factors such how many links
    must be created, the complexity of the rules, etc.  Complicating
    the situation further it is not uncommon for udev to create and
    then remove a link multiple times while processing the udev rules.
    
    Given the above, the existing scheme of waiting for an expected
    partition to appear by name isn't 100% reliable.  At this point
    udev may still remove and recreate think link resulting in the
    kernel modules being unable to open the device.
    
    In order to address this the zpool_label_disk_wait() function
    has been updated to use libudev.  Until the registered system
    device acknowledges that it in fully initialized the function
    will wait.  Once fully initialized all device links are checked
    and allowed to settle for 50ms.  This makes it far more likely
    that all the device nodes will exist when the kernel modules
    need to open them.
    
    For systems without libudev an alternate zpool_label_disk_wait()
    was updated to include a settle time.  In addition, the kernel
    modules were updated to include retry logic for this ENOENT case.
    Due to the improved checks in the utilities it is unlikely this
    logic will be invoked.  However, if the rare event it is needed
    it will prevent a failure.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Signed-off-by: Richard Laager <rlaager@wiktel.com>
    Closes #4523
    Closes #3708
    Closes #4077
    Closes #4144
    Closes #4214
    Closes #4517

[33mcommit 5b4136bd499a892f65c86af8fd39fa21e05c9148[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Apr 13 14:50:16 2016 -0700

    Create unique partition labels
    
    When partitioning a device a name may be specified for each partition.
    Internally zfs doesn't use this partition name for anything so it
    has always just been set to "zfs".
    
    However this isn't optimal because udev will create symlinks using
    this name in /dev/disk/by-partlabel/.  If the name isn't unique
    then all the links cannot be created.
    
    Therefore a random 64-bit value has been added to the partition
    label, i.e "zfs-1234567890abcdef".  Additional information could
    be encoded here but since partitions may be reused that might
    result in confusion and it was decided against.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Signed-off-by: Richard Laager <rlaager@wiktel.com>
    Closes #4517

[33mcommit a5a370227eb0a3daf8992a38920d54eb3b7b3c25[m
Author: Matthew Thode <mthode@mthode.org>
Date:   Wed Mar 30 18:59:15 2016 -0500

    fix booting via dracut generated initramfs
    
    Dracut and Systemd updated how they integrate with each other, because
    of this our current integrations stopped working (around the time
    4.1.13 came out).  This patch addresses that issue and gets us booting
    again.
    
    Thanks to @Rudd-O for doing the work to get dracut working again and
    letting me submit this on his behalf.
    
    Signed-off-by: Manuel Amador (Rudd-O) <rudd-o@rudd-o.com>
    Signed-off-by: Matthew Thode <mthode@mthode.org>
    Closes #3605
    Closes #4478

[33mcommit 232604b58e8579501c5a260ad3a7b71a239dd546[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Thu Apr 21 17:19:07 2016 -0700

    Linux 4.5 compat: Use xattr_handler->name for acl
    
    Linux 4.5 added member "name" to xattr_handler. xattr_handler which matches to
    whole name rather than prefix should use "name" instead of "prefix".
    Otherwise, kernel will return with EINVAL when it tries to resolve handlers.
    
    Also, we remove the strcmp checks when xattr_handler has name, because
    xattr_resolve_name will do the check for us.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4549
    Closes #4537

[33mcommit da5e151f207ff1bc4972ce74a3a85e442ffd5a03[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Apr 13 08:55:35 2016 -0700

    Add pn_alloc()/pn_free() functions
    
    In order to remove the HAVE_PN_UTILS wrappers the pn_alloc() and
    pn_free() functions must be implemented.  The existing illumos
    implementation were used for this purpose.
    
    The `flags` argument which was used in places wrapped by the
    HAVE_PN_UTILS condition has beed added back to zfs_remove() and
    zfs_link() functions.  This removes a small point of divergence
    between the ZoL code and upstream.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4522

[33mcommit 8fc5674c522e22f0b97e4714bf5410e24d481afa[m
Author: Nikolay Borisov <n.borisov@siteground.com>
Date:   Wed Apr 13 09:40:42 2016 +0300

    Rework zpool import excluded devices check
    
    Current zpool import code skips directory entries which have prefixes
    similar to some system files on linux such as "fd", "core" etc. However,
    this means one cannot have one's zpools hosted inside files which are named
    e.g. core-1 or lp. Furthermore, apart from the string checks there is already
    which makes the zpool_open_func work only with regular files and block devices.
    
    To fix this problem remove most of the checks since they are redundant but
    leave the checks for the 'hpet' and 'watchdog' names. Furthermore, change
    the checks to strcmp which albeit less safe than strncmp allows to have
    devices whose names are prefixed by 'hpet' or 'watchdog'.
    
    Signed-off-by: Nikolay Borisov <kernel@kyup.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4438

[33mcommit 98f03691a4c08f38ca4538c468e9523f8e6b24be[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Fri Apr 15 18:55:03 2016 +0000

    Fix ZPL miswrite of default POSIX ACL
    
    Commit 4967a3e introduced a typo that caused the ZPL to store the
    intended default ACL as an access ACL. Due to caching this problem
    may not become visible until the filesystem is remounted or the inode
    is evicted from the cache. Fix the typo and add a regression test.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Closes #4520

[33mcommit 4903926f892ee10ead9571334efd43e80347b6f1[m
Author: Colin Ian King <colin.king@canonical.com>
Date:   Thu Apr 14 08:58:09 2016 +0100

    Fix inverted logic on none elevator comparison
    
    Commit d1d7e2689db9e03f1 ("cstyle: Resolve C style issues") inverted
    the logic on the none elevator comparison.  Fix this and make it
    cstyle warning clean.
    
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4507

[33mcommit edd770ebfb8e389474be41070fc72a066bbcdaa4[m
Author: Jinshan Xiong <jinshan.xiong@intel.com>
Date:   Tue Apr 12 15:27:47 2016 -0700

    remove sanity check in replacement test
    
    In replacement test, it spawns a process to truncate a file background
    and make sure that the process exists 1 second later. However, the
    process may have finished its work and exited therefore it has the
    chance to report a false alarm.
    
    This patch just removed those sanity check.
    
    Signed-off-by: Jinshan Xiong <jinshan.xiong@intel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4516

[33mcommit e61237961448ab1fedf7975715fac753ccc7acef[m
Author: Jinshan Xiong <jinshan.xiong@intel.com>
Date:   Wed Apr 6 09:48:10 2016 -0700

    Make zfs test easier to run in local install
    
    When ZFS is installed by 'make install', programs will be installed
    into '/usr/local'. ZFS test scripts can't locate programs 'zpool'
    that caused tests failure.
    
    Fix typo in help message.
    
    Add sanity check to for ksh and generate a useful error message.
    
    Signed-off-by: Jinshan Xiong <jinshan.xiong@intel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4495

[33mcommit 2b54cb14517b8b3877716dbe02fe75f12a47eb5e[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Tue Apr 5 17:32:23 2016 -0700

    Add zfs-tests for relatime
    
    Add atime_003_pos to test relatime=on, we do check_atime_updated twice, the
    first time should success and the second time should fail. We also modify
    atime_001_pos to do check_atime_updated twice and both times should succeed.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4482

[33mcommit 676007719462edf6ae1f0779252b99a0cb86b630[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Fri Apr 1 13:12:06 2016 -0700

    Make zfs mount according to relatime config in dataset
    
    Also enable lazytime in mount.zfs
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4482

[33mcommit 704cd0758a1a4ecef47b0dfa097acd94c8e4f57d[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Thu Mar 31 16:52:03 2016 -0700

    Enable lazytime semantic for atime
    
    Linux 4.0 introduces lazytime. The idea is that when we update the atime, we
    delay writing it to disk for as long as it is reasonably possible.
    
    When lazytime is enabled, dirty_inode will be called with only I_DIRTY_TIME
    flag whenever i_atime is updated. So under such condition, we will set
    z_atime_dirty. We will only write it to disk if file is closed, inode is
    evicted or setattr is called. Ideally, we should also write it whenever SA
    is going to be updated, but it is left for future improvement.
    
    There's one thing that we should take care of now that we allow i_atime to be
    dirty. In original implementation, whenever SA is modified, zfs_inode_update
    will be called to overwrite every thing in inode. This will cause dirty
    i_atime to be discarded. We fix this by don't overwrite i_atime in
    zfs_inode_update. We only overwrite i_atime when allocating new inode or doing
    zfs_rezget with zfs_inode_update_new.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4482

[33mcommit 0df9673f01e8c52d882502d62789fa66efc327e2[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Tue Mar 29 17:53:34 2016 -0700

    Fix atime handling and relatime
    
    The problem for atime:
    
    We have 3 places for atime: inode->i_atime, znode->z_atime and SA. And its
    handling is a mess. A huge part of mess regarding atime comes from
    zfs_tstamp_update_setup, zfs_inode_update, and zfs_getattr, which behave
    inconsistently with those three values.
    
    zfs_tstamp_update_setup clears z_atime_dirty unconditionally as long as you
    don't pass ATTR_ATIME. Which means every write(2) operation which only updates
    ctime and mtime will cause atime changes to not be written to disk.
    
    Also zfs_inode_update from write(2) will replace inode->i_atime with what's
    inside SA(stale). But doesn't touch z_atime. So after read(2) and write(2).
    You'll have i_atime(stale), z_atime(new), SA(stale) and z_atime_dirty=0.
    
    Now, if you do stat(2), zfs_getattr will actually replace i_atime with what's
    inside, z_atime. So you will have now you'll have i_atime(new), z_atime(new),
    SA(stale) and z_atime_dirty=0. These will all gone after umount. And you'll
    leave with a stale atime.
    
    The problem for relatime:
    
    We do have a relatime config inside ZFS dataset, but how it should interact
    with the mount flag MS_RELATIME is not well defined. It seems it wanted
    relatime mount option to override the dataset config by showing it as
    temporary in `zfs get`. But at the same time, `zfs set relatime=on|off` would
    also seems to want to override the mount option. Not to mention that
    MS_RELATIME flag is actually never passed into ZFS, so it never really worked.
    
    How Linux handles atime:
    
    The Linux kernel actually handles atime completely in VFS, except for writing
    it to disk. So if we remove the atime handling in ZFS, things would just work,
    no matter it's strictatime, relatime, noatime, or even O_NOATIME. And whenever
    VFS updates the i_atime, it will notify the underlying filesystem via
    sb->dirty_inode().
    
    And also there's one thing to note about atime flags like MS_RELATIME and
    other flags like MS_NODEV, etc. They are mount point flags rather than
    filesystem(sb) flags. Since native linux filesystem can be mounted at multiple
    places at the same time, they can all have different atime settings. So these
    flags are never passed down to filesystem drivers.
    
    What this patch tries to do:
    
    We remove znode->z_atime, since we won't gain anything from it. We remove most
    of the atime handling and leave it to VFS. The only thing we do with atime is
    to write it when dirty_inode() or setattr() is called. We also add
    file_accessed() in zpl_read() since it's not provided in vfs_read().
    
    After this patch, only the MS_RELATIME flag will have effect. The setting in
    dataset won't do anything. We will make zfstuil to mount ZFS with MS_RELATIME
    set according to the setting in dataset in future patch.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4482

[33mcommit 8b1899d3fbab354dfe57b2293216a76579e5d805[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Apr 5 12:39:37 2016 -0700

    Linux 4.6 compat: PAGE_CACHE_SIZE removal
    
    As described in torvalds/linux@4a2d057e the macros
    PAGE_CACHE_{SIZE,SHIFT,MASK,ALIGN} macros were originally introduced
    to make it possible to add bigger chunks to the page cache.  This
    never panned out and it has therefore been removed from the kernel.
    
    ZFS has been updated to use the PAGE_{SIZE,SHIFT,MASK,ALIGN} macros
    and calls to page_cache_release() have been replaced with put_page().
    
    There was no need to introduce a configure check for this because
    these interfaces have existed for a very long time.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Closes #4489

[33mcommit 63e0828c174e84ec583d34327b3fc1c5f53fa39c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Apr 1 08:49:19 2016 -0700

    Fix WANT_DEVNAME2DEVID configure error
    
    Accidentally introduced by commit e4023e4.  The AM_CONDITIONAL
    cannot be located where it can be invoked conditionally, as in
    the `--with-config=user` case.  Relocate it to the top level
    ZFS_AC_CONFIG macro along with the other AM_CONDITIONALs.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4416

[33mcommit f7b939bdbcd5d6fd11a638316138d1752acae78e[m
Author: Colin Ian King <colin.king@canonical.com>
Date:   Wed Mar 30 23:00:23 2016 +0100

    Add support 32 bit FS_IOC32_{GET|SET}FLAGS compat ioctls
    
    We need 32 bit userspace FS_IOC32_GETFLAGS and FS_IOC32_SETFLAGS
    compat ioctls for systems such as powerpc64.  We use the normal
    compat ioctl idiom as used by a variety of file systems to provide
    this support.
    
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4477

[33mcommit e4023e42a8cb0d267870db82f75e23d4efb9fbd9[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Mar 31 14:50:16 2016 -0700

    Only build devname2devid when libudev headers are available
    
    Accidentally introduced by commit 39fc0cb.  The devname2devid utility
    which depends on libudev must only be built when libudev headers are
    available.  This is accomplished through an AM_CONDITIONAL.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4416

[33mcommit 39fc0cb5577e409f415e25d35a452b46996c08b1[m
Author: Don Brady <don.brady@intel.com>
Date:   Mon Mar 14 10:04:21 2016 -0600

    Add support for devid and phys_path keys in vdev disk labels
    
    This is foundational work for ZED.
    
    Updates a leaf vdev's persistent device strings on Linux platform
    
    * only applies for a dedicated leaf vdev (aka whole disk)
    * updated during pool create|add|attach|import
    * used for matching device matching during auto-{online,expand,replace}
    * stored in a leaf disk config label (i.e. alongside 'path' NVP)
    * can opt-out using env var ZFS_VDEV_DEVID_OPT_OUT=YES
    
    Some examples:
    
        path: '/dev/sdb1'
        devid: 'scsi-350000394a8ca4fbc-part1'
        phys_path: 'pci-0000:04:00.0-sas-0x50000394a8ca4fbf-lun-0'
    
        path: '/dev/mapper/mpatha'
        devid: 'dm-uuid-mpath-35000c5006304de3f'
    
    Signed-off-by: Don Brady <don.brady@intel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2856
    Closes #3978
    Closes #4416

[33mcommit bebd73f2c3822a86863e7508e7a3e2929d871113[m
Author: Andriy Gapon <andriy.gapon@clusterhq.com>
Date:   Fri Mar 25 16:29:35 2016 +0200

    Expand EDQUOT variable
    
    Results in failures with ksh version 93v- 2014-06-25.  This appears
    to not be an issue with ksh version 93u+ 2012-08-01.  The expanded
    versions works correctly for both.
    
    Signed-off-by: Andriy Gapon <andriy.gapon@clusterhq.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4452

[33mcommit 88cfff182432e4d1c24c877f33b47ee6cf109eee[m
Author: Pavel Boldin <boldin.pavel@gmail.com>
Date:   Mon Mar 28 01:28:32 2016 +0300

    zfs_main: fix `zfs userspace` squashing unresolved entries
    
    The `zfs userspace` squashes all entries with unresolved numeric
    values into a single output entry due to the comparsion always
    made by the string name which is empty in case of unresolved IDs.
    
    Fix this by falling to a numerical comparison when either one
    of string values is not found. This then compares any numerical
    values after all with a name resolved.
    
    Signed-off-by: Pavel Boldin <boldin.pavel@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4440

[33mcommit 726c4a25659bfc0b3458da48a115dad67ddcb2ab[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 1 15:45:43 2016 +0100

    Remove complicated libspl assert wrappers
    
    Effectively provide our own version of assert()/verify() for use
    in user space.  This minimizes our dependencies and aligns the
    user space assertion handling with what's used in the kernel.
    
    Signed-off-by: Carlo Landmeter <clandmeter@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4449

[33mcommit e3e7cf6026f0761c155ae7920b03fb76c7ad5df8[m
Author: DHE <git@dehacked.net>
Date:   Sun Mar 27 15:58:27 2016 -0400

    gcc build error: -Wbool-compare in metaslab.c
    
    When debugging is enabled on a very recent version of gcc
    (tested with 5.3.0), DVA_SET_GANG(dva, !!(flags)) fails
    because an assertion causes a comparison between what is
    technically a boolean and an integer.
    
    Signed-off-by: DHE <git@dehacked.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4465

[33mcommit c35b188246899714c156a52fdea179eab3717e92[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sat Mar 26 14:17:26 2016 -0700

    Fix zpool_scrub_* test cases
    
    The zpool_scrub_002, zpool_scrub_003, zpool_scrub_004 test cases fail
    reliably when running against small pools or fast storage.  This
    occurs because the scrub/resilver operation completes before subsequent
    commands can be run.
    
    A one second delay has been added to 10% of zio's in order to ensure
    the scrub/resilver operation will run for at least several seconds.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4450

[33mcommit 967798d04afc801e70bb12590e8325a32fb998dd[m
Author: Carlo Landmeter <clandmeter@gmail.com>
Date:   Tue Mar 1 15:23:09 2016 +0100

    Use the correct macro to include backtrace
    
    execinfo.h and backtrace() are GNU extensions provided by glibc
    and not by gcc, see:
    
    http://www.gnu.org/software/libc/manual/html_mono/libc.html#Backtraces
    
    Signed-off-by: Carlo Landmeter <clandmeter@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4453

[33mcommit 1ad32f0a18657b3905bb127463e1a0653e0ef4ad[m
Author: Carlo Landmeter <clandmeter@gmail.com>
Date:   Fri Mar 25 13:21:53 2016 +0100

    Move hrtime_t timestruc_t and timespec_t
    
    hrtime_t timestruc_t and timespec_t should have originally been
    included in sys/time.h so lets move them.
    
    longlong_t is not defined by any standard so change it to long long
    
    Signed-off-by: Carlo Landmeter <clandmeter@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4459

[33mcommit 43148eaef2819eeda68e6846c03f0bd4672245a7[m
Author: Carlo Landmeter <clandmeter@gmail.com>
Date:   Tue Mar 1 16:23:12 2016 +0100

    Set _DATE_FMT to '%+' if not defined in libspl/timestamp.c
    
    Signed-off-by: Carlo Landmeter <clandmeter@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4458

[33mcommit 1a01c207cbf12a4a7934e327b94104ed4f8edb47[m
Author: Carlo Landmeter <clandmeter@gmail.com>
Date:   Tue Mar 1 15:32:52 2016 +0100

    Ensure correct return value type
    
    When compiling with musl libc the return type will be incorrect.
    
    Signed-off-by: Carlo Landmeter <clandmeter@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4454

[33mcommit 6d723925cf7d4d489f87d55c4907cbb9e6257196[m
Author: Carlo Landmeter <clandmeter@gmail.com>
Date:   Fri Mar 25 20:47:03 2016 +0100

    Add missing fcntl.h to includes in mount_zfs.c
    
    This is needed for musl libc
    
    Signed-off-by: Carlo Landmeter <clandmeter@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4456

[33mcommit fc46c795e1b5474569eab71e038dfbd03a30fc31[m
Author: Carlo Landmeter <clandmeter@gmail.com>
Date:   Tue Mar 1 15:56:26 2016 +0100

    Include sys/types.h in devid.h
    
    This is needed for musl libc
    
    Signed-off-by: Carlo Landmeter <clandmeter@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4454

[33mcommit 1c0120832c31f6424a6179e17f072612e448355b[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Mon Mar 28 17:13:42 2016 -0500

    Correct typo in spa_load_verify_metadata docs
    
    Signed-off-by: Richard Laager <rlaager@wiktel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4471

[33mcommit 9c13b489879beadc3eab04ebf16434477b3081db[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Mar 25 12:40:58 2016 -0700

    zloop.sh requires bash
    
    The zloop.sh script requires bash.  It will require further improvements
    to be compatible with the alternatives such as dash.  This resolves the
    ztest failures observed under Ubuntu in the automated tested.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4441

[33mcommit 72a780cd1ceb94ee4fa226bf9a8948f3dd0e2d95[m
Author: Andriy Gapon <andriy.gapon@clusterhq.com>
Date:   Fri Mar 25 16:32:11 2016 +0200

    write_dirs: set_partition expects zero-based partition indeces
    
    ... despite partition names based 1-based.
    
    Signed-off-by: Andriy Gapon <andriy.gapon@clusterhq.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4446

[33mcommit 647cb8545d92fab4cbbf2ffb94a458c1fced68b3[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Mar 25 11:51:01 2016 -0700

    zfs_copies: do_vol_test must wait for device
    
    Occasionally zfs_copies_* tests which rely on do_vol_test() will fail
    because udev hasn't yet created the minor device.  Wait for it.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 541a09016d652d92a9a665a3e62d83907b8b9941[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 22 18:08:59 2016 -0700

    Add zloop.sh test script
    
    Add Chris Williamson's "new" zloop script so that it may be
    intergated with ZoLs automated testing.  The original script may
    be found in the openzfs-build repository on Github.
    
    Minor modifications were made to the script so it can be run
    directly from the ZoL source tree or from installed packages.
    
    Additionally it was updated to use gdb instead of mdb to
    extact debugging information from a core dump.
    
    References:
      https://github.com/openzfs/openzfs-build/commit/7fb5d8b
      https://github.com/openzfs/openzfs-build/blob/master/ansible/roles/openzfs-jenkins-slave/files/usr/local/zloop.sh
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4441

[33mcommit 505d9655c9e759a145b4812c654c51c34dbe3425[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Mar 17 15:32:33 2016 -0700

    Fix zdb -e and zhack thread_init()
    
    This issue was caused by calling `thread_init()` and `thread_fini()`
    multiple times resulting in `kthread_key` being invalid.  To resolve
    the issue the explicit calls to `thread_init()` and `thread_fini()`
    required by the `zpool` command have been moved in to the command.
    Consumers such as `zdb` and `zhack` perform the same initialized
    through `kernel_init()` and `kernel_fini()`.
    
    Resolving this issue allows multiple additional test cases to
    be enabled.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Closes #4331

[33mcommit fc0c72b1670156622af26562030e84bd56d4cdfb[m
Author: Gvozden Neskovic <neskovic@gmail.com>
Date:   Mon Feb 29 19:42:27 2016 +0100

    Support for vectorized algorithms on x86
    
    This is initial support for x86 vectorized implementations of ZFS parity
    and checksum algorithms.
    
    For the compilation phase, configure step checks if toolchain supports relevant
    instruction sets. Each implementation must ensure that the code is not passed
    to compiler if relevant instruction set is not supported. For this purpose,
    following new defines are provided if instruction set is supported:
    	- HAVE_SSE,
    	- HAVE_SSE2,
    	- HAVE_SSE3,
    	- HAVE_SSSE3,
    	- HAVE_SSE4_1,
    	- HAVE_SSE4_2,
    	- HAVE_AVX,
    	- HAVE_AVX2.
    
    For detecting if an instruction set can be used in runtime, following functions
    are provided in (include/linux/simd_x86.h):
    	- zfs_sse_available()
    	- zfs_sse2_available()
    	- zfs_sse3_available()
    	- zfs_ssse3_available()
    	- zfs_sse4_1_available()
    	- zfs_sse4_2_available()
    	- zfs_avx_available()
    	- zfs_avx2_available()
    	- zfs_bmi1_available()
    	- zfs_bmi2_available()
    
    These function should be called once, on module load, or initialization.
    They are safe to use from user and kernel space.
    If an implementation is using more than single instruction set, both compiler
    and runtime support for all relevant instruction sets should be checked.
    
    Kernel fpu methods:
    	- kfpu_begin()
    	- kfpu_end()
    
    Use __get_cpuid_max and __cpuid_count from <cpuid.h>
    Both gcc and clang have support for these. They also handle ebx register
    in case it is used for PIC code.
    
    Signed-off-by: Gvozden Neskovic <neskovic@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Closes #4381

[33mcommit e853ba351935135487621f79211e87d5f2e39205[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Tue Mar 15 13:28:07 2016 -0400

    Cleanup linking
    
    I noticed during code review of zfsonlinux/zfs#4385 that the author of a
    commit had peppered the various Makefile.am files with `$(TIRPC_LIBS)`
    when putting it into `lib/libspl/Makefile.am` should have sufficed. Upon
    further examination, it seems that he had copied what we do with
    `$(ZLIB)`. We also have a bit of that with `-ldl` too.  Unfortunately,
    what we do is wrong, so lets fix it to set a good example for future
    contributors.
    
    In addition, we have multiple `-lz` and `-luuid` passed to the compiler
    because each `AC_CHECK_LIB` adds it to `$LIBS`. That is somewhat
    annoying to see, so we switch to `AC_SEARCH_LIBS` to avoid it.  This is
    consistent with the recommendation to use `AC_SEARCH_LIBS` over
    `AC_CHECK_LIB` by autotools upstream:
    
    https://www.gnu.org/software/autoconf/manual/autoconf-2.66/html_node/Libraries.html
    
    In an ideal world, this would translate into improvements in ELF's
    `DT_NEEDED` entries, but that is not the case because of a couple of
    bugs in libtool.
    
    The first bug causes libtool to overlink by using static link
    dependencies for dynamic linking:
    
    https://wiki.mageia.org/en/Overlinking_issues_in_packaging#libtool_issues
    
    The workaround for this should be to pass `-Wl,--as-needed` in
    `LDFLAGS`. That leads us to the second bug, where libtool passes
    `LDFLAGS` after the libraries are specified and `ld` will only honor
    `--as-needed` on libraries specified before it:
    
    https://sigquit.wordpress.com/2011/02/16/why-asneeded-doesnt-work-as-expected-for-your-libraries-on-your-autotools-project/
    
    There are a few possible workarounds for the second bug. One is to
    either patch the compiler spec file to specify `-Wl,--as-needed` or pass
    `-Wl,--as-needed` via `CC` like `CC='gcc -Wl,--as-needed'` so that it is
    specified early. Another is to patch ltmain.sh like Gentoo does:
    
    https://gitweb.gentoo.org/repo/gentoo.git/tree/eclass/ELT-patches/as-needed
    
    Without one of those workarounds, this cleanup provides no benefit in
    terms of `DT_NEEDED` entry generation. It should still be an improvement
    because it nicely simplifies the code while encouraging good habits when
    patching autotools scripts.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4426

[33mcommit a1bc34c0a7929130577e4c9dd418845674dd35c3[m
Author: Dimitri John Ledkov <xnox@ubuntu.com>
Date:   Wed Mar 16 21:53:20 2016 +0000

    Add support for s390[x].
    
    Signed-off-by: Dimitri John Ledkov <xnox@ubuntu.com>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4425

[33mcommit 99d0a9c39ea655fe4545bee31235cd91f2908763[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Mar 17 09:47:54 2016 -0700

    Disable zpool_add_004_pos test case
    
    This test case add a zvol to as a vdev to an existing pool.  This
    use case is currently known to be racy.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 6bb24f4dc7b7267699e3c3a4ca1ca062fe564b9e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jul 1 15:23:09 2015 -0700

    Add the ZFS Test Suite
    
    Add the ZFS Test Suite and test-runner framework from illumos.
    This is a continuation of the work done by Turbo Fredriksson to
    port the ZFS Test Suite to Linux.  While this work was originally
    conceived as a stand alone project integrating it directly with
    the ZoL source tree has several advantages:
    
      * Allows the ZFS Test Suite to be packaged in zfs-test package.
        * Facilitates easy integration with the CI testing.
        * Users can locally run the ZFS Test Suite to validate ZFS.
          This testing should ONLY be done on a dedicated test system
          because the ZFS Test Suite in its current form is destructive.
      * Allows the ZFS Test Suite to be run directly in the ZoL source
        tree enabled developers to iterate quickly during development.
      * Developers can easily add/modify tests in the framework as
        features are added or functionality is changed.  The tests
        will then always be in sync with the implementation.
    
    Full documentation for how to run the ZFS Test Suite is available
    in the tests/README.md file.
    
    Warning: This test suite is designed to be run on a dedicated test
    system.  It will make modifications to the system including, but
    not limited to, the following.
    
      * Adding new users
      * Adding new groups
      * Modifying the following /proc files:
        * /proc/sys/kernel/core_pattern
        * /proc/sys/kernel/core_uses_pid
      * Creating directories under /
    
    Notes:
      * Not all of the test cases are expected to pass and by default
        these test cases are disabled.  The failures are primarily due
        to assumption made for illumos which are invalid under Linux.
      * When updating these test cases it should be done in as generic
        a way as possible so the patch can be submitted back upstream.
        Most existing library functions have been updated to be Linux
        aware, and the following functions and variables have been added.
        * Functions:
          * is_linux          - Used to wrap a Linux specific section.
          * block_device_wait - Waits for block devices to be added to /dev/.
        * Variables:            Linux          Illumos
          * ZVOL_DEVDIR         "/dev/zvol"    "/dev/zvol/dsk"
          * ZVOL_RDEVDIR        "/dev/zvol"    "/dev/zvol/rdsk"
          * DEV_DSKDIR          "/dev"         "/dev/dsk"
          * DEV_RDSKDIR         "/dev"         "/dev/rdsk"
          * NEWFS_DEFAULT_FS    "ext2"         "ufs"
      * Many of the disabled test cases fail because 'zfs/zpool destroy'
        returns EBUSY.  This is largely causes by the asynchronous nature
        of device handling on Linux and is expected, the impacted test
        cases will need to be updated to handle this.
      * There are several test cases which have been disabled because
        they can trigger a deadlock.  A primary example of this is to
        recursively create zpools within zpools.  These tests have been
        disabled until the root issue can be addressed.
      * Illumos specific utilities such as (mkfile) should be added to
        the tests/zfs-tests/cmd/ directory.  Custom programs required by
        the test scripts can also be added here.
      * SELinux should be either is permissive mode or disabled when
        running the tests.  The test cases should be updated to conform
        to a standard policy.
      * Redundant test functionality has been removed (zfault.sh).
      * Existing test scripts (zconfig.sh) should be migrated to use
        the framework for consistency and ease of testing.
      * The DISKS environment variable currently only supports loopback
        devices because of how the ZFS Test Suite expects partitions to
        be named (p1, p2, etc).  Support must be added to generate the
        correct partition name based on the device location and name.
      * The ZFS Test Suite is part of the illumos code base at:
        https://github.com/illumos/illumos-gate/tree/master/usr/src/test
    
    Original-patch-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>
    Closes #6
    Closes #1534

[33mcommit 887d1e60ef1f20a1b13e7c7b0d208f10b13b9cbe[m
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   Sat Mar 12 00:25:32 2016 +0100

    Illumos 6681 - zfs list burning lots of time in dodefault() via dsl_prop_*
    
    6681 zfs list burning lots of time in dodefault() via dsl_prop_*
    Reviewed by: Patrick Mooney <patrick.mooney@joyent.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Approved by: Matthew Ahrens <mahrens@delphix.com>
    
    References:
      https://www.illumos.org/issues/6681
      https://github.com/illumos/illumos-gate/commit/d09e447
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4406

[33mcommit d76d9c696a79b07a4d874f20855d8828d84f03f6[m
Author: Gordan Bobic <gordan@redsleeve.org>
Date:   Tue Mar 15 17:17:51 2016 +0000

    Fix aarch64 compilation
    
    sys/param.h depends on types defined in sys/types.h
    (hrtime_t & timestruc_t).
    
    Signed-off-by: Gordan Bobic <gordan@redsleeve.org>
    Signed-off-by: Christopher J. Morrone <morrone2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4420

[33mcommit c352ec27d5c5ecea8f6af066258dfd106085eaac[m
Author: Paul Dagnelie <pcd@delphix.com>
Date:   Thu Feb 25 20:45:19 2016 -0500

    Illumos 6370 - ZFS send fails to transmit some holes
    
    6370 ZFS send fails to transmit some holes
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Chris Williamson <chris.williamson@delphix.com>
    Reviewed by: Stefan Ring <stefanrin@gmail.com>
    Reviewed by: Steven Burgess <sburgess@datto.com>
    Reviewed by: Arne Jansen <sensille@gmx.net>
    Approved by: Robert Mustacchi <rm@joyent.com>
    
    References:
      https://www.illumos.org/issues/6370
      https://github.com/illumos/illumos-gate/commit/286ef71
    
    In certain circumstances, "zfs send -i" (incremental send) can produce
    a stream which will result in incorrect sparse file contents on the
    target.
    
    The problem manifests as regions of the received file that should be
    sparse (and read a zero-filled) actually contain data from a file that
    was deleted (and which happened to share this file's object ID).
    
    Note: this can happen only with filesystems (not zvols, because they do
    not free (and thus can not reuse) object IDs).
    
    Note: This can happen only if, since the incremental source (FromSnap),
    a file was deleted and then another file was created, and the new file
    is sparse (i.e. has areas that were never written to and should be
    implicitly zero-filled).
    
    We suspect that this was introduced by 4370 (applies only if hole_birth
    feature is enabled), and made worse by 5243 (applies if hole_birth
    feature is disabled, and we never send any holes).
    
    The bug is caused by the hole birth feature. When an object is deleted
    and replaced, all the holes in the object have birth time zero. However,
    zfs send cannot tell that the holes are new since the file was replaced,
    so it doesn't send them in an incremental. As a result, you can end up
    with invalid data when you receive incremental send streams. As a
    short-term fix, we can always send holes with birth time 0 (unless it's
    a zvol or a dataset where we can guarantee that no objects have been
    reused).
    
    Ported-by: Steven Burgess <sburgess@datto.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4369
    Closes #4050

[33mcommit a9977b37ca7bd27ff28de435f8666e253ff6330e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jul 17 10:46:46 2014 -0700

    Relax MBR partition scanning requirement
    
    When checking a whole disk to see if it can be safely added to
    the pool a variety of checks are done.  One of those checks is
    to attempt to determine the partition information and scan all
    the partitions for existing filesystems.
    
    Since ZoL contains a EFI library this partition scanning is
    easy to do for GPT partitioned disks.  However, for non-GPT
    partitioned disks (MBR/EBR) things are a bit harder.  The lack of
    a convenient library means non-GPT partitioned disks will not
    have all their partitions checked.  For this reason, the default
    behavior was to require the force option.  For example:
    
    invalid vdev specification
    use '-f' to override the following errors:
    /dev/vdb does not contain an GPT label but it may contain partition
    information in the MBR.
    
    However in practice requiring the force option for this case is
    counter-intuitively less safe.  The reason is because only the first
    error is returned.  By passing the force option it will suppress
    this first warning and potentially others you were not aware of.
    
    Therefore this patch inverts the default behavior for non-GPT
    formated disks (unformatted, MBR/EBR, etc).  If no GPT table is
    detected and there is no file system detected on the provided
    block device.  Then it will be assumed that block device is safe
    to use.
    
    Longer term it would be nice to see MBR/EBR scanning added to
    the utilities.  This should be fairly straight forward to do.
    However these days it's somewhat less critical because Linux
    defaults to GPT partition tables for devices 2TB or larger.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2660
    Closes #2274

[33mcommit 1ee159f423b5eb3c4646b0ba2dd0fb359503ba90[m
Author: Boris Protopopov <boris.protopopov@actifio.com>
Date:   Wed Sep 23 12:34:51 2015 -0400

    Fix lock order inversion with zvol_open()
    
    zfsonlinux issue #3681 - lock order inversion between zvol_open() and
    dsl_pool_sync()...zvol_rename_minors()
    
    Remove trylock of spa_namespace_lock as it is no longer needed when
    zvol minor operations are performed in a separate context with no
    prior locking state; the spa_namespace_lock is no longer held
    when bdev->bd_mutex or zfs_state_lock might be taken in the code
    paths originating from the zvol minor operation callbacks.
    
    Signed-off-by: Boris Protopopov <boris.protopopov@actifio.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3681

[33mcommit a0bd735adb1b1eb81fef10b4db102ee051c4d4ff[m
Author: Boris Protopopov <boris.protopopov@actifio.com>
Date:   Sat Mar 22 05:07:14 2014 -0400

    Add support for asynchronous zvol minor operations
    
    zfsonlinux issue #2217 - zvol minor operations: check snapdev
    property before traversing snapshots of a dataset
    
    zfsonlinux issue #3681 - lock order inversion between zvol_open()
    and dsl_pool_sync()...zvol_rename_minors()
    
    Create a per-pool zvol taskq for asynchronous zvol tasks.
    There are a few key design decisions to be aware of.
    
    * Each taskq must be single threaded to ensure tasks are always
      processed in the order in which they were dispatched.
    
    * There is a taskq per-pool in order to keep the pools independent.
      This way if one pool is suspended it will not impact another.
    
    * The preferred location to dispatch a zvol minor task is a sync
      task.  In this context there is easy access to the spa_t and
      minimal error handling is required because the sync task must
      succeed.
    
    Support for asynchronous zvol minor operations address issue #3681.
    
    Signed-off-by: Boris Protopopov <boris.protopopov@actifio.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2217
    Closes #3678
    Closes #3681

[33mcommit eb0856779f7b57162c9179f238104f6d6e150745[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Mar 10 09:14:27 2016 -0800

    Remove RPM package restriction
    
    ZFS on Linux is regularly tested on arm, ppc, ppc64, i686 and x86_64
    architectures.  Given this the artificial architecture restriction in
    the packaging has been removed.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit f764edf01634444e1615a0350834ffe568f7f82f[m
Author: Tim Chase <tim@chase2k.com>
Date:   Mon Mar 7 07:35:29 2016 -0600

    Change KM_SLEEP to TQ_SLEEP in spa_deadman()
    
    Since they both evaluate to zero, this is a semi-cosmetic change
    but the latter is the proper value to use as an argument to
    taskq_dispatch_delay().
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4393

[33mcommit 95003f709859fd104aad258e56bcc4dc5c8cfcf0[m
Author: Thijs Cramer <thijs.cramer@gmail.com>
Date:   Thu Feb 4 22:34:49 2016 +0100

    Updated paths to scan when importing zpool(s)
    
    Added by-partlabel and by-partuuid to the default device search
    path.  Made made device names in by-label more preferable.
    
    Signed-off-by: Thijs Cramer <thijs.cramer@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3892

[33mcommit 7d11e37e5502e4dc473a9fe073779823d6ca2495[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 19 15:43:43 2016 -0800

    Require libblkid
    
    Historically libblkid support was detected as part of configure
    and optionally enabled.  This was done because at the time support
    for detecting ZFS pool vdevs had just be added to libblkid and
    those updated packages were not yet part of many distributions.
    This is no longer the case and any reasonably current distribution
    will ship a version of libblkid which can detect ZFS pool vdevs.
    
    This patch makes libblkid mandatory at build time and libblkid
    the preferred method of scanning for ZFS pools.  For distributions
    which include a modern version of libblkid there is no change in
    behavior.  Explicitly scanning the default search paths is still
    supported and can be enabled with the '-s' command line option.
    
    Additionally making libblkid mandatory means that the 'zpool create'
    command can reliably detect if a specified device has an existing
    non-ZFS filesystem (ext4, xfs) and print a warning.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2448

[33mcommit 048bb5bd4950b9cb5368ed93d273f0f36e439122[m
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Tue Mar 1 12:23:55 2016 -0800

    Ensure zed _finish_daemonize() leaves fds 0-2 open
    
    In zed's _finish_daemonize(), /dev/null is open()d onto a temporary
    file descriptor which is then dup()d onto stdin, stdout, and stderr.
    But if file descriptors 0, 1, or 2 are not already open at the start
    of this function, then the temporary file descriptor will fall within
    this range and be inadvertently closed when the function cleans up.
    
    This commit adds a check to prevent inadvertently closing this
    (presumably temporary) file descriptor when it shouldn't.
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4384

[33mcommit 272be6834c3989f13c51f65eba6ec1d776a0ad43[m
Author: Tony Hutter <hutter2@llnl.gov>
Date:   Wed Mar 2 12:57:06 2016 -0800

    Fix zpool iostat bandwidth/ops calculation
    
    print_vdev_stats() subtracts the old bandwidth/ops stats from the new stats
    to calculate the bandwidth/ops numbers in "zpool iostat".  However when the
    TXG numbers change between stats, zpool_refresh_stats() will incorrectly assign
    a NULL to the old stats. This causes print_vdev_stats() to use zeroes for
    the old bandwidth/ops numbers, resulting in an inaccurate calculation.
    
    This fix allows the calculation to happen even when TXGs change.
    
    Signed-off-by: Tony Hutter <hutter2@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4387

[33mcommit c53fb0113cc372ed8df3c08f59f83cb3ceee849b[m
Author: Carlo Landmeter <clandmeter@gmail.com>
Date:   Tue Mar 1 16:36:28 2016 +0100

    Add support for alpine linux
    
    Both Alpine Linux and Gentoo use OpenRC so we share its logic
    
    Signed-off-by: Carlo Landmeter <clandmeter@gmail.com>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4386

[33mcommit 513168abd267f84ebcb688b4e1d42a2abd4fedce[m
Author: ab-oe <arkadiusz.bubala@open-e.com>
Date:   Fri Feb 26 08:33:44 2016 +0100

    Make zvol update volsize operation synchronous.
    
    There is a race condition when new transaction group is added
    to dp->dp_dirty_datasets list by the zap_update in the zvol_update_volsize.
    Meanwhile, before these dirty data are synchronized, the receive process
    can cause that dmu_recv_end_sync is executed. Then finally dirty data
    are going to be synchronized but the synchronization ends with the NULL
    pointer dereference error.
    
    Signed-off-by: ab-oe <arkadiusz.bubala@open-e.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4116

[33mcommit 9f500936c82137ef3a57c53013894f622dcec14e[m
Author: smh <smh@FreeBSD.org>
Date:   Fri Feb 12 20:47:22 2016 -0500

    FreeBSD r256956: Improve ZFS N-way mirror read performance by using load and locality information.
    
    The existing algorithm selects a preferred leaf vdev based on offset of the zio
    request modulo the number of members in the mirror. It assumes the devices are
    of equal performance and that spreading the requests randomly over both drives
    will be sufficient to saturate them. In practice this results in the leaf vdevs
    being under utilized.
    
    The new algorithm takes into the following additional factors:
    * Load of the vdevs (number outstanding I/O requests)
    * The locality of last queued I/O vs the new I/O request.
    
    Within the locality calculation additional knowledge about the underlying vdev
    is considered such as; is the device backing the vdev a rotating media device.
    
    This results in performance increases across the board as well as significant
    increases for predominantly streaming loads and for configurations which don't
    have evenly performing devices.
    
    The following are results from a setup with 3 Way Mirror with 2 x HD's and
    1 x SSD from a basic test running multiple parrallel dd's.
    
    With pre-fetch disabled (vfs.zfs.prefetch_disable=1):
    
    == Stripe Balanced (default) ==
    Read 15360MB using bs: 1048576, readers: 3, took 161 seconds @ 95 MB/s
    == Load Balanced (zfslinux) ==
    Read 15360MB using bs: 1048576, readers: 3, took 297 seconds @ 51 MB/s
    == Load Balanced (locality freebsd) ==
    Read 15360MB using bs: 1048576, readers: 3, took 54 seconds @ 284 MB/s
    
    With pre-fetch enabled (vfs.zfs.prefetch_disable=0):
    
    == Stripe Balanced (default) ==
    Read 15360MB using bs: 1048576, readers: 3, took 91 seconds @ 168 MB/s
    == Load Balanced (zfslinux) ==
    Read 15360MB using bs: 1048576, readers: 3, took 108 seconds @ 142 MB/s
    == Load Balanced (locality freebsd) ==
    Read 15360MB using bs: 1048576, readers: 3, took 48 seconds @ 320 MB/s
    
    In addition to the performance changes the code was also restructured, with
    the help of Justin Gibbs, to provide a more logical flow which also ensures
    vdevs loads are only calculated from the set of valid candidates.
    
    The following additional sysctls where added to allow the administrator
    to tune the behaviour of the load algorithm:
    * vfs.zfs.vdev.mirror.rotating_inc
    * vfs.zfs.vdev.mirror.rotating_seek_inc
    * vfs.zfs.vdev.mirror.rotating_seek_offset
    * vfs.zfs.vdev.mirror.non_rotating_inc
    * vfs.zfs.vdev.mirror.non_rotating_seek_inc
    
    These changes where based on work started by the zfsonlinux developers:
    https://github.com/zfsonlinux/zfs/pull/1487
    
    Reviewed by:	gibbs, mav, will
    MFC after:	2 weeks
    Sponsored by:	Multiplay
    
    References:
      https://github.com/freebsd/freebsd@5c7a6f5d
      https://github.com/freebsd/freebsd@31b7f68d
      https://github.com/freebsd/freebsd@e186f564
    
    Performance Testing:
      https://github.com/zfsonlinux/zfs/pull/4334#issuecomment-189057141
    
    Porting notes:
    - The tunables were adjusted to have ZoL-style names.
    - The code was modified to use ZoL's vd_nonrot.
    - Fixes were done to make cstyle.pl happy
    - Merge conflicts were handled manually
    - freebsd/freebsd@e186f564bc946f82c76e0b34c2f0370ed9aea022 by my
      collegue Andriy Gapon has been included. It applied perfectly, but
      added a cstyle regression.
    - This replaces 556011dbec2d10579819078559a77630fc559112 entirely.
    - A typo "IO'a" has been corrected to say "IO's"
    - Descriptions of new tunables were added to man/man5/zfs-module-parameters.5.
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4334

[33mcommit a77f29f93c8d016f17d9b77f39662e311774aaae[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 26 08:57:30 2016 -0800

    Change full path subcommand flag from -p to -P
    
    Commit d2f3e29 introduced the -p option which outputs full paths
    for vdevs to multiple zpool subcommands.  When this was merged
    there was no conflict for this flag letter.  However it's certain
    there will be a conflict with the -p (parsable) flag used by other
    subcommands.  Therefore, -p is being changed to -P to avoid this.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4368

[33mcommit d2f3e292dccab23e47ade3c67677a10f353b9e85[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Sun Dec 29 13:40:46 2013 -0500

    Add -gLp to zpool subcommands for alt vdev names
    
    The following options have been added to the zpool add, iostat,
    list, status, and split subcommands.  The default behavior was
    not modified, from zfs(8).
    
      -g    Display vdev GUIDs  instead  of  the  normal  short
            device  names.  These GUIDs can be used in-place of
            device   names   for    the    zpool    detach/off‐
            line/remove/replace commands.
    
      -L    Display real paths for vdevs resolving all symbolic
            links. This can be used to lookup the current block
            device  name regardless of the /dev/disk/ path used
            to open it.
    
      -p    Display  full  paths  for vdevs instead of only the
            last component of the path.  This can  be  used  in
            conjunction with the -L flag.
    
    This behavior may also be enabled using the following environment
    variables.
    
      ZPOOL_VDEV_NAME_GUID
      ZPOOL_VDEV_NAME_FOLLOW_LINKS
      ZPOOL_VDEV_NAME_PATH
    
    This change is based on worked originally started by Richard Yao
    to add a -g option.  Then extended by @ilovezfs to add a -L option
    for openzfsonosx.  Those changes have been merged, re-factored,
    a -p option added and extended to all relevant zpool subcommands.
    
    Original-patch-by: Richard Yao <ryao@gentoo.org>
    Extended-by: ilovezfs <ilovezfs@icloud.com>
    Extended-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: ilovezfs <ilovezfs@icloud.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2011
    Closes #4341

[33mcommit e79a6bacc6666233e109513b614d19d9d7742820[m
Author: Grischa Zengel <github.zfsonlinux@zengel.info>
Date:   Fri Feb 19 19:20:55 2016 +0100

    Add nfs-kernel-server for Debian
    
    Debian based systems use nfs-kernel-server as the service name.
    List both nfs-server.service and nfs-kernel-server.service so
    this service will work on multiple distributions.
    
    Signed-off-by: Grischa Zengel <github.zfsonlinux@zengel.info>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4350

[33mcommit 8a09d5fd463120ee5d527b4d40d029b37a0b8d6e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Feb 10 10:42:01 2016 -0800

    Add l2arc_max_block_size tunable
    
    Set a limit for the largest compressed block which can be written
    to an L2ARC device.  By default this limit is set to 16M so there
    is no change in behavior.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Elling <Richard.Elling@RichardElling.com>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Closes #4323

[33mcommit 5428dc51fb55145fbac1c142402dafc11d1e7d28[m
Author: Boris Protopopov <boris.protopopov@actifio.com>
Date:   Tue Feb 16 14:52:55 2016 -0500

    Make zvol minor functionality more robust
    
    Close the race window in zvol_open() to prevent removal of
    zvol_state in the 'first open' code path. Move the call to
    check_disk_change() under zvol_state_lock to make sure the
    zvol_media_changed() and zvol_revalidate_disk() called by
    check_disk_change() are invoked with positive zv_open_count.
    
    Skip opened zvols when removing minors and set private_data
    to NULL for zvols that are not in use whose minors are being
    removed, to indicate to zvol_open() that the state is gone.
    Skip opened zvols when renaming minors to avoid modifying
    zv_name that might be in use, e.g. in zvol_ioctl().
    
    Drop zvol_state_lock before calling add_disk() when creating
    minors to avoid deadlocks with zvol_open().
    
    Wrap dmu_objset_find() with spl_fstran_mark()/unmark().
    
    Signed-off-by: Boris Protopopov <boris.protopopov@actifio.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Closes #4344

[33mcommit 19a47cb1c2be6da9b9d4a395a7afc07da4813a5f[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Fri Feb 5 23:10:13 2016 -0500

    Call dmu_read_uio_dbuf() in zvol_read()
    
    The difference between `dmu_read_uio()` and `dmu_read_uio_dbuf()` is
    that the former takes a hold while the latter uses an existing hold.
    `zfs_read()` in the ZPL will use `dmu_read_uio_dbuf()` while
    our analogous `zvol_write()` will use `dmu_write_uio_dbuf()`, but for no
    apparent reason, we inherited a `zvol_read()` function from
    OpenSolaris that does `dmu_read_uio()`. illumos-gate also still
    uses `dmu_read_uio()` to this day. Lets switch to `dmu_read_uio_dbuf()`,
    which is more performant.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Closes #4316

[33mcommit a765a34a3142a1dcedd256e076a54e6ae61953ca[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Fri Feb 5 20:36:07 2016 -0500

    Clean up zvol request processing to pass uio and fix porting regressions
    
    In illumos-gate, `zvol_read` and `zvol_write` are both passed uio_t
    rather than bio_t. Since we are translating from bio to uio for both, we
    might as well unify the logic and have code more similar to its illumos
    counterpart. At the same time, we can fix some regressions that occurred
    versus the original code from illumos-gate.
    
    We refactor zvol_write to take uio and also correct the
    following problems:
    
    1. We did `dnode_hold()` on each IO when we already had a hold.
    2. We would attempt to send writes that exceeded `DMU_MAX_ACCESS` to the
    DMU.
    3. We could call `zil_commit()` twice. In this case, this is because
    Linux uses the `->write` function to send flushes and can aggregate the
    flush with a write. If a synchronous write occurred with the flush, we
    effectively flushed twice when there is no need to do that.
    
    zvol_read also suffers from the first two problems. Other platforms
    suffer from the first, so we leave that for a second patch so that there
    is a discrete patch for them to cherry-pick.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Closes #4316

[33mcommit c7e7ec1997d65ea173d943289feb4d07d414c905[m
Author: Olaf Faaland <faaland1@llnl.gov>
Date:   Wed Jan 20 14:01:28 2016 -0800

    Make configure error clearer when failing to find SPL
    
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Closes #4251

[33mcommit 093911f1945b5c164a45bb077103283dafdcae0c[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Fri Jan 22 12:23:55 2016 -0800

    Remove wrong ASSERT in annotate_ecksum
    
    When using large blocks like 1M, there will be more than UINT16_MAX qwords in
    one block, so this ASSERT would go off. Also, it is possible for the histogram
    to overflow. We cap them to UINT16_MAX to prevent this.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4257

[33mcommit eea9309423d577d62cf62d1f98444e22e264ef15[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 5 18:41:22 2016 -0500

    Prevent zpool_find_vdev() from truncating vdev path
    
    When extracting tokens from the string strtok(2) is allowed to modify
    the passed buffer.  Therefore the zfs_strcmp_pathname() function must
    make a copy of the passed string before passing it to strtok(3).
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Don Brady <don.brady@intel.com>
    Closes #4312

[33mcommit 6b42ea85903b5d96eddbe364e71636e6802d8da0[m
Author: Paul Dagnelie <pcd@delphix.com>
Date:   Fri Feb 5 13:47:48 2016 -0800

    Illumos 5809 - Blowaway full receive in v1 pool causes kernel panic
    
    5809 Blowaway full receive in v1 pool causes kernel panic
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Alex Reece <alex@delphix.com>
    Reviewed by: Will Andrews <will@freebsd.org>
    Approved by: Gordon Ross <gwr@nexenta.com>
    
    References:
      https://www.illumos.org/issues/5809
      https://github.com/illumos/illumos-gate/commit/f40b29c
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 8e4c5c9a9406f4708f2f05ab711a82c0465a0ebb[m
Author: John Wren Kennedy <john.kennedy@delphix.com>
Date:   Fri Feb 5 13:31:34 2016 -0800

    Illumos 5767 - fix several problems with zfs test suite
    
    5767 fix several problems with zfs test suite
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Approved by: Gordon Ross <gwr@nexenta.com>
    
    References:
      https://www.illumos.org/issues/5767
      https://github.com/illumos/illumos-gate/commit/52244c0
    
    Porting Notes:
    - Only the updates to zpool_main.c were kept because the ZFS test
      suite is not currently part of the ZoL source tree.  The test
      suite itself should be updated to include the latest versions
      of the tests once we're running it for every commit
    - Fixes `zpool list` output.
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 007595564ea8e28ca2e91e523f744821d021c465[m
Author: Joshua M. Clulow <josh@sysmgr.org>
Date:   Sat Jan 30 21:20:58 2016 +0100

    Illumos 4448 - zfs diff misprints unicode characters
    
    4448 zfs diff misprints unicode characters
    Reviewed by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Reviewed by: Toomas Soome <tsoome@me.com>
    Approved by: Matthew Ahrens <mahrens@delphix.com>
    
    References:
      https://www.illumos.org/issues/4448
      https://github.com/illumos/illumos-gate/commit/b211eb9
    
    Porting Notes:
    - [lib/libzfs/libzfs_diff.c]
      - 38145d6 Ensure that zfs diff prints unicode safely.
      - 141b638 Change 3-digit octal escapes to 4-digit ones
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit e989f19cba2beffb03351842c2da1409f68e4466[m
Author: Tim Chase <tim@chase2k.com>
Date:   Wed Feb 3 10:07:34 2016 -0600

    Correctly parse -R flag arguments
    
    Currently, only the 'b' flag takes an argument which is an offset into
    the block at which a blkptr should be decoded.  The index into the flag
    string needed to be updated after parsing an argument.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4304

[33mcommit 7c9abfa7ab0bc88e059800c6a5f8d2c2ebb62588[m
Author: Gary Mills <gary_mills@fastmail.fm>
Date:   Tue Feb 2 16:23:21 2016 -0800

    Illumos 6537 - Panic on zpool scrub with DEBUG kernel
    
    6537 Panic on zpool scrub with DEBUG kernel
    Reviewed by: Steve Gonczi <gonczi@comcast.net>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Matthew Ahrens <mahrens@delphix.com>
    
    References:
      https://www.illumos.org/issues/6537
      https://github.com/illumos/illumos-gate/commit/8c04a1f
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit a4d179efa98f7fd3a54d2cf056b1ab3d86f14d50[m
Author: Dan McDonald <danmcd@omniti.com>
Date:   Tue Feb 2 16:34:23 2016 -0800

    Illumos 6096 - ZFS_SMB_ACL_RENAME needs to cleanup better
    
    6096 ZFS_SMB_ACL_RENAME needs to cleanup better
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Gordon Ross <gordon.w.ross@gmail.com>
    Reviewed by: George Wilson <gwilson@zfsmail.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    
    References:
      https://www.illumos.org/issues/6096
      https://github.com/illumos/illumos-gate/commit/8f5190a5
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit b77222c87333f67c29ce954a59ba8cbe8c713c3f[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Sat Jan 30 21:40:28 2016 +0100

    Illumos 6450 - scrub/resilver unnecessarily traverses snapshots
    
    6450 scrub/resilver unnecessarily traverses snapshots created
    after the scrub started
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Richard Elling <Richard.Elling@RichardElling.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/6450
      https://github.com/illumos/illumos-gate/commit/38d6103
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 9d36cdb65089954baf649a8963f2129654c0b0b2[m
Author: Richard Sharpe <rsharpe@samba.org>
Date:   Sun Jan 24 11:36:51 2016 -0800

    Handling negative dentries in a CI file system.
    
    For a Case Insensitive file system we must avoid creating negative
    entries in the dentry cache. We must also pass the FIGNORECASE into
    zfs_lookup so that special files are handled correctly.
    
    We must also prevent negative dentries from being created when files are
    unlinked.
    
    Tested by running fsstress from LTP (10 loops, 10 processes, 10,000 ops.)
    
    Also tested with printks (now removed) to ensure that lookups come to
    zpl_lookup when negative should not exist.
    
    Tests:
    1.   ls Some-file.txt; touch some-file.txt; ls Some-file.txt
      and ensure no errors.
    
    2.   touch Some-file.txt; rm some-file.txt; ls Some-file.txt
      and ensure that the last ls shows log messages showing the lookup
      went all the way to zpl_lookup.
    
    Thanks to tuxoko for helping me get this correct.
    
    Signed-off-by: Richard Sharpe <realrichardsharpe@gmail.com>
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4243

[33mcommit 4b9ed698b4838a36daa591d08728a692095f8f01[m
Author: Jorgen Lundman <lundman@lundman.net>
Date:   Tue Jan 26 18:02:04 2016 -0800

    Illumos 6527 -  Possible access beyond end of string in zpool comment
    
    6527 Possible access beyond end of string in zpool comment
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Approved by: Gordon Ross <gwr@nexenta.com>
    
    References:
      https://www.illumos.org/issues/6527
      https://github.com/illumos/illumos-gate/commit/2bd7a8d
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>

[33mcommit e56766360bd392bf9b8e5b9c2285ed35e1a066ea[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jan 26 17:54:45 2016 -0800

    Illumos 6495 - Fix mutex leak in dmu_objset_find_dp
    
    6495 Fix mutex leak in dmu_objset_find_dp
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Albert Lee <trisk@omniti.com>
    
    References:
      https://www.illumos.org/issues/6495
      https://github.com/illumos/illumos-gate/commit/2bad225
    
    Ported-by: Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>

[33mcommit b6fcb792ca2dad7fb2d190efa416ad8b718675b4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jan 26 17:27:46 2016 -0800

    Illumos 6414 - vdev_config_sync could be simpler
    
    6414 vdev_config_sync could be simpler
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    
    References:
      https://www.illumos.org/issues/6414
      https://github.com/illumos/illumos-gate/commit/eb5bb58
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>

[33mcommit 1a04bab34808694f3bf1cef3dc208c9499d103aa[m
Author: Simon Klinkert <simon.klinkert@gmail.com>
Date:   Fri Jan 22 16:00:59 2016 -0800

    llumos 6334 - Cannot unlink files when over quota
    
    6334 Cannot unlink files when over quota
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Toomas Soome <tsoome@me.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/6334
      https://github.com/illumos/illumos-gate/commit/6575bca
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit a966c5640e432f723753e63354394406a7c3dcf8[m
Author: kernelOfTruth <kerneloftruth@gmail.com>
Date:   Fri Aug 21 03:43:10 2015 +0200

    Reintroduce zfs_remove() synchronous deletes
    
    Reintroduce a slightly adapted version of the Illumos logic for
    synchronous unlinks.  The basic idea here is that only files
    smaller than zfs_delete_blocks (20480) blocks should be deleted
    synchronously.  Unlinking larger files should be handled
    asynchronously to minimize impact to the caller.
    
    To accomplish this iput() which is responsible for calling
    zfs_znode_delete() on Linux is only called in the delete_now
    path.  Otherwise zfs_async_iput() is used which allows the
    last reference to be dropped by a taskq thread effectively
    making the removal asynchronous.
    
    Porting notes:
    - Add zfs_delete_blocks module option for performance analysis.
      The default value is DMU_MAX_DELETEBLKCNT which is the same
      as upstream.  Reducing this value means that smaller files
      will be unlinked asynchronously like large files.
    - All occurrences of zfsvfs changes to zsb.
    
    Ported-by: KernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 460a021391d32b7f2e9eb05a9a01946714174e3b[m
Author: Dan McDonald <danmcd@nexenta.com>
Date:   Sun Aug 2 08:01:14 2015 -0500

    Log zvol truncate/discard operations
    
    As the comments in zvol_discard() suggested, the discard operation
    could be logged to the zil.  This is a port of the relevant code from
    Nexenta as it was added in "701 UNMAP support for COMSTAR" and has been
    attributed to the author of that commit.
    
    References:
      https://github.com/Nexenta/illumos-nexenta/commit/b77b923
      https://github.com/zfsonlinux/zfs/blob/089fa91b/module/zfs/zvol.c#L637
    
    Ported-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit d93b45aefc74b9c345ba3cdf3a227ee979a990cd[m
Author: Christian Neukirchen <chneukirchen@gmail.com>
Date:   Sat Jan 23 21:37:35 2016 +0100

    mount.zfs: use getopt_long instead of getopt to guarantee permutation of argv.
    
    mount.zfs is called by convention (and util-linux) with arguments
    last, i.e.
    
      % mount.zfs <dataset> <mountpoint> -o <options>
    
    This is not a problem on glibc since GNU getopt(3) will reorder the
    arguments.  However, alternative libc such as musl libc (or glibc with
    $POSIXLY_CORRECT set) will not permute argv and fail to parse the -o
    <options>.  Use getopt_long so musl will permute arguments.
    
    Signed-off-by: Christian Neukirchen <chneukirchen@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4222

[33mcommit 91d888437f729e0dce042d49b36063affb4f3af9[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Fri Jan 22 17:06:14 2016 -0800

    Illumos 6451 - ztest fails due to checksum errors
    
    6451 ztest fails due to checksum errors
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Jorgen Lundman <lundman@lundman.net>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/6451
      https://github.com/illumos/illumos-gate/commit/f9eb9fd
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit ba5ad9a48d720c5d13e1b70e779d8e3af7199195[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Fri Jan 22 16:41:02 2016 -0800

    Illumos 6251 - add tunable to disable free_bpobj processing
    
    6251 - add tunable to disable free_bpobj processing
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Simon Klinkert <simon.klinkert@gmail.com>
    Reviewed by: Richard Elling <Richard.Elling@RichardElling.com>
    Reviewed by: Albert Lee <trisk@omniti.com>
    Reviewed by: Xin Li <delphij@freebsd.org>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
      https://www.illumos.org/issues/6251
      https://github.com/illumos/illumos-gate/commit/139510f
    
    Porting notes:
    - Added as module option declaration.
    - Added to zfs-module-parameters.5 man page.
    
    Ported-by: Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 0a1f8cd9994427286c4663cccdeeae0de10cea19[m
Author: Tim Chase <tim@chase2k.com>
Date:   Sun Jan 24 13:11:15 2016 -0600

    Set arc_c_min properly in userland builds
    
    Since it's set to arc_c_max / 2, it must be set after arc_c_max is set.
    Also added protection against it falling below 2 * maxblocksize in
    userland builds.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4268

[33mcommit 1b8951b319b7bcddfe0cc2408b7717f9ce3d758b[m
Author: Tim Chase <tim@chase2k.com>
Date:   Fri Jan 22 07:37:37 2016 -0600

    Prevent arc_c collapse
    
    Adjusting arc_c directly is racy because it can happen in the context
    of multiple threads.  It should always be >= 2 * maxblocksize.  Set it
    to a known valid value rather than adjusting it directly.
    
    In addition refactor arc_shrink() to a simpler structure, protect against
    underflow in the calculation of the new arc_c value.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reverts: 935434ef
    Closes: #3904
    Closes: #4161

[33mcommit 957dc93242bfa5c94b3ffecfb02c5f758cf82f37[m
Author: Richard Yao <richard.yao@clusterhq.com>
Date:   Fri Dec 11 19:47:47 2015 -0500

    kobj_read_file: Return -1 on vn_rdwr() error
    
    LLVM's static analyzer showed that we could subtract using an
    uninitialized value on an error from vn_rdwr().
    
    The correct behavior is to return -1 on an error, so lets do that
    instead.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4104

[33mcommit ee42b3d6c3e4bd16d87b75e92a2bdec5cb85cd77[m
Author: Andrew Stormont <andyjstormont@gmail.com>
Date:   Wed Jan 20 16:37:10 2016 -0800

    Illumos 1778 - Assertion failed: rn->rn_nozpool == B_FALSE
    
    1778 Assertion failed: rn->rn_nozpool == B_FALSE
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george@delphix.com>
    Reviewed by: Richard Elling <richard.elling@richardelling.com>
    Approved by: Gordon Ross <gordon.ross@nexenta.com>
    
    References:
      https://www.illumos.org/issues/1778
      https://github.com/illumos/illumos-gate/commit/bd0f709
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 0fdd8d6482661047e3fabea72e8168abd945a7ec[m
Author: Marcel Telka <marcel.telka@nexenta.com>
Date:   Wed Jan 20 16:31:44 2016 -0800

    Illumos 5518 - Memory leaks in libzfs import implementation
    
    5518 Memory leaks in libzfs import implementation
    Reviewed by: Dan Fields <dan.fields@nexenta.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Serghei Samsi <sscdvp@gmail.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5518
      https://github.com/illumos/illumos-gate/commit/078266a
    
    Porting notes:
    - One hunk of this change was already applied independently in
      commit 4def05f.
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 519129ff4e717f3026ae70b58d2db59d937aef06[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jan 20 15:58:29 2016 -0800

    Illumos 6815179, 6844191
    
    6815179 zpool import with a large number of LUNs is too slow
    6844191 zpool import, scanning of disks should be multi-threaded
    
    References:
      https://github.com/illumos/illumos-gate/commit/4f67d75
    
    Porting notes:
    - This change was originally never ported to Linux due to it
      dependence on the thread pool interface.  This patch solves
      that issue by switching the code to use the existing taskq
      implementation which provides the same basic functionality.
      However, in order for this to work properly thread_init()
      and thread_fini() must be called around to taskq consumer
      to perform the needed thread initialization.
    
    - The check_one_slice, nozpool_all_slices, and check_slices
      functions have been disabled for Linux.  They are difficult,
      but possible, to implement for Linux due to how partitions
      are get names.  Since this is only an optimization this code
      can be added at a latter date.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 19d55079aecb5c022c1c09e0eace4f7da7381a62[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Mon Jul 7 11:49:36 2014 -0800

    Illumos 4950 - files sometimes can't be removed from a full filesystem
    
    4950 files sometimes can't be removed from a full filesystem
    Reviewed by: Adam Leventhal <adam.leventhal@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Sebastien Roy <sebastien.roy@delphix.com>
    Reviewed by: Boris Protopopov <bprotopopov@hotmail.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/4950
      https://github.com/illumos/illumos-gate/commit/4bb7380
    
    Porting notes:
    - ZoL currently does not log discards to zvols, so the portion of
      this patch that modifies the discard logging to mark it as
      freeing space has been discarded.
    
    2. may_delete_now had been removed from zfs_remove() in ZoL.
       It has been reintroduced.
    
    3. We do not try to emulate vnodes, so the following lines are
       not valid on Linux:
    
    	mutex_enter(&vp->v_lock);
    	may_delete_now = vp->v_count == 1 && !vn_has_cached_data(vp);
    	mutex_exit(&vp->v_lock);
    
      This has been replaced with:
    
    	mutex_enter(&zp->z_lock);
    	may_delete_now = atomic_read(&ip->i_count) == 1 && !(zp->z_is_mapped);
    	mutex_exit(&zp->z_lock);
    
    Ported-by: Richard Yao <richard.yao@clusterhq.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit dfe0d027344b8534c69cc902c71ae912d8759e12[m
Author: Olaf Faaland <faaland1@llnl.gov>
Date:   Tue Jan 19 17:48:17 2016 -0800

    Create zfs-kmod-debuginfo rpm with redhat spec file
    
    Correct the redhat specfile so that working debuginfo rpms are created
    for the kernel modules.  The generic specfile already does the right
    thing.
    
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4224

[33mcommit 37c56346cca55f60e36bb584e00966bba24af327[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jan 19 10:41:21 2016 -0800

    Close possible zfs_znode_held() race
    
    Check if the lock is held while holding the z_hold_locks() lock.
    This prevents a possible use-after-free bug for callers which are
    not holding the lock.  There currently are no such callers so this
    can't cause a problem today but it has been fixed regardless.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Closes #4244
    Issue #4124

[33mcommit ae3a373566042ad086b51dce66059c8cae321faf[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jan 19 09:04:44 2016 -0800

    Linux 4.5 compat: pfn_t typedef
    
    The pfn_t typedef was inherited from Illumos but never directly
    used by any libspl consumers.  This doesn't cause any issues in
    user space but for consistency with the kernel build it has been
    removed.  See torvalds/linux/commit/34c0fd54.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Issue #4228

[33mcommit 4967a3eb9d9de0295626fc7a3c1d1da52ea1498d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jan 14 18:01:24 2016 -0500

    Linux 4.5 compat: xattr list handler
    
    The registered xattr .list handler was simplified in the 4.5 kernel
    to only perform a permission check.  Given a dentry for the file it
    must return a boolean indicating if the name is visible.  This
    differs slightly from the previous APIs which also required the
    function to copy the name in to the provided list and return its
    size.  That is now all the responsibility of the caller.
    
    This should be straight forward change to make to ZoL since we've
    always required the caller to make the copy.  However, this was
    slightly complicated by the need to support 3 older APIs.  Yes,
    between 2.6.32 and 4.5 there are 4 versions of this interface!
    
    Therefore, while the functional change in this patch is small it
    includes significant cleanup to make the code understandable and
    maintainable.  These changes include:
    
    - Improved configure checks for .list, .get, and .set interfaces.
      - Interfaces checked from newest to oldest.
      - Strict checking for each possible known interface.
      - Configure fails when no known interface is available.
      - HAVE_*_XATTR_LIST renamed HAVE_XATTR_LIST_* for consistency
        with similar iops and fops configure checks.
    
    - POSIX_ACL_XATTR_{DEFAULT|ACCESS} were removed forcing callers to
      move to their replacements, XATTR_NAME_POSIX_ACL_{DEFAULT|ACCESS}.
      Compatibility wrapper were added for old kernels.
    
    - ZPL_XATTR_LIST_WRAPPER added which behaves the same as the existing
      ZPL_XATTR_{GET|SET} WRAPPERs.  Only the inode is guaranteed to be
      a valid pointer, passing NULL for the 'list' and 'name' variables
      is allowed and must be checked for.  All .list functions were
      updated to use the wrapper to aid readability.
    
    - zpl_xattr_filldir() updated to use the .list function for its
      permission check which is consistent with the updated Linux 4.5
      interface.  If a .list function is registered it should return 0
      to indicate a name should be skipped, if there is no registered
      function the name will be added.
    
    - Additional documentation from xattr(7) describing the correct
      behavior for each namespace was added before the relevant handlers.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Issue #4228

[33mcommit beeed4596b192f879fbb13e656cc6458ccde1193[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jan 14 13:25:10 2016 -0500

    Linux 4.5 compat: get_link() / put_link()
    
    The follow_link() interface was retired in favor of get_link().
    In the process of phasing in get_link() the Linux kernel went
    through two different versions.  The first of which depended
    on put_link() and the final version on a delayed done function.
    
    - Improved configure checks for .follow_link, .get_link, .put_link.
      - Interfaces checked from newest to oldest.
      - Strict checking for each possible known interface.
      - Configure fails when no known interface is available.
    
    - Both versions .get_link are detected and supported as well
      two previous versions of .follow_link.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Issue #4228

[33mcommit bc89ac8479c0b265c539b579fda2bef1997d423c[m
Author: Josef 'Jeff' Sipek <josef.sipek@nexenta.com>
Date:   Wed Jan 13 16:37:41 2016 -0800

    Illumos 5045 - use atomic_{inc,dec}_* instead of atomic_add_*
    
    5045 use atomic_{inc,dec}_* instead of atomic_add_*
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Garrett D'Amore <garrett@damore.org>
    Approved by: Robert Mustacchi <rm@joyent.com>
    
    References:
      https://www.illumos.org/issues/5045
      https://github.com/illumos/illumos-gate/commit/1a5e258
    
    Porting notes:
    - All changes to non-ZFS files dropped.
    - Changes to zfs_vfsops.c dropped because they were Illumos specific.
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4220

[33mcommit e3e670d0061ff121293dafb37d1f14a7069d49d5[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Jan 13 16:10:38 2016 -0800

    Illumos 4953, 4954, 4955
    
    4953 zfs rename <snapshot> need not involve libshare
    4954 "zfs create" need not involve libshare if we are not sharing
    4955 libshare's get_zfs_dataset need not sort the datasets
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Sebastien Roy <sebastien.roy@delphix.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: Gordon Ross <gordon.ross@nexenta.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
      https://www.illumos.org/issues/4953
      https://www.illumos.org/issues/4954
      https://www.illumos.org/issues/4955
      https://github.com/illumos/illumos-gate/commit/33cde0d
    
    Porting notes:
    - Dropped qsort libshare_zfs.c hunk, no equivalent ZoL code.
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4219

[33mcommit 812e91a7e3abe59565462e4bb2a01724afddb042[m
Author: Marcel Telka <marcel.telka@nexenta.com>
Date:   Wed Jan 13 15:35:55 2016 -0800

    Illumos 4039 - zfs_rename()/zfs_link() needs stronger test for XDEV
    
    4039 zfs_rename()/zfs_link() needs stronger test for XDEV
    Reviewed by: Gordon Ross <gordon.ross@nexenta.com>
    Reviewed by: Kevin Crowe <kevin.crowe@nexenta.com>
    Reviewed by: Saso Kiselkov <skiselkov.ml@gmail.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Dan McDonald <danmcd@nexenta.com>
    
    References:
      https://www.illumos.org/issues/4039
      https://github.com/illumos/illumos-gate/commit/18e6497
    
    Porting notes:
    - This check was updated in Linux in a similar fashion early on in
      the port.  Therefore, this patch just reorders the function and
      updates the comment so it flows the same way as the upstream code.
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4218

[33mcommit 82f6f6e654a51b47f9f2d642197852ced80487ee[m
Author: Joe Stein <joe.stein@delphix.com>
Date:   Wed Jan 13 15:05:59 2016 -0800

    Illumos 6298 - zfs_create_008_neg and zpool_create_023_neg
    
    6298 zfs_create_008_neg and zpool_create_023_neg need to be updated
    for large block support
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: John Kennedy <john.kennedy@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    
    References:
      https://www.illumos.org/issues/6298
      https://github.com/illumos/illumos-gate/commit/e9316f7
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4217

[33mcommit 59d4c71cca3bd6a1f122129ebb001089f903f182[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Wed Jan 13 14:37:39 2016 -0800

    Illumos 3557, 3558, 3559, 3560
    
    3557 dumpvp_size is not updated correctly when a dump zvol's size is changed
    3558 setting the volsize on a dump device does not return back ENOSPC
    3559 setting a volsize larger than the space available sometimes succeeds
    3560 dumpadm should be able to remove a dump device
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Approved by: Albert Lee <trisk@nexenta.com>
    
    References:
      https://www.illumos.org/issues/3559
      https://github.com/illumos/illumos-gate/commit/c61ea56
    
    Porting notes:
    - Internal zvol.c changes not applied due to implementation differences.
      The external interface and behavior was already consistent with the
      latest upstream code.
    - Retired 2.6.28 HAVE_CHECK_DISK_SIZE_CHANGE configure check.  All
      supported kernels (2.6.32 and newer) provide this interface.
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4217

[33mcommit 21f604d4607e9e76a632438ee9274d3a8ce3180d[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Wed Dec 30 15:47:11 2015 -0800

    Prevent duplicated xattr between SA and dir
    
    When replacing an xattr would cause overflowing in SA, we would fallback
    to xattr dir. However, current implementation don't clear the one in SA,
    so we would end up with duplicated SA.
    
    For example, running the following script on an xattr=sa filesystem
    would cause duplicated "user.1".
    
    -- dup_xattr.sh begin --
    randbase64()
    {
            dd if=/dev/urandom bs=1 count=$1 2>/dev/null | openssl enc -a -A
    }
    
    file=$1
    touch $file
    setfattr -h -n user.1 -v `randbase64 5000` $file
    setfattr -h -n user.2 -v `randbase64 20000` $file
    setfattr -h -n user.3 -v `randbase64 20000` $file
    setfattr -h -n user.1 -v `randbase64 20000` $file
    getfattr -m. -d $file
    -- dup_xattr.sh end --
    
    Also, when a filesystem is switch from xattr=sa to xattr=on, it will
    never modify those in SA. This would cause strange behavior like, you
    cannot delete an xattr, or setxattr would cause duplicate and the result
    would not match when you getxattr.
    
    For example, the following shell sequence.
    
    -- shell begin --
    $ sudo zfs set xattr=sa pp/fs0
    $ touch zzz
    $ setfattr -n user.test -v asdf zzz
    $ sudo zfs set xattr=on pp/fs0
    $ setfattr -x user.test zzz
    setfattr: zzz: No such attribute
    $ getfattr -d zzz
    user.test="asdf"
    $ setfattr -n user.test -v zxcv zzz
    $ getfattr -d zzz
    user.test="asdf"
    user.test="asdf"
    -- shell end --
    
    We fix this behavior, by first finding where the xattr resides before
    setxattr. Then, after we successfully updated the xattr in one location,
    we will clear the other location. Note that, because update and clear
    are not in single tx, we could still end up with duplicated xattr. But
    by doing setxattr again, it can be fixed.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #3472
    Closes #4153

[33mcommit 546f38433a870a2cf9907c6c61daad22a289fe39[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Tue Jan 12 21:01:14 2016 -0500

    SET_ERROR should print strings
    
    When debugging with tracepoints, we see string pointers:
    
    zfs  3017 [006]  8878.728915: zfs:zfs_set__error: ffffffffa0eec3fc:3013:ffffffffa0ebcd60(): error 0x2
            ffffffffa0e1ca43 spa_open_common (/lib/modules/3.12.21-gentoo-r1/extra/zfs/zfs.ko)
            ffffffffa0e1cbe3 spa_open (/lib/modules/3.12.21-gentoo-r1/extra/zfs/zfs.ko)
            ffffffffa0e6f6ef zfs_ioc_stable (/lib/modules/3.12.21-gentoo-r1/extra/zfs/zfs.ko)
            ffffffffa0e6f2a9 zfsdev_ioctl (/lib/modules/3.12.21-gentoo-r1/extra/zfs/zfs.ko)
            ffffffff811909dd do_vfs_ioctl ([kernel.kallsyms])
            ffffffff81190c41 sys_ioctl ([kernel.kallsyms])
            ffffffff8156e2e9 system_call_fastpath ([kernel.kallsyms])
                7ff7d8be69c7 __GI___ioctl (/lib64/libc-2.19.so)
                7ff7d90cac53 lzc_ioctl.constprop.3 (/lib64/libzfs_core.so.1.0.0)
            636f695f637a6c00 [unknown] ([unknown])
    
    Printing the actual strings is more convenient:
    
    zfs  3461 [001] 10599.847692: zfs:zfs_set__error: spa.c:3013:spa_open_common(): error 0x2
            ffffffffa116ba43 spa_open_common (/lib/modules/3.12.21-gentoo-r1/extra/zfs/zfs.ko)
            ffffffffa116bbe3 spa_open (/lib/modules/3.12.21-gentoo-r1/extra/zfs/zfs.ko)
            ffffffffa11be8df zfs_ioc_stable (/lib/modules/3.12.21-gentoo-r1/extra/zfs/zfs.ko)
            ffffffffa11be499 zfsdev_ioctl (/lib/modules/3.12.21-gentoo-r1/extra/zfs/zfs.ko)
            ffffffff811909dd do_vfs_ioctl ([kernel.kallsyms])
            ffffffff81190c41 sys_ioctl ([kernel.kallsyms])
            ffffffff8156e2e9 system_call_fastpath ([kernel.kallsyms])
                7f11b843c9c7 __GI___ioctl (/lib64/libc-2.19.so)
                7f11b8920c53 lzc_ioctl.constprop.3 (/lib64/libzfs_core.so.1.0.0)
            636f695f637a6c00 [unknown] ([unknown])
    
    A few other tracepoints have strings as well, so switch to printing
    the actual string values at the same time.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4212

[33mcommit b10695c8f1ce317cd24d99af7998741a35a5ce48[m
Author: Richard Yao <richard.yao@clusterhq.com>
Date:   Tue Jul 28 10:22:56 2015 -0400

    Remove fastwrite mutex
    
    The fast write mutex is intended to protect accounting, but it is
    redundant because all accounting is performed through atomic operations.
    It also serializes all metaslab IO behind a mutex, which introduces a
    theoretical scaling regression that the Illumos developers did not like
    when we showed this to them. Removing it makes the selection of the
    metaslab_group lock free as it is on Illumos. The selection is not quite
    the same without the lock because the loop races with IO completions,
    but any imbalances caused by this are likely to be corrected by
    subsequent metaslab group selections.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3643

[33mcommit c96c36fa22ab97f6b3025b356bfca8d9e030d002[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Dec 22 13:47:38 2015 -0800

    Fix zsb->z_hold_mtx deadlock
    
    The zfs_znode_hold_enter() / zfs_znode_hold_exit() functions are used to
    serialize access to a znode and its SA buffer while the object is being
    created or destroyed.  This kind of locking would normally reside in the
    znode itself but in this case that's impossible because the znode and SA
    buffer may not yet exist.  Therefore the locking is handled externally
    with an array of mutexs and AVLs trees which contain per-object locks.
    
    In zfs_znode_hold_enter() a per-object lock is created as needed, inserted
    in to the correct AVL tree and finally the per-object lock is held.  In
    zfs_znode_hold_exit() the process is reversed.  The per-object lock is
    released, removed from the AVL tree and destroyed if there are no waiters.
    
    This scheme has two important properties:
    
    1) No memory allocations are performed while holding one of the z_hold_locks.
       This ensures evict(), which can be called from direct memory reclaim, will
       never block waiting on a z_hold_locks which just happens to have hashed
       to the same index.
    
    2) All locks used to serialize access to an object are per-object and never
       shared.  This minimizes lock contention without creating a large number
       of dedicated locks.
    
    On the downside it does require znode_lock_t structures to be frequently
    allocated and freed.  However, because these are backed by a kmem cache
    and very short lived this cost is minimal.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4106

[33mcommit 0720116d4dd7a62d2097863fc4c32c3cbd11aefa[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Dec 18 12:19:14 2015 -0800

    Add zfs_object_mutex_size module option
    
    Add a zfs_object_mutex_size module option to facilitate resizing the
    the per-dataset znode mutex array.  Increasing this value may help
    make the deadlock described in #4106 less common, but this is not a
    proper fix.  This patch is primarily to aid debugging and analysis.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Issue #4106

[33mcommit d21f279a94994f65e6bdcbbca9fd2eb552a0d604[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jan 13 11:39:25 2016 -0800

    Illumos 3465, 3466, 3467, 3468, 3470, 3473
    
    3465 ::walk ... | ::<dcmd> misinterprets input as symbol names
    3466 ::tsd should handle missing/NULL values better
    3467 mdb_ctf_vread() could be more useful
    3468 mdb enhancements for zfs development
    3470 ::whatis does not print callers from KMF_LITE
    3473 mdb_get_module() returns wrong module
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Robert Mustacchi <rm@joyent.com>
    Approved by: Dan McDonald <danmcd@nexenta.com>
    
    References:
      https://www.illumos.org/issues/3468
      https://github.com/illumos/illumos-gate/commit/28e4da2
    
    Porting notes:
    - The only portion of this patch which applies to ZoL is a small
      change to types used in the refcount structure.
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4216

[33mcommit 89666a8e1cfe8691a31fa8ca33c55362e959e2ed[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jan 13 10:41:24 2016 -0800

    Increase default user space stack size
    
    Under RHEL6/CentOS6 the default stack size must be increased to 32K
    to prevent overflowing the stack when running ztest.  This isn't an
    issue for other distributions due to either the version of pthreads
    or perhaps the compiler.  Doubling the stack size resolves the
    issue safely for all distribution and leaves us some headroom.
    
    $ sudo -E ztest -V -T 300 -f /var/tmp/
    5 vdevs, 7 datasets, 23 threads, 300 seconds...
    
    loading space map for vdev 0 of 1, metaslab 0 of 30 ...
    ...
    loading space map for vdev 0 of 1, metaslab 14 of 30 ...
    child died with signal 11
    Exited ztest with error 3
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4215

[33mcommit e6cfd633be909956c8a6998f478ceb32558c210c[m
Author: Will Andrews <willa@spectralogic.com>
Date:   Thu Dec 31 17:38:59 2015 +0100

    Illumos 3749 - zfs event processing should work on R/O root filesystems
    
    3749 zfs event processing should work on R/O root filesystems
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Approved by: Christopher Siden <christopher.siden@delphix.com>
    
    References:
      https://www.illumos.org/issues/3749
      https://github.com/illumos/illumos-gate/commit/3cb69f7
    
    Porting notes:
    - [include/sys/spa_impl.h]
      - ffe9d38 Add generic errata infrastructure
      - 1421c89 Add visibility in to arc_read
    - [include/sys/fm/fs/zfs.h]
      - 2668527 Add linux events
      - 6283f55 Support custom build directories and move includes
    - [module/zfs/spa_config.c]
      - Updated spa_config_sync() to match illumos with the exception
        of a Linux specific block.
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 7ea4f88f8f94f6071f8533e85555139c81ddd647[m
Author: Marcel Telka <marcel.telka@nexenta.com>
Date:   Sun Jan 10 23:35:29 2016 +0100

    Illumos 6280 - libzfs: unshare_one() could fail with EZFS_SHARENFSFAILED
    
    6280 libzfs: unshare_one() could fail with EZFS_SHARENFSFAILED
    Reviewed by: Toomas Soome <tsoome@me.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Gordon Ross <gwr@nexenta.com>
    
    References:
      https://www.illumos.org/issues/6280
      https://github.com/illumos/illumos-gate/commit/d1672ef
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit d25b4497b7c7c209cbe28d31189bd7b2489b3d2f[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Sat Jan 9 19:33:11 2016 +0100

    Illumos 5141 - zfs minimum indirect block size is 4K
    
    5141 zfs minimum indirect block size is 4K
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Richard Elling <richard.elling@gmail.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5141
      https://github.com/illumos/illumos-gate/commit/e94f268
    
    Porting notes:
    - GRUB  --  GRand Unified Bootloader change wasn't merged (not applicable)
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit ee3a23b84e7f635b9b32448909f1b780d0c156bf[m
Author: Justin Gibbs <gibbs@scsiguy.com>
Date:   Sat Jan 9 18:29:05 2016 +0100

    Illumos 5438 - zfs_blkptr_verify should continue after zfs_panic_recover
    
    5438 zfs_blkptr_verify should continue after zfs_panic_recover
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george@delphix.com>
    Reviewed by: Xin LI <delphij@freebsd.org>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5438
      https://github.com/illumos/illumos-gate/commit/5897eb4
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit fc581e05072c21d82729091ebe34248fd0777460[m
Author: Josef 'Jeff' Sipek <josef.sipek@nexenta.com>
Date:   Sat Jan 9 18:37:15 2016 +0100

    Illumos 5515 - dataset user hold doesn't reject empty tags
    
    5515 dataset user hold doesn't reject empty tags
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Yuri Pankov <yuri.pankov@nexenta.com>
    Reviewed by: Saso Kiselkov <saso.kiselkov@nexenta.com>
    Approved by: Matthew Ahrens <mahrens@delphix.com>
    
    References:
      https://www.illumos.org/issues/5515
      https://github.com/illumos/illumos-gate/commit/752fd8d
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit a6fb32b85acb2245260aa1cbe396aea1f16b9dd3[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Sat Jan 9 17:19:10 2016 +0100

    Illumos 6281 - prefetching should apply to 1MB reads
    
    6281 prefetching should apply to 1MB reads
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Alexander Motin <mav@freebsd.org>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: Justin Gibbs <gibbs@scsiguy.com>
    Reviewed by: Xin Li <delphij@freebsd.org>
    Approved by: Gordon Ross <gordon.ross@nexenta.com>
    
    References:
      https://www.illumos.org/issues/6281
      https://github.com/illumos/illumos-gate/commit/6328027
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit fe467e06fd700707501e7e53cf0292149e308684[m
Author: Dan Vatca <dan.vatca@gmail.com>
Date:   Sat Jan 9 18:42:21 2016 +0100

    Illumos 6358 - A faulted pool with only unavailable vdevs
    
    6358 A faulted pool with only unavailable vdevs triggers assertion
    failure in libzfs
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Andrew Stormont <andyjstormont@gmail.com>
    Reviewed by: Serban Maduta <serban.maduta@gmail.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://illumos.org/issues/6358
      https://github.com/illumos/illumos-gate/commit/b289d04
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit adfe9d932bb5a4d367f7abe2e3b33fc0363dc815[m
Author: Saso Kiselkov <skiselkov@gmail.com>
Date:   Wed Dec 23 21:02:43 2015 +0100

    Illumos 6367 - spa_config_tryenter incorrectly handles the multiple-lock case
    
    6367 spa_config_tryenter incorrectly handles the multiple-lock case
    Reviewed by: Alek Pinchuk <alek.pinchuk@nexenta.com>
    Reviewed by: Josef 'Jeff' Sipek <josef.sipek@nexenta.com>
    Reviewed by: Prashanth Sreenivasa <prashksp@gmail.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: Steven Hartland <steven.hartland@multiplay.co.uk>
    Approved by: Matthew Ahrens <mahrens@delphix.com>
    
    References:
      https://www.illumos.org/issues/6367
      https://github.com/illumos/illumos-gate/commit/e495b6e
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 5f3d9c69d1dda5dce7dc0e4dd007b51a66177f1c[m
Author: Joe Stein <joe.stein@delphix.com>
Date:   Wed Dec 23 20:51:02 2015 +0100

    Illumos 6295 - metaslab_condense's dbgmsg should include vdev id
    
    6295 metaslab_condense's dbgmsg should include vdev id
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Andriy Gapon <avg@freebsd.org>
    Reviewed by: Xin Li <delphij@freebsd.org>
    Reviewed by: Justin Gibbs <gibbs@scsiguy.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/6295
      https://github.com/illumos/illumos-gate/commit/daec38e
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 616a57bea8a9b419a77853a29516507c16c09d90[m
Author: Joshua M. Clulow <josh@sysmgr.org>
Date:   Thu Nov 12 03:33:52 2015 +0100

    Illumos 6268 - zfs diff confused by moving a file to another directory
    
    6268 zfs diff confused by moving a file to another directory
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Justin Gibbs <gibbs@scsiguy.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/6268
      https://github.com/illumos/illumos-gate/commit/aab0441
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 0eb21616fabc46ca39b67fb3890637484dbf55c6[m
Author: Justin T. Gibbs <gibbs@scsiguy.com>
Date:   Thu Nov 5 00:00:58 2015 +0100

    Illumos 6171 - dsl_prop_unregister() slows down dataset eviction.
    
    6171 dsl_prop_unregister() slows down dataset eviction.
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/6171
      https://github.com/illumos/illumos-gate/commit/03bad06
    
    Porting notes:
      - Conflicts
        - 3558fd7 Prototype/structure update for Linux
        - 2cf7f52 Linux compat 2.6.39: mount_nodev()
        - 13fe019 Illumos #3464
        - 241b541 Illumos 5959 - clean up per-dataset feature count code
      - dsl_prop_unregister() preserved until out of tree consumers
        like Lustre can transition to dsl_prop_unregister_all().
      - Fixing 'space or tab at end of line' in include/sys/dsl_dataset.h
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 5a28a9737ade6a9c1014d8e7f286431fad9f382e[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Nov 4 21:37:33 2015 +0100

    Illumos 6288 - dmu_buf_will_dirty could be faster
    
    6288 dmu_buf_will_dirty could be faster
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Justin Gibbs <gibbs@scsiguy.com>
    Reviewed by: Richard Elling <Richard.Elling@RichardElling.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    
    References:
      https://www.illumos.org/issues/6288
      https://github.com/illumos/illumos-gate/commit/0f2e7d0
    
    Porting notes:
    - [module/zfs/dbuf.c]
      - Fix 'warning: ISO C90 forbids mixed declarations and code'
        by moving 'dbuf_dirty_record_t *dr' to start of code block.
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 2e8efe1befcbfb7bd832bf9717a2db95a420ba1c[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Wed Nov 4 21:12:40 2015 +0100

    Illumos 6292 - exporting a pool while an async destroy
    
    6292 exporting a pool while an async destroy is running can leave
    entries in the deferred tree
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Andriy Gapon <avg@FreeBSD.org>
    Reviewed by: Fabian Keil <fk@fabiankeil.de>
    Approved by: Gordon Ross <gordon.ross@nexenta.com>
    
    References:
      https://www.illumos.org/issues/6292
      https://github.com/illumos/illumos-gate/commit/a443cc8
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 5511754b4fa6b105941ec4e19a3b1c2b34bb7452[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Nov 4 21:19:17 2015 +0100

    Illumos 6319 - assertion failed in zio_ddt_write: bp->blk_birth == txg
    
    6319 assertion failed in zio_ddt_write: bp->blk_birth == txg
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/6319
      https://github.com/illumos/illumos-gate/commit/b39b744
    
    Porting notes:
    - Re-enabled ztest for CentOS test slaves.
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3449

[33mcommit 7f60329a261bd48558a498fb10e9b29638eab33b[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Sat Dec 26 22:10:31 2015 +0100

    Illumos 5987 - zfs prefetch code needs work
    
    5987 zfs prefetch code needs work
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Approved by: Gordon Ross <gordon.ross@nexenta.com>
    
    References:
      https://www.illumos.org/issues/5987 zfs prefetch code needs work
      illumos/illumos-gate@cf6106c 5987 zfs prefetch code needs work
    
    Porting notes:
    - [module/zfs/dbuf.c]
      - 5f6d0b6 Handle block pointers with a corrupt logical size
    - [module/zfs/dmu_zfetch.c]
      - c65aa5b Fix gcc missing parenthesis warnings
      - 428870f Update core ZFS code from build 121 to build 141.
      - 79c76d5 Change KM_PUSHPAGE -> KM_SLEEP
      - b8d06fc Switch KM_SLEEP to KM_PUSHPAGE
      - Account for ISO C90 - mixed declarations and code - warnings
      - Module parameters (new/changed):
        - Replaced zfetch_block_cap with zfetch_max_distance
          (Max bytes to prefetch per stream (default 8MB; 8 * 1024 * 1024))
        - Preserved zfs_prefetch_disable as 'int' for consistency with
          existing Linux module options.
    - [include/sys/trace_arc.h]
      - Added new tracepoints
        - DEFINE_ARC_BUF_HDR_EVENT(zfs_arc__sync__wait__for__async);
        - DEFINE_ARC_BUF_HDR_EVENT(zfs_arc__demand__hit__predictive__prefetch);
    - [man/man5/zfs-module-parameters.5]
      - Updated man page
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit ab5cbbd1078bf007b50b084bb31fd58c7c5652f4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jan 11 13:52:17 2016 -0800

    Illumos 6293 - ztest failure: error == 28 (0xc == 0x1c) in ztest_tx_assign()
    
    6293 ztest failure: error == 28 (0xc == 0x1c) in ztest_tx_assign()
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Richard Elling <Richard.Elling@RichardElling.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/6293
      https://github.com/illumos/illumos-gate/commit/8fe00bf
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 4d6369c1678d94422cb2fe92c333eb3083191f33[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jan 11 13:23:04 2016 -0800

    Illumos 5039 - ztest should default to larger device sizes
    
    5039 ztest should default to larger device sizes
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Max Grossman <max.grossman@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Saso Kiselkov <skiselkov.ml@gmail.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/5039
      https://github.com/illumos/illumos-gate/commit/539eed8
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit b870c7e5f4fe4520a32277bcc57b10a200a390aa[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jan 11 13:46:29 2016 -0800

    Revert "Illumos 3749 - zfs event processing should work on R/O root filesystems"
    
    This reverts commit b47637ecdc7b647ec5bd9dfca888179eecfaa72d which
    introduced a regression in ztest.
    
    $ ./cmd/ztest/ztest -V
    5 vdevs, 7 datasets, 23 threads, 300 seconds...
    *** Error in `/rpool/home/behlendo/src/git/zfs/cmd/ztest/.libs/lt-ztest':
    double free or corruption (fasttop): 0x0000000000d339f0 ***

[33mcommit 928c58dd0f297024363f8703cc57670fa9c96db7[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jan 11 14:09:00 2016 -0800

    Fix vn_rdwr() compiler warning
    
    kernel.c: In function 'vn_rdwr':
    kernel.c:736:8: warning: unused variable 'status' [-Wunused-variable]
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit b858767a31bc80cc9a65d1e7af70213916bfa34a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jan 11 13:33:28 2016 -0800

    Fix 'prevsnap property' build failure
    
    Fix build failure accidentally introduced by 1715493.  This only
    results in a failure when debugging is disabled.
    
    dsl_dataset.c: In function 'dsl_dataset_stats':
    dsl_dataset.c:1698:45: error: 'dp' undeclared (first use in this function)
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 1715493f38b0732b4bb23077d680e3a325a9096e[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Fri Jan 1 14:15:31 2016 +0100

    Illumos 4929 - want prevsnap property
    
    4929 want prevsnap property
    Reviewed by: Adam Leventhal <adam.leventhal@delphix.com>
    Reviewed by: Matt Amdur <matt.amdur@delphix.com>
    Reviewed by: Saso Kiselkov <skiselkov.ml@gmail.com>
    Reviewed by: Boris Protopopov <bprotopopov@hotmail.com>
    Reviewed by: Richard Lowe <richlowe@richlowe.net>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/4929
      https://github.com/illumos/illumos-gate/commit/b461c74
    
    Porting notes:
    - [include/sys/fs/zfs.h]
      - f67d70 Create an 'overlay' property
      - 11b9ec Add full SELinux support
    - [fs/zfs/dsl_dataset.c]
      - This increases the stack size of dsl_dataset_stats() but
        nothing has been changed until this is shown to be an issue.
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 9867e8be2a7182ce9b5eb28ed1d142e2ee60d69d[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Fri Jan 1 14:42:58 2016 +0100

    Illumos 4891 - want zdb option to dump all metadata
    
    4891 want zdb option to dump all metadata
    Reviewed by: Sonu Pillai <sonu.pillai@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: Richard Lowe <richlowe@richlowe.net>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    We'd like a way for zdb to dump metadata in a machine-readable
    format, so that we can bring that back from a customer site for
    in-house diagnosis.  Think of it as a crash dump for zpools,
    which can be used for post-mortem analysis of a malfunctioning
    pool
    
    References:
      https://www.illumos.org/issues/4891
      https://github.com/illumos/illumos-gate/commit/df15e41
    
    Porting notes:
    - [cmd/zdb/zdb.c]
      - a5778ea zdb: Introduce -V for verbatim import
      - In main() getopt 'opt' variable removed and the code was
        brought back in line with illumos.
    - [lib/libzpool/kernel.c]
      - 1e33ac1 Fix Solaris thread dependency by using pthreads
      - f0e324f Update utsname support
      - 4d58b69 Fix vn_open/vn_rdwr error handling
      - In vn_open() allocate 'dumppath' on heap instead of stack
      - Properly handle 'dump_fd == -1' error path
      - Free 'realpath' after added vn_dumpdir_code block
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit f3c9dca0937a7ca4fde2e47093cdae69f92dfb07[m
Author: Marcel Telka <marcel.telka@nexenta.com>
Date:   Sun Jan 10 23:31:24 2016 +0100

    Illumos 4638 - Panic in ZFS via rfs3_setattr()/rfs3_write(): dirtying snapshot!
    
    4638 Panic in ZFS via rfs3_setattr()/rfs3_write(): dirtying snapshot!
    Reviewed by: Alek Pinchuk <alek.pinchuk@nexenta.com>
    Reviewed by: Ilya Usvyatsky <ilya.usvyatsky@nexenta.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Garrett D'Amore <garrett@damore.org>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
      https://www.illumos.org/issues/4638
      https://github.com/illumos/illumos-gate/commit/2144b12
    
    Porting notes:
    - [module/zfs/zfs_vnops.c]
      - 3558fd7 Prototype/structure update for Linux
      - 2cf7f52 Linux compat 2.6.39: mount_nodev()
      - Use zfs_is_readonly() wrapper
      - Remove first line of comment which doesn't apply
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 53e0313506a4df6a39e9ac64e25f1e45e14af36a[m
Author: nathancheek <myself@nathancheek.com>
Date:   Fri Jan 8 13:45:40 2016 -0500

    Man page whitespace
    
    Signed-off-by: nathancheek <myself@nathancheek.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4184

[33mcommit b47637ecdc7b647ec5bd9dfca888179eecfaa72d[m
Author: Will Andrews <willa@spectralogic.com>
Date:   Thu Dec 31 17:38:59 2015 +0100

    Illumos 3749 - zfs event processing should work on R/O root filesystems
    
    3749 zfs event processing should work on R/O root filesystems
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Approved by: Christopher Siden <christopher.siden@delphix.com>
    
    References:
      https://www.illumos.org/issues/3749
      https://github.com/illumos/illumos-gate/commit/3cb69f7
    
    Porting notes:
    - [include/sys/spa_impl.h]
      - ffe9d38 Add generic errata infrastructure
      - 1421c89 Add visibility in to arc_read
    - [include/sys/fm/fs/zfs.h]
      - 2668527 Add linux events
      - 6283f55 Support custom build directories and move includes
    - [module/zfs/spa_config.c]
      - Updated spa_config_sync() to match illumos with the exception
        of a Linux specific block.
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit e9e3d31d2c141af15518ce6578ef26480fe97878[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jan 8 19:21:56 2016 -0500

    Allow 16M send/recv blocks
    
    Fix an off by one error introduced by fcff0f3 which triggers an
    assertion when 16M blocks are used with send/recv.  This fix was
    intentionally not folder in to the Illumos commit so it can be
    easily cherry-picked by upstream.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit fcff0f35bd522076bdda7491c88a91cc0aa531a3[m
Author: Paul Dagnelie <pcd@delphix.com>
Date:   Tue Dec 22 02:31:57 2015 +0100

    Illumos 5960, 5925
    
    5960 zfs recv should prefetch indirect blocks
    5925 zfs receive -o origin=
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    
    References:
      https://www.illumos.org/issues/5960
      https://www.illumos.org/issues/5925
      https://github.com/illumos/illumos-gate/commit/a2cdcdd
    
    Porting notes:
    - [lib/libzfs/libzfs_sendrecv.c]
      - b8864a2 Fix gcc cast warnings
      - 325f023 Add linux kernel device support
      - 5c3f61e Increase Linux pipe buffer size on 'zfs receive'
    - [module/zfs/zfs_vnops.c]
      - 3558fd7 Prototype/structure update for Linux
      - c12e3a5 Restructure zfs_readdir() to fix regressions
    - [module/zfs/zvol.c]
      - Function @zvol_map_block() isn't needed in ZoL
      - 9965059 Prefetch start and end of volumes
    - [module/zfs/dmu.c]
      - Fixed ISO C90 - mixed declarations and code
      - Function dmu_prefetch() 'int i' is initialized before
        the following code block (c90 vs. c99)
    - [module/zfs/dbuf.c]
      - fc5bb51 Fix stack dbuf_hold_impl()
      - 9b67f60 Illumos 4757, 4913
      - 34229a2 Reduce stack usage for recursive traverse_visitbp()
    - [module/zfs/dmu_send.c]
      - Fixed ISO C90 - mixed declarations and code
      - b58986e Use large stacks when available
      - 241b541 Illumos 5959 - clean up per-dataset feature count code
      - 77aef6f Use vmem_alloc() for nvlists
      - 00b4602 Add linux kernel memory support
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 00af2ff6f219b4f73aebaaf9496cf5ea4b6728a3[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jan 6 16:32:32 2016 -0500

    Add missing -V option to zdb
    
    Add missing getopt specifier for `zdb -V` verbatim option and
    set flag with correct bitwise operator.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit c5d0287011679d76288c2617c409252245172a32[m
Author: Richard Sharpe <rsharpe@samba.org>
Date:   Sun Dec 27 16:08:05 2015 -0800

    Fix casesensitivity=insensitive deadlock
    
    When casesensitivity=insensitive is set for the
    file system, we can deadlock in a rename if the user uses different case
    for each path. For example rename("A/some-file.txt", "a/some-file.txt").
    
    The simple test for this is:
    
    1. mkdir some-dir in a ZFS file system
    2. touch some-dir/some-file.txt
    3. mv Some-dir/some-file.txt some-dir/some-other-file.txt
    
    This last request deadlocks trying to relock the i_mutex on the inode for
    the parent directory.
    
    The solution is to use d_add_ci in zpl_lookup if we are on a file system
    that has the casesensitivity=insensitive attribute set.
    
    This patch checks if we are working on a case insensitive file system and if
    so, allocates storage for the case insensitive name and passes it to
    zfs_lookup and then calls d_add_ci instead of d_splice_alias.
    
    The performance impact seems to be minimal even though we have introduced a
    kmalloc and kfree in the lookup path.
    
    The problem was found when running Microsoft's FSCT against Samba on top of
    ZFS On Linux.
    
    Signed-off-by: Richard Sharpe <realrichardsharpe@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4136

[33mcommit 7cf2ffa02065fe0cbec13bfb7bf4fcfaabb3d40a[m
Author: Hajo Möller <dasjoe@gmail.com>
Date:   Fri Jan 1 02:20:43 2016 +0100

    Make arc_summary.py and dbufstat.py compatible with python3
    
    To make arc_summary.py and dbufstat.py compatible with python3
    some minor fixes were required, this was done automatically by
    `2to3 -w arc_summary.py` and `2to3 -w dbufstat.py`.
    
    Signed-off-by: Hajo Möller <dasjoe@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Reviewed-by: Richard Laager <rlaager@wiktel.com>

[33mcommit 074348589b3de871a719173bef1ea4d01ffe66eb[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Thu Dec 31 16:57:11 2015 +0100

    Illumos 3604 - zdb should print bpobjs more verbosely (fix zdb hang)
    
    3604 zdb should print bpobjs more verbosely (fix zdb hang)
    References:
      https://github.com/illumos/illumos-gate/commit/7706186
      https://www.illumos.org/issues/3604
      https://lists.freebsd.org/pipermail/svn-src-vendor/2015-August/002411.html
      https://lists.freebsd.org/pipermail/svn-src-head/2015-August/075195.html
    
    Porting notes:
    In ZoL "5810 zdb should print details of bpobj" was merged
    prior to this change so it must be applied to the new location.
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit b23ad7f350222ac439a679d99bd8b0aa27604aef[m
Author: Jeremy Jones <jeremy@delphix.com>
Date:   Thu Dec 31 16:41:52 2015 +0100

    Illumos 3139 - zdb dies when it tries to determine path of unlinked file
    
    3139 zdb dies when it tries to determine path of unlinked file
    Reviewed by: Matt Ahrens <matthew.ahrens@delphix.com>
    Reviewed by: Christopher Siden <chris.siden@delphix.com>
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Approved by: Dan McDonald <danmcd@nexenta.com>
    
    References:
      https://github.com/illumos/illumos-gate/commit/1ce39b5
      https://www.illumos.org/issues/3139
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit cfe86c01d5b3eec4a490de16a1db79c1244395ed[m
Author: Milan Jurik <milan.jurik@xylab.cz>
Date:   Wed Dec 30 14:43:27 2015 -0800

    Illumos 2077 - lots of unreachable breaks in illumos gate
    
    2077 lots of unreachable breaks in illumos gate
    Reviewed by: Dan McDonald <danmcd@nexenta.com>
    Reviewed by: Garrett D'Amore <garrett@damore.org>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/2077
      https://github.com/illumos/illumos-gate/commit/33f5ff1
    
    Porting notes:
    - Only one file of the original patch applied to ZFS
    - Minor formating change to align copyright block with upstream
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 37f8a8835a88da6122e2526d6aaeeef75556a7bd[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Mon Jul 6 05:20:31 2015 +0200

    Illumos 5746 - more checksumming in zfs send
    
    5746 more checksumming in zfs send
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Bayard Bell <buffer.g.overflow@gmail.com>
    Approved by: Albert Lee <trisk@omniti.com>
    
    References:
      https://www.illumos.org/issues/5746
      https://github.com/illumos/illumos-gate/commit/98110f0
      https://github.com/zfsonlinux/zfs/issues/905
    
    Porting notes:
    - Minor conflicts due to:
      - https://github.com/zfsonlinux/zfs/commit/2024041
      - https://github.com/zfsonlinux/zfs/commit/044baf0
      - https://github.com/zfsonlinux/zfs/commit/88904bb
    - Fix ISO C90 warnings (-Werror=declaration-after-statement)
      - arc_buf_t *abuf;
      - dmu_buf_t *bonus;
      - zio_cksum_t cksum_orig;
      - zio_cksum_t *cksump;
    - Fix format '%llx' format specifier warning
    - Align message in zstreamdump safe_malloc() with upstream
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3611

[33mcommit 43b4935e5358806de18461f3ee92e07c67071eb5[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Tue Dec 29 18:41:22 2015 -0800

    Prevent SA length overflow
    
    The function sa_update() accepts a 32-bit length parameter and
    assigns it to a 16-bit field in sa_bulk_attr_t, potentially
    truncating the passed-in value. This could lead to corrupt system
    attribute (SA) records getting written to the pool. Add a VERIFY to
    sa_update() to detect cases where overflow would occur. The SA length
    is limited to 16-bit values by the on-disk format defined by
    sa_hdr_phys_t.
    
    The function zfs_sa_set_xattr() is vulnerable to this bug if the
    unpacked nvlist of xattrs is less than 64k in size but the packed
    size is greater than 64k. Fix this by appropriately checking the
    size of the packed nvlist before calling sa_update(). Add error
    handling to zpl_xattr_set_sa() to keep the cached list of SA-based
    xattrs consistent with the data on disk.
    
    Lastly, zfs_sa_set_xattr() calls dmu_tx_abort() on an assigned
    transaction if sa_update() returns an error, but the DMU only allows
    unassigned transactions to be aborted. Wrap the sa_update() call in a
    VERIFY0, remove the transaction abort, and call dmu_tx_commit()
    unconditionally. This is consistent practice with other callers
    of sa_update().
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Closes #4150

[33mcommit 23de906c72946da56a54f75238693e186d44d6e2[m
Author: Chris Williamson <chris.williamson@delphix.com>
Date:   Mon Jul 6 01:11:09 2015 +0200

    Illumos 5745 - zfs set allows only one dataset property to be set at a time
    
    5745 zfs set allows only one dataset property to be set at a time
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Bayard Bell <buffer.g.overflow@gmail.com>
    Reviewed by: Richard PALO <richard@NetBSD.org>
    Reviewed by: Steven Hartland <killing@multiplay.co.uk>
    Approved by: Rich Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/5745
      https://github.com/illumos/illumos-gate/commit/3092556
    
    Porting notes:
    - Fix the missing braces around initializer, zfs_cmd_t zc = {"\0"};
    - Remove extra format argument in zfs_do_set()
    - Declare at the top:
      - zfs_prop_t prop;
      - nvpair_t *elem;
      - nvpair_t *next;
      - int i;
    - Additionally initialize:
      - int added_resv = 0;
      - zfs_prop_t prop = 0;
    - Assign 0 install of NULL for uint64_t types.
      - zc->zc_nvlist_conf = '\0';
      - zc->zc_nvlist_src = '\0';
      - zc->zc_nvlist_dst = '\0';
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3574

[33mcommit f5f087eb8800a9b3c7a8d7e5a96c095eff68b097[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Mon Dec 21 11:57:18 2015 -0800

    Make xattr dir truncate and remove in one tx
    
    We need truncate and remove be in the same tx when doing zfs_rmnode on xattr
    dir. Otherwise, if we truncate and crash, we'll end up with inconsistent zap
    object on the delete queue. We do this by skipping dmu_free_long_range and let
    zfs_znode_delete to do the work.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4114
    Issue #4052
    Issue #4006
    Issue #3018
    Issue #2861

[33mcommit 29572ccdeff7ddb1211b0f26dea69e0a2f262faf[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Fri Dec 18 11:39:41 2015 -0800

    Fix empty xattr dir causing lockup
    
    During zfs_rmnode on a xattr dir, if the system crash just after
    dmu_free_long_range, we would get empty xattr dir in delete queue. This would
    cause blkid=0 be passed into zap_get_leaf_byblk when doing zfs_purgedir during
    mount, and would try to do rw_enter on a wrong structure and cause system
    lockup.
    
    We fix this by returning ENOENT when blkid is zero in zap_get_leaf_byblk.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4114
    Closes #4052
    Closes #4006
    Closes #3018
    Closes #2861

[33mcommit 2ebc7b72b3989ac53c1753f79eaf71d95419c103[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Dec 21 09:27:24 2015 -0800

    Fix z_xattr_lock/z_teardown_lock inversion
    
    There exists a lock inversion between the z_xattr_lock and the
    z_teardown_lock.  Resolve this by taking the z_teardown_lock in
    all registered xattr callbacks prior to taking the z_xattr_lock.
    This ensures the locks are always taken is the same order thus
    preventing a deadlock.  Note the z_teardown_lock is taken again
    in zfs_lookup() and this is safe because the z_teardown lock is
    a re-entrant read reader/writer lock.
    
    * process-1
    zpl_xattr_get -> Takes zp->z_xattr_lock
      __zpl_xattr_get
        zfs_lookup -> Takes zsb->z_teardown_lock in ZFS_ENTER macro
    
    * process-2
    zfs_ioc_recv -> Takes zsb->z_teardown_lock in zfs_suspend_fs()
      zfs_resume_fs
        zfs_rezget -> Takes zp->z_xattr_lock
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Closes #3943
    Closes #3969
    Closes #4121

[33mcommit 228b461b564532123efbf3f6c595494c8cbe7793[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Dec 21 09:12:37 2015 -0800

    Revert "Fix z_xattr_lock/z_teardown_lock lock inversion"
    
    This reverts commit 6b32ef572f754efc3f9edb20d022450f8e6b02d9.

[33mcommit 151f84e2c32f690b92c424d8c55d2dfccaa76e51[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Dec 21 17:02:22 2015 -0500

    Fix ztest truncated cache file
    
    Commit efc412b updated spa_config_write() for Linux 4.2 kernels to
    truncate and overwrite rather than rename the cache file.  This is
    the correct fix but it should have only been applied for the kernel
    build.  In user space rename(2) is needed because ztest depends on
    the cache file.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4129

[33mcommit 448d7aaabc55b43663c597b91b221bed982d81dd[m
Author: Olaf Faaland <faaland1@llnl.gov>
Date:   Thu Oct 15 13:08:27 2015 -0700

    Identify locks flagged by lockdep
    
    When running a kernel with CONFIG_LOCKDEP=y, lockdep reports possible
    recursive locking in some cases and possible circular locking dependency
    in others, within the SPL and ZFS modules.
    
    This patch uses a mutex type defined in SPL, MUTEX_NOLOCKDEP, to mark
    such mutexes when they are initialized.  This mutex type causes
    attempts to take or release those locks to be wrapped in lockdep_off()
    and lockdep_on() calls to silence the dependency checker and allow the
    use of lock_stats to examine contention.
    
    For RW locks, it uses an analogous lock type, RW_NOLOCKDEP.
    
    The goal is that these locks are ultimately changed back to type
    MUTEX_DEFAULT or RW_DEFAULT, after the locks are annotated to reflect
    their relationship (e.g. z_name_lock below) or any real problem with the
    lock dependencies are fixed.
    
    Some of the affected locks are:
    
    tc_open_lock:
    =============
    This is an array of locks, all with same name, which txg_quiesce must
    take all of in order to move txg to next state.  All default to the same
    lockdep class, and so to lockdep appears recursive.
    
    zp->z_name_lock:
    ================
    In zfs_rmdir,
            dzp = znode for the directory (input to zfs_dirent_lock)
            zp  = znode for the entry being removed (output of zfs_dirent_lock)
    
    zfs_rmdir()->zfs_dirent_lock() takes z_name_lock in dzp
    zfs_rmdir() takes z_name_lock in zp
    
    Since both dzp and zp are type znode_t, the locks have the same default
    class, and lockdep considers it a possible recursive lock attempt.
    
    l->l_rwlock:
    ============
    zap_expand_leaf() sometimes creates two new zap leaf structures, via
    these call paths:
    
    zap_deref_leaf()->zap_get_leaf_byblk()->zap_leaf_open()
    zap_expand_leaf()->zap_create_leaf()->zap_expand_leaf()->zap_create_leaf()
    
    Because both zap_leaf_open() and zap_create_leaf() initialize
    l->l_rwlock in their (separate) leaf structures, the lockdep class is
    the same, and the linux kernel believes these might both be the same
    lock, and emits a possible recursive lock warning.
    
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3895

[33mcommit e0553a74adf1b1035e1ae25ca7feacacdeb93931[m
Author: Olaf Faaland <faaland1@llnl.gov>
Date:   Fri Nov 6 09:38:27 2015 -0800

    Add lock types RW_NOLOCKDEP and MUTEX_NOLOCKDEP
    
    Both lock types were introduced in SPL to allow some locks to be
    taken/released with linux lockdep turned off.  See SPL commit for
    details.
    
    Add the new lock types to zfs_context.h to allow user space compilation.
    
    Depends on SPL commit 692ae8d
    SPL pull request refs/pull/480/head
    
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3895

[33mcommit 76d5bf196cf6e5625f884a9ebbdaf53873a5a979[m
Author: Kamil Domański <kamil@domanski.co>
Date:   Wed Dec 16 17:24:28 2015 +0100

    Skip GPL-only symbols test when cross-compiling
    
    Signed-off-by: Kamil Domański <kamil@domanski.co>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4107

[33mcommit dcb6bed1dfc7ca6221a556f19d4252272ccfda33[m
Author: DHE <git@dehacked.net>
Date:   Wed Dec 16 14:22:32 2015 -0500

    Make zio_taskq_batch_pct user configurable
    
    Adds zio_taskq_batch_pct as an exported module parameter,
    allowing users to modify it at module load time.
    
    Signed-off-by: DHE <git@dehacked.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4110

[33mcommit 82dba185c8780e439958d1524f91167a2920d76c[m
Author: Benjamin Albrecht <git@albrecht.io>
Date:   Fri Nov 20 17:48:54 2015 +0100

    Activate LVM volume groups before looking for zpools.
    
    Original-patch-by: @jgoerzen
    Signed-off-by: Benjamin Albrecht <git@albrecht.io>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes zfsonlinux/pkg-zfs#102
    Closes #4029

[33mcommit 6b4e21c60eda9d9e514c933de7cbe214aa77f7f4[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Wed Dec 16 17:45:15 2015 -0800

    Man page white space and spelling corrections
    
    Correct some misspelled words and grammatical errors, and remove
    trailing white space in the man pages.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4115

[33mcommit a58df6f53687ac6d1dee21f60de41b2552a43201[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 17 09:26:05 2015 -0800

    Fix zfs_vdev_aggregation_limit bounds checking
    
    Update the bounds checking for zfs_vdev_aggregation_limit so that
    it has a floor of zero and a maximum value of the supported block
    size for the pool.
    
    Additionally add an early return when zfs_vdev_aggregation_limit
    equals zero to disable aggregation.  For very fast solid state or
    memory devices it may be more expensive to perform the aggregation
    than to issue the IO immediately.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 6fe53787f38f10956b8d375133ed4559f8ce847b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Dec 16 11:28:15 2015 -0800

    Fix vdev_queue_aggregate() deadlock
    
    This deadlock may manifest itself in slightly different ways but
    at the core it is caused by a memory allocation blocking on file-
    system reclaim in the zio pipeline.  This is normally impossible
    because zio_execute() disables filesystem reclaim by setting
    PF_FSTRANS on the thread.  However, kmem cache allocations may
    still indirectly block on file system reclaim while holding the
    critical vq->vq_lock as shown below.
    
    To resolve this issue zio_buf_alloc_flags() is introduced which
    allocation flags to be passed.  This can then be used in
    vdev_queue_aggregate() with KM_NOSLEEP when allocating the
    aggregate IO buffer.  Since aggregating the IO is purely a
    performance optimization we want this to either succeed or fail
    quickly.  Trying too hard to allocate this memory under the
    vq->vq_lock can negatively impact performance and result in
    this deadlock.
    
    * z_wr_iss
    zio_vdev_io_start
      vdev_queue_io -> Takes vq->vq_lock
        vdev_queue_io_to_issue
          vdev_queue_aggregate
            zio_buf_alloc -> Waiting on spl_kmem_cache process
    
    * z_wr_int
    zio_vdev_io_done
      vdev_queue_io_done
        mutex_lock -> Waiting on vq->vq_lock held by z_wr_iss
    
    * txg_sync
    spa_sync
      dsl_pool_sync
        zio_wait -> Waiting on zio being handled by z_wr_int
    
    * spl_kmem_cache
    spl_cache_grow_work
      kv_alloc
        spl_vmalloc
          ...
          evict
            zpl_evict_inode
              zfs_inactive
                dmu_tx_wait
                  txg_wait_open -> Waiting on txg_sync
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Closes #3808
    Closes #3867

[33mcommit a8ad3bf02cace90c45bc25df1bff1089d19e79f1[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Dec 16 14:17:49 2015 -0800

    Fix z_xattr_lock/z_teardown_lock lock inversion
    
    There exists a lock inversion between the z_xattr_lock and the
    z_teardown_lock.  Detect this case and return EBUSY so zfs_resume_fs()
    will mark the inode stale and it can be safely revalidated on next
    access.
    
    * process-1
    zpl_xattr_get -> Takes zp->z_xattr_lock
      __zpl_xattr_get
        zfs_lookup -> Takes zsb->z_teardown_lock in ZFS_ENTER macro
    
    * process-2
    zfs_ioc_recv -> Takes zsb->z_teardown_lock in zfs_suspend_fs()
      zfs_resume_fs
        zfs_rezget -> Takes zp->z_xattr_lock
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #3969

[33mcommit 2727b9d3b63a938c1797d31378e6a5a1dcd43573[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Tue Dec 8 12:37:24 2015 -0800

    Use uio for zvol_{read,write}
    
    Since uio now supports bvec, we can convert bio into uio and reuse
    dmu_{read,write}_uio. This way, we can remove some duplicate code.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4078

[33mcommit 502923bb447cdf4f9bc1271a46dfc11d5e0f2e9b[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Tue Dec 8 12:26:18 2015 -0800

    Fix uio_prefaultpages for 0 length iovec
    
    Userspace can freely pass in whatever iovec it feels like, and it's perfectly
    legal to pass an iovec which contains a zero length segment. In the current
    implementation, uio_prefaultpages would touch an out of bound byte in the
    "last byte" logic. While this probably wouldn't cause any critical error, we
    would like uio_prefaultpages to be able to continue gracefully.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4078

[33mcommit eba9e745dcfce252fc6c451cdf07c55bf975f1f6[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Dec 11 11:09:41 2015 -0800

    Handle damaged blk_birth in dsl_deadlist_insert()
    
    If a bit were cleared in `bp->blk_birth` such that the txg birth
    was now lower than any other txg_birth in the deadlist, then there
    will be no entry before this in the tree.
    
    This should be impossible but regardless error handling code has
    been added for this case.  By default this is left as a fatal case
    and the blk_birth is logged.  However, setting `zfs_recover=1` will
    cause the bp to be placed at the start of the deadlist even though
    it contains an invalid blk_birth.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Closes #4086
    Closes #4089

[33mcommit 1cdb86cba2750f6da468e021a5ae2ba9a24530df[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Dec 9 11:00:35 2015 -0800

    Handle block pointers with a corrupt logical size
    
    Commit 5f6d0b6 was originally added to gracefully handle block
    pointers with a damaged logical size.  However, it incorrectly
    assumed that all passed arc_done_func_t could handle a NULL
    arc_buf_t.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4069
    Closes #4080

[33mcommit a6c6e0f5837402ec82e4c8bd49c867a1d1dd5376[m
Author: Olaf Faaland <faaland1@llnl.gov>
Date:   Fri Dec 11 17:56:44 2015 -0800

    Remove "index" column from dbufstat.py
    
    Commit ca0bf58d to address arcs_mtx contention removed column "index"
    from the output of kstats/dbuf.
    
    dbufstat.py was not updated to reflect this, which causes it to crash
    when run with -bx
    
    This removes "index" from hardcoded lists of columns.
    
    Signed-off-by: Olaf Faaland <faaland1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4096

[33mcommit 799402d8c79d3fb3ef75e181a5abed1af8ccc242[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Fri Dec 11 18:42:42 2015 -0500

    Revert "Switch ztest mmap(2) ASSERTs to VERIFYs"
    
    This reverts commit 202619623022722f30c2ee49931a4fa6896421c7.
    
    It is no longer necessary now that we pass -DDEBUG unconditionally.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4095

[33mcommit 27075111ed93f5290fbb5d801964aa20ed7a9d35[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Fri Dec 11 18:40:05 2015 -0500

    Unconditionally build zdb and ztest with -DDEBUG
    
    Illumos unconditionally builds zdb and ztest with -DDEBUG. This helps
    catch bugs and eliminates the need for commits like
    202619623022722f30c2ee49931a4fa6896421c7, which changed ASSERTs to
    VERIFYs. The following files in the illumos tree show this:
    
    usr/src/cmd/zdb/Makefile.com
    usr/src/cmd/ztest/Makefile.com
    
    Given the usefulness of having early failure in these tools, we should
    do it too.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4095

[33mcommit 245b7ab3d1c06efe5b76a9412996fac50aa77f72[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Dec 14 10:59:25 2015 -0800

    Hold the zfs_snapentry_t before dispatch
    
    While exceptionally unlikely to cause a problem the zfs_snapentry_t
    hold should be taken before the dispatch to prevent any possibility
    of the task being processed before the hold.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>

[33mcommit 199766017076de5bddd0dad4f95f29361fc04169[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Fri Dec 11 15:24:34 2015 -0800

    Fix snapshot automount race cause EREMOTE
    
    When a concorrent mount finishes just before calling to
    zfsctl_snapshot_ismounted, if we return EISDIR, the VFS will return
    with EREMOTE. We should instead just return 0, so VFS may retry and
    would likely notice the dentry is alreadly mounted. This will be
    inline with when usermode helper return EBUSY.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 5ed27c572cbb051cbed91a9cce1355312fa7913b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 10 15:53:37 2015 -0800

    Change zfs_snapshot_lock from mutex to rw lock
    
    By changing the zfs_snapshot_lock from a mutex to a rw lock the
    zfsctl_lookup_objset() function can be allowed to run concurrently.
    This should reduce the latency of fh_to_dentry lookups in ZFS
    snapshots which are being accessed over NFS.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>

[33mcommit f22f900f15c28ebd8b8b764ee6229a7069c74a13[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 10 15:47:18 2015 -0800

    Fix zfsctl_lookup_objset() deadlock
    
    The zfsctl_snapshot_unmount_delay() function must not be called
    from zfsctl_lookup_objset() while it is currently holding the
    zfs_snapshot_lock.  This will result in a deadlock.  It is safe
    to call zfsctl_snapshot_unmount_delay_impl() directly because the
    function already has a reference on the zfs_snapentry_t.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Closes #3997

[33mcommit 5e94284fe57ba0b3b5825676e3fd498c8b4b8115[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 10 15:23:26 2015 -0800

    Set 'zfs_expire_snapshot=0' to disable auto-unmount
    
    There are cases where it's desirable that auto-mounted snapshots
    not expire after a fixed duration.  They should be unmounted only
    when the filesystem they are a snapshot of is unmounted.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>

[33mcommit a22502c9e6656e8d19e43de7f983588afc719ec5[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Dec 9 14:58:29 2015 -0800

    Either _ILP32 or _LP64 must be defined
    
    For some arm, powerpc, and sparc platforms it was possible that
    neither _ILP32 of _LP64 would be defined.  Update the isa_defs.h
    header to explicitly set these macros and generate a compile error
    in the case neither are defined.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Closes #4048

[33mcommit 24ef51f660b0eb4e1507c440f4bcf0c6b38f31d0[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Mon Dec 7 15:43:53 2015 -0800

    Use spa as key besides objsetid for snapentry
    
    objsetid is not unique across pool, so using it solely as key would cause
    panic when automounting two snapshot on different pools with the same
    objsetid. We fix this by adding spa pointer as additional key.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Issue #3948
    Issue #3786
    Issue #3887

[33mcommit b58986eebf3c47c946393da4b968ee33edaea99e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Dec 2 11:53:37 2015 -0800

    Use large stacks when available
    
    While stack size will vary by architecture it has historically defaulted to
    8K on x86_64 systems.  However, as of Linux 3.15 the default thread stack
    size was increased to 16K.  These kernels are now the default in most non-
    enterprise distributions which means we no longer need to assume 8K stacks.
    
    This patch takes advantage of that fact by appropriately reverting stack
    conservation changes which were made to ensure stability.  Changes which
    may have had a negative impact on performance for certain workloads.  This
    also has the side effect of bringing the code slightly more in line with
    upstream.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Closes #4059

[33mcommit f40926795c1a1d3750e2a6f6904061cfa68715df[m
Author: cable2999 <cable2999@users.noreply.github.com>
Date:   Fri Oct 16 12:06:33 2015 -0500

    Update arcstat.py to remove deprecated rmis reference.
    
    Running arcstat.py -x currently throws KeyError due to rmis being
    absent, it was removed in commit ca0bf58.
    
    Signed-off-by: cable2999 <cable2999@users.noreply.github.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3931

[33mcommit 25df831b8140883ac2759552d857149eadfd81f8[m
Author: ilovezfs <ilovezfs@icloud.com>
Date:   Thu Dec 3 02:40:27 2015 -0800

    Fix cstyle issue from 7a02327
    
    Continuations should be indented four spaces.
    
    Signed-off-by: ilovezfs <ilovezfs@icloud.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4062

[33mcommit 241b5415748859a3c272fc8f570f2368e93adde9[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Fri Jul 24 09:53:55 2015 -0700

    Illumos 5959 - clean up per-dataset feature count code
    
    5959 clean up per-dataset feature count code
    Reviewed by: Toomas Soome <tsoome@me.com>
    Reviewed by: George Wilson <george@delphix.com>
    Reviewed by: Alex Reece <alex@delphix.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/5959
      https://github.com/illumos/illumos-gate/commit/ca0cc39
    
    Porting notes:
    
    illumos code doesn't check for feature_get_refcount() returning
    ENOTSUP (which means feature is disabled) in zdb. zfsonlinux added
    a check in https://github.com/zfsonlinux/zfs/commit/784652c
    due to #3468. The check was reintroduced here.
    
    Ported-by: Witaut Bajaryn <vitaut.bayaryn@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3965

[33mcommit 072484504fa3c905f5d3712abff765cf33c1e72d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri May 9 14:51:20 2014 -0700

    Add zap_prefetch() interface
    
    Provide a generic interface to prefetch ZAP entries by name.  This
    functionality is being added for external consumers such as Lustre.
    It is based of the existing zap_prefetch_uint64() version which is
    used by the deduplication code.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Closes #4061

[33mcommit 917b8c5cec074869a0bf4e9956b7d24f14221d84[m
Author: ilovezfs <ilovezfs@icloud.com>
Date:   Sun Nov 22 04:06:21 2015 -0800

    Ext4's typical GPT partition type not recognized
    
    Adding additional entries to the efi conversion array will help prevent
    the overwriting of the GPTs of disks with in-use file systems in more
    cases. Most notably, this adds partition type 8300 "Linux filesystem"
    (0FC63DAF-8483-4772-8E79-3D69D8477DE4), which is often used for ext4 and
    btrfs, among others.
    
    This commit itself does nothing to address the underlying problematic
    behavior that check_slice() isn't called on partitions of an
    unrecognized type, even when they contain a currently mounted file
    system.
    
    The additional entries were derived from these two resources:
    https://en.wikipedia.org/wiki/GUID_Partition_Table
    http://sourceforge.net/p/gptfdisk/code/ci/master/tree/parttypes.cc
    
    Signed-off-by: ilovezfs <ilovezfs@icloud.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4016

[33mcommit fc80384923dde365ad40c6b6f5a7daa3e556b1e5[m
Author: Yuri Pankov <yuri.pankov@nexenta.com>
Date:   Thu Feb 23 07:11:44 2012 +0400

    Illumos 934 - FreeBSD's GPT not recognized
    
    Reviewed by: Alexander Eremin <alexander.r.eremin@gmail.com>
    Reviewed by: Garrett D'Amore <garrett@damore.org>
    Reviewed by: Andrew Stormont <Andrew.Stormont@nexenta.com>
    Reviewed by: Richard Elling <richard.elling@richardelling.com>
    Approved by: Gordon Ross <gwr@nexenta.com>
    
    References:
      https://www.illumos.org/issues/934
      https://github.com/illumos/illumos-gate/commit/e21ea67
    
    Ported-by: ilovezfs <ilovezfs@icloud.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4016

[33mcommit b22e2797970b44e6b9d1e4624a5ede935c851010[m
Author: Richard Yao <richard.yao@clusterhq.com>
Date:   Wed Nov 25 10:39:57 2015 -0500

    Only trigger SET_ERROR tracepoint event on error
    
    Currently, the SET_ERROR tracepoint triggers regardless of whether there
    is an error or not. On Illumos, SET_ERROR only triggers on an actual
    error, which is avoids irrelevant noise. Linux 2.6.38 added support for
    conditional tracepoints, so we modify SET_ERROR to use them when they
    are avaliable for functionality equivalent to the Illumos functionality.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4043

[33mcommit a179a3aa35125e1e98ad0e92527c0cf9e3038fac[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Fri Nov 20 15:47:37 2015 -0800

    Fix zdb_dump_block on little endian systems
    
    When dumping a block on a little endian system the data must be
    byte swapped to display correctly.  Example incorrect output:
    
    $ echo 0123456789abcdef > aaa
    $ zdb -eR pp 3:1ee00:200
    3:1ee00:200
              0 1 2 3 4 5 6 7   8 9 a b c d e f  0123456789abcdef
    000000:  3736353433323130  6665646362613938  0123456789abcdef
    000010:  000000000000000a  0000000000000000  ................
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4020

[33mcommit 90aa094d6d77bf6f17a671ff76a84ae8232267d8[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Fri Nov 20 15:50:06 2015 -0800

    Fix zdb calling behavior in ztest
    
    The current zdb calling behaviour is really fragile, and is guaranteed to
    segfault if ztest is not installed in either /sbin or /usr/sbin. With this
    patch, the ztest will try to call zdb in the following order.
    
    1. Use environmental variable ZDB_PATH if provided.
    2. If ztest resides in build tree, guess the in tree zdb path.
    3. Just pass zdb to popen and let it search it in PATH.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3126

[33mcommit b0fe1adeb1f24192c9a3358a4c9a29a34b9537fe[m
Author: tuxoko <tuxoko@gmail.com>
Date:   Thu Nov 19 17:42:41 2015 -0800

    Prevent rm modules.* when make install
    
    This was originally in fe0ed8f910c1e4288dc190546cfe98ecf545b547, but somehow
    was changed and not working anymore. And it will cause the following error:
    
    modprobe: ERROR: ../libkmod/libkmod.c:506 lookup_builtin_file() could not open builtin file '/lib/modules/4.2.0-18-generic/modules.builtin.bin'
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4027

[33mcommit 60bd953ca4905e8720513d2d9e12932c0ea9cc83[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Dec 1 18:24:40 2015 -0800

    Fix --enable-linux-builtin
    
    Adding VPATH support, commit 47a4a6f, required that a `src`
    and `obj` line be added to the top of the Makefiles.  They
    must be removed from the Makefiles when builtin.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue zfsonlinux/spl#481
    Issue zfsonlinux/spl#498

[33mcommit 61d482f7cd1687177185140699c6843c904b38d4[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Mon Nov 23 15:06:46 2015 -0800

    Linux 4.4 compat: xattr operations takes xattr_handler
    
    The xattr_hander->{list,get,set} were changed to take a xattr_handler,
    and handler_flags argument was removed and should be accessed by
    handler->flags.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4021

[33mcommit 1a093716788a08b5d038c49ab99a6e9363c97a64[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Mon Nov 23 14:47:29 2015 -0800

    Linux 4.4 compat: make_request_fn returns blk_qc_t
    
    As part of block polling support in Linux 4.4, make_request_fn should
    return a cookie value of type blk_qc_t. For now, we make zvol_request
    always return BLK_QC_T_NONE until we assess whether and how we want
    to support block polling.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #4021

[33mcommit 43518d92fd9200aa07a871604a682e0dc7dff981[m
Author: tuxoko <tuxoko@gmail.com>
Date:   Fri Oct 30 16:10:01 2015 -0700

    Fix zfs_dirty_data_max overflow on 32-bit
    
    On 32 bit, the calculation of zfs_dirty_data_max from phymem will overflow,
    causing it to be smaller than zfs_dirty_data_sync, and will cause txg being
    delayed while no one write to disk. The end result is horrendous write speed.
    
    On 4G ram 32-bit VM, before this patch, simple dd results in ~7MB/s. Now it
    can reach speed on par with 64-bit VM.
    
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3973

[33mcommit d0c614ecf9eb0b5f5c5d75316c2faeff63e03c4e[m
Author: tuxoko <tuxoko@gmail.com>
Date:   Fri Oct 30 14:34:22 2015 -0700

    Fix null pointer in arc_kmem_reap_now on 32-bit
    
    On 32 bit system, zio_buf_cache is limit to 1M. Larger than that is all NULL.
    So we need to avoid reaping them.
    
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3973

[33mcommit d287880afd843bd8c0cbcabe514b65083d1a0090[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Mon Nov 16 16:39:52 2015 -0800

    Fix snapshot automount behavior when concurrent or fail
    
    When concurrent threads accessing the snapdir, one will succeed the user
    helper mount while others will get EBUSY. However, the original code treats
    those EBUSY threads as success and goes on to do zfsctl_snapshot_add, which
    causes repeated avl_add and thus panic.
    
    Also, if the snapshot is already mounted somewhere else, a thread accessing
    the snapdir will also get EBUSY from user helper mount. And it will cause
    strange things as doing follow_down_one will fail and then follow_up will jump
    up to the mountpoint of the filesystem and confuse the hell out of VFS.
    
    The patch fix both behavior by returning 0 immediately for the EBUSY threads.
    Note, this will have a side effect for the second case where the VFS will
    retry several times before returning ELOOP.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4018

[33mcommit 5c790678f1a5231b75be174eb8a02e15dfe9b4d5[m
Author: Jason Zaman <jason@perfinion.com>
Date:   Sat Oct 24 14:01:08 2015 +0800

    sysmacros: Make P2ROUNDUP not trigger int overflow
    
    The original P2ROUNDUP and P2ROUNDUP_TYPED macros contain -x which
    triggers PaX's integer overflow detection for unsigned integers.
    Replace the macros with an equivalent version that does not trigger
    the overflow.
    
    Axioms:
    A. (-(x)) === (~((x) - 1)) === (~(x) + 1) under two's complement.
    B. ~(x & y) === ((~(x)) | (~(y))) under De Morgan's law.
    C. ~(~x) === x under the law of excluded middle.
    
    Proof:
    0. (-(-(x) & -(align))) original
    1. (~(-(x) & -(align)) + 1) by A
    2. (((~(-(x))) | (~(-(align)))) + 1) by B
    3. (((~(~((x) - 1))) | (~(~((align) - 1)))) + 1) by A
    4. (((((x) - 1)) | (((align) - 1))) + 1) by C
    Q.E.D.
    
    Signed-off-by: Jason Zaman <jason@perfinion.com>
    Reviewed-by: Chris Dunlop <chris@onthe.net.au>
    Reviewed-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3949

[33mcommit 27a19a0d5a5297f399eaa6eca86dc4047e484078[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Nov 16 09:47:43 2015 -0800

    zimport.sh: Add configure/make option support
    
    Allow the following environment variables to control the build
    behavior of the zimport.sh script.  This can be useful when you
    want a debug build or require specific build options.  The
    default values are:
    
    CONFIG_OPTIONS=""
    MAKE_OPTIONS="-s -j$(nproc)"
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 3d8d245fb3f1724488c972658da2aab9e8528210[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Nov 16 15:00:38 2015 -0800

    Follow 0/-E convention for module load errors
    
    Because errors during module load are so rare it went unnoticed that
    it was possible that a positive errno was returned.  This would result
    in the module being loaded, nothing being initialized, and a system
    panic shortly thereafter.  This is what was causing the hard failures
    in the automated testing.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 256fa983f46603df3f26c1508ca3a09f6316f36d[m
Author: AndCycle <andcycle@andcycle.idv.tw>
Date:   Tue Nov 10 22:01:26 2015 +0800

    Obey arc_meta_limit default size when changing arc_max
    
    When decreasing the maximum ARC size preserve the 3/4 default
    ratio for the arc_meta_limit.  Otherwise, the arc_meta_limit
    may be set the same as arc_max.
    
    Signed-off-by: AndCycle <andcycle@andcycle.idv.tw>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #4001

[33mcommit f3e2a7accdd33b5e1f9367d97f4f2177962c5567[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Nov 5 08:13:52 2015 -0800

    Add TEST configuration file for buildbot
    
    The TEST file is provided as a hint to the automated test infra-
    structure.  It controls which regression tests are run and how they
    are run.  This file along with any lines in the commit messages
    which start with TEST_*  are sourced by the test scripts and can
    be used to override the default values.  For complete details see:
    
    https://github.com/zfsonlinux/zfs-buildbot/
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 98401d23611905e08d4c449d46c15e85d44cff72[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Nov 9 12:10:02 2015 -0800

    Fix maybe uninitialized
    
    As of gcc 5.1.1 20150618 (Red Hat 5.1.1-4) the -Werror=maybe-uninitialized
    check detects that 'snapname' in recv_incremental_replication() may not be
    initialized.  Explicitly initialize the variable to resolved the warning.
    
      libzfs_sendrecv.c: In function ‘recv_incremental_replication’:
      libzfs_sendrecv.c:2019:2: error: ‘snapname’ may be used uninitialized in
        (void) snprintf(buf, sizeof (buf), "%s@%s", fsname, snapname);
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit b23d54305a6d4c00e7c815b15703ccd5ab180f2f[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Mon Oct 5 20:28:32 2015 +0200

    Remove shareiscsi description and example from zfs(8).
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 291b06c37ef0918f3173a9048b905f47021dd88e[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Sun Oct 4 14:03:46 2015 +0200

    Unmount is part of the shutdown process, not the boot process.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes: #3762

[33mcommit 07d63f0cb953b7a0e5a88820e7cc2341d6e1d79e[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Fri Oct 9 12:27:01 2015 -0700

    Fix fail path in zfs_znode_alloc
    
    When sa_bulk_lookup() fails, unlock_new_inode() will spit out a WARNING. It
    will also recursive deadlock on ZFS_OBJ_HOLD_ENTER in zfs_zinactive().
    
    Since we never call insert_inode_locked in fail path, I_NEW is never set, the
    inode is never hashed. So unlock_new_inode() can be safely remove it.
    
    We set z_sa_hdl to NULL in fail path so that iput path will stop at
    zfs_inactive() without entering zfs_zinactive(). This way we can avoid the
    deadlock and prevent double sa_handle_destroy().
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3899

[33mcommit aa159afb568fff01bb9f427c16b406c5d29664c7[m
Author: Chunwei Chen <david.chen@osnexus.com>
Date:   Tue Oct 13 14:13:52 2015 -0700

    Fix use-after-free in vdev_disk_physio_completion
    
    Currently, vdev_disk_physio_completion will try to wake up an waiter without
    first checking the existence. This creates a race window in which complete is
    called after dr is freed.
    
    We add dr_wait in dio_request to indicate the existence of waiter. Also,
    remove dr_rw since no one is using it, and reorder dr_ref to make the struct
    more compact in 64bit.
    
    Signed-off-by: Chunwei Chen <david.chen@osnexus.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3917
    Issue #3880

[33mcommit bc4501f75a04ddf9c04cef8332d12b41c35863d5[m
Author: Justin T. Gibbs <gibbs@FreeBSD.org>
Date:   Tue Oct 13 14:09:45 2015 -0700

    Illumos 6267 - dn_bonus evicted too early
    
    6267 dn_bonus evicted too early
    Reviewed by: Richard Yao <ryao@gentoo.org>
    Reviewed by: Xin LI <delphij@freebsd.org>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/6267
      https://github.com/illumos/illumos-gate/commit/d205810
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Ned Bass bass6@llnl.gov
    Issue #3865
    Issue #3443

[33mcommit 33df62d052bad11a1ebb220810672fcfba2a8d86[m
Author: James Lee <jlee@thestaticvoid.com>
Date:   Sat Sep 19 22:00:36 2015 -0400

    zfs-import: Perform verbatim import using cache file
    
    This change modifies the import service to use the default cache file
    to perform a verbatim import of pools at boot.  This fixes code that
    searches all devices and imported all visible pools.
    
    Using the cache file is in keeping with the way ZFS has always worked,
    how Solaris, Illumos, FreeBSD, and systemd performs imports, and is how
    it is written in the man page (zpool(1M,8)):
    
        All pools  in  this  cache  are  automatically imported when the
        system boots.
    
    Importantly, the cache contains important information for importing
    multipath devices, and helps control which pools get imported in more
    dynamic environments like SANs, which may have thousands of visible
    and constantly changing pools, which the ZFS_POOL_EXCEPTIONS variable
    is not equipped to handle.  Verbatim imports prevent rogue pools from
    being automatically imported and mounted where they shouldn't be.
    
    The change also stops the service from exporting pools at shutdown.
    Exporting pools is only meant to be performed explicitly by the
    administrator of the system.
    
    The old behavior of searching and importing all visible pools is
    preserved and can be switched on by heeding the warning and toggling
    the ZPOOL_IMPORT_ALL_VISIBLE variable in /etc/default/zfs.
    
    Signed-off-by: James Lee <jlee@thestaticvoid.com>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3777
    Closes #3526

[33mcommit 2986b3fd2587b1da5b6047a5c0b6bbb0b6d9c47e[m
Author: Tim Chase <tim@onlight.com>
Date:   Fri Oct 9 13:28:12 2015 -0500

    zdb: segfault in dump_bpobj_subobjs()
    
    Avoid buffer overrun on all-zero bpobj subobjects by using signed
    array index.  Also fix the type cast on the printf() argument.
    
    Signed-off-by: Tim Chase <tim@onlight.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3905

[33mcommit 385f9691c46811e5e04626ef879bf7061a4009ed[m
Author: DHE <git@dehacked.net>
Date:   Sun Oct 11 11:42:42 2015 -0400

    libzfs: handle EDOM errors
    
    EDOM may occur if a user tries to set `recordsize` too large without
    use "zfs set". This can be demonstrated with:
    
    > zpool create testpool -O recordsize=32M /dev/...
    
    Signed-off-by: DHE <git@dehacked.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3911

[33mcommit 935434ef01fc067f3b4bc26be6378f8f1d89734a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Oct 13 09:17:01 2015 -0700

    Fix 'arc_c < arc_c_min' panic
    
    Strictly enforce keeping 'arc_c >= arc_c_min'.  The ASSERTs are
    left in place to catch this in a debug build but logic has been
    added to gracefully handle in a production build.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3904

[33mcommit 8f90f7372a1b456ec6ede5e5464ffa23273a7a99[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Wed Sep 23 23:04:17 2015 +0200

    Rename 'zed.service' to 'zfs-zed.service'
    
    For consistency all systemd unit files and init scripts now share
    the same names.  This prevents an issue where the zed is started
    twice on systems where both the systemd and sysv infrastructure is
    installed concurrently.
    
    For backward compatibility a 'zed' alias has been added.  This
    allows the user to interact with the service using either the
    name 'zed' or 'zfs-zed'.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3837

[33mcommit 3ef005c674e3207e8c6fba5d65a76468f97084ae[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Sep 30 20:36:18 2015 -0400

    Fix zfs-dkms uninstall/update
    
    Modern versions of dkms cleanup the build directory after installing.
    This resulted in 'dkms uninstall' never running because the check
    added by commit 866c162 which verifies the existance of the
    zfs.release build product would never be true.
    
    This patch resolves the issue by updating the conditional to check
    in the explicitly installed zfs_config.h file for the version.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3862

[33mcommit 919efe93cb1263a3cfa1b8edf4b0a636a9e579cd[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Wed Sep 30 13:25:11 2015 -0400

    zfs_inode_update should not call dmu_object_size_from_db under spinlock
    
    We should never block when holding a spin lock, but zfs_inode_update can
    block in the critical section of a spin lock in zfs_inode_update:
    
    zfs_inode_update -> dmu_object_size_from_db -> zrl_add -> mutex_enter
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3858

[33mcommit bc8ffb2d0855b76dd0f8f0993cadf8ef0dfe0f0a[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Tue Sep 29 18:28:47 2015 -0400

    Remove obsolete zv_lock
    
    All users of zv_lock were removed by 37f9dac, but we forgot to remove
    it.  Lets remove it as clean up.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3858

[33mcommit 57732964d35616d6c93b8377b1ed72c485d9d73d[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Tue Sep 22 09:56:28 2015 +0200

    Init script fixes
    
    * Fix regression - "OVERLAY_MOUNTS" should have been "DO_OVERLAY_MOUNTS".
    * Fix update-rc.d commands in postinst.  Thanx to subzero79@GitHub.
    * Fix make sure a filesystem exists before trying to mount in mount_fs()
    * Fix local variable usage.
    * Fix to read_mtab():
      * Strip control characters (space - \040) from /proc/mounts GLOBALY,
        not just first occurrence.
      * Don't replace unprintable characters ([/-. ]) for use in the variable
        name with underscore. No need, just remove them all together.
    * Add check_boolean() to check if a user configure option is
      set ('yes', 'Yes', 'YES' or any combination there of) OR '1'.
      Anything else is considered 'unset'.
    * Add a ZFS_POOL_IMPORT to the default config.
      * This is a semi colon separated list of pools to import ONLY.
      * This is intended for systems which have _a lot_ of pools (from
        a SAN for example) and it would be to many to put in the
        ZFS_POOL_EXCEPTIONS variable..
    * Add a config option "ZPOOL_IMPORT_OPTS" for adding additional options
      to "zpool import".
    * Add documentation and the chance of overriding the ZPOOL_CACHE
      variable in the config file.
    * Remove "sort" from find_pools() and setup_snapshot_booting().
      Sometimes not available, and not really necessary.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Issue #3816

[33mcommit 45838e3a414a7a1a5fb49dc528dee1d22449599b[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Tue Sep 29 00:02:31 2015 -0700

    Fix uioskip crash when skip to end
    
    When doing uioskip to skip an iovec to the very end, the current loop
    condition will falsely check pass the end of iovec. We fix this checking
    uio_iovcnt first.
    
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3806
    Closes #3850

[33mcommit b815ec32b3ba04ad7307ca8945a865eec0ec766b[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Mon Sep 21 19:08:26 2015 -0400

    Userspace can pass zero length segments via writev/readv
    
    Userspace can trigger an assertion by passing a zero-length segment
    when assertions are enabled:
    
    [27961.614792] VERIFY3(skip < iov->iov_len) failed (0 < 0)
    [27961.614795] PANIC at zfs_uio.c:187:uio_prefaultpages()
    [27961.614805] Call Trace:
    [27961.614811]   dump_stack+0x45/0x57
    [27961.614830]   spl_dumpstack+0x44/0x50 [spl]
    [27961.614834]   spl_panic+0xbb/0x100 [spl]
    [27961.614908]   uio_prefaultpages+0x134/0x140 [zcommon]
    [27961.614930]   zfs_write+0x1fd/0xe80 [zfs]
    [27961.615014]   zpl_write_common_iovec+0x7f/0x110 [zfs]
    [27961.615035]   zpl_iter_write+0xa0/0xd0 [zfs]
    [27961.615037]   do_iter_readv_writev+0x59/0x80
    [27961.615063]   do_readv_writev+0x11b/0x260
    [27961.615098]   vfs_writev+0x39/0x50
    [27961.615100]   SyS_writev+0x4a/0xe0
    [27961.615103]   system_call_fastpath+0x16/0x6e
    
    The solution is to delete the assertion. This could potentially
    occur in uiomove as well, which contains analogous assertions
    that appear similarly unnecessary, so we remove those as well.
    
    Reported-by: Jonathan Vasquez <jvasquez1011@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Issue #3792

[33mcommit a3000f9358159d761bdf59bd1c4d318f7ec71815[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Sep 25 11:15:02 2015 -0700

    Revert "dmu_objset_userquota_get_ids uses dn_bonus unsafely"
    
    This reverts commit 5f8e1e850522ee5cd37366427da4b4101a71c8a8.  It
    was determined that this patch introduced the quota regression
    described in #3789.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3443
    Issue #3789

[33mcommit 5592404784d3125cbeb6df002674867c009c8b48[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Sep 24 16:32:25 2015 -0700

    Fix synchronous behavior in __vdev_disk_physio()
    
    Commit b39c22b set the READ_SYNC and WRITE_SYNC flags for a bio
    based on the ZIO_PRIORITY_* flag passed in.  This had the unnoticed
    side-effect of making the vdev_disk_io_start() synchronous for
    certain I/Os.
    
    This in turn resulted in vdev_disk_io_start() being able to
    re-dispatch zio's which would result in a RCU stalls when a disk
    was removed from the system.  Additionally, this could negatively
    impact performance and explains the performance regressions reported
    in both #3829 and #3780.
    
    This patch resolves the issue by making the blocking behavior
    dependent on a 'wait' flag being passed rather than overloading
    the passed bio flags.
    
    Finally, the WRITE_SYNC and READ_SYNC behavior is restricted to
    non-rotational devices where there is no benefit to queuing to
    aggregate the I/O.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3652
    Issue #3780
    Issue #3785
    Issue #3817
    Issue #3821
    Issue #3829
    Issue #3832
    Issue #3870

[33mcommit ef5b2e1048eeeb7a81d932d38e52d897b33fca54[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Sep 23 15:59:04 2015 -0700

    Avoid blocking in arc_reclaim_thread()
    
    As described in the comment above arc_reclaim_thread() it's critical
    that the reclaim thread be careful about blocking.  Just like it must
    never wait on a hash lock, it must never wait on a task which can in
    turn wait on the CV in arc_get_data_buf().  This will deadlock, see
    issue #3822 for full backtraces showing the problem.
    
    To resolve this issue arc_kmem_reap_now() has been updated to use the
    asynchronous arc prune function.  This means that arc_prune_async()
    may now be called while there are still outstanding arc_prune_tasks.
    However, this isn't a problem because arc_prune_async() already
    keeps a reference count preventing multiple outstanding tasks per
    registered consumer.  Functionally, this behavior is the same as
    the counterpart illumos function dnlc_reduce_cache().
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Issue #3808
    Issue #3834
    Issue #3822

[33mcommit 04870568e6dae66d79ca144b0dcfa001324c562d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Sep 23 14:28:43 2015 -0700

    Disable zpl_nr_cached_objects() callback
    
    The zpl_nr_cached_objects() function has been disabled because in the
    current code it doesn't provide any critical functionality and it may
    result in a deadlock under certain circumstances.  However, because
    we expect to need these hooks in the future this code has not been
    entirely removed.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3719

[33mcommit d4787d55ad65f517d8bdf12b73b296b27ca42e3a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Sep 23 13:00:28 2015 -0700

    Allow NFS activity to defer snapshot unmounts
    
    Accessing a snapshot via NFS should cause an auto-unmount of that
    snapshot to be deferred until such as time as the snapshot is idle.
    This is analogous to the zpl_revalidate logic employed by locally
    mounted snapshots.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3794

[33mcommit 784a7fe5d9a0c02e96f3ae019a08ecebee2a7018[m
Author: Lukas Wunner <lukas@wunner.de>
Date:   Wed Sep 23 17:55:15 2015 +0200

    Linux 4.3 compat: bio_end_io_t / BIO_UPTODATE
    
    Commit torvalds/linux@4246a0b63bd8f56a1469b12eafeb875b1041a451
    ("block: add a bi_error field to struct bio") dropped the error
    argument from bio_endio in favor of newly introduced bio->bi_error.
    This also replaces bio->bi_flags value BIO_UPTODATE.
    
    bio_endio was a 3 argument function until Linux 2.6.24, which made it
    a 2 argument function, and now the prototype has changed yet again to
    a 1 argument function. Support for pre 2.6.24 kernels was already
    dropped with 37f9dac592bf ("zvol processing should use struct bio")
    which assumed the 2 argument version in zvol_request(). Remaining code
    to support the 3 argument version is hereby removed.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Issue #3799

[33mcommit 4a4809faab83be1bc723086ad44816bacf646ae3[m
Author: yuina822 <ayuichi@club.kyutech.ac.jp>
Date:   Mon Sep 14 15:11:12 2015 +0900

    Fixed --signal typo
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3773

[33mcommit e2ede4721bc224052f30fcff7a244276b5e01c6f[m
Author: yuina822 <ayuichi@club.kyutech.ac.jp>
Date:   Mon Sep 14 15:07:16 2015 +0900

    Add extra_started_commands because reload function is not default
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3773

[33mcommit 56b3986316365d997cb381d3295b99612e18ab6e[m
Author: Don Brady <don.brady@intel.com>
Date:   Thu Sep 17 17:55:22 2015 -0600

    Add large block support to zpios(1) benchmark
    
    As part of the large block support effort, it makes sense to add
    support for large blocks to **zpios(1)**. The specifying of a zfs
    block size for zpios is optional and will default to 128K if the
    block size is not specified.
    
      `zpios ... -S size | --blocksize size ...`
    
    This will use *size* ZFS blocks for each test, specified as a comma
    delimited list with an optional unit suffix. The supported range is
    powers of two from 128K through 16M. A range of block sizes can be
    tested as follows: `-S 128K,256K,512K,1M`
    
    Example run below
    (non realistic results from a VM and output abbreviated for space)
    
    ```
     --regioncount=750 --regionsize=8M --chunksize=1M --offset=4K
     --threaddelay=0 --cleanup --human-readable --verbose --cleanup
     --blocksize=128K,256K,512K,1M
    
     th-cnt  rg-cnt  rg-sz  ch-sz  blksz  wr-data wr-bw   rd-data rd-bw
    ---------------------------------------------------------------------
     4       750     8m     1m     128k   5g      90.06m  5g      93.37m
     4       750     8m     1m     256k   5g      79.71m  5g      99.81m
     4       750     8m     1m     512k   5g      42.20m  5g      93.14m
     4       750     8m     1m     1m     5g      35.51m  5g      89.36m
     8       750     8m     1m     128k   5g      85.49m  5g      90.81m
     8       750     8m     1m     256k   5g      61.42m  5g      99.24m
     8       750     8m     1m     512k   5g      49.09m  5g     108.78m
     16      750     8m     1m     128k   5g      86.28m  5g      88.73m
     16      750     8m     1m     256k   5g      64.34m  5g      93.47m
     16      750     8m     1m     512k   5g      68.84m  5g     124.47m
     16      750     8m     1m     1m     5g      53.97m  5g      97.20m
    ---------------------------------------------------------------------
    ```
    
    Signed-off-by: Don Brady <don.brady@intel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3795
    Closes #2071

[33mcommit e7a05183c49fc897fe56e060fcbfbc20a41bf9f0[m
Author: Remy Blank <remy.blank@pobox.com>
Date:   Sun Sep 13 13:41:16 2015 +0200

    Tab-indent continuation lines in the "scan:" section of "zpool status".
    
    All other sections use a tab, which makes them easy to parse. Only the
    "scan:" section had its continuation lines indented with four spaces.
    This makes them consistent with the others.
    
    Signed-off-by: Remy Blank <remy.blank@pobox.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Closes #3769

[33mcommit 3af56fd95fbe8b417d7ed7c9c25ef59d6f1ee161[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Wed Sep 16 02:49:09 2015 -0700

    Honor xattr=sa dataset property
    
    ZFS incorrectly uses directory-based extended attributes even when
    xattr=sa is specified as a dataset property or mount option. Support to
    honor temporary mount options including "xattr" was added in commit
    0282c4137e7409e6d85289f4955adf07fac834f5. There are two issues with the
    mount option handling:
    
    * Libzfs has historically included "xattr" in its list of default mount
      options. This overrides the dataset property, so the dataset is always
      configured to use directory-based xattrs even when the xattr dataset
      property is set to off or sa. Address this by removing "xattr" from
      the set of default mount options in libzfs.
    
    * There was no way to enable system attribute-based extended attributes
      using temporary mount options. Add the mount options "saxattr" and
      "dirxattr" which enable the xattr behavior their names suggest.  This
      approach has the advantages of mirroring the valid xattr dataset
      property values and following existing conventions for mount option
      names.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3787

[33mcommit 66aad10ce88f2a599365322a79f20d02f3c64393[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sat Sep 19 12:32:38 2015 -0700

    Fix NULL as mount(2) syscall data parameter
    
    Passing NULL for the mount data should not result in EINVAL.  It
    should be treated as if an empty string were passed and succeed.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Closes #3771

[33mcommit f52ebcb3eb1630694648237ad6d439c226c3dd99[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Fri Sep 18 08:32:52 2015 -0400

    Discard on zvols should not exceed the length of a block
    
    37f9dac592bf5889c3efb305c48ac39b4c7dd140 replaced the end-start
    calculation with a cached value, but neglected to update it on discard
    operations. This can cause us to discard data not requested, causing
    data loss on zvols.
    
    Reported-by: Richard Connon <richard.connon@zynstra.com>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3798

[33mcommit 7a27ad00ae142b38d4aef8cc0af7a72b4c0e44fe[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Sep 9 15:25:52 2015 -0700

    Tag zfs-0.6.5
    
    META file and release log updated.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 4e0f33ffe018b07021f627328f0a207550d1b374[m
Author: Arne Jansen <arne@die-jansens.de>
Date:   Fri Sep 11 09:18:56 2015 -0700

    Illumos 6214 - zpools going south
    
    6214 zpools going south
    Reviewed by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: Saso Kiselkov <skiselkov.ml@gmail.com>
    
    References:
      https://www.illumos.org/issues/6214
      http://cr.illumos.org/~webrev/sensille/6214_zpools_going_south/
    
    Porting Notes:
    
    Reintroduce b_compress to the l2arc_buf_hdr_t.  In commit b9541d6
    the compression flags were moved to the generic b_flags in the
    arc_buf_hdr_t.  This is a problem because l2arc_compress_buf()
    may manipulate the compression flags and this can only be done
    safely under the hash lock which is not held.  See Illumos 6214
    for a detailed analysis of the race.
    
    HDR_GET_COMPRESS() macro was removed from arc_buf_info().
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3757

[33mcommit 9965059ab9991a5fc7df9a489021e73880b3bcc0[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Aug 18 13:51:20 2015 -0700

    Prefetch start and end of volumes
    
    When adding a zvol to the system prefetch zvol_prefetch_bytes from the
    start and end of the volume.  Prefetching these regions of the volume is
    desirable because they are likely to be accessed immediately by blkid(8),
    the kernel scanning for a partition table, or another task which probes
    the devices.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3659

[33mcommit 8198d18ca7e05ec30139e10d658a8b06c0ec4c55[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Mon Sep 7 12:03:19 2015 -0400

    Reintroduce IO accounting on zvols on Linux 3.19+
    
    zfsonlinux/zfs@e20cd6f7a8922709b1aa2ecefd783390102d79e0 caused us to
    lose IO accounting on zvols. When I originally wrote that last year, the
    symbols we needed to maintain IO accounting were GPL exported, but
    torvalds/linux@394ffa503bc40e32d7f54a9b817264e81ce131b4 provided
    suitable symbols for restoring this functionality 4 months later.  We
    can call them to restore the IO accounting on Linux 3.19 and later as
    well as any older kernels where that patch is backported.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3741

[33mcommit 1e17e910ea315c0c3f732a7e8d31229dbd1e6069[m
Author: SenH <sen@senhaerens.be>
Date:   Tue Sep 8 09:45:22 2015 -0700

    Force create /run/sendsigs.omit.d link when starting zed
    
    Resolve the following error when restarting the zed by force creating
    the /run/sendsigs.omit.d/zed link.
    
    sudo /etc/init.d/zfs-zed restart
     * Stopping ZFS Event Daemon            [ OK ]
     * Starting ZFS Event Daemon
     ln: failed to create symbolic link `/run/sendsigs.omit.d/zed': File exists
    
    Signed-off-by: SenH <sen@senhaerens.be>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3747

[33mcommit 3b36f8319d56842c85782e7842218a7499f3cf16[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Sep 1 13:19:10 2015 -0700

    Add dbgmsg kstat
    
    Internally ZFS keeps a small log to facilitate debugging.  By default
    the log is disabled, to enable it set zfs_dbgmsg_enable=1.  The contents
    of the log can be accessed by reading the /proc/spl/kstat/zfs/dbgmsg file.
    Writing 0 to this proc file clears the log.
    
    $ echo 1 >/sys/module/zfs/parameters/zfs_dbgmsg_enable
    $ echo 0 >/proc/spl/kstat/zfs/dbgmsg
    $ zpool import tank
    $ cat /proc/spl/kstat/zfs/dbgmsg
    1 0 0x01 -1 0 2492357525542 2525836565501
    timestamp    message
    1441141408   spa=tank async request task=1
    1441141408   txg 70 open pool version 5000; software version 5000/5; ...
    1441141409   spa=tank async request task=32
    1441141409   txg 72 import pool version 5000; software version 5000/5; ...
    1441141414   command: lt-zpool import tank
    
    Note the zfs_dbgmsg() and dprintf() functions are both now mapped to
    the same log.  As mentioned above the kernel debug log can be accessed
    though the /proc/spl/kstat/zfs/dbgmsg kstat.  For user space consumers
    log messages are immediately written to stdout after applying the
    ZFS_DEBUG environment variable.
    
    $ ZFS_DEBUG=on ./cmd/ztest/ztest -V
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Closes #3728

[33mcommit 0500e835af3ea1f3abe27a572f7b2328b4cde386[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Aug 28 14:54:32 2015 -0700

    Support accessing .zfs/snapshot via NFS
    
    This patch is based on the previous work done by @andrey-ve and
    @yshui.  It triggers the automount by using kern_path() to traverse
    to the known snapshout mount point.  Once the snapshot is mounted
    NFS can access the contents of the snapshot.
    
    Allowing NFS clients to access to the .zfs/snapshot directory would
    normally mean that a root user on a client mounting an export with
    'no_root_squash' would be able to use mkdir/rmdir/mv to manipulate
    snapshots on the server.  To prevent configuration mistakes a
    zfs_admin_snapshot module option was added which disables the
    mkdir/rmdir/mv functionally.  System administators desiring this
    functionally must explicitly enable it.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2797
    Closes #1655
    Closes #616

[33mcommit aa9b27080b3411cddf93391bef3090a1a3fcaccc[m
Author: Andrey Vesnovaty <andrey.vesnovaty@gmail.com>
Date:   Tue Jul 30 12:59:34 2013 +0300

    Fix invalid fileid for snapshot root dentry
    
    Prevents NFS client from detection of different fileids of snapshot root dentry
    before & after snapshot mount.
    
    Signed-off-by: Andrey Vesnovaty <andrey.vesnovaty@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit e20cd6f7a8922709b1aa2ecefd783390102d79e0[m
Merge: dca8c34 d603286
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Sep 4 13:02:48 2015 -0700

    Merge branch 'zvol'
    
    Performance improvements for zvols.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3720

[33mcommit d60328645d34be592e41e8319138e5d14cc258f7[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Sun Sep 14 23:41:15 2014 -0400

    Remove blk_queue_nonrot() autotools check
    
    This autotools check was never needed because we can check for the
    existence of QUEUE_FLAG_NONROT in the kernel headers.
    
    Also, the comment in config/kernel-blk-queue-nonrot.m4 is incorrect.
    This was a Linux 2.6.28 API change, not a Linux 2.6.27 API change.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>

[33mcommit d677203a9b38b389184a4e2c43c6cd8f8e5b20d4[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Sun Sep 14 23:39:03 2014 -0400

    Remove blk_queue_discard() autotools check
    
    This autotools check was never needed because we can check for the
    existence of QUEUE_FLAG_DISCARD in the kernel headers.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>

[33mcommit 7d6e2adb4e4a60efe2a906faf00d134c0403dda5[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Sun Jul 6 21:06:43 2014 -0400

    Remove blk_rq_bytes()/blk_rq_sectors autotools checks
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>

[33mcommit f952eaa7ec48eb72ccff31ce74e4699caebf565d[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Sun Jul 6 21:05:40 2014 -0400

    Remove blk_rq_pos() autotools check
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>

[33mcommit f8c56b405d24d8b1342e2b7409de1b1f4548d4ca[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Sun Jul 6 20:40:04 2014 -0400

    Remove blk_fetch_request() autotools check
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>

[33mcommit e8c6be131cfd2ed87a1584e53e7702f8681efefa[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Sun Jul 6 20:38:45 2014 -0400

    Remove blk_requeue_request() autotools check
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>

[33mcommit dd6f9fe61b522d878ab29a119e5fe9dab5b9f7d5[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Sun Jul 6 20:34:51 2014 -0400

    Remove blk_end_request() autotools check.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>

[33mcommit 65f340e72579cf43ec30d9b265b0d3e1f5955bd5[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Sun Jul 6 20:31:41 2014 -0400

    Remove rq_is_sync() autotools check
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>

[33mcommit 9ddf9b8e1587ec7112913a6b5e1f82e468a891b6[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Sun Jul 6 20:30:33 2014 -0400

    Remove rq_for_each_segment() autotools check
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>

[33mcommit fa56567630cfad95b77dee507595d77f24e99cb9[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Fri Oct 10 11:23:23 2014 -0400

    Support secure discard on zvols
    
    Linux 2.6.36 introduced REQ_SECURE to indicate when discards *must* be
    processed, such that we cannot do optimizations like block alignment.
    Consequently, the discard semantics prior to 2.6.36 require us to always
    process unaligned discards. Previously, we would do this optimization
    regardless. This patch changes things to correctly restrict this
    optimization to situations where REQ_SECURE exists, but is not included
    in the flags.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>

[33mcommit 37f9dac592bf5889c3efb305c48ac39b4c7dd140[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Fri Jul 4 18:43:47 2014 -0400

    zvol processing should use struct bio
    
    Internally, zvols are files exposed through the block device API. This
    is intended to reduce overhead when things require block devices.
    However, the ZoL zvol code emulates a traditional block device in that
    it has a top half and a bottom half. This is an unnecessary source of
    overhead that does not exist on any other OpenZFS platform does this.
    This patch removes it. Early users of this patch reported double digit
    performance gains in IOPS on zvols in the range of 50% to 80%.
    
    Comments in the code suggest that the current implementation was done to
    obtain IO merging from Linux's IO elevator. However, the DMU already
    does write merging while arc_read() should implicitly merge read IOs
    because only 1 thread is permitted to fetch the buffer into ARC. In
    addition, commercial ZFSOnLinux distributions report that regular files
    are more performant than zvols under the current implementation, and the
    main consumers of zvols are VMs and iSCSI targets, which have their own
    elevators to merge IOs.
    
    Some minor refactoring allows us to register zfs_request() as our
    ->make_request() handler in place of the generic_make_request()
    function. This eliminates the layer of code that broke IO requests on
    zvols into a top half and a bottom half. This has several benefits:
    
    1. No per zvol spinlocks.
    2. No redundant IO elevator processing.
    3. Interrupts are disabled only when actually necessary.
    4. No redispatching of IOs when all taskq threads are busy.
    5. Linux's page out routines will properly block.
    6. Many autotools checks become obsolete.
    
    An unfortunate consequence of eliminating the layer that
    generic_make_request() is that we no longer calls the instrumentation
    hooks for block IO accounting. Those hooks are GPL-exported, so we
    cannot call them ourselves and consequently, we lose the ability to do
    IO monitoring via iostat.  Since zvols are internally files mapped as
    block devices, this should be okay. Anyone who is willing to accept the
    performance penalty for the block IO layer's accounting could use the
    loop device in between the zvol and its consumer. Alternatively, perf
    and ftrace likely could be used. Also, tools like latencytop will still
    work. Tools such as latencytop sometimes provide a better view of
    performance bottlenecks than the traditional block IO accounting tools
    do.
    
    Lastly, if direct reclaim occurs during spacemap loading and swap is on
    a zvol, this code will deadlock. That deadlock could already occur with
    sync=always on zvols. Given that swap on zvols is not yet production
    ready, this is not a blocker.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>

[33mcommit dca8c34da4212ed85a92111f26bd3a3cd782f270[m
Author: Tim Chase <tim@chase2k.com>
Date:   Thu Sep 3 07:13:15 2015 -0500

    Prevent reclaim in the traverse prefetch thread
    
    Reclaim in the traverse prefetch thread, which is run on the system
    taskq, can overrun the stack.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Closes #3733

[33mcommit 0282c4137e7409e6d85289f4955adf07fac834f5[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Aug 31 16:46:01 2015 -0700

    Add temporary mount options
    
    Add the required kernel side infrastructure to parse arbitrary
    mount options.  This enables us to support temporary mount
    options in largely the same way it is handled on other platforms.
    
    See the 'Temporary Mount Point Properties' section of zfs(8)
    for complete details.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #985
    Closes #3351

[33mcommit 782b2c326ea445c5cab0c1b0373d64d5e83cc5d4[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Mon Aug 31 11:36:32 2015 -0400

    VDEV_REQ_FUA should be mapped to REQ_FUA
    
    Pre-2.6.37 kernels support REQ_FUA in request flags, but not in BIO
    flags. zvols are the only consumer of VDEV_REQ_FUA and since they are
    passed requests, they should be obey the REQ_FUA flag like later
    kernels. This optimization will only matter on 2.6.36 and 2.6.37 because
    the zvol rework changes things to use bio, where we no longer are able
    to distinguish on earlier kernels
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>

[33mcommit 69de34219af4a4d100cc5ed155a68ab03393fca4[m
Author: Tim Chase <tim@chase2k.com>
Date:   Sun Aug 30 20:59:23 2015 -0500

    Dbuf hash table should be sized as is the arc hash table
    
    Commit 49ddb315066e372f31bda29a5c546a9eccc8b418 added the
    zfs_arc_average_blocksize parameter to allow control over the size of
    the arc hash table.  The dbuf hash table's size should be determined
    similarly.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3721

[33mcommit 6cde64351e236712a17d41c1578d5843a0f006e4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Sep 1 09:45:10 2015 -0700

    Add spa_slop_shift module option
    
    Allow for easy turning of a pools reserved free space.  Previous
    versions of ZFS (v0.6.4 and earlier) held 1/64 of the pools capacity
    in reserve.  Commits 3d45fdd and 0c60cc3 increased this to 1/32.
    Setting spa_slop_shift=6 will restore the previous default setting.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3724

[33mcommit 3f1cc17c9005d19faba91fe7236332ed502b1a3f[m
Author: James Lee <jlee@thestaticvoid.com>
Date:   Sun Aug 30 14:36:41 2015 -0400

    Reorder zfs-* services to allow /var on separate dataset
    
    ZED depends on /var.  When /var is a separate dataset, it must be
    mounted before starting ZED.  This change moves the zfs-zed service
    from starting first, to starting after zfs-mount, but before zfs-share.
    
    As discussed in issue #3513, ZED does not need to start first in order
    to consume events made during the zfs-import and zfs-mount services.
    The events will be queued and can be handled later in the boot process.
    
    ZED may, however, handle sharing in the future, so it should be started
    before the zfs-share service.
    
    This commit also stops the zfs-import service from writing temp files
    to /var/tmp on shutdown and it corrects the return code for the OpenRC
    service.
    
    Other OpenRC-specific changes noted in issue #3513 were reitereated in
    issue #3715 and committed in da619f3.
    
    Signed-off-by: James Lee <jlee@thestaticvoid.com>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3513

[33mcommit fb40095f5f0853946f8150481ca22602d1334dfe[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Sat Aug 29 12:01:07 2015 -0400

    Disable LBA weighting on files and SSDs
    
    The LBA weighting makes sense on rotational media where the outer tracks
    have twice the bandwidth of the inner tracks. However, it is detrimental
    on nonrotational media such as solid state disks, where the only effect
    is to ensure that metaslabs enter the best-fit allocation behavior
    sooner, which is detrimental to performance. It also makes no sense on
    files where the underlying filesystem can arrange things however it
    wants.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3712

[33mcommit cafbd2aca3fd17be78577348d9661f4142d1eb70[m
Author: tuxoko <tuxoko@gmail.com>
Date:   Tue Sep 1 20:02:48 2015 +0800

    Check for RW_WRITE_HELD in zfs_inactive
    
    Before read locking z_teardown_inactive_lock, we need to check if we have
    already had write lock on it. Otherwise, we would deadlock on ourself when
    doing rollback:
    
    zfs_ioc_rollback
    ->zfs_suspend_fs (z_teardown_inactive_lock, RW_WRITER)
    ->zfs_resume_fs->zfs_rezget->zfs_iput_async->iput-> ...
      ->zfs_inactive (z_teardown_inactive_lock, RW_READER)
    
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2869

[33mcommit 97771edaca2cac5905571f1355dd2b6256a306b4[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Mon Aug 31 16:11:45 2015 -0700

    Remove blk_queue_io_opt() autotools check
    
    This is needed for supporting kernels earlier than 2.6.30. Support for
    those kernels was dropped, so we can safely remove this check.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 3c119330a6b4e166f85c3b07ae011231f9253dee[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Mon Aug 31 12:21:21 2015 -0400

    Remove blk_queue_physical_block_size() autotools check
    
    This is needed for supporting kernels earlier than 2.6.30. Support for
    those kernels was dropped, so we can safely remove this check.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 324dcd373371fbc2855406444c1c106722970c18[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Sep 1 09:23:02 2015 -0700

    Linux 4.2 compat: misc_deregister()
    
    The misc_deregister() function was changed to a void return type.
    Rather than add compatibility code to detect this change simply
    ignore the return code on all kernels.  It was only used to log
    an informational error message of no real value.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 278bee9319ba5947b995673d2c76e0333f2d33d4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Apr 24 16:21:13 2015 -0700

    Linux 3.18 compat: Snapshot auto-mounting
    
    Re-factor the .zfs/snapshot auto-mouting code to take in to account
    changes made to the upstream kernels.  And to lay the groundwork for
    enabling access to .zfs snapshots via NFS clients.  This patch makes
    the following core improvements.
    
    * All actively auto-mounted snapshots are now tracked in two global
    trees which are indexed by snapshot name and objset id respectively.
    This allows for fast lookups of any auto-mounted snapshot regardless
    without needing access to the parent dataset.
    
    * Snapshot entries are added to the tree in zfsctl_snapshot_mount().
    However, they are now removed from the tree in the context of the
    unmount process.  This eliminates the need complicated error logic
    in zfsctl_snapshot_unmount() to handle unmount failures.
    
    * References are now taken on the snapshot entries in the tree to
    ensure they always remain valid while a task is outstanding.
    
    * The MNT_SHRINKABLE flag is set on the snapshot vfsmount_t right
    after the auto-mount succeeds.  This allows to kernel to unmount
    idle auto-mounted snapshots if needed removing the need for the
    zfsctl_unmount_snapshots() function.
    
    * Snapshots in active use will not be automatically unmounted.  As
    long as at least one dentry is revalidated every zfs_expire_snapshot/2
    seconds the auto-unmount expiration timer will be extended.
    
    * Commit torvalds/linux@bafc9b7 caused snapshots auto-mounted by ZFS
    to be immediately unmounted when the dentry was revalidated.  This
    was a consequence of ZFS invaliding all snapdir dentries to ensure that
    negative dentries didn't mask new snapshots.  This patch modifies the
    behavior such that only negative dentries are invalidated.  This solves
    the issue and may result in a performance improvement.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3589
    Closes #3344
    Closes #3295
    Closes #3257
    Closes #3243
    Closes #3030
    Closes #2841

[33mcommit b23975cbe0f249671c131b0d6e4ae1bb10594440[m
Author: Andrey Vesnovaty <andrey.vesnovaty@gmail.com>
Date:   Mon Aug 12 21:47:04 2013 +0300

    zfsctl: No need to sync ctldir inodes
    
    There's no metadata to write to disk for ctldir inodes. So we check if
    a inode belongs to the ctldir in zpl_commit_metadata, and returns
    immediately if it is.
    
    Signed-off-by: Andrey Vesnovaty <andrey.vesnovaty@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2797

[33mcommit c6a3a222d3a1d2af94205a218c0ba455200fb945[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Sat Aug 29 12:49:55 2015 -0400

    Clear QUEUE_FLAG_ADD_RANDOM on zvols
    
    zvols should not be an entropy source for the kernel. Disable it to be
    consistent with the upstream kernel.
    
    torvalds/linux@b277da0a8a594308e17881f4926879bd5fca2a2d
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3713

[33mcommit 3757bff3b155a4234905560167a0031cc4b0f746[m
Author: loli10K <ezomori.nozomu@gmail.com>
Date:   Sat Aug 29 21:52:44 2015 +0200

    Fix small typo
    
    Add a missing space to the zfs_vdev_sync_write_min_active module
    parameter description.
    
    Signed-off-by: loli10K <ezomori.nozomu@gmail.com>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3714

[33mcommit da619f3a199d938168079e153360b280dc45268a[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Sat Aug 29 18:45:56 2015 -0400

    Some OpenRC dependency logic belongs in mount
    
    The dependencies for handling / on ZFS belong in the mount script, not
    the zed script.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3715

[33mcommit 36b454ab4c33fef59c9cb25ff09c2454dcd4aa04[m
Author: Tim Chase <tim@chase2k.com>
Date:   Thu Aug 27 14:50:39 2015 -0500

    Initialize the taskq entry embedded within struct vdev
    
    As part of the stack reduction effort in
    50b25b2187134ac7b19cf93bd35a420223f1d343, a zio_t containing a taskq_ent
    was added to struct vdev_queue which itself is part of struct vdev.
    The taskq entry should be initialized as is currently done in zio_create()
    for newly-created bare zio_t object.  The rationale is the same as is
    described in f467b05a265abcfb8e5a3269f79d08f36a58646a.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3709

[33mcommit bba365cfc810161cf63b6e07100b7a6bd082ee6d[m
Author: Andreas Buschmann <andreas.buschmann@tech.net.de>
Date:   Wed Aug 19 13:01:40 2015 +0200

    Add extra keyword 'slot' to vdev_id.conf
    
    Add new keyword 'slot' to vdev_id.conf
    This selects from where to get the slot number for a SAS/SATA disk
    Needed to enable access to the physical position of a disk in a
    Supermicro 2027R-AR24NV .
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Closes #3693

[33mcommit d439f63ff5ebc3ce0c96e8a284e9c642c4b7663c[m
Author: Tim Chase <tim@chase2k.com>
Date:   Sun Aug 23 09:58:11 2015 -0500

    Allow recovery from corrupted snapshot maps
    
    If the ZAP object containing a snapshot map is corrupted due to an
    unrecoverable checksum error or otherwise, dsl_dataset_name() will
    normally panic the system due to its VERIFY.
    
    This patch attempts to allow a recovery avenue from such situations by
    manufacturing a descriptive snapshot name and then ignoring the error.
    Scrubbing a pool with this type of corruption will then show the affected
    object in the error list rather than panicking.
    
    The recovery code is only enabled when the zfs_recover module parameter
    is set.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3705

[33mcommit 4cb7b9c5d42c831878e0cf90c845ed52a2a34d72[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Aug 24 14:18:48 2015 -0700

    Check large block feature flag on volumes
    
    Since ZoL allows large blocks to be used by volumes, unlike upstream
    illumos, the feature flag must be checked prior to volume creation.
    This is critical because unlike filesystems, volumes will create a
    object which uses large blocks as part of the create.  Therefore, it
    cannot be safely checked in zfs_check_settable() after the dataset
    can been created.
    
    In addition this patch updates the relevant error messages to use
    zfs_nicenum() to print the maximum blocksize.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3591

[33mcommit c495fe2c1c6b1c63aefcd832e2e0eb0a20d4c4dc[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 27 17:01:59 2015 -0700

    Limit max_hw_sectors_kb to 16M
    
    When support for large blocks was added DMU_MAX_ACCESS was increased
    to allow for blocks of up to 16M to fit in a transaction handle.
    This had the side effect of increasing the max_hw_sectors_kb for
    volumes, which are scaled off DMU_MAX_ACCESS, to 64M from 10M.
    
    This is an issue for volumes which by default use an 8K block size
    because it results in dmu_buf_hold_array_by_dnode() allocating a
    64K array for the dbufs.  The solution is to restore the maximum
    size to ~10M.  This patch specifically changes it to 16M which is
    close enough.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3684

[33mcommit 5475aada9474464f973788c1b2fc6216486fb303[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Thu Jul 30 22:24:36 2015 +0800

    Linux 4.1 compat: loop device on ZFS
    
    Starting from Linux 4.1 allows iov_iter with bio_vec to be passed into
    iter_read/iter_write. Notably, the loop device will pass bio_vec to backend
    filesystem. However, current ZFS code assumes iovec without any check, so it
    will always crash when using loop device.
    
    With the restructured uio_t, we can safely pass bio_vec in uio_t with UIO_BVEC
    set. The uio* functions are modified to handle bio_vec case separately.
    
    The const uio_iov causes some warning in xuio related stuff, so explicit
    convert them to non const.
    
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3511
    Closes #3640

[33mcommit 17888ae30d6111f1fe25087a256724ee9b1a0a84[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Mon May 11 22:22:56 2015 +0800

    Add compatibility layer for {kmap,kunmap}_atomic
    
    Starting from linux-2.6.37, {kmap,kunmap}_atomic takes 1 argument instead of 2.
    We use zfs_{kmap,kunmap}_atomic as wrappers and always take 2 argument, but
    ignore the 2nd for newer kernel.
    
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit efc412b645cbb209e42983a9dcb9d3c9427c5495[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jul 28 16:45:17 2015 -0700

    Linux 4.2 compat: vfs_rename()
    
    The spa_config_write() function relies on the classic method of
    making sure updates to the /etc/zfs/zpool.cache file are atomic.
    It writes out a temporary version of the file and then uses
    vn_rename() to switch it in to place.  This way there can never
    exist a partial version of the file, it's all or nothing.
    
    Conceptually this is a good strategy and it makes good sense
    for platforms where it's easy to do a rename within the kernel.
    Unfortunately, Linux is not one of those platforms.  Even doing
    basic I/O to a file system from within the kernel is strongly
    discouraged.  In order to support this at all the vn_rename()
    implementation ends up being complex and fragile.  So fragile
    that recent Linux 4.2 changes have broken it.
    
    While it is possible to update vn_rename() to work with the
    latest kernels a better long term strategy is to stop using
    vn_rename() entirely.  Then all this complex, fragile code can
    be removed.  Achieving this is straight forward because
    config_write() is the only consumer of vn_rename().
    
    This patch reworks spa_config_write() to update the cache file
    in place.  The file will be truncated, written out, and then
    synced to disk.  If an error is encountered the file will be
    unlinked leaving the system in a consistent state.
    
    This does expose a tiny tiny tiny window where a system could
    crash at exactly the wrong moment could leave a partially written
    cache file.  However, this is highly unlikely because the cache
    file is 1) infrequently updated, 2) only a few kilobytes in size,
    and 3) written with a single vn_rdwr() call.
    
    If this were to somehow happen it poses no risk to pool.  Simply
    removing the cache file will allow the pool to be imported cleanly.
    Going forward this will be even less of an issue as we intend to
    disable the use of a cache file by default.
    
    Bottom line not using vn_rename() allows us to make ZoL more
    robust against upstream kernel changes.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3653

[33mcommit ff9b1d07256c57b607cc6ad3448c1fb2487305d6[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Aug 18 11:20:22 2015 -0700

    Handle zap_lookup() failure in ddt_object_load()
    
    Failing to lookup a name in the spa_ddt_stat_object should not result
    in a panic in ddt_object_load().  The error can be safely returned to
    the caller for handling resulting in a useful user error message.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3370

[33mcommit 9f5ba90f9fb0aa39de35afaf6e9f385c4ddd8865[m
Author: Richard Yao <richard.yao@clusterhq.com>
Date:   Tue Jul 14 14:28:29 2015 -0400

    Fix zvol detection
    
    The zpool create subcomand should not return an error on debug builds of
    the userland tools when given zvols.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3595

[33mcommit 6d79eabf9ff19b5c04fba735802b417389bdfa38[m
Author: tuxoko <tuxoko@gmail.com>
Date:   Mon Aug 17 14:55:52 2015 +0800

    Add parenthesis to the ternary operator
    
    Without the parenthesis, this particular ASSERT will evaluate to
    "(RW_READER == (!zap->zap_ismicro && fatreader)) ? RW_READER : lti"
    
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3685

[33mcommit 9d4f86e82562960520ff8f05e85faeb9b417f5e8[m
Author: Chris Dunlop <chris@onthe.net.au>
Date:   Sun Aug 9 22:03:30 2015 +1000

    Fix build failure with Linux 4.1 and FTRACE
    
    See also #3546, commit c1718e9
    
    Signed-off-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3673

[33mcommit 302f31ffc7586de8537e5570e7a77c839f09ad75[m
Author: Chris Dunlop <chris@onthe.net.au>
Date:   Sun Aug 9 22:38:18 2015 +1000

    Linux 4.1 compat: configure bdi_setup_and_register()
    
    Pull struct backing_dev_info off the stack: by linux-4.1 it's grown
    past our 1024 byte stack frame warning limit resulting in an incorrect
    configure result.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chris Dunlop <chris@onthe.net.au>
    Closes #3671

[33mcommit 6bec4351f5877f3f20dc9d7730aba7b1df983ecd[m
Author: Tim Chase <tim@chase2k.com>
Date:   Wed Jul 29 23:11:32 2015 -0500

    ztest: display non-index properties properly at verbose level 6
    
    At verbosity levels of 6 or greater, ztest_dsl_prop_set_uint64() attempts
    to display the value of all properties as indexed values regardless of
    whether the property is an indexed value or simply an un-indexed integer.
    This patch causes the numeric value of the property to be displayed if
    zfs_prop_index_to_string() fails.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3649

[33mcommit 69520d6855d962885e9ec4e2614575bb39c6326b[m
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Tue Jul 28 15:52:40 2015 -0700

    Rework zed_notify_email for configurable PROG/OPTS
    
    This commit reworks the zed_notify_email() function to allow
    configuration of the mail executable and command-line arguments.
    
    ZED_EMAIL_PROG specifies the name or path of the executable responsible
    for sending notifications via email.  This variable defaults to "mail".
    
    ZED_EMAIL_OPTS specifies command-line options passed to ZED_EMAIL_PROG.
    The following keyword substitutions are performed:
    - @ADDRESS@ is replaced with the recipient email address(es)
    - @SUBJECT@ is replaced with the notification subject
    This variable defaults to "-s '@SUBJECT@' @ADDRESS@".
    
    ZED_EMAIL_ADDR replaces ZED_EMAIL (although the latter is retained
    for backward compatibility).  This variable can contain multiple
    addresses as long as they are delimited by whitespace.
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3634
    Closes #3631

[33mcommit 6f1eccff2c264bf44c63ca40a9279fffc3b5d5b5[m
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Tue Jul 28 15:52:18 2015 -0700

    Fix whitespace in zed_log_err
    
    This commit fixes the two adjacent spaces that appear in zed_log_err()
    messages when ZEVENT_EID is undefined.
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 7e8bddd01952722b8f8bda773b3c96cb49b2e2bc[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jul 28 11:30:00 2015 -0700

    Update arc_memory_throttle() to check pageout
    
    This brings the behavior of arc_memory_throttle() back in sync with
    illumos.  The updated memory throttling policy roughly goes like this:
    
    * Never throttle if more than 10% of memory is free.  This threshold
      is configurable with the zfs_arc_lotsfree_percent module option.
    
    * Minimize any throttling of kswapd even when free memory is below
      the set threshold.  Allow it to write out pages as quickly as
      possible to help alleviate the memory pressure.
    
    * Delay all other threads when free memory is below the set threshold
      in order to avoid compounding the memory pressure.  Buffers will be
      evicted from the ARC to reduce the issue.
    
    The Linux specific zfs_arc_memory_throttle_disable module option has
    been removed in favor of the existing zfs_arc_lotsfree_percent tuning.
    Setting zfs_arc_lotsfree_percent=0 will have the same effect as
    zfs_arc_memory_throttle_disable and it was therefore redundant.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3637

[33mcommit 11f552fa9074a94dac3463300e369013ec2f1544[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jul 27 13:17:32 2015 -0700

    Update arc_available_memory() to check freemem
    
    While Linux doesn't provide detailed information about the state of
    the VM it does provide us total free pages.  This information should
    be incorporated in to the arc_available_memory() calculation rather
    than solely relying on a signal from direct reclaim.  Conceptually
    this brings arc_available_memory() back in sync with illumos.
    
    It is also desirable that the target amount of free memory be tunable
    on a system.  While the default values are expected to work well
    for most workloads there may be cases where custom values are needed.
    The zfs_arc_sys_free module option was added for this purpose.
    
    zfs_arc_sys_free - The target number of bytes the ARC should leave
                       as free memory on the system.  This value can
                       checked in /proc/spl/kstat/zfs/arcstats and
                       setting this module option will override the
                       default value.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3637

[33mcommit 6339c1b9dce9f7cf4b7269d588d7a9c3bf338ebb[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jul 27 11:55:03 2015 -0700

    Bound zvol_threads module option
    
    The zvol_threads module option should be bounded to a reasonable
    range.  The taskq must have at least 1 thread and shouldn't have
    more than 1,024 at most.  The default value of 32 is a reasonable
    default.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3614

[33mcommit 21a96fb635fb14a59efe44d7ea6767c5f9a586bc[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Thu Mar 5 11:52:26 2015 -0800

    Fix "BUG: Bad page state" caused by writeback flag
    
    Commit d958324 fixed the deadlock between page lock and range lock by
    unlocking the page lock before acquiring the range lock. However,
    this created a new issue #3075.
    
    The problem is that if we can't set the write back bit before releasing
    the page lock.  Then other processes will be unaware that the page is
    under active write back.  They may therefore truncate the page,
    invalidate the page, or not honor the sync semantics.
    
    To workaround this problem we re-dirty the page before dropping the
    page lock.  While this doesn't prevent the page from being truncated
    it does ensure it won't be invalidated.  Then the range lock and the
    page lock are reacquired in the correct deadlock-free order.
    
    Once both locks are safely held the page state can be rechecked.  If
    all is well and the page is in the expect state the dirty bit can be
    removed, the write back bit set, and the page removed from the skip
    count.  If not the page will be handled as appropriate.
    
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3075

[33mcommit c1718e9580b9b6222be19c1691d3d7b61e503754[m
Author: Frédéric VANNIÈRE <f.vanniere@planet-work.com>
Date:   Tue Jul 28 14:42:14 2015 +0200

    Fix build failure with Linux 4.1 and FTRACE
    
    Signed-off-by: Frédéric VANNIÈRE <f.vanniere@planet-work.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3546

[33mcommit 1229323d5f82bcb0525b312c80330968cd41466e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jul 24 10:08:31 2015 -0700

    Align thread priority with Linux defaults
    
    Under Linux filesystem threads responsible for handling I/O are
    normally created with the maximum priority.  Non-I/O filesystem
    processes run with the default priority.  ZFS should adopt the
    same priority scheme under Linux to maintain good performance
    and so that it will complete fairly when other Linux filesystems
    are active.  The priorities have been updated to the following:
    
    $ ps -eLo rtprio,cls,pid,pri,nice,cmd | egrep 'z_|spl_|zvol|arc|dbu|meta'
         -  TS 10743  19 -20 [spl_kmem_cache]
         -  TS 10744  19 -20 [spl_system_task]
         -  TS 10745  19 -20 [spl_dynamic_tas]
         -  TS 10764  19   0 [dbu_evict]
         -  TS 10765  19   0 [arc_prune]
         -  TS 10766  19   0 [arc_reclaim]
         -  TS 10767  19   0 [arc_user_evicts]
         -  TS 10768  19   0 [l2arc_feed]
         -  TS 10769  39   0 [z_unmount]
         -  TS 10770  39 -20 [zvol]
         -  TS 11011  39 -20 [z_null_iss]
         -  TS 11012  39 -20 [z_null_int]
         -  TS 11013  39 -20 [z_rd_iss]
         -  TS 11014  39 -20 [z_rd_int_0]
         -  TS 11022  38 -19 [z_wr_iss]
         -  TS 11023  39 -20 [z_wr_iss_h]
         -  TS 11024  39 -20 [z_wr_int_0]
         -  TS 11032  39 -20 [z_wr_int_h]
         -  TS 11033  39 -20 [z_fr_iss_0]
         -  TS 11041  39 -20 [z_fr_int]
         -  TS 11042  39 -20 [z_cl_iss]
         -  TS 11043  39 -20 [z_cl_int]
         -  TS 11044  39 -20 [z_ioctl_iss]
         -  TS 11045  39 -20 [z_ioctl_int]
         -  TS 11046  39 -20 [metaslab_group_]
         -  TS 11050  19   0 [z_iput]
         -  TS 11121  38 -19 [z_wr_iss]
    
    Note that under Linux the meaning of a processes priority is inverted
    with respect to illumos.  High values on Linux indicate a _low_ priority
    while high value on illumos indicate a _high_ priority.
    
    In order to preserve the logical meaning of the minclsyspri and
    maxclsyspri macros when they are used by the illumos wrapper functions
    their values have been inverted.  This way when changes are merged
    from upstream illumos we won't need to remember to invert the macro.
    It could also lead to confusion.
    
    This patch depends on https://github.com/zfsonlinux/spl/pull/466.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Closes #3607

[33mcommit c97d30691c0d599e80370090988a79dd8175b5a8[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jul 24 12:08:53 2015 -0700

    Check for NULL in dmu_free_long_range_impl()
    
    A NULL should never be passed as the dnode_t pointer to the function
    dmu_free_long_range_impl().  Regardless, because we have a reported
    occurrence of this let's add some error handling to catch this.
    Better to report a reasonable error to caller than panic the system.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3445

[33mcommit 21d41d6806edce8217dfd5d16e74a6a8a4f5fe1b[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Mon Jul 27 17:09:02 2015 +0200

    Make sure that POOL_IMPORTED is set, unset and checked where appropriate.
    
    * If it's unset in find_rootfs(), no pool is imported so no point in
      looking for a rootfs.
    * If find_rootfs() couldn't find a rootfs, the pool is exported. Remember
      to unset POOL_IMPORTED after doing so.
    * Set POOL_IMPORTED if/when a pool have been imported in import_pool().
    * Improve backup import (the one using cache file).
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3636

[33mcommit 48511ea6454224bc96ac518501a89ba52d7a5102[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Fri Jul 24 12:49:03 2015 +0000

    Fix some minor issues with the SYSV init and initramfs scripts.
    
    This is some minor fixes to commits 2cac7f5f11756663525a5d4604d9f0a3202d4024
    and 2a34db1bdbcecf5019c4a59f2a44c92fe82010f2.
    
    * Make sure to alien'ate the new initramfs rpm package as well!
      The rpm package is build correctly, but alien isn't run on it to
      create the deb.
    * Before copying file from COPY_FILE_LIST, make sure the DESTDIR/dir exists.
    * Include /lib/udev/vdev_id file in the initrd.
    * Because the initrd needs to use '/sbin/modprobe' instead of 'modprobe',
      we need to use this in load_module() as well.
      * Make sure that load_module() can be used more globaly, instead of
        calling '/sbin/modprobe' all over the place.
      * Make sure that check_module_loaded() have a parameter - module to
        check.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3626

[33mcommit 96c080cb9c2c1c4e669bdc6930128bc676bc5552[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jun 29 10:02:03 2015 -0700

    Minor style cleanup
    
    Address minor differences in style between upstream and ZoL.  This
    patch contains no functional differences and is solely designed to
    minimize the delta from upstream.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3533

[33mcommit 3056818343048a7406f34a0a050d6b2733d8a813[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jun 29 11:56:02 2015 -0700

    Remove double counting HDR_L2ONLY_SIZE
    
    Commit d962d5d didn't quite properly resolve the HDR_L2ONLY_SIZE
    accounting.  Accounting is now performed only in the constructor
    and destructor which is a nice simplification.  It should have
    been removed the from create and destroy functions.  This brings
    up back in sync with upstream.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3533

[33mcommit 8c8af9d807cfed74c786c076ef4f708b7ccdc51b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jun 29 10:34:47 2015 -0700

    Add hdr_recl() reclaim callback
    
    Originally removed because it wasn't required under Linux.  However,
    there may still be some utility in signaling the arc reclaim thread
    under Linux via reclaim.  This should already have happened by other
    means but it's not harmless and reduces another point of divergence
    with upstream.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3533

[33mcommit 728d6ae91e5381cda813672c9e9f66a269f58368[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jun 26 15:59:23 2015 -0700

    Reinstate zfs_arc_p_min_shift
    
    Commit f521ce1 removed the minimum value for "arc_p" allowing it to
    drop to zero or grow to "arc_c".  This was done to improve specific
    workload which constantly dirties new "metadata" but also frequently
    touches a "small" amount of mfu data (e.g. mkdir's).
    
    This change may still be desirable but it needs to be re-investigated.
    in the context of the recent ARC changes from upstream.  Therefore
    this code is being restored to facilitate benchmarking.  By setting
    "zfs_arc_p_min_shift=64" we easily compare the performance.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3533

[33mcommit 36da08ef9bd655b6748ac253a43e28218a5cd759[m
Author: Prakash Surya <prakash.surya@delphix.com>
Date:   Fri Jun 26 15:14:45 2015 -0700

    Illumos 5817 - change type of arcs_size from uint64_t to refcount_t
    
    5817 change type of arcs_size from uint64_t to refcount_t
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Paul Dagnelie <paul.dagnelie@delphix.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Alex Reece <alex@delphix.com>
    Reviewed by: Richard Elling <richard.elling@richardelling.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
      https://www.illumos.org/issues/5817
      https://github.com/illumos/illumos-gate/commit/2fd872a
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3533

[33mcommit 500445c04698aad356f7b1757b61c5f9eebf7060[m
Author: Prakash Surya <prakash.surya@delphix.com>
Date:   Fri Jun 26 14:54:17 2015 -0700

    Illumos 5445 - Add more visibility via arcstats
    
    5445 Add more visibility via arcstats; specifically arc_state_t
    stats and differentiate between "data" and "metadata"
    Reviewed by: Basil Crow <basil.crow@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Bayard Bell <bayard.bell@nexenta.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    
    References:
      https://www.illumos.org/issues/5445
      https://github.com/illumos/illumos-gate/commit/4076b1b
    
    Porting Notes:
    
    This patch is an improved version of cc7f677 which was previously
    merged in ZoL.  This patch incorporates the additional improvements
    which were made upstream.
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3533

[33mcommit ca67b33abadd2893755735130c11faa5df756989[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Fri Jun 26 11:28:18 2015 -0700

    Illumos 5376 - arc_kmem_reap_now() should not result in clearing arc_no_grow
    
    5376 arc_kmem_reap_now() should not result in clearing arc_no_grow
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Steven Hartland <killing@multiplay.co.uk>
    Reviewed by: Richard Elling <richard.elling@richardelling.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5376
      https://github.com/illumos/illumos-gate/commit/2ec99e3
    
    Porting Notes:
    
    The good news is that many of the recent changes made upstream to the
    ARC tackled issues previously observed by ZoL with similar solutions.
    The bad news is those solution weren't identical to the ones we applied.
    This patch is designed to split the difference and apply as much of the
    upstream work as possible.
    
    * The arc_available_memory() function was removed previous in ZoL but
    due to the upstream changes it makes sense to add it back.  This function
    has been customized for Linux so that it can be used to determine a low
    memory.  This provides the same basic functionality as the illumos version
    allowing us to minimize changes through the rest of the code base.  The
    exact mechanism used to detect a low memory state remains unchanged so
    this change isn't a significant as it might first appear.
    
    * This patch includes the long standing fix for arc_shrink() which was
    originally proposed in #2167.  Since there were related changes to this
    function it made sense to include that work.
    
    * The arc_init() function has been re-factored.  As before it sets sane
    default values for the ARC but then calls arc_tuning_update() to apply
    user specific tuning made via module options.  The arc_tuning_update()
    function is then called periodically by the arc_reclaim_thread() to
    apply changes to the tunings made during normal operation.
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3616
    Closes #2167

[33mcommit 3b79cef21294f3ec46c4f71cc5a68a75a4d0ebc7[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jul 20 13:16:16 2015 -0700

    Set default _initconfdir directory
    
    The _initconfdir macro is normally provided by global rpm macros
    file for use in the spec file.  However, older distributions such
    as CentOS 6 do not define it.  To prevent a build failure in this
    case the spec file has been updated to use a reasonable default
    when the value is undefined.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3617

[33mcommit 53b1d9794efc1dc5467a624e1d5c4cad662a3858[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jul 13 14:51:59 2015 -0700

    Add logic to try and recover an inode with an invalid mode
    
    When an inode is detected with invalid mode bits the safe thing to
    do is panic the system.  This indicates a problem with the contents
    of a dnode and it should never be possible.  This is the default
    behavior.
    
    Unfortunately, due to flaws in the system attribute (SA) implementation
    (on all platforms) it was possible that ZFS could create a damaged dnode.
    This was a rare issue which only impacted dnodes which used a spill
    block.  Normally only symlinks and files with ACLs would require a
    spill block.  However, if the dataset had the xattr=sa property set
    and extended attributes were used this problem could occur.
    
    As of the 0.6.4 tag the root cause of this issue has been fixed.  For
    pools which are exhibiting this damage the 'zfs_recover=1' module option
    may be set.  This will cause ZFS to interpret the dnode with invalid
    mode bits as a normal file.  This may allow the files to be accessed
    for recovery purposes.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3548

[33mcommit 47a4a6fd5fa1f1f60bcf6af19e453ecf0292f7d1[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Mon Jun 9 23:55:31 2014 +0200

    Support parallel build trees (VPATH builds)
    
    Build products from an out of tree build should be written
    relative to the build directory.  Sources should be referred
    to by their locations in the source directory.
    
    This is accomplished by adding the 'src' and 'obj' variables
    for the module Makefile.am, using relative paths to reference
    source files, and by setting VPATH when source files are not
    co-located with the Makefile.  This enables the following:
    
      $ mkdir build
      $ cd build
      $ ../configure \
        --with-spl=$HOME/src/git/spl/ \
        --with-spl-obj=$HOME/src/git/spl/build
      $ make -s
    
    This change also has the advantage of resolving the following
    warning which is generated by modern versions of automake.
    
      Makefile.am:00: warning: source file 'xxx' is in a subdirectory,
      Makefile.am:00: but option 'subdir-objects' is disabled
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1082

[33mcommit 2a53e2dacc7a7c0a8c63ff2eef3aff95f6ac80b1[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jul 16 13:35:04 2015 -0700

    Update inode under range lock
    
    After a successful write the inode must be updated under the range
    lock.  If it is updated after dropping the lock there exists a race
    where the znode and inode wile disagree about the file size.  This
    could result in narrow window of time where read(2) is able to access
    data beyond what fstat(2) reports as the file size.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Closes #3601

[33mcommit bd29109f1ac5be68f7f7c8bcb49e1b706fe899f0[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jul 15 10:54:26 2015 -0700

    Linux 4.2 compat: follow_link() / put_link()
    
    As of Linux 4.2 the kernel has completely retired the nameidata
    structure.  One of the few remaining consumers of this interface
    were the follow_link() and put_link() callbacks.
    
    This patch adds the required checks to configure to detect the
    interface change and updates the functions accordingly.  Migrating
    to the simple_follow_link() interface was considered but was decided
    against ironically due to the increased complexity.
    
    It also should be noted that the kernel follow_link() and put_link()
    interfaces changes several times after 4.1 and but before 4.2.  This
    means there is a narrow range of kernel commits which never appear
    in an official tag of the Linux kernel which ZoL will not build.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Issue #3596

[33mcommit 7eb333fbdde32dbebdcc88c35610159e207237c9[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jul 14 14:57:55 2015 -0700

    Linux 4.2 compat: remove bio->bi_cnt access
    
    Linux 4.2 commit torvalds/linux@dac5621 renamed bio->bi_cnt to
    bio->__bi_cnt.  Because this value is only used once in a block of
    debug code it simplest just to remove the PANIC.  To my knowledge
    this debugging has never been hit or proved useful so this is no
    great loss.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Closes #3596

[33mcommit e80da86447174b583e4b6cebedae2956fac926ee[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jul 14 14:15:13 2015 -0700

    Linux 4.2 compat: bdi_setup_and_register()
    
    The vfs_compat.h header should include the linux/backing-dev.h header
    because it depends on the bdi_* functions defined there.  In previous
    kernels this header was being indirectly included which prevented a
    build failure.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Closes #3596

[33mcommit 905edb405da278ccb019c656408f82796a344510[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Sat Jul 11 02:19:41 2015 +0200

    Illumos 5347 - idle pool may run itself out of space
    
    5347 idle pool may run itself out of space
    Reviewed by: Alex Reece <alex.reece@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Steven Hartland <killing@multiplay.co.uk>
    Reviewed by: Richard Elling <richard.elling@richardelling.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://github.com/illumos/illumos-gate/commit/231aab8
      https://github.com/illumos/illumos-gate/commit/4a92375 3642
      https://www.illumos.org/issues/5347
      https://github.com/zfsonlinux/zfs/commit/89b1cd6 (partial commit & fix)
      https://github.com/zfsonlinux/zfs/commit/fbeddd6 Illumos 4390
      https://github.com/zfsonlinux/zfs/commit/2696dfa Illumos 3642, 3643
    
    Porting notes:
    This is completing the partial fix from FreeBSD
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3586

[33mcommit 93f6d7e2e5050ee8894c0ae5e7c91aa74187cd86[m
Author: Manoj Joseph <manoj.joseph@delphix.com>
Date:   Sat Jul 11 01:54:52 2015 +0200

    Illumos 5764 - "zfs send -nv" directs output to stderr
    
    5764 "zfs send -nv" directs output to stderr
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Paul Dagnelie <paul.dagnelie@delphix.com>
    Reviewed by: Basil Crow <basil.crow@delphix.com>
    Reviewed by: Steven Hartland <killing@multiplay.co.uk>
    Reviewed by: Bayard Bell <buffer.g.overflow@gmail.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://github.com/illumos/illumos-gate/commit/dc5f28a
      https://www.illumos.org/issues/5764
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3585

[33mcommit 1cddb8c9ff072643a9d9f8726f0480b5a57d9bcd[m
Author: Alexander Eremin <a.eremin@nexenta.com>
Date:   Sat Jul 11 01:45:01 2015 +0200

    Illumos 5610 - zfs clone from different source and target pools produces coredump
    
    5610 zfs clone from different source and target pools produces coredump
    Reviewed by: Josef 'Jeff' Sipek <josef.sipek@nexenta.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://github.com/illumos/illumos-gate/commit/03b1c29
      https://www.illumos.org/issues/5610
      https://www.illumos.org/issues/5824
      https://github.com/zfsonlinux/zfs/issues/2911
      https://github.com/zfsonlinux/zfs/commit/9063f65
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3584

[33mcommit eaa52d32b0784b1d6ceb1299bb520300506f58bf[m
Author: Prasad Joshi <prasadjoshi124@gmail.com>
Date:   Sun Jul 5 01:35:26 2015 +0200

    Illumos 1765 - assert triggered in libzfs_import.c
    
    1765 assert triggered in libzfs_import.c trying to import pool
    name beginning with a number
    Reviewed-by: Garrett D'Amore <garrett@damore.org>
    Reviewed-by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    
    References:
      https://github.com/illumos/illumos-gate/commit/9edf9eb
      https://www.illumos.org/issues/1765
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3562

[33mcommit 0de7c552b69f2bb3e16f023007f049cb3c8e9afd[m
Author: Richard Yao <richard.yao@clusterhq.com>
Date:   Fri Jul 3 12:20:17 2015 -0400

    Failure of userland copy should return EFAULT
    
    Many key internal functions pass system return codes that are safe to
    return to userland. In the case of ddi_copyin(9F), an error passes -1
    and the documentation states very clearly that drivers should pass
    EFAULT to userland when this happens.
    
    http://illumos.org/man/9F/ddi_copyin
    
    This does not happen in the ZFS source code. I believe it should be
    changed to pass EFAULT. I caught this when writing man pages for the
    libzfs_core API.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3575

[33mcommit b39c22b73c0e8016381057c2240570f7af992def[m
Author: Boris Protopopov <boris.protopopov@actifio.com>
Date:   Thu Jun 25 15:42:51 2015 -0400

    Translate sync zio to sync bio
    
    Translate zio requests with ZIO_PRIORITY_SYNC_READ and
    ZIO_PRIORITY_SYNC_WRITE into synchronous bio requests by setting
    READ_SYNC and WRITE_SYNC flags. Specifically, WRITE_SYNC flag turns
    out to have a pronounced effect when writing to an SSD-based SLOG.
    
    When WRITE_SYNC is not set (WRITE is set instead), the block trace
    for a SLOG device looks as follows:
    ...
    130,96   0        3     0.008968390     0  C   W 830464 + 136 [0]
    130,96   0        4     0.011999161     0  C   W 830720 + 136 [0]
    130,96   0        5     0.023955549     0  C   W 831744 + 136 [0]
    130,96   0        6     0.024337663 19775  A   W 832000 + 136 <- (130,97) 829952
    130,96   0        7     0.024338823 19775  Q   W 832000 + 136 [z_wr_iss/6]
    130,96   0        8     0.024340523 19775  G   W 832000 + 136 [z_wr_iss/6]
    130,96   0        9     0.024343187 19775  P   N [z_wr_iss/6]
    130,96   0       10     0.024344120 19775  I   W 832000 + 136 [z_wr_iss/6]
    130,96   0       11     0.026784405     0 UT   N [swapper] 1
    130,96   0       12     0.026805339   202  U   N [kblockd/0] 1
    130,96   0       13     0.026807199   202  D   W 832000 + 136 [kblockd/0]
    130,96   0       14     0.026966948     0  C   W 832000 + 136 [0]
    130,96   3        1     0.000449358 19788  A   W 829952 + 136 <- (130,97) 827904
    130,96   3        2     0.000450951 19788  Q   W 829952 + 136 [z_wr_iss/19]
    130,96   3        3     0.000453212 19788  G   W 829952 + 136 [z_wr_iss/19]
    130,96   3        4     0.000455956 19788  P   N [z_wr_iss/19]
    130,96   3        5     0.000457076 19788  I   W 829952 + 136 [z_wr_iss/19]
    130,96   3        6     0.002786349     0 UT   N [swapper] 1
    ...
    
    Here the 130,197 is the partition created on the log device when adding it
    to the pool, whereas the base device is 130,96. As one can see, the writes
    to the SLOG are not marked synchronous (the S is missing next to W), and
    the queue unplugs occur based on the timer (UT event) resulting in slightly
    over 2 msec latency of writes. This results in a sub-par performance of
    single stream synchronous writes (limited by latency of the SLOG).
    
    When the WRITE_SYNC is set, a similar trace looks as follows:
    ...
    130,96   4        1     0.000000000 70714  A  WS 4280576 + 136 <- (130,97) 4278528
    130,96   4        2     0.000000832 70714  Q  WS 4280576 + 136 [(null)]
    130,96   4        3     0.000002109 70714  G  WS 4280576 + 136 [(null)]
    130,96   4        4     0.000003394 70714  P   N [(null)]
    130,96   4        5     0.000003846 70714  I  WS 4280576 + 136 [(null)]
    130,96   4        6     0.000004854 70714  D  WS 4280576 + 136 [(null)]
    130,96   5        1     0.000354487 70713  A  WS 4280832 + 136 <- (130,97) 4278784
    130,96   5        2     0.000355072 70713  Q  WS 4280832 + 136 [(null)]
    130,96   5        3     0.000356383 70713  G  WS 4280832 + 136 [(null)]
    130,96   5        4     0.000357635 70713  P   N [(null)]
    130,96   5        5     0.000358088 70713  I  WS 4280832 + 136 [(null)]
    130,96   5        6     0.000359191 70713  D  WS 4280832 + 136 [(null)]
    130,96   0       76     0.000159539     0  C  WS 4280576 + 136 [0]
    130,96  16       85     0.000742108 70718  A  WS 4281088 + 136 <- (130,97) 4279040
    130,96  16       86     0.000743197 70718  Q  WS 4281088 + 136 [z_wr_iss/15]
    130,96  16       87     0.000744450 70718  G  WS 4281088 + 136 [z_wr_iss/15]
    130,96  16       88     0.000745817 70718  P   N [z_wr_iss/15]
    130,96  16       89     0.000746705 70718  I  WS 4281088 + 136 [z_wr_iss/15]
    130,96  16       90     0.000747848 70718  D  WS 4281088 + 136 [z_wr_iss/15]
    130,96   0       77     0.000604063     0  C  WS 4280832 + 136 [0]
    130,96   0       78     0.000899858     0  C  WS 4281088 + 136 [0]
    
    As one can see, all the writes are synchronous (WS), and I/O completions
    (e.g. from issue I to completion C) take 160-250 usec, or about 10x faster.
    
    Since WRITE_SYNC or READ_SYNC flags are among several factors that are
    considered when processing bio requests, it seems prudent to mark all the
    zio requests of synchronous priority with the READ/WRITE_SYNC flags to make
    them eligible for consideration as such by the Linux block I/O layer.
    
    Signed-off-by: Boris Protopopov <boris.protopopov@actifio.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3529

[33mcommit 2b7b78fa5d794d0bd6b0beb2b8b7f98f7b1071f9[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jul 13 12:59:38 2015 -0700

    Fix switch-bool warning
    
    As of gcc version 5.1.1 a new warning has been added to detect the
    use of a boolean in a switch statement (-Wswitch-bool).  Resolve the
    warning by explicitly casting the value to an integer type.
    
      zfs-0.6.4/module/zfs/zvol.c: In function 'zvol_request':
      error: switch condition has boolean value [-Werror=switch-bool]
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit c2d17fd891add689786c569d7b5ea66d60d69b9b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jul 13 12:30:02 2015 -0700

    Disable gcc bool-compare warning
    
    As of gcc version 5.1.1 a new boolean comparison warning has been
    introduced.  This warning is harmless but is triggered several places
    in the ZFS code base.  Because warnings are promoted to errors when
    building with debugging enabled it is necessary to disable the warning
    when using versions of gcc which automatically enabling this check.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 5970eb3d60346d385d0910c00ed5199b9af223c8[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jul 13 10:30:22 2015 -0700

    Use truncate instead of fallocate in ziltest.sh
    
    For the purposes of creating sparse files the truncate command is
    preferable to fallocate because generic sparse files are more widely
    supported by older platforms.  Specifically Debian Wheezy which is
    based on a 2.6.32 kernel used ext3 by default which at the time did
    not support it.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 541da9935d07ad40fb5e000114d9c904c2dde632[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Mon Jul 6 11:20:11 2015 -0400

    Fix Xen Virtual Block Device detection
    
    We fail to make partitions on xvd (Xen Virtual Block) devices. This also
    causes debug builds of zpool create to return an error when given xen
    virtual block devices. These devices should be given the same treatment
    as vd (KVM Virtual Block) devices, so we adjust the relevant code paths.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3576

[33mcommit 98cb3a76559cb1187f77af1d6a08d4f9b7b14aa0[m
Author: Will Andrews <will@freebsd.org>
Date:   Mon Jul 6 04:13:12 2015 +0200

    Illumos 5813 - zfs_setprop_error(): Handle errno value E2BIG.
    
    5813 zfs_setprop_error(): Handle errno value E2BIG.
    Reviewed by: Paul Dagnelie <paul.dagnelie@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Richard Elling <richard.elling@richardelling.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
      https://github.com/illumos/illumos-gate/commit/6fdcb3d
      https://www.illumos.org/issues/5813
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3572

[33mcommit 99197f034ea0a7e227116e0cec00fe55061bffa7[m
Author: Justin T. Gibbs <justing@spectralogic.com>
Date:   Mon Jul 6 03:55:32 2015 +0200

    Illumos 5661 - ZFS: "compression = on" should use lz4 if feature is enabled
    
    5661 ZFS: "compression = on" should use lz4 if feature is enabled
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Josef 'Jeff' Sipek <jeffpc@josefsipek.net>
    Reviewed by: Xin LI <delphij@freebsd.org>
    Approved by: Robert Mustacchi <rm@joyent.com>
    
    References:
      https://github.com/illumos/illumos-gate/commit/db1741f
      https://www.illumos.org/issues/5661
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3571

[33mcommit 15cfbb38fd6248529bf16f0cdc4ebb7adf38ab98[m
Author: Jan Kryl <jan.kryl@nexenta.com>
Date:   Sun Jul 5 23:51:53 2015 +0200

    Illumos 5427 - memory leak in libzfs when doing rollback
    
    5427 memory leak in libzfs when doing rollback
    Reviewed by: Michael Tsymbalyuk <mtzaurus@gmail.com>
    Reviewed by: Steven Hartland <killing@multiplay.co.uk>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References
      https://github.com/illumos/illumos-gate/commit/b7070b7
      https://www.illumos.org/issues/5427
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3569

[33mcommit de0a9d763075cc688d6cb75c94d62dde912ed669[m
Author: Basil Crow <basil.crow@delphix.com>
Date:   Sun Jul 5 21:17:49 2015 +0200

    Illumos 5118 - When verifying or creating a storage pool, error messages only show one device
    
    5118 When verifying or creating a storage pool, error messages
    only show one device
    Reviewed by: Adam Leventhal <adam.leventhal@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Reviewed by: Boris Protopopov <boris.protopopov@me.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://github.com/illumos/illumos-gate/commit/75fbdf9
      https://www.illumos.org/issues/5118
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3567

[33mcommit 3e43edd2c5b40d49bae9881566570a5fb7c2c181[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Sun Jul 5 21:00:34 2015 +0200

    Illumos 4966 - zpool list iterator does not update output
    
    4966 zpool list iterator does not update output
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
      https://github.com/illumos/illumos-gate/commit/cd67d23
      https://www.illumos.org/issues/4966
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3566

[33mcommit 411bf201f5703aa34392f4872ea01bf54c7d3076[m
Author: Josef 'Jeff' Sipek <josef.sipek@nexenta.com>
Date:   Sun Jul 5 20:54:17 2015 +0200

    Illumos 4745 - fix AVL code misspellings
    
    4745 fix AVL code misspellings
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Richard Lowe <richlowe@richlowe.net>
    Approved by: Robert Mustacchi <rm@joyent.com>
    
    References:
      https://github.com/illumos/illumos-gate/commit/6907ca4
      https://www.illumos.org/issues/4745
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3565

[33mcommit 02f8fe42606c6d7657a7dace24c8efc9b245e500[m
Author: Josef 'Jeff' Sipek <josef.sipek@nexenta.com>
Date:   Sun Jul 5 01:54:29 2015 +0200

    Illumos 4626 - libzfs memleak in zpool_in_use()
    
    4626 libzfs memleak in zpool_in_use()
    Reviewed by: Tony Nguyen <tony.nguyen@nexenta.com>
    Reviewed by: Saso Kiselkov <saso.kiselkov@nexenta.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://github.com/illumos/illumos-gate/commit/fb13f48
      https://www.illumos.org/issues/4626
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3563

[33mcommit cc49250563b65c80d87afa5273ae350d06aa8d3b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jul 9 11:41:14 2015 -0700

    Move dracut directory to contrib
    
    The dracut code is analogous to the initramfs code and as such
    it should be located in the contrib with initramfs for consistency.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 2cac7f5f11756663525a5d4604d9f0a3202d4024[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Thu Jan 30 16:26:48 2014 +0000

    Initramfs scripts for ZoL.
    
    * Supports booting of a ZFS snapshot.
      Do this by cloning the snapshot into a dataset. If this, the resulting
      dataset, already exists, destroy it. Then mount it on root.
      * If snapshot does not exist, use base dataset (the part before '@')
        as boot filesystem instead.
      * If no snapshot is specified on the 'root=' kernel command line, but there
        is an '@', then get a list of snapshots below that filesystem and ask the
        user which to use.
      * Clone with 'mountpoint=none' and 'canmount=noauto' - we mount manually
        and explicitly.
        * For sub-filesystems, that doesn't have a mountpoint property set, we use
          the 'org.zol:mountpoint' to keep track of it's mountpoint.
      * Allow rollback of snapshots instead of clone it and boot from the clone.
    * Allow mounting a root- and subfs with mountpoint=legacy set
    * Allow mounting a filesystem which is using nativ encryption.
    * Support all currently used kernel command line arguments
      All the different distributions have their own standard on what to specify
      on the kernel command line to boot of a ZFS filesystem.
      * Extra options:
        * zfsdebug=(on,yes,1)	Show extra debugging information
        * zfsforce=(on,yes,1)	Force import the pool
        * rollback=(on,yes,1)	Rollback (instead of clone) the snapshot
    * Only try to import pool if it haven't already been imported
      * This will negate the need to force import a pool that have not been exported cleanly.
      * Support exclusion of pools to import by setting ZFS_POOL_EXCEPTIONS in /etc/default/zfs.
    * Support additional configuration variable ZFS_INITRD_ADDITIONAL_DATASETS
      to mount additional filesystems not located under your root dataset.
    * Include /etc/modprobe.d/{zfs,spl}.conf in the initrd if it/they exist.
    * Include the udev rule to use by-vdev for pool imports.
    * Include the /etc/default/zfs file to the initrd.
    * Only try /dev/disk/by-* in the initrd if USE_DISK_BY_ID is set.
      * Use /dev/disk/by-vdev before anything.
      * Add /dev as a last ditch attempt.
      * Fallback to using the cache file if that exist if nothing else worked.
    * Use /sbin/modprobe instead of built-in (BusyBox) modprobe.
      This gets rid of the message "modprobe: can't load module zcommon".
      Thanx to pcoultha for finding this.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2116
    Closes #2114

[33mcommit 1cd777340bb2feaedbbdb48cab27ce5ffa14c353[m
Author: Tim Chase <tim@chase2k.com>
Date:   Fri Jul 3 09:24:24 2015 -0500

    Prevent reclaim in metaslab preload threads
    
    Reclaim during metaslab preloading can cause deadlocks involving znode
    z_lock and ARC buffer header ht_lock.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3532.

[33mcommit e16b3fcc610fab2dcf3381486b2640dc2a2213cb[m
Author: Alexander Motin <mav@freebsd.org>
Date:   Fri Jul 18 08:53:38 2014 -0800

    Illumos 5008 - lock contention (rrw_exit) while running a read only load
    
    5008 lock contention (rrw_exit) while running a read only load
    Reviewed by: Matthew Ahrens <matthew.ahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Alex Reece <alex.reece@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Richard Yao <ryao@gentoo.org>
    Reviewed by: Saso Kiselkov <skiselkov.ml@gmail.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    Porting notes:
    
    This patch ported perfectly cleanly to ZoL.  During testing 100% cached
    small-block reads, extreme contention was noticed on rrl->rr_lock from
    rrw_exit() due to the frequent entering and leaving ZPL.  Illumos picked
    up this patch from FreeBSD and it also helps under Linux.
    
    On a 1-minute 4K cached read test with 10 fio processes pinned to a single
    socket on a 4-socket (10 thread per socket) NUMA system, contentions on
    rrl->rr_lock were reduced from 508799 to 43085.
    
    Ported-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3555

[33mcommit 4bda3bd0e72d582a785b6552ce16b99e04414fbe[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Thu Jul 2 18:23:20 2015 +0200

    Illumos 5911 - ZFS "hangs" while deleting file
    
    5911 ZFS "hangs" while deleting file
    Reviewed by: Bayard Bell <buffer.g.overflow@gmail.com>
    Reviewed by: Alek Pinchuk <alek@nexenta.com>
    Reviewed by: Simon Klinkert <simon.klinkert@gmail.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/5911
      https://github.com/illumos/illumos-gate/commit/46e1baa
    
    Porting notes:
    
    Resolved ISO C90 forbids mixed declarations and code wanting in
    the dnode_free_range() function.
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3554

[33mcommit 5e8cd5d17f21200beb5f6fae8e8be64c0491195d[m
Author: Arne Jansen <jansen@webgods.de>
Date:   Thu Jul 2 17:58:17 2015 +0200

    Illumos 5981 - Deadlock in dmu_objset_find_dp
    
    5981 Deadlock in dmu_objset_find_dp
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    
    References:
      https://www.illumos.org/issues/5981
      https://github.com/illumos/illumos-gate/commit/1d3f896
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3553

[33mcommit 71e2fe41be982076f14fe5d39bcf5f7051a937f0[m
Author: Andriy Gapon <avg@freebsd.org>
Date:   Thu Jul 2 16:04:35 2015 +0300

    Illumos 5946, 5945
    
    5946 zfs_ioc_space_snaps must check that firstsnap and lastsnap refer to snapshots
    5945 zfs_ioc_send_space must ensure that fromsnap refers to a snapshot
    Reviewed by: Steven Hartland <killing@multiplay.co.uk>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Gordon Ross <gordon.ross@nexenta.com>
    
    References:
      https://www.illumos.org/issues/5946
      https://www.illumos.org/issues/5945
      https://github.com/illumos/illumos-gate/commit/24218be
    
    Ported-by: Andriy Gapon <avg@FreeBSD.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3552

[33mcommit b6640117f07c50f5fc3093c6b50de988cf332e72[m
Author: Andriy Gapon <avg@freebsd.org>
Date:   Thu Jul 2 16:03:58 2015 +0300

    Illumos 5870 - dmu_recv_end_check() leaks origin_head hold if error happens in drc_force branch
    
    5870 dmu_recv_end_check() leaks origin_head hold if error happens in drc_force branch
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Andrew Stormont <andyjstormont@gmail.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5870
      https://github.com/illumos/illumos-gate/commit/beddaa9
    
    Ported-by: Andriy Gapon <avg@FreeBSD.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3551

[33mcommit fec417097b0289fb7c1c34cc919fefa48786d20c[m
Author: Andriy Gapon <avg@freebsd.org>
Date:   Thu Jul 2 16:04:17 2015 +0300

    Illumos 5909 - ensure that shared snap names don't become too long after promotion
    
    5909 ensure that shared snap names don't become too long after promotion
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george@delphix.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5909
      https://github.com/illumos/illumos-gate/commit/cb5842f
    
    Ported-by: Andriy Gapon <avg@FreeBSD.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3550

[33mcommit cf50a2b08ff66114a72f6d6d12f13439cd5c5b99[m
Author: Andriy Gapon <avg@freebsd.org>
Date:   Thu Jul 2 16:03:31 2015 +0300

    Illumos 5912 - full stream can not be force-received into a dataset if it has a snapshot
    
    5912 full stream can not be force-received into a dataset if it has a snapshot
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Paul Dagnelie <pcd@delphix.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5912
      https://github.com/illumos/illumos-gate/commit/5bae108
    
    Ported-by: Andriy Gapon <avg@FreeBSD.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3549

[33mcommit a7b10a931911d3a98a90965795daad031c6d33a2[m
Author: Alek Pinchuk <alek@nexenta.com>
Date:   Wed Jul 1 17:18:08 2015 +0200

    Illumos 6033 - arc_adjust() should search MFU lists
    
    6033 arc_adjust() should search MFU lists for oldest
    buffer when adjusting MFU size
    Reviewed by: Saso Kiselkov <saso.kiselkov@nexenta.com>
    Reviewed by: Xin Li <delphij@delphij.net>
    Reviewed by: Prakash Surya <me@prakashsurya.com>
    Approved by: Matthew Ahrens <mahrens@delphix.com>
    
    References:
      https://www.illumos.org/issues/6033
      https://github.com/illumos/illumos-gate/commit/31c46cf
    
    Ported-by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3545

[33mcommit 8f3439733f72a0836b764427efdf524b9bf98ac4[m
Author: Colin Ian King <colin.king@canonical.com>
Date:   Wed Jul 1 12:42:35 2015 +0100

    man: fix spelling mistakes in manual
    
    A few minor mistakes than should be fixed:
    
    zpool:
      compatability -> compatibility
    
    zfs:
      accessable -> accessible
      availible  -> available
    
    zfs-events:
      availible -> available
    
    zfs-module-parameters:
      proceding -> proceeding
    
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3544

[33mcommit 804e050457f1755cc37f39ef1f88786ba7e688d5[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Tue Jun 16 23:06:27 2015 +0200

    Illumos 5175 - implement dmu_read_uio_dbuf() to improve cached read performance
    
    5175 implement dmu_read_uio_dbuf() to improve cached read performance
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Alex Reece <alex.reece@delphix.com>
    Reviewed by: George Wilson <george@delphix.com>
    Reviewed by: Richard Elling <richard.elling@gmail.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    
    References:
      https://www.illumos.org/issues/5175
      https://github.com/illumos/illumos-gate/commit/f8554bb
    
    Porting notes:
    
    This patch doesn't include the changes for the COMSTAR (Common
    Multiprotocol SCSI Target) - since it's not available for ZoL.
    
    http://thegreyblog.blogspot.co.at/2010/02/setting-up-solaris-comstar-and.html
    
    Ported by: kernelOfTruth <kerneloftruth@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3392

[33mcommit d6c9ff0a6be1e4b87f71a641a8973070ec46d01b[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Sat Jun 27 14:31:43 2015 +0200

    Add /dev/mapper to the list of possible sources for pool devices.
    
    This is especially needed when using LUKS backed pools.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3536

[33mcommit 84045c2ddfacd451cadfa0ea97617909c0137841[m
Author: Tim Chase <tim@chase2k.com>
Date:   Fri Jun 26 22:15:27 2015 -0500

    Remove l2ad_evict from zfs_l2arc_evict_class
    
    Illumos 5701 (zpool list reports incorrect "alloc" value for cache
    devices) removed l2ad_evict from l2arc_dev_t.  It should also be removed
    from the zfs_l2arc_evict_class event class.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3534

[33mcommit a254ecfc8b5b8fdd02a1bb88a0b2aa43bad183e9[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jun 25 17:00:39 2015 -0700

    Add ziltest.sh
    
    The ziltest.sh script is a test case designed to verify the correct
    functioning of the ZIL.  It's being added to the scripts directory
    so it can be easily added to the automated regression testing.
    
    The general idea is to build up an intent log from a bunch of
    diverse user commands without actually committing them to the file
    system.  Then copy the file system, replay the intent log and
    compare the file system and the copy.
    
    Ported-by: Don Brady <don.brady@intel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3531

[33mcommit 017da6f063861a1dc3eea5a41c3de8b879d579bd[m
Author: Don Brady <don.brady@intel.com>
Date:   Wed Jun 24 12:17:36 2015 -0600

    Fix for recent zdb -h | -i crashes (seg fault)
    
    Allocating SPA_MAXBLOCKSIZE on the stack is a bad idea (even with the
    old 128K size). Use malloc instead when allocating temporary block
    buffer memory.
    
    Signed-off-by: Don Brady <don.brady@intel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3522

[33mcommit 784652c1f034bf5bf25d22b5b4056a6955331734[m
Author: Don Brady <don.brady@intel.com>
Date:   Wed Jun 24 22:05:32 2015 -0600

    zdb -d has false positive warning when feature@large_blocks=disabled
    
    Skip large blocks feature refcount checking if feature is disabled.
    
    Signed-off-by: Don Brady <don.brady@intel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3468

[33mcommit 16421a1dc837eae4cc0b353e7f6616bc6202c013[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Fri Jun 19 16:22:14 2015 +0200

    Additional SYSV init script fixes (3).
    
    * In read_mtab(), fix problems (!?) in the mounts file. It will record
      'rpool 1' as 'rpool\0401' instead of 'rpool\00401' which seems to be the
      correct (at least as far as 'printf' is concerned). Use this using the
      external 'echo' command (and not the one built in to the shell) because
      the internal one would interpret the backslash code (incorrectly), giving
      us a  instead.
    * Remove reregister_mounts() - no longer needed.
    * For Gentoo, the zfs_log_failure_msg() should use eend(), not eerror()
      (which requires an error message, which we don't have).
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3488
    Closes #3509
    Closes #3514

[33mcommit 216f9d04a651a6b692de9933cc37ee238267a617[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Fri Jun 19 16:21:30 2015 +0200

    Revert "Additional SYSV init script fixes."
    
    This reverts commit 036391c980c1e6504352b770eb385806a951b1cb.
    
    Because #3509 came just after this commit was accepted and is related
    to the original problem the commit was supposed to fix, we need to
    solve the problem in another way.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit c52fca13a08f6a5c1f14a44d6f3707a48a27a1d0[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Jun 24 15:49:08 2015 -0700

    Illumos 5368 - ARC should cache more metadata
    
    5368 ARC should cache more metadata
    Reviewed by: Alex Reece <alex.reece@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Richard Elling <richard.elling@richardelling.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5368
      https://github.com/illumos/illumos-gate/commit/3a5286a
    
    Porting Notes:
    
    The vast majority of this patch was already merged in the context
    of the 06358ea changes.  This is just a small hunk which was missed.
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 669dedb33f4bf68ba75089f1e7b279932c9580a7[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Wed Jun 24 15:48:22 2015 -0700

    Illumos 5163 - arc should reap range_seg_cache
    
    5163 arc should reap range_seg_cache
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Richard Elling <richard.elling@gmail.com>
    Reviewed by: Saso Kiselkov <skiselkov.ml@gmail.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5163
      https://github.com/illumos/illumos-gate/commit/83803b5
    
    Porting Notes:
    
    Added umem_cache_reap_now() wrapped to suppress unused variable
    warning for user space build in arc_kmem_reap_now().
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit aa9af22cdf8d16c197974c3a478d2053b3bed498[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jun 3 11:43:30 2015 -0700

    Update all default taskq settings
    
    Over the years the default values for the taskqs used on Linux have
    differed slightly from illumos.  In the vast majority of cases this
    was done to avoid creating an obnoxious number of idle threads which
    would pollute the process listing.
    
    With the addition of support for dynamic taskqs all multi-threaded
    queues should be created as dynamic taskqs.  This allows us to get
    the best of both worlds.
    
    * The illumos default values for the I/O pipeline can be restored.
    These values are known to work well for most workloads.  The only
    exception is the zio write interrupt taskq which is changed to
    ZTI_P(12, 8).  At least under Linux more threads has been shown
    to improve performance, see commit 7e55f4e.
    
    * Reduces the number of idle threads on the system when it's not
    under heavy load.  The maximum number of threads will only be
    created when they are required.
    
    * Remove the vdev_file_taskq and rely on the system_taskq instead
    which is now dynamic and may have up to 64-threads.  Again this
    brings us back inline with upstream.
    
    * Tasks dispatched with taskq_dispatch_ent() are allowed to use
    dynamic taskqs.  The Linux taskq implementation supports this.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Closes #3507

[33mcommit ef56b0780c80ebb0b1e637b8b8c79530a8ab3201[m
Author: Andriy Gapon <avg@freebsd.org>
Date:   Fri Jun 12 21:20:29 2015 +0200

    Account for ashift when gathering buffers to be written to l2arc device
    
    If we don't account for that, then we might end up overwriting disk
    area of buffers that have not been evicted yet, because l2arc_evict
    operates in terms of disk addresses.
    
    The discrepancy between the write size calculation and the actual
    increment to l2ad_hand was introduced in commit 3a17a7a9.
    
    The change that introduced l2ad_hand alignment was almost correct
    as the write size was accumulated as a sum of rounded buffer sizes.
    See commit illumos/illumos-gate@e14bb32.
    
    Also, we now consistently use asize / a_sz for the allocated size and
    psize / p_sz for the physical size.  The latter accounts for a
    possible size reduction because of the compression, whereas the
    former accounts for a possible subsequent size expansion because of
    the alignment requirements.
    
    The code still assumes that either underlying storage subsystems or
    hardware is able to do read-modify-write when an L2ARC buffer size is
    not a multiple of a disk's block size.  This is true for 4KB sector disks
    that provide 512B sector emulation, but may not be true in general.
    In other words, we currently do not have any code to make sure that
    an L2ARC buffer, whether compressed or not, which is used for physical
    I/O has a suitable size.
    
    Note that currently the cache device utilization is calculated based
    on the physical size, not the allocated size.  The same applies to
    l2_asize kstat. That is wrong, but this commit does not fix that.
    The accounting problem was introduced partially in commit 3a17a7a9
    and partially in 3038a2b (accounting became consistent but in favour
    of the wrong size).
    
    Porting Notes:
    
    Reworked to be C90 compatible and the 'write_psize' variable was
    removed because it is now unused.
    
    References:
      https://reviews.csiden.org/r/229/
      https://reviews.freebsd.org/D2764
    
    Ported-by: kernelOfTruth <kerneloftruth@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3400
    Closes #3433
    Closes #3451

[33mcommit d962d5dad9dae20dec096abe73f22a4c813199fd[m
Author: Prakash Surya <prakash.surya@delphix.com>
Date:   Tue Jun 16 01:12:19 2015 +0200

    Illumos 5701 - zpool list reports incorrect "alloc" value for cache devices
    
    5701 zpool list reports incorrect "alloc" value for cache devices
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george@delphix.com>
    Reviewed by: Alek Pinchuk <alek.pinchuk@nexenta.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5701
      https://github.com/illumos/illumos-gate/commit/a52fc31
    
    Porting Notes:
    
    arc_space_return(HDR_L2ONLY_SIZE, ARC_SPACE_L2HDRS);
    correctly placed at arc_hdr_l2hdr_destroy(arc_buf_hdr_t *hdr).
    
    Ported by: kernelOfTruth kerneloftruth@gmail.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit fa720217b9765303aaa882a9ccdf70c185acc53d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jun 24 13:54:06 2015 -0700

    Add IMPLY() and EQUIV() macros
    
    Added for upstream compatibility, they are of the form:
    
    * IMPLY(a, b) - if (a) then (b)
    * EQUIV(a, b) - if (a) then (b) *AND* if (b) then (a)
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 72540ea3148a2bc03860d7d59b2b5fdc9a5cdee7[m
Author: Richard Yao <richard.yao@clusterhq.com>
Date:   Thu Apr 16 09:20:02 2015 -0400

    zfsdev_getminor() should check for invalid file handles
    
    Unit testing at ClusterHQ found that passing an invalid file handle to
    zfs_ioc_hold results in a NULL pointer dereference on a system without
    assertions:
    
    IP: [<ffffffffa0218aa0>] zfsdev_getminor+0x10/0x20 [zfs]
    Call Trace:
    [<ffffffffa021b4b0>] zfs_onexit_fd_hold+0x20/0x40 [zfs]
    [<ffffffffa0214043>] zfs_ioc_hold+0x93/0xd0 [zfs]
    [<ffffffffa0215890>] zfsdev_ioctl+0x200/0x500 [zfs]
    
    An assertion would have caught this had they been enabled, but this is
    something that the kernel module should handle without failing.  We
    resolve this by searching the linked list to ensure that the file
    handle's private_data points to a valid zfsdev_state_t.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Andriy Gapon <avg@FreeBSD.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3506

[33mcommit 99b14de42104021f6b7d88118db010d8246bc0c0[m
Author: Etienne Dechamps <etienne@edechamps.fr>
Date:   Sun May 10 16:40:20 2015 +0100

    Make metaslab_aliquot a module parameter.
    
    This seems generally useful. metaslab_aliquot is the ZFS allocation
    granularity, which is roughly equivalent to what is called the stripe
    size in traditional RAID arrays. It seems relevant to performance
    tuning.
    
    Signed-off-by: Etienne Dechamps <etienne@edechamps.fr>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit e8fe6684a5128427e6ad1e75eb548b9fd0c482aa[m
Author: Etienne Dechamps <etienne@edechamps.fr>
Date:   Sun May 10 16:37:22 2015 +0100

    Document metaslab_aliquot.
    
    Signed-off-by: Etienne Dechamps <etienne@edechamps.fr>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit bb3250d07ec818587333d7c26116314b3dc8a684[m
Author: Etienne Dechamps <etienne@edechamps.fr>
Date:   Sun May 10 15:39:18 2015 +0100

    Allocate disk space fairly in the presence of vdevs of unequal size.
    
    The metaslab allocator device selection algorithm contains a bias
    mechanism whose goal is to achieve roughly equal disk space usage across
    all top-level vdevs.
    
    It seems that the initial rationale for this code was to allow newly
    added (empty) vdevs to "come up to speed" faster in an attempt to make
    the pool quickly converge to a steady state where all vdevs are equally
    utilized.
    
    While the code seems to work reasonably well for this use case, there
    is another scenario in which this algorithm fails miserably: the case
    where top-level vdevs don't have the same sizes (capacities). ZFS
    allows this, and it is a good feature to have, so that users who simply
    want to build a pool with the disks they happen to have lying around can
    do so even if the disks have heteregenous sizes.
    
    Here's a script that simulates a pool with two vdevs, with one 4X larger
    than the other:
    
        dd if=/dev/zero of=/tmp/d1 bs=1 count=1 seek=134217728
        dd if=/dev/zero of=/tmp/d2 bs=1 count=1 seek=536870912
        zpool create testspace /tmp/d1 /tmp/d2
        dd if=/dev/zero of=/testspace/foobar bs=1M count=256
        zpool iostat -v testspace
    
    Before this commit, the script would output the following:
    
                       capacity
        pool        alloc   free
        ----------  -----  -----
        testspace    252M   375M
          /tmp/d1    104M  18.5M
          /tmp/d2    148M   356M
        ----------  -----  -----
    
    This demonstrates that the current code handles this situation very
    poorly: d1 shows 85% usage despite the pool itself being only 40% full.
    d1 is quite saturated at this point, and is slowing down the entire pool
    due to saturation, fragmentation and the like.
    
    In contrast, here's the result with the code in this commit:
    
                       capacity
        pool        alloc   free
        ----------  -----  -----
        testspace    252M   375M
          /tmp/d1   56.7M  66.3M
          /tmp/d2    195M   309M
       ----------  -----  ------
    
    This looks much better. d1 is 46% used, which is close to the overall
    pool utilization (40%). The code still doesn't result in perfectly
    balanced allocation, probably because of the way mg_bias is applied
    which does not guarantee perfect accuracy, but this is still much better
    than before.
    
    Signed-off-by: Etienne Dechamps <etienne@edechamps.fr>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3389

[33mcommit 218b4e0a7608f7ef37ec72042a68c45e539a5d1c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jun 18 09:21:19 2015 -0700

    Add zfs_sb_prune_aliases() function
    
    For kernels which do not implement a per-suberblock shrinker,
    those older than Linux 3.1, the shrink_dcache_parent() function
    was used to attempt to reclaim dentries.  This was found not be
    entirely reliable and could lead to performance issues on older
    kernels running meta-data heavy workloads.
    
    To address this issue a zfs_sb_prune_aliases() function has been
    added to implement this functionality.  It relies on traversing
    the list of znodes for a filesystem and adding them to a private
    list with a reference held.  The private list can then be safely
    walked outside the z_znodes_lock to prune dentires and drop the
    last reference so the inode can be freed.
    
    This provides the same synchronous behavior as the per-filesystem
    shrinker and has the advantage of depending on only long standing
    interfaces.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Closes #3501

[33mcommit 4c6a70091030847ca5d6933916255194483ce91f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jun 18 09:17:42 2015 -0700

    Increase the number of iput taskq threads
    
    The number of threads in the iput taskq has been increased to speed
    up the number of iputs which can be handled.  This has been observed
    to improve the  meta data reclaim regardless of zfs_sb_prune()
    implementation in use.
    
    The taskq has also been renamed z_iput to for consistency with the
    rest of the I/O pipeline taskqs which are all named z_*.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>

[33mcommit 57ae840077e6c061bc57fb4860491f50b604d360[m
Author: Matus Kral <matuskral@me.com>
Date:   Tue May 12 01:26:18 2015 +0200

    Linux 4.1 compat: use read_iter() / write_iter()
    
    Linux 3.15 commit torvalds/linux@293bc98 introduced two new methods.
    The ->read_iter() and ->write_iter() methods were designed to replace
    the ->aio_read() and ->aio_write() interfaces.  Both interfaces were
    preserved for several kernel releases in order to migrate all existing
    consumers to the new interfaces.  But as of Linux 4.1 the legacy
    interface has been retired and the ZFS code must be updated to use
    the new interfaces.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3352

[33mcommit ec1c11d5ee1a90ab4d5f544143bcf5a6c2455800[m
Author: Sören Tempel <soeren+git@soeren-tempel.net>
Date:   Tue Feb 17 22:11:36 2015 +0100

    Update dracut README
    
    Include information about zfs-lib.sh.in and mention that it is possible
    to set the bootfs attribute for an entire pool.
    
    Signed-off-by: Sören Tempel <soeren+git@soeren-tempel.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3109

[33mcommit 01d01ef0babe0af113fef6bc52f99e5dbf5a5b3d[m
Author: Sören Tempel <soeren+git@soeren-tempel.net>
Date:   Mon Feb 16 10:16:46 2015 +0100

    Only source '/lib/dracut-lib.sh' if it wasn't so far
    
    Signed-off-by: Sören Tempel <soeren+git@soeren-tempel.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3109

[33mcommit edbaf2455cd63a2724558a8d8ff824a2f47fcdf9[m
Author: Sören Tempel <soeren+git@soeren-tempel.net>
Date:   Mon Feb 16 09:56:04 2015 +0100

    Force export if it failed the first time
    
    Signed-off-by: Sören Tempel <soeren+git@soeren-tempel.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3109

[33mcommit eda3d4e1de94cd3a9247bb90a64413a89e736847[m
Author: Sören Tempel <soeren+git@soeren-tempel.net>
Date:   Sun Feb 15 20:28:42 2015 +0100

    Refactor dracut module
    
    Provide '/lib/dracut-zfs-lib.sh' with utility functions.
    
    Signed-off-by: Sören Tempel <soeren+git@soeren-tempel.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3109

[33mcommit 036391c980c1e6504352b770eb385806a951b1cb[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Thu Jun 11 23:03:04 2015 +0200

    Additional SYSV init script fixes.
    
    Use the 'mount' command instead of /proc/mounts to get a list of matching
    filesystems.
    
    This because /proc/mounts reports a pool with a space 'rpool 1' as
    'rpool\0401'. The space is encoded as 3-digit octal which is legal.
    However 'printf "%b"', which we use to filter out other illegal
    characters (such as slash, space etc) can't properly interpret this
    because it expects 4-digit octal. We get a  instead of the space
    we expected. The correct value should have been 'rpool\00401' (note
    the additional leading zero).
    
    So use 'mount', which interprets all backslash-escapes correctly,
    instead.
    
    Signed-off-by: Turbo Fredriksson turbo@bayour.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3488

[33mcommit 5d6a46036277e472433416dda06a0299c339ae08[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri May 29 09:27:03 2015 -0700

    Unify mount and share for 'zfs create/clone'
    
    Both the 'zfs create' and 'zfs clone' commands are expected to
    automatically mount and share new filesystems.  Since this is common
    functionality it has been moved in to a shared helper function.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3459

[33mcommit 90947b2357157a376fdd23dadbcfedad82652525[m
Author: Tim Chase <tim@chase2k.com>
Date:   Sun Jun 14 11:19:40 2015 -0500

    3.12 compat, NUMA-aware per-superblock shrinker
    
    Kernels >= 3.12 have a NUMA-aware superblock shrinker which is used in
    ZoL by zfs_sb_prune().  This patch calls the shrinker for each on-line
    NUMA node in order that memory be freed for each one.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3495

[33mcommit 410921241d00d9e6e48d6e544ab5fbf2f642a72d[m
Author: Hajo Möller <dasjoe@gmail.com>
Date:   Sun May 24 20:22:55 2015 +0200

    Add -y option to `zpool iostat`
    
    sysstat's iostat omits the first report when the -y option is used.
    This patch adds that functionality and omits the first report with
    statistics since system boot.
    
    Signed-off-by: Hajo Möller <dasjoe@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3439

[33mcommit 8e70975f905935df2a68fb242570056035a52948[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jun 9 16:39:25 2015 -0700

    Wait interruptibly in prefetch thread
    
    The Linux kernel watchdog will automatically dump a backtrace for
    any process while sleeps for over 120s in an uninterruptible state.
    
    The solution is for the prefetch thread to sleep in an interruptible
    state.  The way the existing code was written this is safe because
    when woken it will always reevaluate its conditional.  As a general
    rule it is preferable to sleep in an interruptible when possible.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3450
    Closes #3402

[33mcommit b64ccd6c52cfb34d7b92715baef5ebd9305de6d1[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jun 11 10:47:19 2015 -0700

    Rename cv_wait_interruptible() to cv_wait_sig()
    
    This is the counterpart to zfsonlinux/spl@2345368 which replaces the
    cv_wait_interruptible() function with cv_wait_sig().  There is no
    functional change to patch merely brings the function names in to
    sync to maximize portability.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3450
    Issue #3402

[33mcommit 06358ea16e2ff256acc6376c71539f7211851404[m
Merge: 44de2f0 121b3ca
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jun 11 10:27:36 2015 -0700

    Merge branch 'lock-contention-on-arcs_mtx-final'
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf
    Closes #3115
    Closes #3481

[33mcommit 121b3cae742a0670d902a51bc61d49dc4a3e4445[m
Author: Tim Chase <tim@chase2k.com>
Date:   Thu Jun 4 08:06:27 2015 -0500

    Increase arc_c_min to allow safe operation of arc_adapt()
    
    ZoL had lowered the minimum ARC size to 4MiB to better accommodate tiny
    systems such as the raspberry pi, however, as of addition of large block
    support, the arc_adapt() function depends on arc_c being >= 32MiB (2 *
    SPA_MAXBLOCKSIZE).
    
    This patch raises the minimum ARC size to 32MiB and adds a VERIFY test
    to arc_adapt() for future-proofing.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit f6046738365571bd647f804958dfdff8a32fbde4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sat May 30 09:57:53 2015 -0500

    Make arc_prune() asynchronous
    
    As described in the comment above arc_adapt_thread() it is critical
    that the arc_adapt_thread() function never sleep while holding a hash
    lock.  This behavior was possible in the Linux implementation because
    the arc_prune() logic was implemented to be synchronous.  Under
    illumos the analogous dnlc_reduce_cache() function is asynchronous.
    
    To address this the arc_do_user_prune() function is has been reworked
    in to two new functions as follows:
    
    * arc_prune_async() is an asynchronous implementation which dispatches
    the prune callback to be run by the system taskq.  This makes it
    suitable to use in the context of the arc_adapt_thread().
    
    * arc_prune() is a synchronous implementation which depends on the
    arc_prune_async() implementation but blocks until the outstanding
    callbacks complete.  This is used in arc_kmem_reap_now() where it
    is safe, and expected, that memory will be freed.
    
    This patch additionally adds the zfs_arc_meta_strategy module option
    while allows the meta reclaim strategy to be configured.  It defaults
    to a balanced strategy which has been proved to work well under Linux
    but the illumos meta-only strategy can be enabled.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit c5528b9ba622421a213e128704de4090fa0db773[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jun 5 11:26:35 2015 -0700

    Use taskq_wait_outstanding() function
    
    Replace taskq_wait() with taskq_wait_oustanding().  This way callers
    will only block until previously submitted tasks have been completed.
    This was the previous behavior of task_wait() prior to the introduction
    of taskq_wait_outstanding() so this isn't really a functionalty change
    for these callers.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 4f34bd9792bad1affe5b93aeef406fd7dc2df0f8[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jun 4 16:25:37 2015 -0700

    Add taskq_wait_outstanding() function
    
    SPL commit behlendorf/spl@9cef1b5 adds the taskq_wait_outstanding()
    interface.  See the commit log for the full justification for this
    addition.  This patch adds the required user space counterpart.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>

[33mcommit ca0bf58d65f77e944b9905571df9a2eae647aeca[m
Author: Prakash Surya <prakash.surya@delphix.com>
Date:   Mon Jan 12 19:52:19 2015 -0800

    Illumos 5497 - lock contention on arcs_mtx
    
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Richard Elling <richard.elling@richardelling.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    Porting notes and other significant code changes:
    
    The illumos 5368 patch (ARC should cache more metadata), which
    was never picked up by ZoL, is mostly reverted by this patch.
    
    Since ZoL relies on the kernel asynchronously calling the shrinker to
    actually reap memory, the shrinker wakes up arc_reclaim_waiters_cv every
    time it runs.
    
    The arc_adapt_thread() function no longer calls arc_do_user_evicts()
    since the newly-added arc_user_evicts_thread() calls it periodically.
    
    Notable conflicting ZoL commits which conflicted with this patch or
    whose effects are either duplicated or un-done by this patch:
    
        302f753 - Integrate ARC more tightly with Linux
        39e055c - Adjust arc_p based on "bytes" in arc_shrink
        f521ce1 - Allow "arc_p" to drop to zero or grow to "arc_c"
        77765b5 - Remove "arc_meta_used" from arc_adjust calculation
        94520ca - Prune metadata from ghost lists in arc_adjust_meta
    
    Trace support for multilist_insert() and multilist_remove() has been
    added and produces the following output:
    
        fio-12498 [077] .... 112936.448324: zfs_multilist__insert: ml { offset 240 numsublists 80 sublistidx 63 }
        fio-12498 [077] .... 112936.448347: zfs_multilist__remove: ml { offset 240 numsublists 80 sublistidx 29 }
    
    The following arcstats have been removed:
    
        recycle_miss - Used by arcstat.py and arc_summary.py, both of which
        have been updated appropriately.
    
        l2_writes_hdr_miss
    
    The following arcstats have been added:
    
        evict_not_enough - Number of times arc_evict_state() was unable to
        evict enough buffers to reach its target amount.
    
        evict_l2_skip - Number of times arc_evict_hdr() skipped eviction
        because it was being written to the l2arc.
    
        l2_writes_lock_retry - Replaces l2_writes_hdr_miss.  Number of times
        l2arc_write_done() failed to acquire hash_lock (and re-tries).
    
        arc_meta_min - Shows the value of the zfs_arc_meta_min module
        parameter (see below).
    
    The "index" column of the "dbuf" kstat has been removed since it doesn't
    have a direct analog in the new multilist scheme.  Additional multilist-
    related stats could be added in the future but would likely require
    extensions to the mulilist API.
    
    The following module parameters have been added:
    
        zfs_arc_evict_batch_limit - Number of ARC headers to free per sub-list
        before moving on to the next sub-list.
    
        zfs_arc_meta_min - Enforce a floor on the amount of metadata in
        the ARC.
    
        zfs_arc_num_sublists_per_state - Number of multilist sub-lists per
        ARC state.
    
        zfs_arc_overflow_shift - Controls amount by which the ARC must exceed
        the target size to be considered "overflowing".
    
    Ported-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov

[33mcommit b9541d6b7d765883f8a5fe7c1bde74df5c256ff6[m
Author: Chris Williamson <Chris.Williamson@delphix.com>
Date:   Mon Dec 29 19:12:23 2014 -0800

    Illumos 5408 - managing ZFS cache devices requires lots of RAM
    
    5408 managing ZFS cache devices requires lots of RAM
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Don Brady <dev.fs.zfs@gmail.com>
    Reviewed by: Josef 'Jeff' Sipek <josef.sipek@nexenta.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    Porting notes:
    
    Due to the restructuring of the ARC-related structures, this
    patch conflicts with at least the following existing ZoL commits:
    
        6e1d7276c94cbd7c2e19f9232f6ba4bafa62dbe0
        Fix inaccurate arcstat_l2_hdr_size calculations
    
            The ARC_SPACE_HDRS constant no longer exists and has been
            somewhat equivalently replaced by HDR_L2ONLY_SIZE.
    
        e0b0ca983d6897bcddf05af2c0e5d01ff66f90db
        Add visibility in to cached dbufs
    
            The new layering of l{1,2}arc_buf_hdr_t within the arc_buf_hdr
            struct requires additional structure member names to be used
            when referencing the inner items.  Also, the presence of L1 or L2
            inner member is indicated by flags using the new HDR_HAS_L{1,2}HDR
            macros.
    
    Ported by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 2a4324141f4a0811ba29dfef123fe5dad2ca1b03[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Sat Dec 6 09:24:32 2014 -0800

    Illumos 5369 - arc flags should be an enum
    
    5369 arc flags should be an enum
    5370 consistent arc_buf_hdr_t naming scheme
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Alex Reece <alex.reece@delphix.com>
    Reviewed by: Sebastien Roy <sebastien.roy@delphix.com>
    Reviewed by: Richard Elling <richard.elling@richardelling.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    Porting notes:
    
    ZoL has moved some ARC definitions into arc_impl.h.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported by: Tim Chase <tim@chase2k.com>

[33mcommit ad4af89561eb16e45df37f3ce242679042718e0e[m
Author: Tim Chase <tim@chase2k.com>
Date:   Sat Jan 24 12:40:59 2015 -0600

    Partially revert "Add ddt, ddt_entry, and l2arc_hdr caches"
    
    This reverts only the l2arc_hdr part of commit
    ecf3d9b8e63e5659269e15db527380c65780f71a in preparation for the illumos
    5497 "lock contention on arcs_mtx" patch which does the same thing
    but uses the newer two-level ARC structure following the Illumos 5408
    "managing ZFS cache devices requires lots of RAM" patch.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 97639d0a528fea141574c65241be686e9f8d5c72[m
Author: Tim Chase <tim@chase2k.com>
Date:   Fri Jan 23 08:08:14 2015 -0600

    Revert "Allow arc_evict_ghost() to only evict meta data"
    
    Illumos 5497 "lock contention on arcs_mtx" reworks eviction and obviates
    the need for this.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit f6b3b1f5d68a98b71ef5759b83eec15cd0e7a89f[m
Author: Tim Chase <tim@chase2k.com>
Date:   Sun Feb 15 22:28:32 2015 -0600

    Revert "fix l2arc compression buffers leak"
    
    This reverts commit 037763e44e0f6d7284e9328db988a89fdc975a4e in
    preparation for the illumos 5497 "lock contention on arcs_mtx" patch
    which includes a fix for this very problem.
    
    ZoL had picked up a subset of the illumos 5497 patch to deal with the
    l2arc compression buffer leak.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 7807028ccd0a36038aa7b996daacd79d4c9c49cb[m
Author: Tim Chase <tim@chase2k.com>
Date:   Sun May 10 18:34:05 2015 -0500

    Revert "arc_evict, arc_evict_ghost: reduce stack usage using kmem_zalloc"
    
    This reverts commit 16fcdea36340c658b4557fd34a74915fd618f7a6 in preparation
    for the illumos 5497 "lock contention on arcs_mtx" patch which eliminates
    "marker" within the ARC code.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 44de2f02d6b1365240f66fd5f3794ccbebd61a60[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jun 11 10:17:59 2015 -0700

    Remove unused variable in vdev_add_child()
    
    Commit c3520e7 restructured vdev_add_child() in such a way that
    the spa variable was unused during non-debug builds.  This is
    consistent with the upstream illumos code but because ZoL, unlike
    illumos, is built with all compiler warnings enabled this causes
    a legitimate warning.  Revert this hunk of the patch to keep the
    build clean.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3432

[33mcommit c3520e7f1f567bd4e6a28eff4867c70850e8a854[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Tue May 19 22:14:01 2015 -0600

    Illumos 5818 - zfs {ref}compressratio is incorrect with 4k sector size
    
    5818 zfs {ref}compressratio is incorrect with 4k sector size
    Reviewed by: Alex Reece <alex@delphix.com>
    Reviewed by: George Wilson <george@delphix.com>
    Reviewed by: Richard Elling <richard.elling@richardelling.com>
    Reviewed by: Steven Hartland <killing@multiplay.co.uk>
    Approved by: Albert Lee <trisk@omniti.com>
    
    References:
      https://www.illumos.org/issues/5818
      https://github.com/illumos/illumos-gate/commit/81cd5c5
    
    Ported-by: Don Brady <don.brady@intel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3432

[33mcommit 9c43027b3f18769f2ace16eaa222ac8b301501f4[m
Author: Arne Jansen <jansen@webgods.de>
Date:   Wed May 6 09:07:55 2015 -0700

    Illumos 5269 - zpool import slow
    
    5269 zpool import slow
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george@delphix.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5269
      https://github.com/illumos/illumos-gate/commit/12380e1e
    
    Ported-by: DHE <git@dehacked.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3396

[33mcommit d050c627b5fdfaf72eac90bc07e03fcb2d8a123f[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Mon Jun 8 15:48:30 2015 +0200

    Improve on the ZFS events documentation
    
    * Add information about the 'zpool events' command in zpool(8).
    * More events and payloads defined in zfs-events(5).
    * I/O Stages and I/O Flags sections added.
    * Remove unused legacy "zio_deadline" payload define.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3467

[33mcommit 5f8e1e850522ee5cd37366427da4b4101a71c8a8[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Thu May 28 16:14:19 2015 -0700

    dmu_objset_userquota_get_ids uses dn_bonus unsafely
    
    The function dmu_objset_userquota_get_ids() checks and uses dn->dn_bonus
    outside of dn_struct_rwlock. If the dnode is being freed then the bonus
    dbuf may be in the process of getting evicted. In this case there is a
    race that may cause dmu_objset_userquota_get_ids() to access the dbuf
    after it has been destroyed. To prevent this, ensure that when we are
    using the bonus dbuf we are either holding a reference on it or have
    taken dn_struct_rwlock.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3443

[33mcommit d617648c7fc6904261f3ae8f2e3726c5c1838508[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Thu May 28 16:14:19 2015 -0700

    dbuf_try_add_ref minor bug fixes
    
    - Don't check db->bb_blkid, but use the blkid argument instead.
      Checking db->db_blkid may be unsafe since we doesn't yet have a
      hold on the dbuf so its validity is unknown.
    
    - Call mutex_exit() on found_db, not db, since it's not certain that
      they point to the same dbuf, and the mutex was taken on found_db.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3443

[33mcommit 4f38c25910b445277acb9513c36de8305f9457c6[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Tue Jun 2 16:02:31 2015 +0200

    SYSV init script fixes.
    
    * Change the order of the function library check/load.
      Redhat based system _can_ have a /lib/lsb/init-functions file (from
      the redhat-lsb-core package), but it's only partially what we can use.
      Instead, look for that file last, giving the script a chance to catch
      the 'real' distribution file.
    * Filter out dashes and dots in dataset name in read_mtab().
    * Get rid of 'awk' entirely. This is usually in /usr, which might not
      be availible.
    * Get rid of the 'find /dev/disk/by-*' (find is on /usr, which might not
      be availible). Instead use echo in a for loop.
    * Rebuild scripts if any of the *.in files changed.
    * Move the sed part that filters out duplicates inside the check fo
      valid variable.
    
    Signed-off-by: Turbo Fredriksson turbo@bayour.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3463
    Closes #3457

[33mcommit 2a34db1bdbcecf5019c4a59f2a44c92fe82010f2[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Thu Apr 23 20:35:45 2015 +0200

    Base init scripts for SYSV systems
    
    * Based on the init scripts included with Debian GNU/Linux, then take code
      from the already existing ones, trying to merge them into one set of
      scripts that will work for 'everyone' for better maintainability.
      * Add configurable variables to control the workings of the init scripts:
        * ZFS_INITRD_PRE_MOUNTROOT_SLEEP
          Set a sleep time before we load the module (used primarily by initrd
          scripts to allow for slower media (such as  USB devices etc) to be
          availible before we load the zfs module).
        * ZFS_INITRD_POST_MODPROBE_SLEEP
          Set a timed sleep in the initrd to after the load of the zfs module.
        * ZFS_INITRD_ADDITIONAL_DATASETS
          To allow for mounting additional datasets in the initrd. Primarily used
          in initrd scripts to allow for when filesystem needed to boot (such as
          /usr, /opt, /var etc) isn't directly under the root dataset.
        * ZFS_POOL_EXCEPTIONS
          Exclude pools from being imported (in the initrd and/or init scripts).
        * ZFS_DKMS_ENABLE_DEBUG, ZFS_DKMS_ENABLE_DEBUG_DMU_TX, ZFS_DKMS_DISABLE_STRIP
          Set to control how dkms should build the dkms packages.
        * ZPOOL_IMPORT_PATH
          Set path(s) where "zpool import" should import pools from.
          This was previously the job of "USE_DISK_BY_ID" (which is still used
          for backwards compatibility) but was renamed to allow for better
          control of import path(s).
          * If old USE_DISK_BY_ID is set, but not new ZPOOL_IMPORT_PATH, then we
            set ZPOOL_IMPORT_PATH to sane defaults just to be on the safe side.
        * ZED_ARGS
          To allow for local options to zed without having to change the init script.
      * The import function, do_import(), imports pools by name instead of '-a'
        for better control of pools to import and from where.
        * If USE_DISK_BY_ID is set (for backwards compatibility), but isn't 'yes'
          then ignore it.
        * If pool(s) isn't found with a simple "zpool import" (seen it happen),
          try looking for them in /dev/disk/by-id (if it exists). Any duplicates
          (pools found with both commands) is filtered out.
          * IF we have found extra pool(s) this way, we must force USE_DISK_BY_ID
            so that the first, simple "zpool import $pool" is able to find it.
        * Fallback on importing the pool using the cache file (if it exists) only
          if 'simple' import (either with ZPOOL_IMPORT_PATH or the 'built in'
          defaults) didn't work.
      * The export function, do_export(), will export all pools imported, EXCEPT
        the root pool (if there is one).
      * ZED script from the Debian GNU/Linux packages added.
        * Refreshed ZED init script from behlendorf@5e7a660 to be portable so it
          may be used on both LSB and Redhat style systems.
        * If there is no pool(s) imported and zed successfully shut down, we will
          unload the zfs modules.
      * The function library file for the ZoL init script is installed as
        /etc/init.d/zfs-functions.
      * The four init scripts, the /etc/{defaults,sysconfig,conf.d}/zfs config file
        as well as the common function library is tagged as '%config(noreplace)' in
        the rpm rules file to make sure they are not replaced automatically if locally
        modifed.
      * Pitfals and workarounds:
        * If we're running from init, remove stale /etc/dfs/sharetab before importing
          pools in the zfs-import init script.
        * On Debian GNU/Linux, there's a 'sendsigs' script that will kill basically
          everything quite early in the shutdown phase and zed is/should be stopped
          much later than that. We don't want zed to be among the ones killed, so add
          the zed pid to list of pids for 'sendsigs' to ignore.
        * CentOS uses echo_success() and echo_failure() to print out status of
          command. These in turn uses "echo -n \0xx[etc]" to move cursor and choose
          colour etc. This doesn't work with the modified IFS variable we need to
          use in zfs-import for some reason, so work around that when we define
          zfs_log_{end,failure}_msg() for RedHat and derivative distributions.
      * All scripts passes ShellCheck (with one false positive in do_mount()).
    
    Signed-off-by: Turbo Fredriksson turbo@bayour.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Reviewed by: Richard Yao <ryao@gentoo.org>
    Reviewed by: Chris Dunlap <cdunlap@llnl.gov>
    Closes #2974
    Closes #2107

[33mcommit 544f7184f8541bbfd7c739f7e01fc9b5b6e57c5e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue May 26 14:06:36 2015 -0700

    Use ExecStartPre to load zfs modules
    
    Commit 87abfcb broke the systemd import service by treating the
    ExecStart line as if it were a shell command that could be executed.
    This isn't the way systemd works and the correct way to handle this
    case is with ExecStartPre.  This patch updates the zfs import service
    files accordingly,
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Steven Noonan <steven@uplinklabs.net>
    Signed-off-by: Chris Siebenmann <cks.git01@cs.toronto.edu>
    Closes #3440

[33mcommit 65037d9b25c2bfa98d0aa5c9e34678127c03b345[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed May 20 14:39:52 2015 -0700

    Add libzfs_error_init() function
    
    All fprintf() error messages are moved out of the libzfs_init()
    library function where they never belonged in the first place.  A
    libzfs_error_init() function is added to provide useful error
    messages for the most common causes of failure.
    
    Additionally, in libzfs_run_process() the 'rc' variable was renamed
    to 'error' for consistency with the rest of the code base.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>

[33mcommit 87abfcba2283bfeb6636caf9aa2a72186d7708c4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed May 20 14:36:37 2015 -0700

    Wait in libzfs_init() for the /dev/zfs device
    
    While module loading itself is synchronous the creation of the /dev/zfs
    device is not.  This is because /dev/zfs is typically created by a udev
    rule after the module is registered and presented to user space through
    sysfs.  This small window between module loading and device creation
    can result in spurious failures of libzfs_init().
    
    This patch closes that race by extending libzfs_init() so it can detect
    that the modules are loaded and only if required wait for the /dev/zfs
    device to be created.  This allows scripts to reliably use the following
    shell construct without the need for additional error handling.
    
    $ /sbin/modprobe zfs && /sbin/zpool import -a
    
    To minimize the potential time waiting in libzfs_init() a strategy
    similar to adaptive mutexes is employed.  The function will busy-wait
    for up to 10ms based on the expectation that the modules were just
    loaded and therefore the /dev/zfs will be created imminently.  If it
    takes longer than this it will fall back to polling for up to 10 seconds.
    
    This behavior can be customized to some degree by setting the following
    new environment variables.  This functionality is provided for backwards
    compatibility with existing scripts which depend on the module auto-load
    behavior.  By default module auto-loading is now disabled.
    
    * ZFS_MODULE_LOADING="YES|yes|ON|on" - Attempt to load modules.
    * ZFS_MODULE_TIMEOUT="<seconds>"     - Seconds to wait for /dev/zfs
    
    The zfs-import-* systemd service files have been updated to call
    '/sbin/modprobe zfs' so they no longer rely on the legacy auto-loading
    behavior.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Closes #2556

[33mcommit c11cd7f9348005232ca62ccbeabbd30e396861ac[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Mon May 18 20:49:24 2015 +0200

    Style check shell scripts
    
    If the command "shellcheck" exists, then find all shell scripts and
    run shellcheck on them.
    * Use 'gcc' format with shellcheck.
    * Exclude zfs-script-config.sh (which isn't really a script).
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3428

[33mcommit 141b6381d38a16a6178edcec8ace28d1f23b884e[m
Author: Hajo Möller <dasjoe@gmail.com>
Date:   Fri May 15 23:14:56 2015 +0200

    Change 3-digit octal escapes to 4-digit ones
    
    Prefixing an octal value with a leading zero is the standard way
    to disambiguate it.  This change only impacts the `zfs diff` output
    and is therefore very limited in scope.
    
    Signed-off-by: Hajo M<C3><B6>ller <dasjoe@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3417

[33mcommit 01fcbec52d2e808e7122d70218ecf1fbc94ed9b3[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Mon May 18 14:30:32 2015 +0000

    The mount helper mount.zfs MUST be in /sbin (not '$sbindir').
    
    Commit 60e9f69 added the --with-mounthelperdir option for Gentoo
    and in the process accidentally modified the default installation
    location.  For security reasons mount(8) expects it to only be
    installed under /sbin.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3426

[33mcommit f467b05a265abcfb8e5a3269f79d08f36a58646a[m
Author: Tim Chase <tim@chase2k.com>
Date:   Sat May 16 10:40:45 2015 -0500

    Initialize dbu_tqent in dmu_buf_init_user()
    
    The dbu_evict_taskq added in 0c66c32d is only invoked via
    taskq_dispatch_ent(). In these cases, ZoL's implementation of taskqs
    requires the entries to be initialized first with taskq_init_ent() in
    order that, among other things, the embedded spinlock is initialized
    properly.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3419

[33mcommit 7fec46b9d8967109ad289d208e8cf36a0c16e40c[m
Author: Alexander Eremin <a.eremin@nexenta.com>
Date:   Wed May 13 15:15:56 2015 -0700

    Illumos 5847 - libzfs_diff should check zfs_prop_get() return
    
    5847 libzfs_diff should check zfs_prop_get() return
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Albert Lee <trisk@omniti.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5847
      https://github.com/illumos/illumos-gate/commit/8430278
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3412

[33mcommit e5fd1dd6820d6ebca470990e433dfa9f60afc5f7[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Thu May 14 17:41:29 2015 -0600

    Illumos 5243 - zdb -b could be much faster
    
    5243 zdb -b could be much faster
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Richard Elling <richard.elling@gmail.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5243
      https://github.com/illumos/illumos-gate/commit/f7950bf
    
    Ported-by: Don Brady <don.brady@intel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3414

[33mcommit b1b85c8772ed28d2c8227e6d32905740817ae2c3[m
Author: Tim Chase <tim@chase2k.com>
Date:   Thu May 14 12:45:56 2015 -0500

    Zdb should be able to open the root dataset
    
    If the pool/dataset command-line argument is specified with a trailing
    slash, for example, "tank/", it is interpreted as the root dataset.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3415

[33mcommit 79065ed5a454d36492a3006fec69f14ddf83a88f[m
Author: Jan Sanislo <oystr@cs.washington.edu>
Date:   Tue May 12 13:30:19 2015 -0700

    Return -ESTALE to force lookup for missing NFS file handles
    
    There seems to be a annoying problem using NFSv4 to access ZFS
    file systems under certain circumstances.  It's easily reproduced:
    
        nfs_client1:  mount server:/export /mnt
        nfs_client1:  cd /mnt
        nfs_client1:  echo foo >junk
        nfs_client1:  cat junk
        foo
    
    Now on a different NFSv4 client:
    
        nfs_client2:  mount server:/export /mnt
        nfs_client2:  cd /mnt
        nfs_client2:  vi junk
        # Make some changes to /mnt/junk and save
        # This change the inode associated with /mnt/junk
    
    Now back to the original client:
    
        nfs_client1:  cat junk
        cat: junk: No such file or directory
    
    Admittedly NFSv4 is not advertised as a cluster file system that
    maintains a completely coherent view of data across multiple nodes.
    But it does have some mechanisms built in that try to deal with
    situations like the above.  Namely, it employs specialized file
    handle lookup routines that return ESTALE when a file handle contains
    a non-existant inode value.  The ESTALE return triggers a return
    full file path lookup from the client to determine if the file has
    actually gone away or if the cached file handle is no longer valid.
    ZFS behavior can be brought into line with other file systems
    (e.g., ext4) by applying the following patch:
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3224

[33mcommit 7290cd3c4ed19fb3f75b8133db2e36afcdd24beb[m
Author: Antonio Russo <antonio.e.russo@gmail.com>
Date:   Wed May 13 07:16:42 2015 -0700

    Relax restriction on zfs_ioc_next_obj() iteration
    
    Per the documentation for dnode_next_offset in dnode.c, the "txg"
    parameter specifies a lower bound on which transaction the dnode can
    be found in. We are interested in all dnodes that are removed between
    the first and last transaction in the snapshot. It doesn't need to be
    created in that snapshot to correspond to a removed file.
    
    In fact, the behavior of zfs diff in the test case exactly matches
    this: the transaction that created the data that was deleted in snapshot
    "2" was produced before, in snapshot "1", definitely predating the first
    transaction in snapshot "2".
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <Tim Chase <tim@onlight.com>
    Closes #2081

[33mcommit fd0fd6467bb8638b1496ad5a63b74f19fbd607df[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed May 13 10:50:35 2015 -0700

    Remove unused 'dsl_pool_t *dp' variable
    
    When ASSERTs are compiled out by using the --disable-debug configure
    option.  Then the local variable 'dsl_pool_t *dp' will be unused and
    generate a compiler warning.  Since this variable is only used once
    in the ASSERT replace it with 'ds->ds_dir->dd_pool'.
    
    This has the additional advantage of potentially saving a few bytes
    on the stack depending on how gcc decides to compile the function.
    
    This issue was not noticed immediately because the automated builders
    use --enable-debug to make the testing as rigorous as possible.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Closes #3410

[33mcommit 5dc8b7365ff1932bfd969bc71cd49db9b3a6dc87[m
Author: Max Grossman <max.grossman@delphix.com>
Date:   Wed Apr 8 11:37:13 2015 -0700

    Illumos 5765 - add support for estimating send stream size with lzc_send_space when source is a bookmark
    
    5765 add support for estimating send stream size with lzc_send_space when source is a bookmark
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Steven Hartland <killing@multiplay.co.uk>
    Reviewed by: Bayard Bell <buffer.g.overflow@gmail.com>
    Approved by: Albert Lee <trisk@nexenta.com>
    
    References:
      https://www.illumos.org/issues/5765
      https://github.com/illumos/illumos-gate/commit/643da460
    
    Porting notes:
    * Unused variable 'recordsize' in dmu_send_estimate() dropped
    
    Ported-by: DHE <git@dehacked.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3397

[33mcommit 19b3b1d2a256ecac1f27278c593983f772322f09[m
Author: Justin T. Gibbs <justing@spectralogic.com>
Date:   Tue May 12 10:23:45 2015 -0700

    Illumos 5393 - spurious failures from dsl_dataset_hold_obj()
    
    5393 spurious failures from dsl_dataset_hold_obj()
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Will Andrews <willa@spectralogic.com>
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Steven Hartland <killing@multiplay.co.uk>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5393
      https://github.com/illumos/illumos-gate/commit/e1f3c20
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3403

[33mcommit 63b33e878af4aa1027e4a7ffa99085cca11e665b[m
Author: Justin T. Gibbs <justing@spectralogic.com>
Date:   Fri Jan 9 19:45:41 2015 -0700

    Illumos 5562 - ZFS sa_handle's violate kmem invariants, debug kernels panic on boot
    
    5562 ZFS sa_handle's violate kmem invariants, debug kernels panic on boot
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Robert Mustacchi <rm@fingolfin.org>
    Reviewed by: George Wilson <george@delphix.com>
    Reviewed by: Rich Lowe <richlowe@richlowe.net>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5562
      https://github.com/illumos/illumos-gate/commit/0fda3cc5
    
    Ported-by: DHE <git@dehacked.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3388

[33mcommit 252e1a54ab59bd579f6b29cfd0acc74323e72f0c[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Sun Apr 26 15:27:36 2015 -0700

    Illumos 5810 - zdb should print details of bpobj
    
    5810 zdb should print details of bpobj
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Alex Reece <alex@delphix.com>
    Reviewed by: George Wilson <george@delphix.com>
    Reviewed by: Will Andrews <will@freebsd.org>
    Reviewed by: Simon Klinkert <simon.klinkert@gmail.com>
    Approved by: Gordon Ross <gwr@nexenta.com>
    
    References:
      https://www.illumos.org/issues/5810
      https://github.com/illumos/illumos-gate/commit/732885fc
    
    Ported-by: DHE <git@dehacked.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3387

[33mcommit 10400bfeac5922f6d9f8ade4e6df71fb79977c66[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Thu May 7 03:38:29 2015 +1000

    Illumos 5351, 5352 - scrub pauses
    
    5351 scrub goes for an extra second each txg
    5352 scrub should pause when there is some dirty data
    
    Author: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Alex Reece <alex.reece@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Richard Elling <richard.elling@richardelling.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5351
      https://github.com/illumos/illumos-gate/commit/6f6a76a
    
    Ported-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3383

[33mcommit 08dc1b2ddd3526bf6c495403b62d2e5a7ddc1b3b[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Thu May 7 03:24:09 2015 +1000

    Illumos 5350 - clean up code in dnode_sync()
    
    Author: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Alex Reece <alex.reece@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Richard Elling <richard.elling@richardelling.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5350
      https://github.com/illumos/illumos-gate/commit/e651831
    
    Ported-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3382

[33mcommit 7224c67fea3c427ab0d5bafb6d7fba32a7a592d9[m
Author: Alex Reece <alex@delphix.com>
Date:   Thu May 7 03:08:25 2015 +1000

    Illumos 5422 - preserve AVL invariants in dn_dbufs
    
    Author: Alex Reece <alex@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Paul Dagnelie <paul.dagnelie@delphix.com>
    Reviewed by: Josef 'Jeff' Sipek <josef.sipek@nexenta.com>
    Reviewed by: Albert Lee <trisk@nexenta.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5422
      https://github.com/illumos/illumos-gate/commit/a846f19
    
    Ported-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3381

[33mcommit e48533383b6ba1737245ac4338c492865a97b0e9[m
Author: Tim Chase <tim@onlight.com>
Date:   Fri May 8 15:49:56 2015 -0500

    Linux 2.6.36 compat, use REQ_FAILFAST_MASK and remove pre-2.6.36 support
    
    Commit f4af6bb783b0b7f2a6075cb1c74c225db8a157b2 which added support
    for REQ_FAILFAST_MASK but the new autoconf test didn't use the same
    preprocessor macro name as the code did.
    
    The effect is that FAILFAST mode has not been enabled for ZoL in any
    post-2.6.35 kernel.
    
    Retire the HAVE_BIO_RW_FAILFAST interface used in pre-2.6.28 kernels.
    
    Raise an error condition if the FAILFAST interface can't be detected.
    
    Signed-off-by: Tim Chase <tim@onlight.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3386

[33mcommit 492b1d2ef0aa14c22a8f075d948950d072970c17[m
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Wed May 6 15:56:03 2015 -0700

    Update ZED copyright boilerplate
    
    This commit updates the copyright boilerplate within the ZED subtree.
    
    The instructions for appending a contributor copyright line have
    been removed.  Manually maintaining copyright notices in this
    manner is error-prone, imprecise at a file-scope granularity, and
    oftentimes inaccurate.  These lines can become a pernicious source of
    merge conflicts.  A commit log is better suited to maintaining this
    information.  Consequently, a line has been added to the boilerplate
    to refer to the git commit log for authoritative copyright attribution.
    
    To account for the scenario where a file may become separated from
    the codebase and commit history (i.e., it is copied somewhere else),
    a line has been added to identify the file's origin.
    
    http://softwarefreedom.org/resources/2012/ManagingCopyrightInformation.html
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3384

[33mcommit 214806c7e9833fb525a78a335b56fff5e863942e[m
Author: David Lamparter <equinox@diac24.net>
Date:   Wed Jul 2 23:47:02 2014 +0200

    Safely handle security / ACL failures
    
    The security and ACL operations should all be performed atomically.
    To accomplish this there would need to significant invasive changes
    made to the common code base.  For the moment it's desirable for
    compatibility reasons to avoid this.  Therefore the code has been
    updated to attempt to unwind the operation in case of failure
    rather than panic.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2445

[33mcommit 76d520675e8ba0f7760fb5eefe2492fabf7a2335[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jan 29 12:45:40 2015 -0800

    ztest should randomly change recordsize
    
    Improve the large block feature test coverage by extending ztest
    to frequently change the recordsize.  This is specificially designed
    to catch corner cases which might otherwise go unnoticed.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #354

[33mcommit f1512ee61e2f22186ac16481a09d86112b2d6788[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Mon Nov 3 12:15:08 2014 -0800

    Illumos 5027 - zfs large block support
    
    5027 zfs large block support
    Reviewed by: Alek Pinchuk <pinchuk.alek@gmail.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Josef 'Jeff' Sipek <josef.sipek@nexenta.com>
    Reviewed by: Richard Elling <richard.elling@richardelling.com>
    Reviewed by: Saso Kiselkov <skiselkov.ml@gmail.com>
    Reviewed by: Brian Behlendorf <behlendorf1@llnl.gov>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5027
      https://github.com/illumos/illumos-gate/commit/b515258
    
    Porting Notes:
    
    * Included in this patch is a tiny ISP2() cleanup in zio_init() from
    Illumos 5255.
    
    * Unlike the upstream Illumos commit this patch does not impose an
    arbitrary 128K block size limit on volumes.  Volumes, like filesystems,
    are limited by the zfs_max_recordsize=1M module option.
    
    * By default the maximum record size is limited to 1M by the module
    option zfs_max_recordsize.  This value may be safely increased up to
    16M which is the largest block size supported by the on-disk format.
    At the moment, 1M blocks clearly offer a significant performance
    improvement but the benefits of going beyond this for the majority
    of workloads are less clear.
    
    * The illumos version of this patch increased DMU_MAX_ACCESS to 32M.
    This was determined not to be large enough when using 16M blocks
    because the zfs_make_xattrdir() function will fail (EFBIG) when
    assigning a TX.  This was immediately observed under Linux because
    all newly created files must have a security xattr created and
    that was failing.  Therefore, we've set DMU_MAX_ACCESS to 64M.
    
    * On 32-bit platforms a hard limit of 1M is set for blocks due
    to the limited virtual address space.  We should be able to relax
    this one the ABD patches are merged.
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #354

[33mcommit 3df293404a102398445fc013b67250073db9004e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon May 11 12:05:05 2015 -0700

    Fix type mismatch on 32-bit systems
    
    The umem_alloc_aligned() function should not assume that a 'void *'
    type is 64-bit.  It will not be on 32-bit platforms.  Rather than
    complicating the ASSERT to handle this it is simply removed.
    
    Additionally, the '%lu' format specifier should not be assumed to
    imply a 64-bit value.  Fix this by using the 'llu' format specifier
    which will always be atleast 64-bit and explicitly casing the
    variable to an u_longlong_t.  This issue is handled the same way
    in many other parts of the code.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit f9cab372917983805e14154df0720d21333326c3[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu May 7 17:12:49 2015 -0700

    Remove metaslab_min_alloc_size module option
    
    The metaslab_min_alloc_size option is no longer used in the  code.
    This functionality was removed by commit f3a7f66 and the module
    options should have been dropped at that time.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 16fcdea36340c658b4557fd34a74915fd618f7a6[m
Author: Chris Dunlop <chris@onthe.net.au>
Date:   Wed May 6 09:59:17 2015 +1000

    arc_evict, arc_evict_ghost: reduce stack usage using kmem_zalloc
    
    With debugging enabled and depending on your kernel config, the size of
    arc_buf_hdr_t can blow out the stack of arc_evict() and arc_evict_ghost()
    to greater than 1024 bytes. Let's avoid this.
    
    Signed-off-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3377

[33mcommit 63e3a8616b200dc36fe9d298a466bb5c25b58132[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Nov 26 09:57:30 2014 -0800

    Illumos 5349 - verify that block pointer is plausible before reading
    
    5349 verify that block pointer is plausible before reading
    Reviewed by: Alex Reece <alex.reece@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Richard Lowe <richlowe@richlowe.net>
    Reviewed by: Xin Li <delphij@FreeBSD.org>
    Reviewed by: Josef 'Jeff' Sipek <josef.sipek@nexenta.com>
    Approved by: Gordon Ross <gwr@nexenta.com>
    
    References:
      https://www.illumos.org/issues/5349
      https://github.com/illumos/illumos-gate/commit/f63ab3d5
    
    Porting notes:
    * Several variable declarations were moved due to C style needs
    
    Ported-by: DHE <git@dehacked.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3373

[33mcommit f0da4d15082be83547e5370e4479d3c04b56451d[m
Author: Chris Dunlop <chris@onthe.net.au>
Date:   Sat May 2 15:47:06 2015 +1000

    Wait for all znodes to be released before tearing down the superblock
    
    By the time we're tearing down our superblock the VFS has started releasing
    all our inodes/znodes. Some of this work may have been handed off to our
    iput taskq so we need to wait for that work to complete. However the iput
    from the taskq can itself result in additional work being added to the
    taskq:
    
    dsl_pool_iput_taskq
     iput
      iput_final
       evict
        destroy_inode
         zpl_inode_destroy
          zfs_inode_destroy
           zfs_iput_async(ZTOI(zp->z_xattr_parent))
            taskq_dispatch(dsl_pool_iput_taskq..., iput, ...)
    
    Let's wait until all our znodes have been released.
    
    Signed-off-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3281

[33mcommit 7a3066ffddcf4f87470e33a1cd414e558b90249c[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Sat Nov 22 19:24:52 2014 -0800

    Illumos 5348 - zio_checksum_error() only fills in info if ECKSUM
    
    5348 zio_checksum_error() only fills in info if ECKSUM
    Reviewed by: Alex Reece <alex.reece@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Steven Hartland <killing@multiplay.co.uk>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5348
      https://github.com/illumos/illumos-gate/commit/373dc1cf
    
    Ported-by: DHE <git@dehacked.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3372

[33mcommit f3c517d814f0155407d50a22b2f9b2b936260b7a[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Sat Apr 11 11:35:03 2015 -0700

    Illumos 5820 - verify failed in zio_done(): BP_EQUAL(bp, io_bp_orig)
    
    5820 verify failed in zio_done(): BP_EQUAL(bp, io_bp_orig)
    Reviewed by: Alex Reece <alex@delphix.com>
    Reviewed by: George Wilson <george@delphix.com>
    Reviewed by: Steven Hartland <killing@multiplay.co.uk>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
      https://www.illumos.org/issues/5820
      https://github.com/illumos/illumos-gate/commit/34e8acef00
    
    Ported-by: DHE <git@dehacked.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3364

[33mcommit 36c6ffb6b6a4a77e7133b0f84a5aeccf0aa25499[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Sun Apr 26 15:24:34 2015 -0700

    Illumos 5808 - spa_check_logs is not necessary on readonly pools
    
    5808 spa_check_logs is not necessary on readonly pools
    Reviewed by: George Wilson <george@delphix.com>
    Reviewed by: Paul Dagnelie <paul.dagnelie@delphix.com>
    Reviewed by: Simon Klinkert <simon.klinkert@gmail.com>
    Reviewed by: Will Andrews <will@freebsd.org>
    Approved by: Gordon Ross <gwr@nexenta.com>
    
    References:
      https://www.illumos.org/issues/5808
      https://github.com/illumos/illumos-gate/commit/23367a2f
    
    Ported-by: DHE <git@dehacked.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3369

[33mcommit 50f9ea01499be508918e33923e004bf5dcf390e3[m
Author: Will Andrews <will@freebsd.org>
Date:   Sun Apr 26 15:30:46 2015 -0700

    Illumos 5814 - bpobj_iterate_impl(): Close a refcount leak iterating on a sublist.
    
    5814 bpobj_iterate_impl(): Close a refcount leak iterating on a sublist.
    Reviewed by: Prakash Surya <prakash.surya@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Paul Dagnelie <paul.dagnelie@delphix.com>
    Reviewed by: Simon Klinkert <simon.klinkert@gmail.com>
    Approved by: Gordon Ross <gwr@nexenta.com>
    
    References:
      https://www.illumos.org/issues/5814
      https://github.com/illumos/illumos-gate/commit/b67dde11
    
    Ported-by: DHE <git@dehacked.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3368

[33mcommit 859735c0954e89dd329729c6959df7cbaca1fdcc[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Fri Mar 20 23:29:14 2015 +0100

    Add the '-a' option to 'zpool export'
    
    Support exporting all imported pools in one go, using 'zpool export -a'.
    
    This is accomplished by moving the export parts from zpool_do_export()
    in to the new function zpool_export_one().  The for_each_pool() function
    is used to enumerate the list of pools to be exported.  Passing an argc
    of 0 implies the function should be called on all pools.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes: #3203

[33mcommit 0c60cc326bdb44f7eea61e62c6183822d0bd9cf0[m
Author: Christopher Siden <chris@delphix.com>
Date:   Tue Nov 4 09:35:37 2014 -0800

    Illumos 4951 - ZFS administrative commands (fix)
    
    4951 ZFS administrative commands should use reserved space, not fail with ENOSPC
    Approved by: Christopher Siden <christopher.siden@delphix.com>
    
    References:
      https://www.illumos.org/issues/4951
      https://github.com/illumos/illumos-gate/commit/c39f2c8
    
    Ported by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 3d45fdd6c0d5b4c8e42b6a2cda00bf6f22c9f2bf[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Mon Nov 3 12:28:43 2014 -0800

    Illumos 4951 - ZFS administrative commands should use reserved space
    
    4951 ZFS administrative commands should use reserved space, not with ENOSPC
    Reviewed by: John Kennedy <john.kennedy@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
      https://www.illumos.org/issues/4373
      https://github.com/illumos/illumos-gate/commit/7d46dc6
    
    Ported by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit cfec5b17b3b04f07381cc705eaf733794d034065[m
Author: Max Grossman <max.grossman@delphix.com>
Date:   Mon Nov 3 11:44:19 2014 -0800

    Illumos 4373 - add block contents print to zstreamdump
    
    4373 add block contents print to zstreamdump
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Josef 'Jeff' Sipek <jeffpc@josefsipek.net>
    Approved by: Dan McDonald <danmcd@nexenta.com>
    
    References:
      https://www.illumos.org/issues/4373
      https://github.com/illumos/illumos-gate/commit/994fb6b
    
    Ported by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit a0c9a17aefb6959a50a5c3572544b955dcf715a9[m
Author: Jerry Jelinek <jerry.jelinek@joyent.com>
Date:   Wed Jan 28 15:21:33 2015 -0800

    Illumos 4901 - zfs filesystem/snapshot limit leaks
    
    4901 zfs filesystem/snapshot limit leaks
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/4901
      https://github.com/illumos/illumos-gate/commit/adf3407
    
    Ported by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 83017311e4a64bc49d43d1f8c93fc0e2263bb41b[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Mon Nov 3 11:12:40 2014 -0800

    Illumos 3654,3656
    
    3654 zdb should print number of ganged blocks
    3656 remove unused function zap_cursor_move_to_key()
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Dan McDonald <danmcd@nexenta.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
      https://www.illumos.org/issues/3654
      https://www.illumos.org/issues/3656
      https://github.com/illumos/illumos-gate/commit/d5ee8a1
    
    Porting Notes:
    
    3655 and 3657 were part of this commit but those hunks were dropped
    since they apply to mdb.
    
    Ported by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 6102d0376ecfbcc1f63819bc1046ee78b7f3d4fc[m
Author: tuxoko <tuxoko@gmail.com>
Date:   Fri May 1 11:11:01 2015 +0800

    Add cond_resched to zfs_zget to prevent infinite loop
    
    It's been reported that threads would loop infinitely inside zfs_zget. The
    speculated cause for this is that if an inode is marked for evict, zfs_zget
    would see that and loop. However, if the looping thread doesn't yield, the
    inode may not have a chance to finish evict, thus causing a infinite loop.
    
    This patch solve this issue by add cond_resched to zfs_zget, making the
    looping thread to yield when needed.
    
    Tested-by: jlavoy <jalavoy@gmail.com>
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3349

[33mcommit c9520ecc0f4693cf6fbc3f678555268dc2b91089[m
Author: Jason Zaman <jason@perfinion.com>
Date:   Thu Apr 30 16:20:38 2015 +0400

    dmu: fix integer overflows
    
    The params to the functions are uint64_t, but the offsets to memcpy
    / bcopy are calculated using 32bit ints. This patch changes them to
    also be uint64_t so there isnt an overflow. PaX's Size Overflow
    caught this when formatting a zvol.
    
    Gentoo bug: #546490
    
    PAX: offset: 1ffffb000 db->db_offset: 1ffffa000 db->db_size: 2000 size: 5000
    PAX: size overflow detected in function dmu_read /var/tmp/portage/sys-fs/zfs-kmod-0.6.3-r1/work/zfs-zfs-0.6.3/module/zfs/../../module/zfs/dmu.c:781 cicus.366_146 max, count: 15
    CPU: 1 PID: 2236 Comm: zvol/10 Tainted: P           O   3.17.7-hardened-r1 #1
    Call Trace:
     [<ffffffffa0382ee8>] ? dsl_dataset_get_holds+0x9d58/0x343ce [zfs]
     [<ffffffff81a59c88>] dump_stack+0x4e/0x7a
     [<ffffffffa0393c2a>] ? dsl_dataset_get_holds+0x1aa9a/0x343ce [zfs]
     [<ffffffff81206696>] report_size_overflow+0x36/0x40
     [<ffffffffa02dba2b>] dmu_read+0x52b/0x920 [zfs]
     [<ffffffffa0373ad1>] zrl_is_locked+0x7d1/0x1ce0 [zfs]
     [<ffffffffa0364cd2>] zil_clean+0x9d2/0xc00 [zfs]
     [<ffffffffa0364f21>] zil_commit+0x21/0x30 [zfs]
     [<ffffffffa0373fe1>] zrl_is_locked+0xce1/0x1ce0 [zfs]
     [<ffffffff81a5e2c7>] ? __schedule+0x547/0xbc0
     [<ffffffffa01582e6>] taskq_cancel_id+0x2a6/0x5b0 [spl]
     [<ffffffff81103eb0>] ? wake_up_state+0x20/0x20
     [<ffffffffa0158150>] ? taskq_cancel_id+0x110/0x5b0 [spl]
     [<ffffffff810f7ff4>] kthread+0xc4/0xe0
     [<ffffffff810f7f30>] ? kthread_create_on_node+0x170/0x170
     [<ffffffff81a62fa4>] ret_from_fork+0x74/0xa0
     [<ffffffff810f7f30>] ? kthread_create_on_node+0x170/0x170
    
    Signed-off-by: Jason Zaman <jason@perfinion.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3333

[33mcommit 98b254188a730553361adfabca9f658421be2b82[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Mon Oct 20 22:07:45 2014 +0000

    Illumos #5244 - zio pipeline callers should explicitly invoke next stage
    
    5244 zio pipeline callers should explicitly invoke next stage
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Alex Reece <alex.reece@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Richard Elling <richard.elling@gmail.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: Steven Hartland <killing@multiplay.co.uk>
    Approved by: Gordon Ross <gwr@nexenta.com>
    
    References:
      https://www.illumos.org/issues/5244
      https://github.com/illumos/illumos-gate/commit/738f37b
    
    Porting Notes:
    
    1. The unported "2932 support crash dumps to raidz, etc. pools"
       caused a merge conflict due to a copyright difference in
       module/zfs/vdev_raidz.c.
    2. The unported "4128 disks in zpools never go away when pulled"
       and additional Linux-specific changes caused merge conflicts in
       module/zfs/vdev_disk.c.
    
    Ported-by: Richard Yao <richard.yao@clusterhq.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2828

[33mcommit 8dd86a10cf836d64cddd9c8693f449686e35788c[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Sun Apr 26 15:29:43 2015 -0700

    Illumos 5812 - assertion failed in zrl_tryenter(): zr_owner==NULL
    
    5812 assertion failed in zrl_tryenter(): zr_owner==NULL
    Reviewed by: George Wilson <george@delphix.com>
    Reviewed by: Alex Reece <alex@delphix.com>
    Reviewed by: Will Andrews <will@freebsd.org>
    Approved by: Gordon Ross <gwr@nexenta.com>
    
    References:
      https://www.illumos.org/issues/5812
      https://github.com/illumos/illumos-gate/commit/8df1730
    
    Ported-by: DHE <git@dehacked.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3357

[33mcommit 6186e2975316e6693d576ab9eec8289c806e38a9[m
Author: Justin T. Gibbs <justing@spectralogic.com>
Date:   Thu Apr 2 23:00:07 2015 +1100

    Illumos 5592 - NULL pointer dereference in dsl_prop_notify_all_cb()
    
    5592 NULL pointer dereference in dsl_prop_notify_all_cb()
    Author: Justin T. Gibbs <justing@spectralogic.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george@delphix.com>
    Reviewed by: Will Andrews <will@freebsd.org>
    Approved by: Robert Mustacchi <rm@joyent.com>
    
    References:
      https://www.illumos.org/issues/5592
      https://github.com/illumos/illumos-gate/commit/9d47dec
    
    Ported-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 6ebebaceb1091142b81430291c610d79b6a3073e[m
Author: Justin T. Gibbs <justing@spectralogic.com>
Date:   Thu Apr 2 22:59:15 2015 +1100

    Illumos 5531 - NULL pointer dereference in dsl_prop_get_ds()
    
    5531 NULL pointer dereference in dsl_prop_get_ds()
    Author: Justin T. Gibbs <justing@spectralogic.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: George Wilson <george@delphix.com>
    Reviewed by: Bayard Bell <buffer.g.overflow@gmail.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    
    References:
      https://www.illumos.org/issues/5531
      https://github.com/illumos/illumos-gate/commit/e57a022
    
    Ported-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 0c66c32d1d8b64a261cceb5f50a9e86777c5d0b2[m
Author: Justin T. Gibbs <justing@spectralogic.com>
Date:   Thu Apr 2 14:44:32 2015 +1100

    Illumos 5056 - ZFS deadlock on db_mtx and dn_holds
    
    5056 ZFS deadlock on db_mtx and dn_holds
    Author: Justin Gibbs <justing@spectralogic.com>
    Reviewed by: Will Andrews <willa@spectralogic.com>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5056
      https://github.com/illumos/illumos-gate/commit/bc9014e
    
    Porting Notes:
    
    sa_handle_get_from_db():
      - the original patch includes an otherwise unmentioned fix for a
        possible usage of an uninitialised variable
    
    dmu_objset_open_impl():
      - Under Illumos list_link_init() is the same as filling a list_node_t
        with NULLs, so they don't notice if they miss doing list_link_init()
        on a zero'd containing structure (e.g. allocated with kmem_zalloc as
        here). Under Linux, not so much: an uninitialised list_node_t goes
        "Boom!" some time later when it's used or destroyed.
    
    dmu_objset_evict_dbufs():
      - reduce stack usage using kmem_alloc()
    
    Ported-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit d683ddbb7272a179da3918cc4f922d92a2195ba2[m
Author: Justin T. Gibbs <justing@spectralogic.com>
Date:   Thu Apr 2 02:14:34 2015 +1100

    Illumos 5314 - Remove "dbuf phys" db->db_data pointer aliases in ZFS
    
    5314 Remove "dbuf phys" db->db_data pointer aliases in ZFS
    Author: Justin T. Gibbs <justing@spectralogic.com>
    Reviewed by: Andriy Gapon <avg@freebsd.org>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Will Andrews <willa@spectralogic.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5314
      https://github.com/illumos/illumos-gate/commit/c137962
    
    Ported-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 945dd93525d6e33f822beb44e3a3076c8bc89f86[m
Author: Justin T. Gibbs <justing@spectralogic.com>
Date:   Thu Apr 2 02:13:28 2015 +1100

    Illumos 5310 - Remove always true tests for non-NULL ds->ds_phys
    
    5310 Remove always true tests for non-NULL ds->ds_phys
    Author: Justin T. Gibbs <justing@spectralogic.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Will Andrews <willa@spectralogic.com>
    Reviewed by: Andriy Gapon <avg@FreeBSD.org>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5310
      https://github.com/illumos/illumos-gate/commit/d808a4f
    
    Ported-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 9925c28cdec943a6ffa81219cb469b727decf111[m
Author: Alex Reece <alex@delphix.com>
Date:   Thu Apr 2 02:10:58 2015 +1100

    Illumos 5095 - panic when adding a duplicate dbuf to dn_dbufs
    
    5095 panic when adding a duplicate dbuf to dn_dbufs
    Author: Alex Reece <alex@delphix.com>
    Reviewed by: Adam Leventhal <adam.leventhal@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Mattew Ahrens <mahrens@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: Josef Sipek <jeffpc@josefsipek.net>
    Approved by: Robert Mustacchi <rm@joyent.com>
    
    References:
      https://www.illumos.org/issues/5095
      https://github.com/illumos/illumos-gate/commit/86bb58a
    
    Ported-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 5aea3644d6aef3fe636053d6924bc0803fbd75b5[m
Author: Justin T. Gibbs <justing@spectralogic.com>
Date:   Thu Apr 2 02:09:20 2015 +1100

    Illumos 5038 - Remove "old-style" flexible array usage in ZFS.
    
    5038 Remove "old-style" flexible array usage in ZFS.
    Author: Justin T. Gibbs <justing@spectralogic.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Josef 'Jeff' Sipek <jeffpc@josefsipek.net>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/5038
      https://github.com/illumos/illumos-gate/commit/7f18da4
    
    Ported-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 8951cb8dfb8dcf410a237656c1f9c9767e4a9e6c[m
Author: Alex Reece <alex@delphix.com>
Date:   Fri Apr 3 14:14:28 2015 +1100

    Illumos 4873 - zvol unmap calls can take a very long time for larger datasets
    
    4873 zvol unmap calls can take a very long time for larger datasets
    Author: Alex Reece <alex@delphix.com>
    Reviewed by: George Wilson <george@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Paul Dagnelie <paul.dagnelie@delphix.com>
    Reviewed by: Basil Crow <basil.crow@delphix.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    
    References:
      https://www.illumos.org/issues/4873
      https://github.com/illumos/illumos-gate/commit/0f6d88a
    
    Porting Notes:
    
    dbuf_free_range():
      - reduce stack usage using kmem_alloc()
      - the sorted AVL tree will handle the spill block case correctly
        without all the special handling in the for() loop
    
    Ported-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 58c4aa00c65e09f254de0b939b2c1aa720c204a1[m
Author: Jorgen Lundman <lundman@lundman.net>
Date:   Thu Apr 2 00:49:14 2015 +1100

    Illumos 4975 - missing mutex_destroy() calls in zfs
    
    4975 missing mutex_destroy() calls in zfs
    Author: Jorgen Lundman <lundman@lundman.net>
    Reviewed by: Matthew Ahrens <matthew.ahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Rich Lowe <richlowe@richlowe.net>
    Reviewed by: Seth Nimbosa <darth.Serious@gmail.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: Don Brady <dev.fs.zfs@gmail.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/4975
      https://github.com/illumos/illumos-gate/commit/d2b3cbb
    
    Ported-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit ca227e54a89e0797ca99063a326f01633267a44a[m
Author: Alex Reece <alex.reece@delphix.com>
Date:   Thu Apr 2 00:10:21 2015 +1100

    Illumos 3897 - zfs filesystem and snapshot limits (fix leak)
    
    3897 zfs filesystem and snapshot limits (fix leak)
    Author: Alex Reece <alex.reece@delphix.com>
    Approved by: Christopher Siden <christopher.siden@delphix.com>
    
    References:
      https://www.illumos.org/issues/3897
      https://github.com/illumos/illumos-gate/commit/fb7001f
    
    Ported-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 788eb90c4ca64beaf85ef542bb22c64fcb50993a[m
Author: Jerry Jelinek <jerry.jelinek@joyent.com>
Date:   Thu Apr 2 00:07:48 2015 +1100

    Illumos 3897 - zfs filesystem and snapshot limits
    
    3897 zfs filesystem and snapshot limits
    Author: Jerry Jelinek <jerry.jelinek@joyent.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Christopher Siden <christopher.siden@delphix.com>
    
    References:
      https://www.illumos.org/issues/3897
      https://github.com/illumos/illumos-gate/commit/a2afb61
    
    Porting Notes:
    
    dsl_dataset_snapshot_check(): reduce stack usage using kmem_alloc().
    
    Ported-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 308a451f7f5ecded4f194a50abab5ca123b6d397[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Sat Sep 6 00:03:09 2014 +0200

    Illumos 5134 - if ZFS_DEBUG or debug= is set, libzpool should enable debug prints
    
    5134 if ZFS_DEBUG or debug= is set, libzpool should enable debug prints
    Reviewed by: Adam Leventhal <adam.leventhal@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Saso Kiselkov <skiselkov.ml@gmail.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/projects/illumos-gate/issues/5134
      https://github.com/illumos/illumos-gate/commit/7fa49ea
    
    Porting notes:
      Added dprintf_setup() to main in zfs_main.c and zpool_main.c.
    
    Ported by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2669

[33mcommit ecfb0b5f42c3662e36d5cd444c0aa2ebc8501589[m
Author: tuxoko <tuxoko@gmail.com>
Date:   Sun Apr 26 16:09:41 2015 +0800

    Fix misuse of input argument in traverse_visitbp
    
    In traverse_visitbp(), the input argument dnp is modified in the middle to
    point to a temporary buffer. Originally this doesn't matter, because no user
    of TRAVERSE_POST dereferences it. However, in fbeddd6 a piece of code is added
    dereferencing dnp after the modification, creating a possible bug.
    
    We fix this by creating a new local variable cdnp for the DMU_OT_DNODE case,
    so we don't modify the input argument. Also we introduce different local
    variables in the DMU_OT_OBJSET case to prevent confusion between the input
    argument.
    
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2060

[33mcommit 52d5a1cc57820adda5499c537c553bc4f2e7976a[m
Merge: 0336f3d ce119da
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Apr 27 12:15:42 2015 -0700

    Merge branch 'zed-pushbullet'
    
    This patch stack begins with cleaning up the existing ZEDLETs,
    refactoring common code blocks into zed-functions.sh, adopting a
    more consistent coding style, updating exit codes, etc. All scripts
    now run cleanly through ShellCheck.
    
    The old "email" ZEDLETs are replaced with new "notify" ZEDLETs. A
    notification can now be sent via email and/or Pushbullet. Additional
    notification methods will likely be added in the future.
    
    Pushbullet notifications are enabled by setting the
    ZED_PUSHBULLET_ACCESS_TOKEN and (optionally) ZED_PUSHBULLET_CHANNEL_TAG
    in zed.rc. The Pushbullet implementation requires awk, curl, and sed
    executables to be installed in the standard PATH.
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3327

[33mcommit ce119da33daa9c51b55fb27ea30a1495a4e73885[m
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Wed Mar 25 13:10:32 2015 -0700

    Combine data-notify.sh with io-notify.sh
    
    The data-notify.sh ZEDLET serves a very similar purpose to
    io-notify.sh, namely, to generate a notification in response to a
    particular error event.  Initially, data-notify.sh was separated from
    io-notify.sh since the "data" zevent does not (as I understand it)
    pertain to a specific vdev device.  This stands in contrast to the
    "checksum" and "io" zevents (both handled by io-notify.sh) that can
    be attributed to a specific vdev.  At the time, it seemed simpler to
    handle these two cases in separate scripts.
    
    This commit adds support for the "data" zevent to io-notify.sh, and
    symlinks io-notify.sh to data-notify.sh.  It also adds the counts
    for vdev_read_errors, vdev_write_errors, and vdev_cksum_errors to
    the notification message.
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>

[33mcommit 090b19158a7f776586369a593b271392cabbf175[m
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Thu Mar 19 17:40:54 2015 -0700

    Add notification to io-spare.sh
    
    The io-spare.sh ZEDLET does not generate a notification when a failing
    device is replaced with a hot spare.  Maybe it should tell someone.
    
    This commit adds a notification message to the io-spare.sh ZEDLET.
    This notification is triggered when a failing device is successfully
    replaced with a hot spare after encountering a checksum or io error.
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>

[33mcommit a0d065fa922d2ce2e07785eb3d35757763c644bf[m
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Thu Feb 26 16:26:48 2015 -0800

    Add support for Pushbullet notifications
    
    This commit adds the zed_notify_pushbullet() function and hooks
    it into zed_notify(), thereby integrating it with the existing
    "notify" ZEDLETs.  This enables ZED to push notifications to your
    desktop computer and/or mobile device(s).  It is configured with the
    ZED_PUSHBULLET_ACCESS_TOKEN and ZED_PUSHBULLET_CHANNEL_TAG variables
    in zed.rc.
    
      https://www.pushbullet.com/
    
    The Makefile install-data-local target has been replaced with
    install-data-hook.  With the "-local" target, there is no particular
    guarantee of execution order.  But with the zed.rc now potentially
    containing sensitive information (i.e., the Pushbullet access token),
    the recommended permissions have changed to 0600.  The "-hook" target
    is always executed after the main rule's work is done; thus, the
    chmod will always take place after the zed.rc file has been installed.
    
      https://www.gnu.org/software/automake/manual/automake.html#Extending
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>

[33mcommit 20967ff1a4c2ff3f706505222dd66b3b15645596[m
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Thu Feb 26 16:26:25 2015 -0800

    Replace "email" ZEDLETs with "notify" ZEDLETs
    
    Several ZEDLETs already exist for sending email in reponse to a
    particular zevent.  While email is ubiquitous, alternative methods may
    be better suited for some configurations.  Instead of duplicating the
    "email" ZEDLETs for every future notification method, it is preferable
    to abstract the notification method into a function.  This has the
    added benefit of reducing the amount of code duplicated between
    ZEDLETs, and allowing related bugs to be fixed in a single location.
    
    This commit replaces the existing "email" ZEDLETs with corresponding
    "notify" ZEDLETs.  In addition, the ZEDLET code for sending an
    email message has been moved into the zed_notify_email() function.
    And this zed_notify_email() has been added to a generic zed_notify()
    function for sending notifications via all available methods that
    have been configured.
    
    This commit also changes a couple of related zed.rc variables.
    ZED_EMAIL_INTERVAL_SECS is changed to ZED_NOTIFY_INTERVAL_SECS,
    and ZED_EMAIL_VERBOSE is changed to ZED_NOTIFY_VERBOSE.  Note that
    ZED_EMAIL remains unchanged as its use is solely for the email
    notification method.
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>

[33mcommit aded9a6814c9f6260437bc186ad08debc5d0b6c8[m
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Tue Feb 17 17:23:54 2015 -0800

    Cleanup ZEDLETs
    
    This commit factors out several common ZEDLET code blocks into
    zed-functions.sh.  This shortens the length of the scripts, thereby
    (hopefully) making them easier to understand and maintain.
    
    In addition, this commit revamps the coding style used by the
    scripts to be more consistent and (again, hopefully) maintainable.
    It now mostly follows the Google Shell Style Guide.  I've tried to
    assimilate the following resources:
    
      Google Shell Style Guide
      https://google-styleguide.googlecode.com/svn/trunk/shell.xml
    
      Dash as /bin/sh
      https://wiki.ubuntu.com/DashAsBinSh
    
      Filenames and Pathnames in Shell: How to do it Correctly
      http://www.dwheeler.com/essays/filenames-in-shell.html
    
      Common shell script mistakes
      http://www.pixelbeat.org/programming/shell_script_mistakes.html
    
    Finally, this commit updates the exit codes used by the ZEDLETs to be
    more consistent with one another.
    
    All scripts run cleanly through ShellCheck <http://www.shellcheck.net/>.
    All scripts have been tested on bash and dash.
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>

[33mcommit 0336f3d001c76625281919bcf9e534d1976f3c36[m
Author: Isaac Huang <he.huang@intel.com>
Date:   Sat Apr 25 22:25:45 2015 -0600

    Remove useless variable spa_active_count
    
    This isn't required for the Linux port because the kernel tracks
    if a module is busy.  The prototype for spa_busy() is also removed
    since its definition was already removed.
    
    Signed-off-by: Isaac Huang <he.huang@intel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3262

[33mcommit c5656c4cfc28ecf9daf0a8df527b1bf0900c1f80[m
Author: Isaac Huang <he.huang@intel.com>
Date:   Sat Apr 25 22:08:29 2015 -0600

    Memory leak in make_root_vdev()
    
    The newroot nvlist should be freed before returning.
    
    Signed-off-by: Isaac Huang <he.huang@intel.com>
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3264

[33mcommit ec8501ee1274205f277a7287c3de8119d361afaf[m
Author: Justin T. Gibbs <justing@spectralogic.com>
Date:   Sat Apr 11 14:51:06 2015 -0400

    5313 Allow I/Os to be aggregated across ZIO priority classes
    
    Reviewed by: Andriy Gapon <avg@FreeBSD.org>
    Reviewed by: Will Andrews <willa@SpectraLogic.com>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    
    References:
      https://www.illumos.org/issues/5313
      https://github.com/illumos/illumos-gate/commit/fe319232
    
    Ported-by: DHE <git@dehacked.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3280

[33mcommit 0bf8501ae1f7c995d54c6061d8da29419ec4fed0[m
Author: Paul B. Henson <henson@acm.org>
Date:   Wed Dec 31 17:44:52 2014 -0800

    5410 Document -S option to zfs inherit
    
    5410 Document -S option to zfs inherit
    5412 Mention -S option when zfs inherit fails on quota
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/5410
      https://github.com/illumos/illumos-gate/commit/5ff8cfa9
    
    Ported-by: DHE <git@dehacked.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3279

[33mcommit 4eb30c68644c0aacbed9e10d94eff071b2cd76f8[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Thu Apr 23 12:32:59 2015 -0700

    Serialize access to spa->spa_feat_stats nvlist
    
    The function spa_add_feature_stats() manipulates the shared nvlist
    spa->spa_feat_stats in an unsafe concurrent manner. Add a mutex to
    protect the list.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3335

[33mcommit 7008109646446a3f9dda36bfbd3a526f4f8810ae[m
Author: cburroughs <chris.burroughs@gmail.com>
Date:   Fri Apr 24 14:03:26 2015 -0400

    align zfs_autoimport_disable manpage with reality
    
    The default was changed in #2820.
    
    Signed-off-by: cburroughs <chris.burroughs@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3341

[33mcommit 07012da668c2fa50ff469137e71262d45e0cd16e[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Thu Apr 2 02:18:05 2015 +0800

    Fix kernel panic due to tsd_exit in ZFS_EXIT(zsb)
    
    The following panic would occur under certain heavy load:
    [ 4692.202686] Kernel panic - not syncing: thread ffff8800c4f5dd60 terminating with rrw lock ffff8800da1b9c40 held
    [ 4692.228053] CPU: 1 PID: 6250 Comm: mmap_deadlock Tainted: P           OE  3.18.10 #7
    
    The culprit is that ZFS_EXIT(zsb) would call tsd_exit() every time, which
    would purge all tsd data for the thread. However, ZFS_ENTER is designed to be
    reentrant, so we cannot allow ZFS_EXIT to blindly purge tsd data.
    
    Instead, we rely on the new behavior of tsd_set. When NULL is passed as the
    new value to tsd_set, it will automatically remove the tsd entry specified the
    the key for the current thread.
    
    rrw_tsd_key and zfs_allow_log_key already calls tsd_set(key, NULL) when
    they're done. The zfs_fsyncer_key relied on ZFS_EXIT(zsb) to call tsd_exit() to
    do clean up. Now we explicitly call tsd_set(key, NULL) on them.
    
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3247

[33mcommit 59199d90832a7e99ff73f8e75e33d74e12ddcf93[m
Author: Tim Chase <tim@chase2k.com>
Date:   Sat Apr 18 23:57:36 2015 -0400

    Support the "version" property on volumes via the zfs_prop_get_int() API
    
    As of this commit, volumes do not possess the version property in
    any existing OpenZFS implementation.  The zpool upgrade code, however,
    uses zfs_prop_get_int() to fetch the version property of all children in
    a pool.  The semantics of the function, however, demand that it only be
    used for known valid properties so it returns a garbage value for volumes.
    
    This patch causes the version of a volume to appear to callers using
    the zfs_prop_get_int() API to be that of the default ZPL version for
    the implementation.  In the future, should volumes gain the property,
    its actual value will be used.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Fixes #3313

[33mcommit a438ff0e85c36c2e31873b3a46d85e5e3593fab9[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Apr 23 10:09:19 2015 -0700

    Extend PF_FSTRANS critical regions
    
    Additional testing has shown that the region covered by PF_FSTRANS
    needs to be extended to cover the  zpl_xattr_security_init() and
    init_acl() functions.  The zpl_mark_dirty() function can also recurse
    and therefore must always be protected.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Closes #3331

[33mcommit 614e598c88446df9a6e2b59ba8ad0919628935b8[m
Author: DHE <git@dehacked.net>
Date:   Sat Apr 18 07:07:53 2015 -0400

    Fix formatting error in zfs(8)
    
    Commit b1a3e93217e6e474e86345010469994c066cf875 accidentally
    introduced an intentation error between the 'zfs receive'
    and 'zfs allow' detailed documentation sections.
    
    Signed-off-by: DHE <git@dehacked.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3312

[33mcommit de6d1976835959275fbdc00d74bb8fb86071f079[m
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Fri Apr 10 12:56:21 2015 -0700

    Fix io-spare.sh to work with disk vdevs
    
    The "zpool status" output shows the full pathname for file-type vdevs,
    but only the basename component for disk-type vdevs.  In commit
    bee6665, the "basename" command was dropped from altering the vdev
    name used when searching the "zpool status" output.  Consequently,
    hot-disk sparing for disk vdevs broke since "zpool status" output
    was now being searched for the full pathname to the disk vdev.
    
    Parsing the "zpool status" output in this manner is rather brittle.
    It would be preferable to search for the vdev based on its guid.
    But until that happens, this commit adds back the "basename" command
    to fix the vdev name breakage.
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3310

[33mcommit 7fad6290eb3aefc9cbb6a64e4cbe5371af53f726[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Apr 14 10:25:50 2015 -0700

    Mark additional functions as PF_FSTRANS
    
    Prevent deadlocks by disabling direct reclaim during all NFS, xattr,
    ctldir, and super function calls.  This is related to 40d06e3.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Issue #3225

[33mcommit b467db454ea6507c4b9adf29c8083f860bfda2c1[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Thu Apr 9 06:18:01 2015 +0200

    Document bookmarks a little better in zfs(8)
    
    Add a basic summary to zfs(8) describing bookmarks.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3268

[33mcommit 9012354bf0be8f0a0d8162c651b8edb149a63224[m
Author: DHE <git@dehacked.net>
Date:   Fri Apr 10 11:14:47 2015 -0400

    Rebuild init scripts on source file updates
    
    The resulting script is not removed by 'make clean' or rebuilt
    when the source files are changed. Users with long standing git
    trees may find their init script is out of date.
    
    Signed-off-by: DHE <git@dehacked.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3273

[33mcommit 5074bfe8ade40ddc64cba5526eb1333a73621e92[m
Author: Tim Chase <tim@chase2k.com>
Date:   Tue Apr 14 01:06:40 2015 -0400

    Allocate zfs_znode_cache on the Linux slab
    
    The Linux slab, in general, performs better than the SPl slab in cases
    where a lot of objects are allocated and fragmentation is likely present.
    
    This patch fixes pathologically bad behavior in cases where the ARC is
    filled with mostly metadata and a user program needs to allocate and
    dirty enough memory which would require an insignificant amount of the
    ARC to be reclaimed.
    
    If zfs_znode_cache is on the SPL slab, the system may spin for a very
    long time trying to reclaim sufficient memory.  If it is on the Linux
    slab, the behavior has been observed to be much more predictible; the
    memory is reclaimed more efficiently.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3283

[33mcommit d07a16360c1ee219b8820f80d035e56a18c58b84[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Apr 8 20:16:45 2015 -0700

    Tag zfs-0.6.4
    
    META file and release log updated.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit f42d7f4111f754b0f77e5982278fc79d31408d8c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Apr 3 09:12:02 2015 -0700

    Use vmem_alloc() in spa_config_write()
    
    The packed nvlist allocated in spa_config_write() may exceed the
    warning threshold for large configurations.  Use the vmem interfaces
    for this short lived allocation.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3251

[33mcommit 40d06e3c78c23b199dfd9284809e710fab549391[m
Author: Tim Chase <tim@chase2k.com>
Date:   Mon Mar 30 22:43:29 2015 -0500

    Mark all ZPL and ioctl functions as PF_FSTRANS
    
    Prevent deadlocks by disabling direct reclaim during all ZPL and ioctl
    calls as well as the l2arc and adapt ARC threads.
    
    This obviates the need for MUTEX_FSTRANS so its previous uses and
    definition have been eliminated.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3225

[33mcommit 74aa2ba259e61512bd029c9e8f857f0611a80bbd[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 31 11:51:37 2015 -0700

    Update zfs_pd_bytes_max default in zfs(8)
    
    Commit b738bc5 should have updated the default value of zfs_pd_bytes_max
    in the zfs(8) man page.  The correct default value is 50*1024*1024.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 0f7d2a4b3d2d7fc0975a7ef53bd3c4700d47c51b[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Fri Mar 27 17:11:50 2015 +1100

    Illumus 5693 - ztest fails in dbuf_verify: buf[i] == 0, due to dedup and bp_override
    
    5693 ztest fails in dbuf_verify: buf[i] == 0, due to dedup and bp_override
    Reviewed by: George Wilson <george@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Bayard Bell <buffer.g.overflow@gmail.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5693
      https://github.com/illumos/illumos-gate/commit/7f7ace3
    
    Ported-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3231

[33mcommit b738bc5a0f8ccd0281ed06831c34fbe31d2b2138[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Fri Mar 27 15:31:52 2015 +1100

    Illumos 5694 - traverse_prefetcher does not prefetch enough
    
    5694 traverse_prefetcher does not prefetch enough
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Alex Reece <alex@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Josef 'Jeff' Sipek <josef.sipek@nexenta.com>
    Reviewed by: Bayard Bell <buffer.g.overflow@gmail.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
      https://www.illumos.org/issues/5694
      https://github.com/illumos/illumos-gate/commit/34d7ce05
    
    Ported-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3230

[33mcommit ee2f17aa2af3d8620470c3bbbe6f9dac9449d546[m
Author: Chris Dunlop <chris@onthe.net.au>
Date:   Fri Mar 27 15:04:12 2015 +1100

    Align code with Illumos
    
    Align code in traverse_visitbp() with that in Illumos in preparation for
    applying Illumos-5694.
    
    No functional change: use a temporary variable pd to replace multiple
    occurrences of td->td_pfd.  This increases our stack use slightly more
    then normal because the function is called recursively.
    
    Signed-off-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3230

[33mcommit a4069eef2e403a3b2a307b23b7500e2adc6ecae5[m
Author: Prakash Surya <prakash.surya@delphix.com>
Date:   Fri Mar 27 13:03:22 2015 +1100

    Illumos 5695 - dmu_sync'ed holes do not retain birth time
    
    5695 dmu_sync'ed holes do not retain birth time
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Bayard Bell <buffer.g.overflow@gmail.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5695
      https://github.com/illumos/illumos-gate/commit/70163ac
    
    Ported-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3229

[33mcommit 9540be9b23fd6f8b5bf7d81853c251010d9b7205[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Thu Mar 26 12:10:26 2015 -0700

    zpool import should honor overlay property
    
    Make the 'zpool import' command honor the overlay property to allow
    filesystems to be mounted on a non-empty directory. As it stands now
    this property is only checked by the 'zfs mount' command.  Move the
    check into 'zfs_mount()` in libzpool so the property is honored for all
    callers.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3227

[33mcommit 95a6990d9a77a56eb97b76f2880f95f0f42f4fe0[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Tue Mar 24 17:22:21 2015 -0700

    Add NULL guard in zfs_zrlock_class event class
    
    The owner field could be NULL in some cases, so add a guard.  Shorten
    __entry field names to fit assignment statements in 80 columns.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Fixes #3220

[33mcommit ee2ca1db28a0910770b8bd504cf021199f583047[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Mar 25 16:59:17 2015 -0700

    Add RHEL style kmod packages
    
    Provide a Redhat specific zfs-kmod.spec file which uses the old style
    kmods (not kmods2) packaging.  By using the provided kmodtool script
    packages can be built which support weak modules.  This allows for the
    kernel to be updated without having to rebuild the ZFS kernel modules.
    
    Packages for RHEL/Centos/SL/TOSS which use this spec file can by built
    as follows:
    
    $ ./configure --with-spec=redhat
    $ make rpms
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit d820d2e9cf27678dd07b86f8fdd4635162371a37[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Mar 27 14:30:23 2015 -0700

    Remove rpm/fedora directory
    
    Originally it was thought that custom spec files might be required
    for Fedora.  Happily that has turns out not to be the case.  Since
    this directory just contains symlinks to the generic spec files it
    can be removed.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 7d90f569b3f05def7cbd0a52ce8ac3040364d702[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Mar 20 15:10:24 2015 -0700

    Check all vdev labels in 'zpool import'
    
    When using 'zpool import' to scan for available pools prefer vdev names
    which reference vdevs with more valid labels.  There should be two labels
    at the start of the device and two labels at the end of the device.  If
    labels are missing then the device has been damaged or is in some other
    way incomplete.  Preferring names with fully intact labels helps weed out
    bad paths and improves the likelihood of being able to import the pool.
    
    This behavior only applies when scanning /dev/ for valid pools.  If a
    cache file exists the pools described by the cache file will be used.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Closes #3145
    Closes #2844
    Closes #3107

[33mcommit 58806b4cdc32e6f4e4a214cfba3b62a24efb34b7[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Tue Mar 24 17:00:08 2015 -0700

    dbuf_free_range() overzealously frees dbufs
    
    When called to free a spill block from a dnode, dbuf_free_range() has a
    bug that results in all dbufs for the dnode getting freed.  A variety of
    problems may result from this bug, but a common one was a zap lookup
    tripping an ASSERT because the zap buffers had been zeroed out.  This
    could happen on a dataset with xattr=sa set when extended attributes are
    written and removed on a directory concurrently with I/O to files in
    that directory.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Fixes #3195
    Fixes #3204
    Fixes #3222

[33mcommit ded576e28fe70a40e78a90e4668de8130d599380[m
Author: Tim Chase <tim@chase2k.com>
Date:   Mon Mar 23 12:10:19 2015 -0500

    Set the maximum ZVOL transfer size correctly
    
    ZoL had been setting max_sectors to UINT_MAX, but until Linux 3.19, it
    the kernel artifically capped it at 1024 (BLK_DEF_MAX_SECTORS).
    This cap was removed in torvalds/linux@34b48db.  This patch changes
    it to DMU_MAX_ACCESS (in sectors) and also changes the ASSERT in
    dmu_tx_hold_write() to allow the maximum transfer size.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3212

[33mcommit 7b4536c710adea88f160c6f9ae140ae5279c8183[m
Author: Gordan Bobic <gordan@steel.shatteredsilicon.net>
Date:   Mon Mar 23 16:17:56 2015 +0000

    Execute udevadm settle before trying to import pools
    
    Execute udevadm settle before trying to import pools.  Otherwise the
    disk device nodes may not be ready before import time.  This is
    analogous to the behavior of the init scripts and systemd units.
    
    Signed-off-by: Gordan Bobic <gordan@steel.shatteredsilicon.net>
    Signed-off-by: Pavel Snajdr <snajpa@snajpa.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3213

[33mcommit e89bd69775d5379f6835dade1e14005aa17f4903[m
Author: Isaac Huang <he.huang@intel.com>
Date:   Sat Mar 21 23:32:54 2015 -0600

    zio_injection_enabled should not be a module option
    
    The zio_inject.c keeps zio_injection_enabled as a counter of
    fault handlers, so it should not be exported to user space as
    a module option.
    
    Several EXPORT_SYMBOLs are moved from zio.c to zio_inject.c,
    where the symbols are defined.
    
    Signed-off-by: Isaac Huang <he.huang@intel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3199

[33mcommit d07b7c7f210e3f92775ad93a7306812edf524bfc[m
Author: Chris Dunlop <chris@onthe.net.au>
Date:   Mon Mar 16 12:21:21 2015 +1100

    Reduce size of zfs_sb_t: allocate z_hold_mtx separately
    
    zfs_sb_t has grown to the point where using kmem_zalloc() for allocations
    is triggering the 32k warning threshold.
    
    We can't safely convert this entire allocation to use vmem_alloc() instead
    of kmem_alloc() because the backing_dev_info structure is embedded here.
    It depends on the bit_waitqueue() function which won't behave properly
    when given a virtual address.
    
    Instead, use vmem_alloc() to allocate the z_hold_mtx array separately.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chris Dunlop <chris@onthe.net.au>
    Closes #3178

[33mcommit bc88866657979c5658441e201e19df365c67ddfe[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 17 15:08:22 2015 -0700

    Fix arc_adjust_meta() behavior
    
    The goal of this function is to evict enough meta data buffers from the
    ARC in order to enforce the arc_meta_limit.  Achieving this is slightly
    more complicated than it appears because it is common for data buffers
    to have holds on meta data buffers.  In addition, dnode meta data buffers
    will be held by the dnodes in the block preventing them from being freed.
    This means we can't simply traverse the ARC and expect to always find
    enough unheld meta data buffer to release.
    
    Therefore, this function has been updated to make alternating passes
    over the ARC releasing data buffers and then newly unheld meta data
    buffers.  This ensures forward progress is maintained and arc_meta_used
    will decrease.  Normally this is sufficient, but if required the ARC
    will call the registered prune callbacks causing dentry and inodes to
    be dropped from the VFS cache.  This will make dnode meta data buffers
    available for reclaim.  The number of total restarts in limited by
    zfs_arc_meta_adjust_restarts to prevent spinning in the rare case
    where all meta data is pinned.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Pavel Snajdr <snajpa@snajpa.net>
    Issue #3160

[33mcommit 2cbb06b561f500732de2214eb590149d0c4f3cf5[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 17 15:07:47 2015 -0700

    Restructure per-filesystem reclaim
    
    Originally when the ARC prune callback was introduced the idea was
    to register a single callback for the ZPL.  The ARC could invoke this
    call back if it needed the ZPL to drop dentries, inodes, or other
    cache objects which might be pinning buffers in the ARC.  The ZPL
    would iterate over all ZFS super blocks and perform the reclaim.
    
    For the most part this design has worked well but due to limitations
    in 2.6.35 and earlier kernels there were some problems.  This patch
    is designed to address those issues.
    
    1) iterate_supers_type() is not provided by all kernels which makes
    it impossible to safely iterate over all zpl_fs_type filesystems in
    a single callback.  The most straight forward and portable way to
    resolve this is to register a callback per-filesystem during mount.
    The arc_*_prune_callback() functions have always supported multiple
    callbacks so this is functionally a very small change.
    
    2) Commit 050d22b removed the non-portable shrink_dcache_memory()
    and shrink_icache_memory() functions and didn't replace them with
    equivalent functionality.  This meant that for Linux 3.1 and older
    kernels the ARC had no mechanism to drop dentries and inodes from
    the caches if needed.  This patch adds that missing functionality
    by calling shrink_dcache_parent() to release dentries which may be
    pinning inodes.  This will result in all unused cache entries being
    dropped which is a bit heavy handed but it's the only interface
    available for old kernels.
    
    3) A zpl_drop_inode() callback is registered for kernels older than
    2.6.35 which do not support the .evict_inode callback.  This ensures
    that when the last reference on an inode is dropped it is immediately
    removed from the cache.  If this isn't done than inode can end up on
    the global unused LRU with no mechanism available to ZFS to drop them.
    Since the ARC buffers are not dropped the hottest inodes can still
    be recreated without performing disk IO.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Pavel Snajdr <snajpa@snajpa.net>
    Issue #3160

[33mcommit 596a8935a140d3238b46d9858de7a727524c2b51[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 17 15:04:27 2015 -0700

    Fix arc_meta_max accounting
    
    The arc_meta_max value should be increased when space it consumed not when
    it is returned.  This ensure's that arc_meta_max is always up to date.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Pavel Snajdr <snajpa@snajpa.net>
    Issue #3160

[33mcommit 5c3f61eb498e8124858b1369096bf64b86a938e7[m
Author: Richard Yao <richard.yao@clusterhq.com>
Date:   Wed Mar 11 14:24:46 2015 -0400

    Increase Linux pipe buffer size on 'zfs receive'
    
    I noticed when reviewing documentation that it is possible for user
    space to use fctnl(fd, F_SETPIPE_SZ, (unsigned long) size) to change
    the kernel pipe buffer size on Linux to increase the pipe size up to
    the value specified in /proc/sys/fs/pipe-max-size. There are users using
    mbuffer to improve zfs recv performance when piping over the network, so
    it seems advantageous to integrate such functionality directly into the
    zfs recv tool. This avoids the addition of two buffers and two copies
    (one for the buffer mbuffer adds and another for the additional pipe),
    so it should be more efficient.
    
    This could have been made configurable and/or this could have changed
    the value back to the original after we were done with the file
    descriptor, but I do not see a strong case for doing either, so I
    went with a simple implementation.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1161

[33mcommit b1a3e93217e6e474e86345010469994c066cf875[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Tue Mar 17 23:29:27 2015 +0100

    Move duplicate information about the 'zfs send -e' option.
    
    The extra one was under the 'zfs receive' command (which isn't relevant).
    Instead, it should have been further up (still in the 'zfs send' option).
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3194

[33mcommit 40749aa7a6318e5588d4be1c40165e8d0ef6c44f[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Mon Mar 16 23:54:57 2015 -0700

    Use MUTEX_FSTRANS on l2arc_buflist_mtx
    
    Use MUTEX_FSTRANS on l2arc_buflist_mtx to prevent the following deadlock
    scenario:
    1. arc_release() -> hash_lock -> l2arc_buflist_mtx
    2. l2arc_write_buffers() -> l2arc_buflist_mtx -> (direct reclaim) ->
       arc_buf_remove_ref() -> hash_lock
    
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Signed-off-by: Tim Chase <tim@chase2k.com>
    Issue #3160

[33mcommit a1d3450e947c4399cfa9cd3b0840de55d63b3023[m
Author: Hajo Möller <dasjoe@gmail.com>
Date:   Thu Mar 12 19:09:19 2015 +0100

    Fix warning about AM_INIT_AUTOMAKE arguments
    
    As of automake 1.14.2, currently shipped with Ubuntu 14.04, automake
    warns about AM_INIT_AUTOMAKE having more than one argument:
    
    configure.ac:41: warning: AM_INIT_AUTOMAKE: two- and three-arguments forms are deprecated.  For more info, see:
    configure.ac:41: http://www.gnu.org/software/automake/manual/automake.html#Modernize-AM_005fINIT_005fAUTOMAKE-invocation
    
    This commit fixes the warnings by following above link's advice, so
    AM_INIT gets called with the package's name and version. As both are
    defined in the META file we're parsing it with `grep`, `cut` and `tr`.
    
    NOTE: autoconf < 1.14 not supporting m4_esyscmd_s so m4_esyscmd was
    used and modified `tr` to truncate newlines, too.
    
    Signed-off-by: Hajo M<C3><B6>ller <dasjoe@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3174

[33mcommit e023409500ea1ccf8e6f69b03aa44dc96bf05920[m
Author: Bill McGonigle <bill-github.com-public1@bfccomputing.com>
Date:   Fri Mar 13 09:44:42 2015 -0700

    Linux 4.0 compat: bdi_setup_and_register() __must_check
    
    Explicitly disable the unused by variable warnings by setting
    __attribute__((unused)) for bdi_setup_and_register().  This is
    required because the function is defined with the __must_check
    attribute.
    
    Signed-off-by: Bill McGonigle <bill-github.com-public1@bfccomputing.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3141

[33mcommit 4c7b7eedcde7fababf457ca04445e6d9d1617e29[m
Author: Justin T. Gibbs <justing@spectralogic.com>
Date:   Thu Mar 12 11:10:35 2015 +1100

    Illumos 5630 - stale bonus buffer in recycled dnode_t leads to data corruption
    
    5630 stale bonus buffer in recycled dnode_t leads to data corruption
    Author: Justin T. Gibbs <justing@spectralogic.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george@delphix.com>
    Reviewed by: Will Andrews <will@freebsd.org>
    Approved by: Robert Mustacchi <rm@joyent.com>
    
    References:
      https://www.illumos.org/issues/5630
      https://github.com/illumos/illumos-gate/commit/cd485b4
    
    Ported-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Issue #3172

[33mcommit 73ad4a9f3cfc2e830de45c2a8be2823d01ab07a6[m
Author: Josef 'Jeff' Sipek <josef.sipek@nexenta.com>
Date:   Thu Mar 12 11:03:31 2015 +1100

    Illumos 5047 - don't use atomic_*_nv if you discard the return value
    
    5047 don't use atomic_*_nv if you discard the return value
    Author: Josef 'Jeff' Sipek <josef.sipek@nexenta.com>
    Reviewed by: Garrett D'Amore <garrett@damore.org>
    Reviewed by: Jason King <jason.brian.king@gmail.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    
    References:
      https://www.illumos.org/issues/5047
      https://github.com/illumos/illumos-gate/commit/640c167
    
    Porting Notes:
    
    Several hunks from the original patch where not specific to ZFS
    and thus were dropped.
    
    Ported-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Issue #3172

[33mcommit 7f3e4662832269b687ff20dafc6a33f8e1d28912[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Mar 9 13:57:22 2015 -0700

    Mark zfs_inactive() with PF_FSTRANS
    
    Allowing direct reclaim to re-enter the VFS in the zfs_inactive()
    call path has historically been problematic for ZoL.  Therefore,
    in order to avoid an entire class of current and future issues
    caused by this PF_FSTRANS is set for all zfs_inactive() callers.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3163

[33mcommit 6184b3a6a0c76c68bc980cd8a34acc22ee5fa1e4[m
Author: Hajo Möller <dasjoe@users.noreply.github.com>
Date:   Mon Mar 9 21:51:31 2015 +0100

    Actually source /etc/sysconfig/zfs instead of /etc/default/zfs
    
    Signed-off-by: Hajo M<C3><B6>ller <dasjoe@users.noreply.github.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3162

[33mcommit 417104bdd3c7ce07ec58674dd078f9891c3bc780[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Thu Feb 26 12:24:11 2015 -0800

    Use cached feature info in spa_add_feature_stats()
    
    Avoid issuing I/O to the pool when retrieving feature flags information.
    Trying to read the ZAPs from disk means that zpool clear would hang if
    the pool is suspended and recovery would require a reboot. To keep the
    feature stats resident in memory, we hang a cached nvlist off of the
    spa.  It is built up from disk the first time spa_add_feature_stats() is
    called, and refreshed thereafter using the cached feature reference
    counts. spa_add_feature_stats() gets called at pool import time so we
    can be sure the cached nvlist will be available if the pool is later
    suspended.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3082

[33mcommit 0e86d309ccc53e7d6093f8cf2bb09858f63267ac[m
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Thu Mar 5 13:11:05 2015 -0800

    Add ZED to zfs.redhat.in script
    
    This commit updates the zfs.redhat.in script to start/stop ZED.
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3153

[33mcommit a7b9d0c3a0a8df42d557eb7ffa4e959c25debe69[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Mar 4 11:09:17 2015 -0800

    Replace zfs.redhat.in with zfs.lsb.in init script
    
    This commit replaces the zfs.redhat.in init script with a slightly
    modified version of the existing zfs.lsb.in init script.  This was
    done to minimize the functional differences between platforms.
    The lsb version of the script was choosen because it's heavily
    tested and provides the most functionality.
    
    Changes made for RHEL systems:
    * Configuration: /etc/default/zfs -> /etc/sysconfig/zfs
    * LSB functions: /lib/lsb/init-functions -> /etc/rc.d/init.d/functions
    * Logging: log_begin_msg/log_end_msg -> action
    
    Features in LSB which are now in RHEL:
    * USE_DISK_BY_ID=0      - Use the by-id names
    * VERBOSE_MOUNT=0       - Verbose mounts by default
    * DO_OVERLAY_MOUNTS=0   - Overlay mounts by default
    * MOUNT_EXTRA_OPTIONS=0 - Generic extra options
    
    Existing RHEL features which were removed:
    * Automatically mounting FSs on ZVOLs listed in /etc/fstab
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3153

[33mcommit 02bd676df1c260262d2e4c5618a42783fba52006[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Mon Mar 2 22:28:57 2015 +0100

    Install arc_summary.py
    
    Add the arc_summary Makefile to the build system so the script is
    properly included in the distribution tarball and installed.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3147

[33mcommit 989fd514b1053d5443b4e6155af9c8d863f5f0f2[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 27 12:53:35 2015 -0800

    Change ASSERT(!"...") to  cmn_err(CE_PANIC, ...)
    
    There are a handful of ASSERT(!"...")'s throughout the code base for
    cases which should be impossible.  This patch converts them to use
    cmn_err(CE_PANIC, ...) to ensure they are always enabled and so that
    additional debugging is logged if they were to occur.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1445

[33mcommit 8c45def24a5c640a3b44ce38cc3482b9c89a3b1d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 27 16:09:52 2015 -0800

    Linux 4.0 compat: bdi_setup_and_register()
    
    The 'capabilities' argument which was passed to bdi_setup_and_register()
    has been removed.  File systems should no longer pass BDI_CAP_MAP_COPY.
    For our purposes this means there are now three different interfaces
    which must be handled.  A zpl_bdi_setup_and_register() wrapper function
    has been introduced to provide a single interface to the ZPL code.
    
    * 2.6.32 - 2.6.33, bdi_setup_and_register() is not exported.
    * 2.6.34 - 3.19, bdi_setup_and_register() takes 3 arguments.
    * 4.0 - x.y, bdi_setup_and_register() takes 2 arguments.
    
    I've also taken this opportunity to remove HAVE_BDI because kernels
    older then 2.6.32 are no longer supported.  All kernels newer than
    this will have one of the above interfaces.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Closes #3128

[33mcommit 4ec15b8dcf8038aeb15c7877c50d0fa500b468c6[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Feb 26 15:29:33 2015 -0800

    Use MUTEX_FSTRANS mutex type
    
    There are regions in the ZFS code where it is desirable to be able
    to be set PF_FSTRANS while a specific mutex is held.  The ZFS code
    could be updated to set/clear this flag in all the correct places,
    but this is undesirable for a few reasons.
    
    1) It would require changes to a significant amount of the ZFS
       code.  This would complicate applying patches from upstream.
    
    2) It would be easy to accidentally miss a critical region in
       the initial patch or to have an future change introduce a
       new one.
    
    Both of these concerns can be addressed by using a new mutex type
    which is responsible for managing PF_FSTRANS, support for which was
    added to the SPL in commit zfsonlinux/spl@9099312 - Merge branch
    'kmem-rework'.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Closes #3050
    Closes #3055
    Closes #3062
    Closes #3132
    Closes #3142
    Closes #2983

[33mcommit d14cfd83dae0b1a261667acd416dba17a98d15fa[m
Author: Isaac Huang <he.huang@intel.com>
Date:   Thu Feb 26 22:46:45 2015 -0700

    Fix deadlock between zpool export and zfs list
    
    Pool reference count is NOT checked in spa_export_common()
    if the pool has been imported readonly=on, i.e. spa->spa_sync_on
    is FALSE. Then zpool export and zfs list may deadlock:
    
    1. Pool A is imported readonly.
    2. zpool export A and zfs list are run concurrently.
    3. zfs command gets reference on the spa, which holds a dbuf on
       on the MOS meta dnode.
    4. zpool command grabs spa_namespace_lock, and tries to evict dbufs
       of the MOS meta dnode. The dbuf held by zfs command can't be
       evicted as its reference count is not 0.
    5. zpool command blocks in dnode_special_close() waiting for the
       MOS meta dnode reference count to drop to 0, with
       spa_namespace_lock held.
    6. zfs command tries to get the spa_namespace_lock with a reference
       on the spa held, which holds a dbuf on the MOS meta dnode.
    7. Now zpool command and zfs command deadlock each other.
    
    Also any further zfs/zpool command will block on spa_namespace_lock
    forever.
    
    The fix is to always check pool reference count in spa_export_common(),
    no matter whether the pool was imported readonly or not.
    
    Signed-off-by: Isaac Huang <he.huang@intel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2034

[33mcommit 87a63dd702370c00322e8d1d84102075c775324b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 27 14:35:56 2015 -0800

    Prevent "zpool destroy|export" when suspended
    
    Cleanly destroying or exporting a pool requires that the pool
    not be suspended.  Therefore, set the POOL_CHECK_SUSPENDED flag
    for these ioctls so the utilities will output a descriptive
    error message rather than block.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2878

[33mcommit fdc5d98253c60e45be7efe62ed428d4c2344e394[m
Author: Tim Chase <tim@chase2k.com>
Date:   Tue Feb 24 12:53:31 2015 -0600

    Avoid dladdr() in ztest
    
    Under Linux, at least, dladdr() doesn't reliably work for functions which
    aren't in a DSO.  Add the function name to ztest_info[].
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3130

[33mcommit 8bdcfb53966313e9ff747e3028390c207cfdbe9a[m
Author: Christer Ekholm <che@chrekh.se>
Date:   Thu Feb 19 22:44:53 2015 +0100

    Fix possible future overflow in zfs_nicenum
    
    The function zfs_nicenum that converts number to human-readable output
    uses a index to a string of letters. This patch limits the index to
    the length of the string.
    
    Signed-off-by: Christer Ekholm <che@chrekh.se>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3122

[33mcommit b4f3666a16a61aa2ac7dca0b199e7ce51edbcd60[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Feb 18 15:39:05 2015 -0800

    Retire spl_module_init()/spl_module_fini()
    
    In the original implementation of the SPL wrappers were provided
    for module initialization and cleanup.  This was done to abstract
    away any compatibility code which might be needed for the SPL.
    
    As it turned out the only significant compatibility issue was that
    the default pwd during module load differed under Illumos and Linux.
    Since this is such as minor thing and the wrappers complicate the
    code they are being retired.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2985

[33mcommit 1efdc45ea805e61de2c54736cd1b2a4a5f48a913[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 20 10:28:25 2015 -0800

    Fix O_APPEND open(2) flag
    
    As described in flags section of open(2):
    
      O_APPEND:
        The  file  is  opened in append mode.  Before each write(2), the
        file offset is positioned at the end of the  file,  as  if  with
        lseek(2).   O_APPEND may lead to corrupted files on NFS filesys-
        tems if more than one process appends data to a  file  at  once.
        This is because NFS does not support appending to a file, so the
        client kernel has to simulate it, which can't be done without  a
        race condition.
    
    This issue was originally overlooked because normally the generic
    VFS code handles this for a filesystem.  However, because ZFS explictly
    registers a zpl_write() function it's responsible for the seek.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3124

[33mcommit 1d966336f5095c7e0345360c3862577642670d2d[m
Author: Steffen Müthing <steffen.muething@iwr.uni-heidelberg.de>
Date:   Mon Feb 16 04:13:26 2015 +0100

    Fix error in dracut script if not using ZFS root
    
    If we are not booting from ZFS, parse-zfs.sh fails because of
    an unset variable.
    
    Signed-off-by: Steffen M<C3><BC>thing <steffen.muething@iwr.uni-heidelberg.de>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3110

[33mcommit 1543b20a87979782d67f7ccfc845e8a918efc3b3[m
Author: Steffen Müthing <steffen.muething@iwr.uni-heidelberg.de>
Date:   Mon Feb 16 04:08:04 2015 +0100

    Add required files to initramfs
    
    The dracut module installs the udev rules and the vdev_id utility for creating
    the /dev/disk/by-vdev/ names, but omits some additional utilities and the
    config file required by vdev_id.
    
    Signed-off-by: Steffen M<C3><BC>thing <steffen.muething@iwr.uni-heidelberg.de>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3110

[33mcommit 1611bb7b4fb06cfe43730222e40ef6a109138f12[m
Author: Dan Swartzendruber <dswartz@druber.com>
Date:   Thu Oct 9 16:45:46 2014 -0400

    Set zfs_autoimport_disable default value to 1
    
    When loading the ZFS kernel modules they should not populate the
    spa namespace using the cache file.  This behavior isn't consistent
    with other Linux kernel modules and we need to move away from it.
    Removing this makes the whole startup process predictable with four
    basic steps which are driven by the init system.
    
    1) modprobe
    2) zpool import
    3) zfs mount
    4) zfs share
    
    This change also helps lay the groundwork for eventually removing
    the kobj_* compatibility code on the kernel side.  It may need to
    be preserved in userspace because libzfs_init() depends on it.
    This is why the conditional must be wrapped with an #ifdef _KERNEL.
    
    Signed-off-by: Dan Swartzendruber <dswartz@druber.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2820

[33mcommit 7d2868d5fc88a4c30769b44f56a3a88a4277a9ab[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Feb 12 15:05:21 2015 -0800

    Skip bad DVAs during free by setting zfs_recover=1
    
    When a bad DVA is encountered in metaslab_free_dva() the system
    should treat it as fatal.  This indicates that somehow a damaged
    DVA was written to disk and that should be impossible.
    
    However, we have seen a handful of reports over the years of pools
    somehow being damaged in this way.  Since this damage can render
    otherwise intact pools unimportable, and the consequence of skipping
    the bad DVA is only leaked free space, it makes sense to provide
    a mechanism to ignore the bad DVA.  Setting the zfs_recover=1 module
    option will cause the DVA to be ignored which may allow the pool to
    be imported.
    
    Since zfs_recover=0 by default any pool attempting to free a bad DVA
    will treat it as a fatal error preserving the current behavior.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3099
    Issue #3090
    Issue #2720

[33mcommit cbedd7b03443f5cf7db142908251251c765ce3a5[m
Author: Sören Tempel <soeren+git@soeren-tempel.net>
Date:   Tue Feb 10 21:12:27 2015 +0100

    Write directly to $initdir
    
    Simplify install() by removing the need for a temp file.
    
    Signed-off-by: Soeren Tempel <soeren+git@soeren-tempel.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3093

[33mcommit cfbaa3c830e34b1c8920a48fd5e7196287f674eb[m
Author: Sören Tempel <soeren+git@soeren-tempel.net>
Date:   Tue Feb 10 20:12:13 2015 +0100

    Use test(1) in a proper way
    
    Use the correct operators to check the expected data type.
    
    Signed-off-by: Soeren Tempel <soeren+git@soeren-tempel.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #3093

[33mcommit e02b533e746403743297020591e4b80d614a3aae[m
Author: Tim Chase <tim@chase2k.com>
Date:   Tue Oct 22 16:51:17 2013 -0500

    Enhancements to zpool dry run mode.
    
    In dry run mode, zpool should display more of the proposed pool
    configuration for "zpool add".  This commit adds support for displaying
    cache devices.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1106

[33mcommit 340dfbe193193be6a3d301d8111de232cd537ddd[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Oct 30 11:11:00 2014 -0700

    Change VERIFY to ASSERT in mutex_destroy()
    
    There have been multiple reports of 'zdb' tripping the VERIFY in
    mutex_destroy() because pthread_mutex_destroy() returns EBUSY.
    
    Exactly how this can happen still needs to be explained, but this
    doesn't strictly need to be fatal for non-debug builds.  Therefore,
    this patch converts the VERIFY to an ASSERT until the root cause
    is determined and resolved.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2027

[33mcommit 5f15fa22167ff665d0db0159551eb90759683984[m
Author: Andrey Vesnovaty <andrey.vesnovaty@gmail.com>
Date:   Tue Oct 8 10:28:40 2013 +0200

    Fix readdir for .zfs/snapshot directory
    
    dmu_snapshot_list_next stores the index of the next snapshot entry to the offp
    argument, which zpl_snapdir_iterate then uses for the dir_emit. This
    result in an off-by-one error. Therefore a temporary variable should be
    used.
    
    This was a regression introduced in commit zfsonlinux/zfs@0f37d0c.
    
    Signed-off-by: Andrey Vesnovaty <andrey.vesnovaty@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2930

[33mcommit 3941503c0a26467fc4da63d4ee190c96edd8d0fd[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jan 30 11:25:19 2015 -0800

    Retire zio_cons()/zio_dest()
    
    The zio_cons() constructor and zio_dest() destructor don't exist
    in the upstream Illumos code.  They were introduced as a workaround
    to avoid issue #2523.  Since this issue has now been resolved this
    code is being reverted to bring ZoL back in sync with Illumos.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Issue #3063

[33mcommit 6442f3cfe3454b458456823fff49a14bf0badf65[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 6 13:37:02 2015 -0800

    Retire zio_bulk_flags
    
    Long ago the zio_bulk_flags module parameter was introduced to
    facilitate debugging and profiling the zio_buf_caches.  Today
    this code works well and there's no compelling reason to keep
    this functionality.  In fact it's preferable to revert this so
    the code is more consistent with other ZFS implementations.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Issue #3063

[33mcommit 534759fad30ca55608bcd42a0af5a87c8c4feb36[m
Author: Jörg Thalheim <joerg@higgsboson.tk>
Date:   Sat Feb 7 13:41:01 2015 +0100

    Linux 3.19 compat: file_inode was added
    
    struct access f->f_dentry->d_inode was replaced by accessor function
    file_inode(f)
    
    Signed-off-by: Joerg Thalheim <joerg@higgsboson.tk>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3084

[33mcommit 77aef6f60ea29f6d3769addc778db6328ac85755[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Feb 5 12:43:37 2015 -0800

    Use vmem_alloc() for nvlists
    
    Several of the nvlist functions may perform allocations larger than
    the 32k warning threshold.  Convert them to use vmem_alloc() so the
    best allocator is used.
    
    Commit efcd79a retired KM_NODEBUG which was used to suppress large
    allocation warnings.  Concurrently the large allocation warning threshold
    was increased from 8k to 32k.  The goal was to identify the remaining
    locations, such as this one, where the allocation can be larger than
    32k.  This patch is expected fine tuning resulting for the kmem-rework
    changes, see commit 6e9710f.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3057
    Closes #3079
    Closes #3081

[33mcommit afe373260ebf96ca5482b9ccbcef5915c47d18f7[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Feb 9 16:53:42 2015 -0800

    Revert "Don't read space maps during import for readonly pools"
    
    This reverts commit 7fc8c33ede10f7104ca0e91d690d3ebb5236887b which
    accidentally introduced a ztest failure.
    
    ztest: '/usr/sbin/zdb -bcc -d -U /var/tmp/zpool.cache ztest' exit code 2
    child exited with code 3
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit e890dd85a7522730ad46daf68150aafd3952d0c1[m
Author: Tim Chase <tim@chase2k.com>
Date:   Sun Nov 16 22:27:58 2014 -0600

    Produce a full snapshot list for zfs send -p
    
    In order to accelerate zfs receive operations in the face of many
    property-containing snapshots, commit 0574855 changed the header nvlist
    ("fss") of a send stream to exclude snapshots which aren't part of the
    stream.  This, however, would cause zfs receive -F to erroneously remove
    snapshots; it would remove any snapshot which wasn't listed in the header
    nvlist.
    
    This patch restores the full list of snapshots in fss[<id>[snaps]] but
    still suppresses the properties of non-sent snapshots and also removes a
    consistency check in which an error is raised if a listed snapshot does
    not have any properties in fss[<id>[snapprops]].
    
    The 0574855 commit also introduced a bug in which zfs send -p of a
    complete stream (zfs send -p pool/fs@snap) would exclude the snapshot
    properties in fss[<id>[snapprops]].  This patch detects the last snapshot
    in a series when no "from" snapshot has been specified and includes its
    properties.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2907

[33mcommit 7fc8c33ede10f7104ca0e91d690d3ebb5236887b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Nov 18 17:29:04 2014 -0500

    Don't read space maps during import for readonly pools
    
    Normally when importing a pool the space maps for all top level
    vdevs are read from disk.  The space maps will be required latter
    when an allocation is performed and free blocks need to be located.
    
    However, if the pool is imported readonly then we are guaranteed
    that no allocations can occur.  In this case the space maps need
    not be loaded..   A similar argument can be made for the DTLs
    (dirty time logs).
    
    Because a pool import will fail if the space maps cannot be read.
    The ability to safely ignore them makes it more likely that a
    damaged pool can be imported readonly to recover its contents.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2831

[33mcommit bf5efb5c66ac30442bded92c3299db36fe21d92f[m
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sat Feb 7 11:34:22 2015 +0100

    Fix Dracut scripts to allow for blanks in pool and dataset names
    
    The ability to use blanks is documented in zpool(8) and implemented
    in module/zcommon/zfs_namecheck.c:valid_char().
    
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3083

[33mcommit 293d141ae4f6b2345249020b656cfc0ce007b9fa[m
Author: Lukas Wunner <lukas@wunner.de>
Date:   Wed Feb 4 10:45:19 2015 +0100

    Fix loop in Dracut shutdown script
    
    The shell executes each command of a pipeline in a subshell,
    thus $ret always had the same value after the while loop that
    it had before the loop (http://mywiki.wooledge.org/BashFAQ/024),
    signaling success even if some of the zpools could not be exported.
    
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3083

[33mcommit 33b4de513ee81c2a87e1b954a9544a5eec1f8f94[m
Author: Justin T. Gibbs <justing@spectralogic.com>
Date:   Sat Nov 22 19:14:24 2014 -0800

    Illumos 5311 - traverse_dnode may report success when it should not
    
    5311 traverse_dnode may report success when it should not
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Andriy Gapon <avg@FreeBSD.org>
    Reviewed by: Will Andrews <willa@spectralogic.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://github.com/illumos/illumos-gate/commit/2a89c2c
      https://www.illumos.org/issues/5311
    
    Ported by: DHE <git@dehacked.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2970

[33mcommit a62d1b02e372e63862cee276185f2763f641ff10[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Wed Feb 4 13:57:50 2015 -0800

    Fix SA header size accounting
    
    The functions sa_find_sizes() and sa_build_layout() fail to account
    for the additional 2 bytes of SA header space when calculating whether
    a variable size attribute might spill over. They may consequently
    determine that an attribute will fit in the bonus buffer along with a
    spill block pointer, when in reality the attribute would be partially
    overwritten by the spill block pointer if spill over occurs. This also
    causes an inconsistency between the SA header size and the number of
    variable size attributes in the layout, tripping an assertion when
    debugging is on. The following reproducer demonstrates the problem.
    
      ln -s $(perl -e 'print "z" x 20') file
      setfattr -h -n trusted.foo -v $(perl -e 'print "z" x 200') file
    
    Even though sa_find_sizes() computes the index of the attribute where
    spill-over will occur, sa_build_layouts() discards the result and
    recomputes it itself. As it turns out, both functions get it wrong.
    Since this computation is awkward and, as history has shown, easy to
    screw up, let's just do it in one place. This patch fixes the bug in
    sa_find_sizes() and updates sa_build_layout() to use the result
    computed there.
    
    Also improve the comments in sa_find_sizes().
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Closes #3070

[33mcommit e2c4acde55931ae58d5bf5fd394567a96e942a5c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Feb 5 17:00:05 2015 -0800

    Skip evicting dbufs when walking the dbuf hash
    
    When a dbuf is in the DB_EVICTING state it may no longer be on the
    dn_dbufs list.  In which case it's unsafe to call DB_DNODE_ENTER.
    Therefore, any dbuf which is found in this safe must be skipped.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2553
    Closes #2495

[33mcommit aa506dcb3d2ec4a26d0e20854fa0bf370738a422[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Fri Feb 6 15:22:10 2015 +0800

    Fix build error when make deb
    
    After 53698a4, the following error occurs when make deb.
    
      CCLD     zed
    ../../lib/libzfs/.libs/libzfs.so: undefined reference to `get_system_hostid'
    
    Add libzpool.la to zed/Makefile.am to fix this
    
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3080

[33mcommit 53698a453d1cc318f99477fef596c476b4b0cb47[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Fri Jan 23 16:05:04 2015 +0800

    Read spl_hostid module parameter before gethostid()
    
    If spl_hostid is set via module parameter, it's likely different from
    gethostid(). Therefore, the userspace tool should read it first before
    falling back to gethostid().
    
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3034

[33mcommit aa2ef419e46b3ad7c2ad8848b7a308a5a949aba7[m
Author: Tim Chase <tim@chase2k.com>
Date:   Mon Feb 2 23:55:20 2015 -0600

    Spurious ENOMEM returns when reading dbufs kstat
    
    Commit 7b2d78a046aa4695d434478a439a9438521d73af fixed some improper uses
    of snprintf(), however, in __dbuf_stats_hash_table_data() the return
    value of snprintf is propagated to the caller.  This caused spurious
    ENOMEM errors when reading the dbufs kstat.
    
    This commit causes the actual number of characters written to be returned.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3072

[33mcommit 037763e44e0f6d7284e9328db988a89fdc975a4e[m
Author: avg <avg@FreeBSD.org>
Date:   Thu Nov 6 11:08:02 2014 +0000

    fix l2arc compression buffers leak
    
    Commit log from FreeBSD:
    
        We have observed that arc_release() can be called concurrently with a
        l2arc in-flight write.  Also, we have observed that arc_hdr_destroy()
        can be called from arc_write_done() for a zio with ZIO_FLAG_IO_REWRITE
        flag in similar circumstances.
    
        Previously the l2arc headers would be freed while leaking their
        associated compression buffers.  Now the buffers are placed on
        l2arc_free_on_write list for delayed freeing.  This is similar to
        what was already done to arc buffers that were supposed to be freed
        concurrently with in-flight writes of those buffers.
    
        In addition to fixing the discovered leaks this change also adds
        some protective code to assert that a compression buffer associated
        with a l2arc header is never leaked.
    
        A new kstat l2_cdata_free_on_write is added.  It keeps a count
        of delayed compression buffer frees which previously would have
        been leaks.
    
        Tested by:  Vitalij Satanivskij <satan@ukr.net> et al
        Requested by:       many
        MFC after:  2 weeks
        Sponsored by:       HybridCluster / ClusterHQ
    
    References:
        https://illumos.org/issues/5222
        https://github.com/freebsd/freebsd/commit/b98f85d
        http://thread.gmane.org/gmane.os.freebsd.current/155757/focus=155781
        http://lists.open-zfs.org/pipermail/developer/2014-January/000455.html
        http://lists.open-zfs.org/pipermail/developer/2014-February/000523.html
    
    Ported-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3029

[33mcommit 19ea3d25df99995d2e62592cd6bc74f883f0e8e0[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jan 29 15:09:51 2015 -0800

    Use zio buffers in zil_itx_create()
    
    The zil_itx_create() function uses the vmem_alloc() allocator for
    its buffers because when logging a write that buffer may be as large
    as 64K.  This is non-optimal because we may need to allocate many of
    of these buffers and this interface has the potential to be slow.
    Instead, use zio_data_buf_alloc() which is specifically designed to
    be able to efficiently allocate a wide range of buffer sizes.
    
    In addition, do some cleanup and use the zil_itx_destroy() function
    to always free an itx structure.  This way we're always sure the
    right allocation functions are used.  Notice that in the current
    code kmem_free() and vmem_free() were both used.  This happened to
    work because these wrappers map to the same internal SPL function.
    
    This was identified as a potential problem when a low-end memory
    constrained system began logging the following warnings.  There
    was no deadlock here just repeated allocation failures resulting
    in increased latency.
    
    Possible memory allocation deadlock: size=65792 lflags=0x42d0
    Pid: 20118, comm: kvm Tainted: P           O 3.2.0-0.bpo.4-amd64
    Call Trace:
     [<ffffffffa040b834>] ? spl_kmem_alloc_impl+0x115/0x127 [spl]
     [<ffffffffa040b84f>] ? spl_kmem_alloc_debug+0x9/0x36 [spl]
     [<ffffffffa05d8a0b>] ? zil_itx_create+0x2d/0x59 [zfs]
     [<ffffffffa05c71e6>] ? zfs_log_write+0x13a/0x2f0 [zfs]
     [<ffffffffa05d41bc>] ? zfs_write+0x85b/0x9bb [zfs]
     [<ffffffffa05e37ec>] ? zpl_aio_write+0xca/0x110 [zfs]
     [<ffffffff811088e5>] ? do_sync_readv_writev+0xa3/0xde
     [<ffffffff81108f41>] ? do_readv_writev+0xaf/0x125
     [<ffffffff81109055>] ? sys_pwritev+0x55/0x9a
     [<ffffffff813721d2>] ? system_call_fastpath+0x16/0x1b
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Closes #3059

[33mcommit 2c41df5bf8327f3bc6ee25cf2aa570bb159cb348[m
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Wed Jan 14 16:31:21 2015 -0800

    Cleanup _zed_event_add_nvpair()
    
    When _zed_event_add_var() was updated to be the common routine
    for adding zedlet environment variables, an additional snprintf()
    was added to the processing of each nvpair.  This commit changes
    _zed_event_add_nvpair() to directly call _zed_event_add_var()
    for nvpair non-array types, thereby removing a superfluous call to
    snprintf().  For consistency, the helper functions for converting
    nvpair array types are similarly adjusted to add variables.
    
    The _zed_event_value_is_hex() and _zed_event_add_var() functions have
    been moved up in the file since forward declarations are not used,
    but no changes have been made to these functions.
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3042

[33mcommit 854f30a91fc6a2accc6bf49cb7fcc52b498fda2a[m
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Sun Oct 19 12:05:07 2014 -0700

    Protect against adding duplicate strings in ZED
    
    The zed_strings container stores strings in an AVL, but does not
    check for duplicate strings being added.  Within the AVL, strings
    are indexed by the string value itself.  avl_add() requires the node
    being added must not already exist in the tree, and will assert()
    if this is not the case.
    
    This should not cause problems in practice.  ZED uses this container
    in two places.  In zed_conf.c, it is used to store the names of
    enabled zedlets as zed scans the zedlet directory listing; duplicate
    entries cannot occur here since duplicate names cannot occur within
    a directory.  In zed_event.c, it is used to store the environment
    variables (as "NAME=VALUE" strings) that will be passed to zedlets;
    duplicate strings here should never happen unless there is a bug
    resulting in a duplicate nvpair or environment variable.
    
    This commit protects against adding a duplicate to a zed_strings
    container by first checking for the string being added, and removing
    the previous entry should one exist.  This implements a "last one
    wins" policy.
    
    This commit also changes the prototype for zed_strings_add() to allow
    the string key (by which it is indexed in the AVL) to differ from
    the string value.  By adding zedlet environment variables using the
    variable name as the key, multiple adds for the same variable name
    will result in only the last value being stored.
    
    Finally, this commit routes all additions of zedlet environment
    variables through the updated _zed_event_add_var().  This ensures
    all zedlet environment variable names are properly converted.
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3042

[33mcommit 0365064a9726f6bb6e148611a6e42fa80302d083[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Mar 8 10:48:18 2013 -0800

    Handle closing an unopened ZVOL
    
    Thank to commit a4430fce691d492aec382de0dfa937c05ee16500 we're
    now correctly returning EROFS when opening a zvol on a read-only
    pool.  Unfortunately, it looks like this causes us to trigger
    some unexpected behavior by __blkdev_get().
    
    In the failure case it's possible __blkdev_get() will call
    __blkdev_put() for a bdev which was never successfully opened.
    This results in us trying to close the device again and hitting
    the NULL dereference.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1343

[33mcommit a127e841dee20340b300e98b6d4b62f9ad41a47b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Dec 19 16:28:48 2014 -0800

    Add zvol_open() error handling for readonly property
    
    Rather than ASSERT when for some reason the readonly property of
    a zvol can't be read cleanly handle the failure.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1343

[33mcommit f9f431cd28ed6a78a2659758ce4a83c4c76fc3a1[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Fri Jul 18 18:32:13 2014 -0400

    Use (void) memcpy(), not (void *) memcpy()
    
    This was caught by Clang.  Clearly the intent of this code was
    to explicitly ignore the return value.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #3054

[33mcommit 6466b61db6b4def6b077882ebbd4c3e83e917613[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Oct 30 13:17:33 2014 -0700

    Make `zpool import -d|-c` behave consistently
    
    When importing pools with zpool import -aN there is inconsistent
    behavior between '-d /dev/disk/by-id' (or another path) and
    '-c /etc/zfs/zpool.cache'.
    
    The difference in behavior is caused by zpool_find_import_cached()
    returning an empty nvlist_t when there are no pools to import but
    zpool_find_import_impl() returns NULL for the same situation. The
    behavior of zpool_find_import_cached() is arguably more correct
    because it allows returning NULL to be used for an error case and
    not an empty set.
    
    This change resolves the issue by updating get_configs() such that
    it returns an empty set instead of NULL when no config is found.
    The updated behavior will now always return 0 for this case.
    
    $ zpool import -aN; echo $?
    no pools available to import
    0
    
    $ zpool import -aN -d /var/tmp/; echo $?
    no pools available to import
    0
    
    $ zpool import -aN -c /etc/zfs/zpool.cache; echo $?
    no pools available to import
    0
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2080

[33mcommit a485efc4cd7589ec7993aee4b0746a05f42409d5[m
Merge: b0cf067 a644585
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jan 28 11:06:14 2015 -0800

    Merge branch 'arc_summary_draft_v2'
    
    Add a port of arc_summary.py to ZFS on Linux, arc_summary.py is a
    standard tool in FreeBSD and Illumos. The version of the script used
    for the port originally came from FreeNAS.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Kyle Blatter <kyleblatter@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Closes #2920

[33mcommit a6445855492faf94b393e8b6cf7d00f6c8c895f0[m
Author: Kyle Blatter <kyleblatter@llnl.gov>
Date:   Mon Jan 12 13:31:24 2015 -0800

    Replace sysctl summary with tunables summary.
    
    The original script displayed tunable parameters using sysctl calls.
    This patch modifies this by displaying tunable parameters found in
    /sys/modules/zfs/parameters/. modinfo calls are used to capture
    descriptions.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Kyle Blatter <kyleblatter@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>

[33mcommit 65dc685a1db00d741bf75d9df98c8e0e25bf2a71[m
Author: Kyle Blatter <kyleblatter@llnl.gov>
Date:   Tue Jan 13 10:28:55 2015 -0800

    Force all lines to be 80 columns
    
    Ensure this script conforms to the projects style guidelines
    by limiting line length to 80 columns.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Kyle Blatter <kyleblatter@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>

[33mcommit 6427f39fe08a14e30525b060d606c59d257af94a[m
Author: Kyle Blatter <kyleblatter@llnl.gov>
Date:   Thu Dec 4 11:31:54 2014 -0800

    Add a help option with usage information
    
    Add a basic help option and usage description which is consistent
    with arcstat.py and dbufstat.py.  This also adds support for long
    opts.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Kyle Blatter <kyleblatter@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>

[33mcommit 3bfc7f1b2052a794ffceb6a33f5b21f613a479dc[m
Author: Kyle Blatter <kyleblatter@llnl.gov>
Date:   Wed Nov 5 10:08:45 2014 -0800

    Refactor arc_summary to simplify -p processing
    
    The -p option is used to specify a specific page of output to be
    displayed. If omitted, all output pages would be displayed.
    
    arc_summary, as it stood, had really kludgy processing code for
    processing the -p option. It relied on a try-except block which was
    treated as an if statement and in normal operation would fail any time a
    user didn't specify the -p option on the command line. When the
    exception was thrown, the script would then display all output pages.
    This happened whether the -p option was omitted or malformed. Thus, in
    the principle use case, an exception would be raised in order to run the
    script as desired. The same except code would be called regardless of
    the exception, however, and malformed -p arguments would also cause the
    script to execute.
    
    Additionally, this required the function which handles the case where
    all output pages were to be displayed, _call_all, to be potentially
    called from several locations within main.
    
    This commit refactors the option processing code to simplify it and make
    it easier to catch runtime errors in the script. This is done by
    specializing the try-except block to only have an exception when the -p
    argument is malformed. When the -p option is correctly selected by the
    user, it calls a function in the unSub array directly, which will only
    display one page of output.
    
    Finally in the context of this refactoring the page breaks have been
    removed.  Pages seem to have been added into the output in the FreeNAS
    version of the script. This patch removes pages from the output to more
    closely resemble the freebsd version of the script.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Kyle Blatter <kyleblatter@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>

[33mcommit 53dc1139e7de76045b73ff9c72d75b81653b7012[m
Author: cburroughs <chris.burroughs@gmail.com>
Date:   Tue Feb 11 10:14:55 2014 -0500

    Modified arc_summary.py to run on linux
    
    1) Comment out stat sections whose kstats are not currently available
    2) Port most of arc_summary to use spl kstats
    3) Enable l2arc stats
    5) Include compressed l2size
    4) Minor style fixes / cleanup
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cburroughs <chris.burroughs@gmail.com>
    Signed-off-by: Kyle Blatter <kyleblatter@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>

[33mcommit edd5b80d07544961f8bd184b2d5cc726ea71f5d0[m
Author: cburroughs <chris.burroughs@gmail.com>
Date:   Tue Feb 11 09:15:50 2014 -0500

    Add arc_summary.py from FreeNAS
    
    The arc_summary script is a useful utility for administrators on
    other ZFS platforms.  It provides a quick and easy way to get a high
    level view of the current ARC state.
    
    Historically this was a perl script but it was rewritten in python
    for FreeNAS.  We've decided to adopt the python version instead of
    the perl version for a few reasons.
    
    1) ZoL has no existing perl dependencies, but it does have a python
       dependency for scripts such as arcstat.py and dbufstat.py.  Using
       python for arc_summary.py helps us minimize dependencies.
    
    2) Most major Linux distributions already depend heavily on python
       for their core infrastructure.  This means it's very likely to
       be available even very early in the boot process.
    
    Original source:
      https://github.com/freenas/freenas/blob/master/gui/tools/arc_summary.py
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: cburroughs <chris.burroughs@gmail.com>
    Signed-off-by: Kyle Blatter <kyleblatter@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>

[33mcommit b0cf0676c0beb5dcb149774a3264580a18304ac1[m
Author: Tim Chase <tim@chase2k.com>
Date:   Sat Oct 18 22:50:01 2014 -0500

    Fix removal of SA in sa_modify_attrs()
    
    The sa_modify_attrs() function can add, remove or replace an SA.
    The main loop in the function uses the index "i" to iterate over the
    existing SAs and uses the index "j" for writing them into a new buffer
    via SA_ADD_BULK_ATTR().  The write index, "j" is incremented on remove
    (SA_REMOVE) operations which leads to a corruption in the new SA buffer.
    This patch remove the increment for SA_REMOVE operations.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Closes #3028

[33mcommit 841c9d43c725334a0a4b6174b6e1adea24f16cdd[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Sat Oct 11 11:01:37 2014 -0400

    Use kmem_vasprintf() in log_internal()
    
    An attempt to debug zfsonlinux/zfs#2781 revealed that this code could be
    simplified by using kmem_asprintf(). It is not clear that switching to
    kmem_asprintf() addresses zfsonlinux/zfs#2781. However, switching to
    kmem_asprintf() is cleanup that simplifies debugging such that it would
    become clear that this is a bug in glibc should the issue persist.
    
    It also brings this function almost back in sync with Illumos.  This
    was possible due to the recently reworked kmem code which allows us
    to use KM_SLEEP in the same fashion as Illumos.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2791
    Issue #2781

[33mcommit 3c832b8cc13bb4e570b317c30b146bb072e08f58[m
Author: Tim Chase <tim@chase2k.com>
Date:   Thu Dec 18 10:08:47 2014 -0600

    Linux 3.12 compat: split shrinker has s_shrink
    
    The split count/scan shrinker callbacks introduced in 3.12 broke the
    test for HAVE_SHRINK, effectively disabling the per-superblock shrinkers.
    
    This patch re-enables the per-superblock shrinkers when the split shrinker
    callbacks have been detected.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2975

[33mcommit 6e9710f7c33a7440904b39fb4e6b68b3325cfeca[m
Merge: d958324 81971b1
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jan 16 14:42:46 2015 -0800

    Merge branch 'kmem-rework'
    
    The core motivation behind these changes is to minimize the
    memory management differences between ZFS on Linux and other
    platforms.  This simplifies the process of porting changes to
    Linux from other platforms.  This is good for code quality
    and is expected to reduce the number of defects accidentally
    introduced due to porting.  The following key Linux specific
    changes have been reverted.
    
    * KM_PUSHPAGE changed back to KM_SLEEP.  All contexts where
      it is unsafe to perform IO have been marked with PF_FSTRANS.
      This context specific mechanism is now used exclusively
      and the KM_PUSHPAGE mechanism has been retired.
    
    * The KM_NODEBUG flag has been retired.  Allocations larger
      than 32K should use vmem_alloc()/vmem_free().  Depending
      on the size of the allocation either kmalloc() or vmalloc()
      will be used internally, but no warning will be printed.
    
    * Pre-allocated vdev IO buffers and the dedicated SA spill
      block cache have been retired.  It is now safe and reliable
      to allocate buffers of the needed size without fear of
      deadlocking.  This reduces our memory footprint and paves
      the way for larger block sizes.
    
    Depends on zfsonlinux/spl#414.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Closes #2918

[33mcommit 81971b137ada2097ed73a4364cb896a99d71f578[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Dec 16 11:44:24 2014 -0800

    Revert "SA spill block cache"
    
    The SA spill_cache was originally introduced to avoid the need to
    perform large kmem or vmem allocations.  Instead a small dedicated
    cache of preallocated SA buffers was kept.
    
    This solution was viable while the maximum block size was limited
    to 128K.  But with the planned increase of the maximum block size
    to 16M callers need to migrate to the zio_buf_alloc().  However,
    they should be aware this interface is expected to change again
    once the zio buffers are fully backed by scatter-gather lists.
    
    Alternately, if the callers know these buffers will never be large
    or be infrequently accessed they may kmem_alloc() or vmem_alloc()
    the needed temporary space.
    
    This change has the additional benegit of bringing the code back
    inline with the upstream Illumos source.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 285b29d959d3792e45d75c2ce228552d396b445f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Dec 12 16:40:21 2014 -0800

    Revert "Pre-allocate vdev I/O buffers"
    
    Commit 86dd0fd added preallocated I/O buffers.  This is no longer
    required after the recent kmem changes designed to make our memory
    allocation interfaces behave more like those found on Illumos.  A
    deadlock in this situation is no longer possible.
    
    However, these allocations still have the potential to be expensive.
    So a potential future optimization might be to perform then KM_NOSLEEP
    so that they either succeed of fail quicky.  Either case is acceptable
    here because we can safely abort the aggregation.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 60e1eda929b04445a0ab0451674f83b86c6ec347[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Dec 8 19:03:50 2014 -0500

    Add kmem_cache.h include to default context
    
    As part of the spl kmem/vmem refactoring the kmem_cache_* functions
    were split in to their own kmem_cache.h header.  This was done in
    part so that kmem_* consumers would not be forced to include the
    kmem_cache_* functions which mask several Linux SLAB/SLAB functions.
    
    Because of this we now much explicitly include kmem_cache.h in the
    zfs_context.h.  However, consumers such as Lustre which need access
    to the KM_FLAGS but not the kmem_cache_* functions can now safely
    just include kmem.h.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 79c76d5b65b19a602d4c7a340da7bf90d4a0c4f8[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Nov 20 19:09:39 2014 -0500

    Change KM_PUSHPAGE -> KM_SLEEP
    
    By marking DMU transaction processing contexts with PF_FSTRANS
    we can revert the KM_PUSHPAGE -> KM_SLEEP changes.  This brings
    us back in line with upstream.  In some cases this means simply
    swapping the flags back.  For others fnvlist_alloc() was replaced
    by nvlist_alloc(..., KM_PUSHPAGE) and must be reverted back to
    fnvlist_alloc() which assumes KM_SLEEP.
    
    The one place KM_PUSHPAGE is kept is when allocating ARC buffers
    which allows us to dip in to reserved memory.  This is again the
    same as upstream.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit efcd79a883caddea4a20bfc771da31ecc6ce4ca2[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Dec 3 14:56:32 2014 -0500

    Retire KM_NODEBUG
    
    Callers of kmem_alloc() which passed the KM_NODEBUG flag to suppress
    the large allocation warning have been replaced by vmem_alloc() as
    appropriate.  The updated vmem_alloc() call will not print a warning
    regardless of the size of the allocation.
    
    A careful reader will notice that not all callers have been changed
    to vmem_alloc().  Some have only had the KM_NODEBUG flag removed.
    This was possible because the default warning threshold has been
    increased to 32k.  This is desirable because it minimizes the need
    for Linux specific code changes.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 71f8548ea443718a5afb1598f1f3a27a369ccd8b[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Mon Nov 3 09:42:44 2014 -0500

    Use is_vmalloc_addr() in vdev_disk.c
    
    The initial port of ZFS to Linux required a way to identify virtual
    memory to make IO to virtual memory backed slabs work, so kmem_virt()
    was created. Linux 2.6.25 introduced is_vmalloc_addr(), which is
    logically equivalent to kmem_virt(). Support for kernels before 2.6.26
    was later dropped and more recently, support for kernels before Linux
    2.6.32 has been dropped. We retire kmem_virt() in favor of
    is_vmalloc_addr() to cleanup the code.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 92119cc259ee2f9ebde14145f549d6313f557759[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sun Jul 13 14:35:19 2014 -0400

    Mark IO pipeline with PF_FSTRANS
    
    In order to avoid deadlocking in the IO pipeline it is critical that
    pageout be avoided during direct memory reclaim.  This ensures that
    the pipeline threads can always make forward progress and never end
    up blocking on a DMU transaction.  For this very reason Linux now
    provides the PF_FSTRANS flag which may be set in the process context.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit d958324f97f4668a2a6e4a6ce3e5ca09b71b31d9[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jan 6 16:54:57 2015 -0800

    Fix zfs_putpage() lock inversion (again)
    
    This is a follow up commit to 74328ee which correctly resolved a lock
    inversion between zfs_putpage() and zfs_free_range().  Unfortunately,
    in the process it accidentally introduced another inversion between
    zfs_putpage() and zfs_read().  The page must be unlocked before taking
    the range lock.  This patch corrects that issue.
    
    In addition, because the locking rules here are subtle a block comment
    has been added clearly explaining why the ordering here is critical.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Issue #2976

[33mcommit 33b6dbbc51c790fc8048e2e18cd9bc10be384233[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Mon Dec 22 16:54:43 2014 -0800

    Document zfs_flags module parameter
    
    Add a table describing the debugging flags that can be set in the zfs_flags
    module parameter.  Also change the module_param type to 'uint' so users aren't
    shown a negative value. The updated man page text is reproduced below for
    convenience.
    
    zfs_flags (int)
                Set  additional debugging flags. The following flags may be
                bitwise-or'd together.
    
                +-------------------------------------------------------+
                |Value   Symbolic Name                                  |
                |        Description                                    |
                +-------------------------------------------------------+
                |    1   ZFS_DEBUG_DPRINTF                              |
                |        Enable dprintf entries in the debug log.       |
                +-------------------------------------------------------+
                |    2   ZFS_DEBUG_DBUF_VERIFY *                        |
                |        Enable extra dbuf verifications.               |
                +-------------------------------------------------------+
                |    4   ZFS_DEBUG_DNODE_VERIFY *                       |
                |        Enable extra dnode verifications.              |
                +-------------------------------------------------------+
                |    8   ZFS_DEBUG_SNAPNAMES                            |
                |        Enable snapshot name verification.             |
                +-------------------------------------------------------+
                |   16   ZFS_DEBUG_MODIFY                               |
                |        Check for illegally modified ARC buffers.      |
                +-------------------------------------------------------+
                |   32   ZFS_DEBUG_SPA                                  |
                |        Enable spa_dbgmsg entries in the debug log.    |
                +-------------------------------------------------------+
                |   64   ZFS_DEBUG_ZIO_FREE                             |
                |        Enable verification of block frees.            |
                +-------------------------------------------------------+
                |  128   ZFS_DEBUG_HISTOGRAM_VERIFY                     |
                |        Enable extra spacemap histogram verifications. |
                +-------------------------------------------------------+
                * Requires debug build.
    
                Default value: 0.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2988

[33mcommit 4e30e68cafdd558463be2352849e707bcc36aa3c[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Mon Dec 15 13:53:00 2014 -0800

    Don't use AC_LANG_SOURCE for conftest.h source
    
    Using AC_LANG_SOURCE with some versions of autoconf is problematic if
    the given source is to be written to a header file. Such versions assume
    the contents are to be written to conftest.c and generate shell code to
    that effect. The contents of the test program to detect support for
    Linux tracepoints were consequently malformed (containing the source for
    conftest.h) so the build system incorrectly disabled tracepoints
    support. Fix this in ZFS_LINUX_TRY_COMPILE_HEADER by passing the header
    source directly to ZFS_LINUX_COMPILE_IFELSE.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2953

[33mcommit 49ee64e5e6ec7240bc63d96064f2feeb8f84ed9d[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Fri Dec 12 18:07:39 2014 -0800

    Remove duplicate typedefs from trace.h
    
    Older versions of GCC (e.g. GCC 4.4.7 on RHEL6) do not allow duplicate
    typedef declarations with the same type. The trace.h header contains
    some typedefs to avoid 'unknown type' errors for C files that haven't
    declared the type in question. But this causes build failures for C
    files that have already declared the type. Newer versions of GCC (e.g.
    v4.6) allow duplicate typedefs with the same type unless pedantic error
    checking is in force. To support the older versions we need to remove
    the duplicate typedefs.
    
    Removal of the typedefs means we can't built tracepoints code using
    those types unless the required headers have been included. To
    facilitate this, all tracepoint event declarations have been moved out
    of trace.h into separate headers. Each new header is explicitly included
    from the C file that uses the events defined therein. The trace.h header
    is still indirectly included form zfs_context.h and provides the
    implementation of the dprintf(), dbgmsg(), and SET_ERROR() interfaces.
    This makes those interfaces readily available throughout the code base.
    The macros that redefine DTRACE_PROBE* to use Linux tracepoints are also
    still provided by trace.h, so it is a prerequisite for the other
    trace_*.h headers.
    
    These new Linux implementation-specific headers do introduce a small
    divergence from upstream ZFS in several core C files, but this should
    not present a significant maintenance burden.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2953

[33mcommit 74328ee18f94d27f9c802d29fdd311018dab2adf[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Dec 19 12:57:54 2014 -0800

    Fix zfs_putpage() lock inversion
    
    There exists a lock inversions involving the zfs range lock and the
    individual page writeback bits which can result in a deadlock.  To
    prevent this we must always manipulate the writeback bit while
    holding the range lock.  The exact deadlock is as follows:
    
    ------ Process A ------        ------ Process B ------
    zpl_writepages                 zpl_fallocate
    write_cache_pages              zpl_fallocate_common
    zpl_putpage                    zfs_space
    zfs_putpage (set bit)          zfs_freesp
    zfs_range_lock (wait on lock)  zfs_free_range (take lock)
    [has not yet initiated I/O,    truncate_inode_pages_range
    the bit will not be cleared]   wait_on_page_writeback (wait on bit)
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Richard Yao <richard.yao@clusterhq.com>
    Issue #2976

[33mcommit 2d9d57b0fbe17b56a1bdd09505400144778cb189[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Wed Dec 17 11:01:42 2014 -0800

    vdev_id: use mawk-compatible regular expression
    
    Slot mapping in vdev_id doesn't work on systems using mawk as the 'awk'
    alternative. A regular expression in map_slot() contains an unquoted
    empty string following the alternation (|) operator, which results in an
    "missing operand" error with mawk. The solution is to rearrange the
    expression so the alternation has two operands.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes zfsonlinux/pkg-zfs#136
    Closes zfsonlinux/zfs#2965

[33mcommit 5c7afad448325b5761601f574fc937476d3a77d1[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Dec 19 11:57:52 2014 -0800

    Fix cstyle issue from c66989b
    
    Commit c66989b accidentally introduced a cstyle issue which went
    unnoticed.  This tiny patch corrects that oversight.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 9063f65476b7b7d78ccf096fec890b8727117e2a[m
Author: Boris Protopopov <boris.protopopov@actifio.com>
Date:   Wed Nov 19 12:08:08 2014 -0500

    Correct error returns to unify cross-pool operation error handling
    
    Signed-off-by: Boris Protopopov <boris.protopopov@actifio.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2911

[33mcommit c0ba93dee6cb62ccbb2c9b3103f15ddbf4680d6e[m
Author: Andy Bakun <github@thwartedefforts.org>
Date:   Sun Dec 14 20:23:25 2014 -0800

    Fix typo in %post scriptlet lines
    
    Missing space made the %post directive be part of the package
    %description and not have a %post scriptlet defined.
    
    Signed-off-by: Andy Bakun <github@thwartedefforts.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2961

[33mcommit c66989baaeee5bb4ac06cebfad513e1253f22564[m
Author: Jacek Fefliński <feflik@gmail.com>
Date:   Wed Dec 10 13:24:14 2014 +0100

    zpool upgrade return errors to stderr instead of stdout
    
    Signed-off-by: Jacek Feflinski <feflik@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2955

[33mcommit 1b95fd5d708bcf7de79740a0cd08de43caa0d847[m
Author: Dan Swartzendruber <dswartz@druber.com>
Date:   Sun Dec 7 12:23:00 2014 -0500

    Improve systemd script to not leave stale sharetab
    
    The systemd script zfs-share.service does 'zfs share -a' to share
    any required datasets.  Unfortunately, /etc/dfs/sharetab is stale
    from the previous boot.  Delete it before we share.
    
    Signed-off-by: Dan Swartzendruber <dswartz@druber.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2883

[33mcommit c944be5d7e619ad7259fdb5802f0f9bd90a22488[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Oct 20 14:37:47 2014 -0700

    Fix snapshots with dirty inodes
    
    Filesystems which are mounted read-only or are immutable because
    they are snapshots must not be allowed to dirty and inode.  This
    will result in a write which will correctly cause a kernel panic
    because these filesystem are (and must be) immutable.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2812

[33mcommit 80c50365c21ea98ae78150f32c3f35e075815c44[m
Author: Dan Swartzendruber <dswartz@druber.com>
Date:   Thu Nov 13 14:49:51 2014 -0500

    Fix systemd config for zfs-share.service
    
    The zfs-share.service rule needs to be modified to ensure that it
    does not execute before zfs-mount.service.
    
    Signed-off-by: Dan Swartzendruber <dswartz@druber.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ralf Ertzinger <ralf@skytale.net>
    Closes #2893

[33mcommit 29b763cd2c13e355b60fa095a6f20cf8a38f8651[m
Author: Isaac Huang <he.huang@intel.com>
Date:   Tue Oct 21 12:20:10 2014 -0600

    bio_alloc() with __GFP_WAIT never returns NULL
    
    Mark the error handling branch as unlikely() because the current
    kernel interface can never return NULL.  However, we want to keep
    the error handling in case this behavior changes in the futre.
    
    Plus fix a small style issue.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Isaac Huang <he.huang@intel.com>
    Closes #2703

[33mcommit aaed7c408c0bd72c6f9437793a98542972f0a8fd[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Fri Nov 14 10:21:53 2014 -0800

    Explicitly include SPL compat headers
    
    Inclusion of SPL compatibility headers was moved out of the public
    header sys/types.h to avoid conflicts with external packages.  Include a
    few compatiblity headers explicitly to cope with that change.  Also,
    sort some linux-specific inclusions alphabetically.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2898

[33mcommit 7b2d78a046aa4695d434478a439a9438521d73af[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Thu Nov 6 18:18:32 2014 -0800

    Fix improper null-byte termination handling
    
    Fix a few cases where null-byte termination of strings was done
    unnecessarily or incorrectly.
    
    - The snprintf() function always produces a null-byte terminated string
      for non-negative return values, so it is not necessary to write out a
      null-byte as a separate step.
    
    - Also, it is unsafe to use the return value of snprintf() as an offset
      for placing a null-byte, because if the output was truncated the return
      value is the number of bytes that _would_ have been written had enough
      space been available. Therefore the return value may index beyond the
      array boundaries.
    
    - Finally, snprintf() accounts for the null-byte when limiting its output
      size, so there is no need to pass it a size parameter that is one less
      than the buffer size.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2875

[33mcommit 89b1cd6581528c576bd4ff7f713f671b23b051b5[m
Author: smh <smh@FreeBSD.org>
Date:   Thu Oct 16 02:23:27 2014 +0000

    Prevent ZFS leaking pool free space
    
    When processing async destroys ZFS would leak space every txg timeout
    (5 seconds by default), if no writes occurred, until the pool is totally
    full. At this point it would be unfixable without a pool recreation.
    
    In addition if the machine was rebooted with the pool in this situation
    would fail to import on boot, hanging indefinitely, as the import process
    requires the ability to write data to the pool. Any attempts to query
    the pool status during the hung import would not return as the import
    holds the pool lock.
    
    The only way to import such a pool would be to specify -o readonly=on
    to the zpool import.
    
    zdb -bb <pool> can be used to check for "deferred free" size which is
    where this lost space will be counted.
    
    References:
      https://github.com/freebsd/freebsd/commit/48431b7
      http://svnweb.freebsd.org/base?view=revision&revision=273158
      https://reviews.csiden.org/r/132/
    
    Porting notes:
    
    This issue was filed as illumos 5347 and a more comprehensive fix is
    under review.  Once that change is finalized it will be integrated, in
    the meanwhile the FreeBSD fix has been merged to prevent the issue.
    
    Ported by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Matthew Ahrens mahrens@delphix.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2896

[33mcommit 4254acb05743dc2175ae76f6e15b0785d4b688fd[m
Author: Tim Chase <tim@chase2k.com>
Date:   Mon Nov 10 23:26:33 2014 -0600

    Undirty freed spill blocks.
    
    If a spill block's dbuf hasn't yet been written when a spill block is
    freed, the unwritten version will still be written.  This patch handles
    the case in which a spill block's dbuf is freed and undirties it to
    prevent it from being written.
    
    The most common case in which this could happen is when xattr=sa is being
    used and a long xattr is immediately replaced by a short xattr as in:
    
    	setfattr -n user.test -v very_very_very..._long_value  <file>
    	setfattr -n user.test -v short_value  <file>
    
    The first value must be sufficiently long that a spill block is generated
    and the second value must be short enough to not require a spill block.
    In practice, this would typically happen due to internal xattr operations
    as a result of setting acltype=posixacl.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2663
    Closes #2700
    Closes #2701
    Closes #2717
    Closes #2863
    Closes #2884

[33mcommit bc9f4131a15a177f1d355ad1c5c844e0ab9a505a[m
Merge: 33c0819 0b39b9f
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Nov 17 11:14:24 2014 -0800

    Merge branch 'b_tracepoints'
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2874

[33mcommit 0b39b9f96f1170523ad6e4a3e8319198a574de27[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Fri Jun 13 10:54:48 2014 -0700

    Swap DTRACE_PROBE* with Linux tracepoints
    
    This patch leverages Linux tracepoints from within the ZFS on Linux
    code base. It also refactors the debug code to bring it back in sync
    with Illumos.
    
    The information exported via tracepoints can be used for a variety of
    reasons (e.g. debugging, tuning, general exploration/understanding,
    etc). It is advantageous to use Linux tracepoints as the mechanism to
    export this kind of information (as opposed to something else) for a
    number of reasons:
    
        * A number of external tools can make use of our tracepoints
          "automatically" (e.g. perf, systemtap)
        * Tracepoints are designed to be extremely cheap when disabled
        * It's one of the "accepted" ways to export this kind of
          information; many other kernel subsystems use tracepoints too.
    
    Unfortunately, though, there are a few caveats as well:
    
        * Linux tracepoints appear to only be available to GPL licensed
          modules due to the way certain kernel functions are exported.
          Thus, to actually make use of the tracepoints introduced by this
          patch, one might have to patch and re-compile the kernel;
          exporting the necessary functions to non-GPL modules.
    
        * Prior to upstream kernel version v3.14-rc6-30-g66cc69e, Linux
          tracepoints are not available for unsigned kernel modules
          (tracepoints will get disabled due to the module's 'F' taint).
          Thus, one either has to sign the zfs kernel module prior to
          loading it, or use a kernel versioned v3.14-rc6-30-g66cc69e or
          newer.
    
    Assuming the above two requirements are satisfied, lets look at an
    example of how this patch can be used and what information it exposes
    (all commands run as 'root'):
    
        # list all zfs tracepoints available
    
        $ ls /sys/kernel/debug/tracing/events/zfs
        enable              filter              zfs_arc__delete
        zfs_arc__evict      zfs_arc__hit        zfs_arc__miss
        zfs_l2arc__evict    zfs_l2arc__hit      zfs_l2arc__iodone
        zfs_l2arc__miss     zfs_l2arc__read     zfs_l2arc__write
        zfs_new_state__mfu  zfs_new_state__mru
    
        # enable all zfs tracepoints, clear the tracepoint ring buffer
    
        $ echo 1 > /sys/kernel/debug/tracing/events/zfs/enable
        $ echo 0 > /sys/kernel/debug/tracing/trace
    
        # import zpool called 'tank', inspect tracepoint data (each line was
        # truncated, they're too long for a commit message otherwise)
    
        $ zpool import tank
        $ cat /sys/kernel/debug/tracing/trace | head -n35
        # tracer: nop
        #
        # entries-in-buffer/entries-written: 1219/1219   #P:8
        #
        #                              _-----=> irqs-off
        #                             / _----=> need-resched
        #                            | / _---=> hardirq/softirq
        #                            || / _--=> preempt-depth
        #                            ||| /     delay
        #           TASK-PID   CPU#  ||||    TIMESTAMP  FUNCTION
        #              | |       |   ||||       |         |
                lt-zpool-30132 [003] .... 91344.200050: zfs_arc__miss: hdr...
              z_rd_int/0-30156 [003] .... 91344.200611: zfs_new_state__mru...
                lt-zpool-30132 [003] .... 91344.201173: zfs_arc__miss: hdr...
              z_rd_int/1-30157 [003] .... 91344.201756: zfs_new_state__mru...
                lt-zpool-30132 [003] .... 91344.201795: zfs_arc__miss: hdr...
              z_rd_int/2-30158 [003] .... 91344.202099: zfs_new_state__mru...
                lt-zpool-30132 [003] .... 91344.202126: zfs_arc__hit: hdr ...
                lt-zpool-30132 [003] .... 91344.202130: zfs_arc__hit: hdr ...
                lt-zpool-30132 [003] .... 91344.202134: zfs_arc__hit: hdr ...
                lt-zpool-30132 [003] .... 91344.202146: zfs_arc__miss: hdr...
              z_rd_int/3-30159 [003] .... 91344.202457: zfs_new_state__mru...
                lt-zpool-30132 [003] .... 91344.202484: zfs_arc__miss: hdr...
              z_rd_int/4-30160 [003] .... 91344.202866: zfs_new_state__mru...
                lt-zpool-30132 [003] .... 91344.202891: zfs_arc__hit: hdr ...
                lt-zpool-30132 [001] .... 91344.203034: zfs_arc__miss: hdr...
              z_rd_iss/1-30149 [001] .... 91344.203749: zfs_new_state__mru...
                lt-zpool-30132 [001] .... 91344.203789: zfs_arc__hit: hdr ...
                lt-zpool-30132 [001] .... 91344.203878: zfs_arc__miss: hdr...
              z_rd_iss/3-30151 [001] .... 91344.204315: zfs_new_state__mru...
                lt-zpool-30132 [001] .... 91344.204332: zfs_arc__hit: hdr ...
                lt-zpool-30132 [001] .... 91344.204337: zfs_arc__hit: hdr ...
                lt-zpool-30132 [001] .... 91344.204352: zfs_arc__hit: hdr ...
                lt-zpool-30132 [001] .... 91344.204356: zfs_arc__hit: hdr ...
                lt-zpool-30132 [001] .... 91344.204360: zfs_arc__hit: hdr ...
    
    To highlight the kind of detailed information that is being exported
    using this infrastructure, I've taken the first tracepoint line from the
    output above and reformatted it such that it fits in 80 columns:
    
        lt-zpool-30132 [003] .... 91344.200050: zfs_arc__miss:
            hdr {
                dva 0x1:0x40082
                birth 15491
                cksum0 0x163edbff3a
                flags 0x640
                datacnt 1
                type 1
                size 2048
                spa 3133524293419867460
                state_type 0
                access 0
                mru_hits 0
                mru_ghost_hits 0
                mfu_hits 0
                mfu_ghost_hits 0
                l2_hits 0
                refcount 1
            } bp {
                dva0 0x1:0x40082
                dva1 0x1:0x3000e5
                dva2 0x1:0x5a006e
                cksum 0x163edbff3a:0x75af30b3dd6:0x1499263ff5f2b:0x288bd118815e00
                lsize 2048
            } zb {
                objset 0
                object 0
                level -1
                blkid 0
            }
    
    For the specific tracepoint shown here, 'zfs_arc__miss', data is
    exported detailing the arc_buf_hdr_t (hdr), blkptr_t (bp), and
    zbookmark_t (zb) that caused the ARC miss (down to the exact DVA!).
    This kind of precise and detailed information can be extremely valuable
    when trying to answer certain kinds of questions.
    
    For anybody unfamiliar but looking to build on this, I found the XFS
    source code along with the following three web links to be extremely
    helpful:
    
        * http://lwn.net/Articles/379903/
        * http://lwn.net/Articles/381064/
        * http://lwn.net/Articles/383362/
    
    I should also node the more "boring" aspects of this patch:
    
        * The ZFS_LINUX_COMPILE_IFELSE autoconf macro was modified to
           support a sixth paramter. This parameter is used to populate the
           contents of the new conftest.h file. If no sixth parameter is
           provided, conftest.h will be empty.
    
        * The ZFS_LINUX_TRY_COMPILE_HEADER autoconf macro was introduced.
          This macro is nearly identical to the ZFS_LINUX_TRY_COMPILE macro,
          except it has support for a fifth option that is then passed as
          the sixth parameter to ZFS_LINUX_COMPILE_IFELSE.
    
    These autoconf changes were needed to test the availability of the Linux
    tracepoint macros. Due to the odd nature of the Linux tracepoint macro
    API, a separate ".h" must be created (the path and filename is used
    internally by the kernel's define_trace.h file).
    
        * The HAVE_DECLARE_EVENT_CLASS autoconf macro was introduced. This
          is to determine if we can safely enable the Linux tracepoint
          functionality. We need to selectively disable the tracepoint code
          due to the kernel exporting certain functions as GPL only. Without
          this check, the build process will fail at link time.
    
    In addition, the SET_ERROR macro was modified into a tracepoint as well.
    To do this, the 'sdt.h' file was moved into the 'include/sys' directory
    and now contains a userspace portion and a kernel space portion. The
    dprintf and zfs_dbgmsg* interfaces are now implemented as tracepoint as
    well.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 5024046763f02c11b94b832c5f54e23411949e90[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Thu Nov 6 13:34:17 2014 -0800

    cstyle: allow right paren on its own line
    
    Make the style checker script accept right parentheses on their own
    lines. This is motivated by the Linux tracepoints macro
    DECLARE_EVENT_CLASS.
    
    The code within TP_fast_assign() (a parameter of DECLARE_EVENT_CLASS)
    is normal C assignments terminated by semicolons.  But the style
    checker forbids us from following a semicolon with a non-blank and
    from preceding a right parenthesis with white space.  Therefore the
    closing parenthesis must go on the next line, yet the style checker
    foribs us from indenting it for readability.  Relaxing the
    no-non-blank-after-semicolon rule would open the door to too many bad
    style practices. So instead we relax the
    no-white-space-before-right-paren rule if the parenthesis is on its
    own line.  The relaxation is overriden with the -p option so we still
    have a way to catch misuse of this style.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 29e57d15c8cdd5d1d7905c9045e8f40c6f9b72f4[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Thu Oct 23 16:59:27 2014 -0700

    Fix dprintf format specifiers
    
    Fix a few dprintf format specifiers that disagreed with their argument
    types.  These came to light as compiler errors when converting dprintf
    to use the Linux trace buffer.  Previously this wasn't a problem,
    presumably because the SPL debug logging uses vsnprintf which must
    perform automatic type conversion.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 59ec819a0c616fe2ac2b28829086568353a7d7fe[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Tue Oct 21 17:59:33 2014 -0700

    Move a few internal ARC strucutres to arc_impl.h
    
    Add a new file named arc_impl.h and move a few internal
    ARC structure definitions into this file. This is
    needed in order to allow the Linux tracepoint functions to grub
    around in the internals of these structures.
    
    Signed-off-by: Prakash Surya <prakash.surya@delphix.com>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 33c08194254d42342d1c4e323eb0058df38d15b6[m
Author: Randall Mason <ClashTheBunny@gmail.com>
Date:   Fri Nov 7 12:34:11 2014 +0200

    Fix small spelling mistake
    
    recieve becomes receive
    
    Signed-off-by: Randall Mason <ClashTheBunny@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2877

[33mcommit fb42a4932886656a5e3a8a4cde6ea76ca7fbae7c[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Mon Oct 6 16:32:36 2014 +0200

    Illumos 5213 - panic in metaslab_init due to space_map_open returning ENXIO
    
    5213 panic in metaslab_init due to space_map_open returning ENXIO
    Reviewed by: Matthew Ahrens mahrens@delphix.com
    Reviewed by: George Wilson george.wilson@delphix.com
    
    References:
      https://www.illumos.org/issues/5213
      https://reviews.csiden.org/r/110
    
    Porting notes:
    
    For the Linux port, KM_SLEEP was replaced with KM_PUSHPAGE.
    
    Ported by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2745

[33mcommit a82db4e15fcd882898595a40bba0d3b08548cd95[m
Author: Isaac Huang <he.huang@intel.com>
Date:   Tue Oct 28 21:35:10 2014 -0600

    Print header properly when terminal resizes
    
    Added a handler for SIGWINCH, so that one header
    is printed per screen even when the terminal resizes.
    
    Signed-off-by: Isaac Huang <he.huang@intel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2847

[33mcommit 1c49ac575d26a072b53c93fcdf6bd0655343ef22[m
Author: Isaac Huang <he.huang@intel.com>
Date:   Thu Oct 30 13:29:58 2014 -0600

    Fix inaccurate field descriptions
    
    The field descriptions from arcstat.py -v for the demand accesses
    are inaccurate. They all begin with "Demand Data" yet the fields
    actually covered both demand data and demand meta-data accesses.
    
    Signed-off-by: Isaac Huang <he.huang@intel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2842

[33mcommit b31d8ea77cd91dce29acf3ec448180f3715cca13[m
Author: Chris Wedgwood <cw@f00f.org>
Date:   Thu Oct 23 16:00:41 2014 -0700

    Reduce buf/dbuf mutex contention
    
    Due to evidence of contention both the buf_hash_table and the
    dbuf_hash_table sizes have been increased from 256 to 8192.
    
    This increase in hash table size adds approximating 0.5M to
    our fixed memory footprint.  This relatively small increase
    is not expected to cause problems even on low memory machines.
    This footprint will also become dynamic when the persistent
    L2ARC support is finalized.  In the meanwhile, this small
    change significantly reduces contention for certain workloads.
    
    Signed-off-by: Chris Wedgwood <cw@f00f.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Pavel Snajdr <snajpa@snajpa.net>
    Closes #1291

[33mcommit 0f69910833f4918283bad1ce9e23b701fc6edb6b[m
Author: Alex Zhuravlev <alexey.zhuravlev@intel.com>
Date:   Thu Nov 13 10:09:05 2014 -0800

    Export symbols for ZIL interface
    
    These symbols are needed by consumers (i.e. Lustre) who wish to
    integrate with the ZIL.  In addition the zil_rollback_destroy()
    prototype was removed because the implementation of this function
    was removed long ago.
    
    Signed-off-by: Alex Zhuravlev <alexey.zhuravlev@intel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2892

[33mcommit 5f91bd3dea49a529e87e0aa39595f074fd09736a[m
Author: Dan Swartzendruber <dswartz@druber.com>
Date:   Tue Oct 28 21:29:53 2014 -0400

    Improve zvol symlink handling.
    
    Change the zvol helper program to replace any embedded spaces
    in the pool or dataset names with '+' to ensure we have valid
    symlinks.
    
    The '+' character was choosen because it is not a valid character
    for a dataset name but it is allowed by udev.  This ensures that
    all dataset names with an embedded space will be translated to
    a unique /dev/zvol/ symlink.
    
    Signed-off-by: Dan Swartzendruber <dswartz@druber.com>
    Signed-off-by: Darik Horn <dajhorn@vanadac.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2834

[33mcommit 11662bf969b3503b66d5ccd81d024c0f4473100c[m
Author: Marcel Wysocki <maci.stgn@gmail.com>
Date:   Wed Oct 29 12:11:43 2014 +0100

    Add config/compile to config/.gitignore
    
    This file may be added by automake and therefore should be added
    to config/.gitignore.  For the full list of possible auxiliary
    programs see the full automake documentation.
    
    http://www.gnu.org/software/automake/manual/automake.html#Auxiliary-Programs
    
    Signed-off-by: Marcel Wysocki <maci.stgn@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2848

[33mcommit bb9d808c5a942111addef033bd50bff86d1a5cc7[m
Author: Alexander Pyhalov <apyhalov@gmail.com>
Date:   Wed Oct 22 22:02:45 2014 +0400

    Fix modules installation directory
    
    When building zfs modules with kernel, compiled from deb.src, the
    packaging process ends up installing the modules in the wrong place.
    
    Signed-off-by: Alexander Pyhalov <apyhalov@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2822

[33mcommit b76707027ceca056f8630cbc6660b8e9aa0a8f37[m
Author: Richard Yao <richard.yao@clusterhq.com>
Date:   Thu Sep 18 09:47:16 2014 -0400

    Make systemd-modules-load.service file directory configurable
    
    Installing outside of the prefix is not permissible under Gentoo Prefix.
    The package manager will cause the installation process to fail if/when
    it sees this. We could handle this by disabling systemd support on
    prefix because systemd does not check these paths, but the Gentoo
    Council decided that small files such as these should be installed.
    That means disabling systemd support on prefix is not an acceptable
    workaround. As a consequence, we need some way of control the directory
    into which these files are installed.
    
    Making this configurable increases our compliance with the
    freedesktop.org specification, which allows these files to be installed
    into /etc/modules-load.d:
    
    http://www.freedesktop.org/software/systemd/man/modules-load.d.html
    
    Signed-off-by: Richard Yao <richard.yao@clusterhq.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2641

[33mcommit 60e9f69c975b1ee40de2f91783e2817be44ec8a7[m
Author: Richard Yao <richard.yao@clusterhq.com>
Date:   Fri Aug 29 14:16:41 2014 -0400

    Make directory into which mount.zfs is installed configurable
    
    Installing outside of the prefix is not permissible under Gentoo Prefix.
    The package manager will cause the installation process to fail if/when
    it sees this. I could script a workaround inside the ebuild, but it
    seemed to make more sense to make this more configurable.
    
    Signed-off-by: Richard Yao <richard.yao@clusterhq.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2641

[33mcommit d8d78267214b17ffa5f1f0ae0695d69bb8d6b767[m
Author: Richard Yao <richard.yao@clusterhq.com>
Date:   Fri Aug 29 13:09:52 2014 -0400

    Search /usr/local/src for SPL Object Directory
    
    Since we changed the default location for the kernel headers to respect
    --prefix in the SPL, we must search that location to prevent user builds
    from breaking.
    
    Signed-off-by: Richard Yao <richard.yao@clusterhq.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2641

[33mcommit 3cd33ffc3ba1ebbc90eab280d87d6ac096be92f9[m
Author: Richard Yao <richard.yao@clusterhq.com>
Date:   Fri Aug 29 11:53:09 2014 -0400

    Kernel header installation should respect --prefix
    
    This is the upstream component of work that enables preliminary support
    for building Gentoo's ZFS packaging on other Linux systems via Gentoo
    Prefix.
    
    Signed-off-by: Richard Yao <richard.yao@clusterhq.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2641

[33mcommit ed6e9cc235b47b5c940178926715f871bd36dc5e[m
Author: Tim Chase <tim@chase2k.com>
Date:   Thu Oct 2 07:21:08 2014 -0500

    Linux 3.12 compat: shrinker semantics
    
    The new shrinker API as of Linux 3.12 modifies "struct shrinker" by
    replacing the @shrink callback with the pair of @count_objects and
    @scan_objects.  It also requires the return value of @count_objects to
    return the number of objects actually freed whereas the previous @shrink
    callback returned the number of remaining freeable objects.
    
    This patch adds support for the new @scan_objects return value semantics.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Closes #2837

[33mcommit 9635861742c6ac334877f944e17948aa11c2e57a[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Sat Sep 13 15:40:05 2014 +0200

    Illumos 5164-5165 - space map fixes
    
    5164 space_map_max_blksz causes panic, does not work
    5165 zdb fails assertion when run on pool with recently-enabled
         space map_histogram feature
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Saso Kiselkov <skiselkov.ml@gmail.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5164
      https://www.illumos.org/issues/5165
      https://github.com/illumos/illumos-gate/commit/b1be289
    
    Porting Notes:
    
    The metaslab_fragmentation() hunk was dropped from this patch
    because it was already resolved by commit 8b0a084.
    
    The comment modified in metaslab.c was updated to use the correct
    variable name, space_map_blksz.  The upstream commit incorrectly
    used space_map_blksize.
    
    Ported by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2697

[33mcommit b02fe35d3743c92e26f4158938e94093a2309a92[m
Author: Alex Reece <alex@delphix.com>
Date:   Tue Sep 23 01:42:03 2014 +0200

    Illumos 4958 zdb trips assert on pools with ashift >= 0xe
    
    4958 zdb trips assert on pools with ashift >= 0xe
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Max Grossman <max.grossman@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
      https://www.illumos.org/issues/4958
      https://github.com/illumos/illumos-gate/commit/2a104a5
    
    Porting notes:
    
    Keep the ZIO_FLAG_FASTWRITE define.  This is for a feature present
    in Linux but not yet in *BSD.
    
    Ported by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2697

[33mcommit adc90e9d946b53cb3eba963a2e2b1331cba0e7b5[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Oct 23 15:26:49 2014 -0700

    Fix zdb segfault
    
    On 32-bit systems setting 'zfs_arc_max = 256M' in zdb results in the
    following segmentation fault.  Rather than reverting 0ec0724 which
    introduced this flaw this code is only used for 64-bit builds.
    
    Segmentation fault (core dumped)
    ztest: '/sbin/zdb -bcc -d -U /var/tmp/zpool.cache ztest' exit code 139
    child exited with code 3
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 0ec072487b678bb2bda110304e8efccbc7df8713[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Tue Sep 16 22:24:48 2014 +0200

    Illumos 5169-5171 - zdb fixes
    
    5169 zdb should limit its ARC size
    5170 zdb -c should create more scrub i/os by default
    5171 zdb should print status while loading metaslabs for leak detection
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Paul Dagnelie <paul.dagnelie@delphix.com>
    Reviewed by: Bayard Bell <Bayard.Bell@nexenta.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    
    References:
      https://www.illumos.org/issues/5169
      https://www.illumos.org/issues/5170
      https://www.illumos.org/issues/5171
      https://github.com/illumos/illumos-gate/commit/06be980
    
    Ported by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2707

[33mcommit acf58e706ce447f5d344896dc523e9d393d66f35[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Sep 17 09:14:39 2014 +0200

    Illumos 5178 - zdb -vvvvv on old-format pool fails in dump_deadlist()
    
    5178 zdb -vvvvv on old-format pool fails in dump_deadlist()
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Richard Lowe <richlowe@richlowe.net>
    Reviewed by: Saso Kiselkov <skiselkov.ml@gmail.com>
    Reviewed by: Richard Elling <richard.elling@gmail.com>
    Reviewed by: Alek Pinchuk <alek.pinchuk@nexenta.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
      https://www.illumos.org/issues/5178
      https://github.com/illumos/illumos-gate/commit/90c76c6
    
    Ported by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2713

[33mcommit 023bbe6f017380f4a04c5060feb24dd8cdda9fce[m
Author: ilovezfs <ilovezfs@icloud.com>
Date:   Fri Oct 3 22:20:43 2014 -0700

    Fix zpool create -t ENOENT bug.
    
    In userland we need to switch over to the temporary name once the
    pool has been created, otherwise the root dataset won't mount
    and the error "cannot open 'the_real_name': dataset does not exist"
    is printed.
    
    Signed-off-by: ilovezfs <ilovezfs@icloud.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2760

[33mcommit 5f6d0b6f5aa9af2ee5be74ac415a574b732c2c0f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Sep 10 11:59:03 2014 -0700

    Handle block pointers with a corrupt logical size
    
    The general strategy used by ZFS to verify that blocks are valid is
    to checksum everything.  This has the advantage of being extremely
    robust and generically applicable regardless of the contents of
    the block.  If a blocks checksum is valid then its contents are
    trusted by the higher layers.
    
    This system works exceptionally well as long as bad data is never
    written with a valid checksum.  If this does somehow occur due to
    a software bug or a memory bit-flip on a non-ECC system it may
    result in kernel panic.
    
    One such place where this could occur is if somehow the logical
    size stored in a block pointer exceeds the maximum block size.
    This will result in an attempt to allocate a buffer greater than
    the maximum block size causing a system panic.
    
    To prevent this from happening the arc_read() function has been
    updated to detect this specific case.  If a block pointer with an
    invalid logical size is passed it will treat the block as if it
    contained a checksum error.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2678

[33mcommit bc151f7b312dea09c6ec5b9a320e65140789643a[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Thu Oct 16 13:52:56 2014 -0700

    Remove checks for mandatory locks
    
    The Linux VFS handles mandatory locks generically so we shouldn't
    need to check for conflicting locks in zfs_read(), zfs_write(), or
    zfs_freesp().  Linux 3.18 removed the lock_may_read() and
    lock_may_write() interfaces which we were relying on for this
    purpose.  Rather than emulating those interfaces we remove the
    redundant checks.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2804

[33mcommit 88904bb3e3f4a385108343aee1ac7ee0d83e25dc[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Sat Sep 13 16:02:18 2014 +0200

    Illumos 5162 - zfs recv should use loaned arc buffer to avoid copy
    
    5162 zfs recv should use loaned arc buffer to avoid copy
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Bayard Bell <Bayard.Bell@nexenta.com>
    Reviewed by: Richard Elling <richard.elling@gmail.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
      https://www.illumos.org/issues/5162
      https://github.com/illumos/illumos-gate/commit/8a90470
    
    Porting notes:
      Fix spelling error 's/arena/area/' in dmu.c.
      In restore_write() declare bonus and abuf at the top of the function.
    
    Ported by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2696

[33mcommit 4b20a6f50999366b9ea17180838235c7733e5a53[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Fri Sep 12 05:45:50 2014 +0200

    Illumos 5150 - zfs clone of a defer_destroy snapshot causes strangeness
    
    When a clone is created of a snapshot that has been marked for
    deferred destroy (with "zfs destroy -d"), the clone "inherits" the
    defer_destroy flag from the origin, and any snapshots of the clone
    "inherit" the defer_destroy flag from the clone. This causes a strange
    situation where the clone's snapshots are marked for defer_destroy but
    they have no holds or clones. If the clone's snapshot gets a hold or
    clone, which is then deleted, we will honor the incorrectly-set
    defer_destroy flag and delete the snapshot!
    
    Steps to reproduce:
    
      * zpool create test c1t1d0
      * zfs create test/fs
      * zfs snapshot test/fs@a
      * zfs clone test/fs@a test/clone
      * zfs destroy -d test/fs@a
      * zfs clone test/fs@a test/clone2
      * zfs snapshot test/clone2@a
      * zfs hold hld test/clone2@a
      * zfs release hld test/clone2@a
      * zfs list -r -t all test
    
      <test/clone2@a has been destroyed>
    
    We noticed that this causes dcenter to get very confused, because it
    treats snapshots that are marked defer_destroy as not existing. So it
    won't see any snapshots of the clone that's marked defer_destroy.
    
    5150 - zfs clone of a defer_destroy snapshot causes strangeness
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Max Grossman <max.grossman@delphix.com>
    Reviewed by: Saso Kiselkov <skiselkov.ml@gmail.com>
    Reviewed by: Richard Elling <richard.elling@gmail.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    
    References:
      https://www.illumos.org/projects/illumos-gate//issues/5150
      https://github.com/illumos/illumos-gate/commit/42fcb65
    
    Ported by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2690

[33mcommit 6c59307a3c52535513e1ea3b612dac5a594c5b5d[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Fri Sep 12 05:28:35 2014 +0200

    Illumos 3693 - restore_object uses at least two transactions to restore an object
    
    Restore_object should not use two transactions to restore an object:
      * one transaction is used for dmu_object_claim
      * another transaction is used to set compression, checksum and most
        importantly bonus data
      * furthermore dmu_object_reclaim internally uses multiple transactions
      * dmu_free_long_range frees chunks in separate transactions
      * dnode_reallocate is executed in a distinct transaction
    
    The fact the dnode_allocate/dnode_reallocate are executed in one
    transaction and bonus (re-)population is executed in a different
    transaction may lead to violation of ZFS consistency assertions if the
    transactions are assigned to different transaction groups.  Also, if
    the first transaction group is successfully written to a permanent
    storage, but the second transaction is lost, then an invalid dnode may
    be created on the stable storage.
    
    3693 restore_object uses at least two transactions to restore an object
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Andriy Gapon <andriy.gapon@hybridcluster.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    Original authors: Matthew Ahrens and Andriy Gapon
    
    References:
      https://www.illumos.org/issues/3693
      https://github.com/illumos/illumos-gate/commit/e77d42e
    
    Ported by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2689

[33mcommit 356d9ed4c81dbb1c52627d1af242f4d9f66b67af[m
Author: Tim Chase <tim@chase2k.com>
Date:   Tue Oct 7 08:01:01 2014 -0500

    Don't perform ACL-to-mode translation on empty ACL
    
    In zfs_acl_chown_setattr(), the zfs_mode_comput() function is used to
    create a traditional mode value based on an ACL.  If no ACL exists, this
    processing shouldn't be done.  Problems caused by this were most evident
    on version 4 filesystems which not only don't have system attributes,
    and also frequently have empty ACLs. On such filesystems, performing a
    chown() operation could have the effect of dirtying the mode bits in
    memory but not on the file system as follows:
    
    	# create a file with typical mode of 664
    	echo test > test
    	chown anyuser test
    	ls -l test
    
    and the mode will show up as all zeroes.  Unmounting/mounting and/or
    exporting/importing the filesystem will reveal the proper mode again.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1264

[33mcommit 62bdd5eb7a35288cc25c5ae968bcd0f08889f986[m
Author: Daniil Lunev <d.lunev.mail@gmail.com>
Date:   Sat Oct 18 11:58:11 2014 -0400

    Illumos 4924 - LZ4 Compression for metadata
    
    Reviewed by Matthew Ahrens <mahrens@delphix.com>
    Reviewed by Saso Kiselkov <skiselkov.ml@gmail.com>
    Approved by: Christopher Siden <christopher.siden@delphix.com>
    
    References:
      https://github.com/illumos/illumos-gate/commit/b8289d2
      https://www.illumos.org/issues/3756
    
    Porting notes:
    
    The static function zfs_prop_activate_feature() was removed because
    this change removes the only caller.  The function was not removed
    from Illumos but instead left as dead code.  However, to keep gcc
    happy it was removed from Linux and may be easily restored if needed.
    
    Ported by: DHE <git@dehacked.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1540

[33mcommit ba232d8aead62e2af9c195c2802b89dbc891d5ef[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Oct 8 17:10:45 2014 -0700

    Suppress AIO kmem warnings
    
    The new zpl_aio_write() and zpl_aio_read() functions use kmem_alloc()
    to allocate enough memory to hold the vectorized IO.  While this
    allocation will be small it's been observed in practice to sometimes
    slightly exceed the 8K warning threshold by a few kilobytes.
    Therefore, the KM_NODEBUG flag has been added to suppress warning.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Closes #2774

[33mcommit d94fd5f0def2fbcb720647acac79ae75e2b9fa3b[m
Author: Darik Horn <dajhorn@vanadac.com>
Date:   Sun Oct 12 22:57:49 2014 -0500

    Let `zpool import` ignore a missing hostid record.
    
    Change the zpool program to skip its hostid mismatch check in the
    same way that libzfs already does.
    
    Invoked imports fail if the ZPOOL_CONFIG_HOSTID nvpair is missing in
    the /etc/zfs/zpool.cache file, which can happen as of the /etc/hostid
    deprecation in commit zfsonlinux/spl@acf0ade362cb8b26d67770114ee6fa17816e6b65.
    
    Signed-off-by: Darik Horn <dajhorn@vanadac.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2794

[33mcommit 33074f2254db76f7237e5a29877558ef920ae325[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Oct 10 18:12:47 2014 -0700

    Handle NULL mirror child vdev
    
    When selecting a mirror child it's possible that map allocated by
    vdev_mirror_map_allc() contains a NULL for the child vdev.  In
    this case the child should be skipped and the read issues to
    another member of the mirror.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Closes #1744

[33mcommit f0e324f25d5ada5da5f8930fc1789af6896c72b4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Oct 1 15:02:12 2014 -0400

    Update utsname support
    
    Modify the code to use the utsname() kernel function rather than
    a global variable.  This results is cleaner more portable code
    because utsname() is already provided by the kernel and can be
    easily emulated in user space via uname(2).  This means that it
    will behave consistently in both contexts.
    
    This is also has the benefit that it allows the removal of a few
    _KERNEL pre-processor conditions.  And it also is a pre-requisite
    for a proper FUSE port because we need to provide a valid utsname.
    
    Finally, it allows us to remove this functionality from the SPL
    and all the related compatibility code.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2757

[33mcommit 050d22b06834876c3b0554647108f06a05b3ba96[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Oct 3 13:00:53 2014 -0700

    Remove shrink_dcache_memory() and shrink_icache_memory()
    
    This functionality is optional and until Linux 3.0, which
    provided per-filesystem shinkers, they was never a reasonable
    interface.  Therefore, this functionality is being dropped
    for earlier kernels.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2757

[33mcommit 60bba628149439c4d36c6d75f726f0e3fabdbb4f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Sep 30 19:24:04 2014 -0400

    Update code to use misc_register()/misc_deregister()
    
    When ZPIOS was originally written it was designed to use the
    device_create() and device_destroy() functions.  Unfortunately,
    these functions changed considerably over the years making them
    difficult to rely on.
    
    As it turns out a better choice would have been to use the
    misc_register()/misc_deregister() functions.  This interface
    for registering character devices has remained stable, is simple,
    and provides everything we need.
    
    Therefore the code has been reworked to use this interface.  The
    higher level ZFS code has always depended on these same interfaces
    so this is also as a step towards minimizing our kernel dependencies.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2757

[33mcommit e33045ee98611b30bbe2f174a709f470f9201171[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Oct 3 10:58:47 2014 -0700

    Make license compatibility checks consistent
    
    Apply the license specified in the META file to ensure the
    compatibility checks are all performed consistently.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2757

[33mcommit e82cdc3acc4afe52c3ddc3fe9e4f456fdef80f41[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Fri Oct 10 18:05:54 2014 -0700

    ztest: print backtrace on SIGSEGV and SIGABRT
    
    Add signal handlers to print a backtrace if we crash or assert.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2788

[33mcommit bf2850de82af89b6d56fbbe9ee99bd9f09c628dc[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Oct 13 10:35:01 2014 -0700

    Fix source_tree variable in dkms build
    
    The source_tree variable in the previous commit had an extra $.
    Remove it so that source_tree is expanded properly.  An identical
    fix has been applied in the original patch to the stable branch.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2776

[33mcommit f178adea810bbeff938f279460f26aed9a1993c5[m
Author: Tom Prince <tom.prince@ualberta.net>
Date:   Thu Oct 9 14:24:03 2014 -0300

    Point dkms build at installed source tree, rather than build directory.
    
    Signed-off-by: Tom Prince <tom.prince@clusterhq.com>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2776

[33mcommit fee48fd22c76f30796f524749e5be7b92ed2eda5[m
Author: Tom Prince <tom.prince@ualberta.net>
Date:   Thu Oct 9 14:22:59 2014 -0300

    Install header during post-build rather than post-install.
    
    New versions of dkms clean up the build directory after installing.
    
    It appears that this was always intended, but had rm -rf "/path/to/build/*"
    (note the quotes), which prevented it from working.
    
    Also, the build step is already installing stuff into the directory where
    these files go, so installing our stuff there as part of build rather than
    install makes sense.
    
    Signed-off-by: Tom Prince <tom.prince@clusterhq.com>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2776

[33mcommit 971808ec9f62bc3f8e0347ebace6a19429d4e61d[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Thu Oct 2 16:09:51 2014 +0200

    Add a stern warning about dedup
    
    Users intending to use dedup should be clearly advised about
    its memory requirements and the risks involved.
    
    Thanx to Sachiru for comments and suggestions.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2754

[33mcommit e6659763c6069af794d66997a7f992dcdffa21b0[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Oct 3 16:24:34 2014 -0700

    Improve VERIFY() error in dmu_write()
    
    This is a debug patch designed to ensure an error code is logged
    to the console when this VERIFY() is hit.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Issue #1440

[33mcommit 8878261fc9447592844db5f7eb3df9ed3b088871[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Oct 7 13:20:49 2014 -0700

    Fix CPU_SEQID use in preemptible context
    
    Commit e022864 introduced a regression for kernels which are built
    with CONFIG_DEBUG_PREEMPT.  The use of CPU_SEQID in a preemptible
    context causes zio_nowait() to trigger the BUG.  Since CPU_SEQID
    is simply being used as a random index the usage here is safe. To
    resolve the issue preempt is disable while calling CPU_SEQID.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Closes #2769

[33mcommit a215ee16c06b3adbd00e9e69931ddcb71c2fb680[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Wed Oct 1 16:24:54 2014 +0200

    Add an example for 'zfs bookmark' to the Example section.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2762

[33mcommit e022864d19ee124c88f6fb9018e4b2d2cec76a08[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Sep 17 08:59:43 2014 +0200

    Illumos 5176 - lock contention on godfather zio
    
    5176 lock contention on godfather zio
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Alex Reece <alex.reece@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Richard Elling <richard.elling@gmail.com>
    Reviewed by: Bayard Bell <Bayard.Bell@nexenta.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
      https://www.illumos.org/issues/5176
      https://github.com/illumos/illumos-gate/commit/6f834bc
    
    Porting notes:
    
    Under Linux max_ncpus is defined as num_possible_cpus().  This is
    largest number of cpu ids which might be available during the life
    time of the system boot.  This value can be larger than the number
    of present cpus if CONFIG_HOTPLUG_CPU is defined.
    
    Ported by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2711

[33mcommit 07a3312f170ac56cb480b0df9fdf4c83f116b59b[m
Author: Lukas Wunner <lukas@wunner.de>
Date:   Mon Oct 6 13:08:33 2014 +0200

    Amend Dracut module to export ZFS root on shutdown
    
    Make use of Dracut's ability to restore the initramfs on shutdown and
    pivot to it, allowing for a clean unmount and export of the ZFS root.
    No need to force-import on every reboot anymore.
    
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2195
    Issue #2476
    Issue #2498
    Issue #2556
    Issue #2563
    Issue #2575
    Issue #2600
    Issue #2755
    Issue #2766

[33mcommit 8ac9b5e6b5b59ad3bf7a65f9de3c8ed46ba4240e[m
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Wed Oct 1 14:56:52 2014 -0700

    Cleanup struct zed_conf vars in zed_conf_destroy
    
    Reset struct zed_conf file descriptors to -1 after close(),
    and pointers to NULL after free().
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2756

[33mcommit 56697c42646f002c4f52f9569a8cb75b45f704d8[m
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Wed Oct 1 14:56:07 2014 -0700

    Obtain advisory lock on ZED PID file
    
    ZED uses an advisory lock on its state file to protect against
    multiple instances running concurrently.  However, work is planned
    to move this state information into the kernel, and ZED will still
    need to protect against starting multiple instances.
    
    This commit adds an advisory lock on the PID file to protect against
    starting multiple instances.  A lock failure can be overridden with
    the "-f" (force) command-line option.  The advisory lock on the state
    file is being retained for as long as the state information is stored
    in the state file.
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2756

[33mcommit 057485504e3a4502c265813ab58e9ec8ffc2a3be[m
Author: Andriy Gapon <avg@icyb.net.ua>
Date:   Thu May 15 11:42:19 2014 +0300

    zfs send -p send properties only for snapshots that are actually sent
    
    ... as opposed to sending properties of all snapshots of the relevant
    filesystem.  The previous behavior results in properties being set on
    all snapshots on the receiving side, which is quite slow.
    
    Behavior of zfs send -R is not changed.
    
    References:
      http://thread.gmane.org/gmane.comp.file-systems.openzfs.devel/346
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2729
    Issue #2210

[33mcommit 7509a3d29963882a0c7fa9e703085c3a6a2ced65[m
Author: smh <smh@FreeBSD.org>
Date:   Thu Dec 13 22:03:07 2012 +0000

    FreeBSD PR kern/172259: Fixes zfs receive errors
    
    FreeBSD PR kern/172259: Fixes zfs receive errors caused by snapshot
    replication being processed in a random order instead of creation
    order.
    
    Eliminates needless filesystem renames caused by removed parent
    snapshots which subsequently causes many more errors.
    
    PR:		kern/172259
    Submitted by:	Steven Hartland
    Reviewed by:	pjd (mentor)
    Approved by:	pjd (mentor)
    MFC after:	2 weeks
    
    References:
      https://github.com/freebsd/freebsd/commit/4995789
    
    Porting notes:
    
    Minor whitespace fixes were made to conform with style requirements:
    
    lib/libzfs/libzfs_sendrecv.c: 2269: indent by spaces instead of tabs
    lib/libzfs/libzfs_sendrecv.c: 2270: indent by spaces instead of tabs
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2729

[33mcommit 83e9986f6eefdf0afc387f06407087bba3ead4e9[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Fri Jun 20 19:00:11 2014 -0400

    Implement -t option to zpool create for temporary pool names
    
    Creating virtual machines that have their rootfs on ZFS on hosts that
    have their rootfs on ZFS causes SPA namespace collisions when the
    standard name rpool is used. The solution is either to give each guest
    pool a name unique to the host, which is not always desireable, or boot
    a VM environment containing an ISO image to install it, which is
    cumbersome.
    
    26b42f3f9d03f85cc7966dc2fe4dfe9216601b0e introduced `zpool import -t
    ...` to simplify situations where a host must access a guest's pool when
    there is a SPA namespace conflict. We build upon that to introduce
    `zpool import -t tname ...`. That allows us to create a pool whose
    in-core name is tname, but whose on-disk name is the normal name
    specified.
    
    This simplifies the creation of machine images that use a rootfs on ZFS.
    That benefits not only real world deployments, but also ZFSOnLinux
    development by decreasing the time needed to perform rootfs on ZFS
    experiments.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2417

[33mcommit 00d2a8c92f614f49d23dea5d73f7ea7eb489ccf1[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Mon Jun 23 14:26:47 2014 -0400

    zpool import -t should not update cachefile
    
    zpool import's -t parameter is intended for use with -R when operating
    on pools that belong to other systems. Like -R, pools imported in this
    way should not update the cachefile unless explicitly requested. The
    initial implementation allowed the cachefile to be updated when -R was
    not used. This went uncaught during testing because -R had implicitly
    disabled use of the cachefile.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2417

[33mcommit 2f3ec9006146844af6763d1fa4e823fd9047fd54[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Mon Jun 23 14:12:53 2014 -0400

    Add add_prop_list_default helper
    
    Adding to a property list only if there is no existing value is used
    twice. Once by zpool create -R and again by zpool import -R. Now that
    zpool create -t and zpool import -t also need it, lets refactor it into
    a helper function to make the code more readable.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2417

[33mcommit aa0ac7caa438bf3981456c559d4224be104ccc7d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Sep 25 15:15:45 2014 -0700

    Make user stack limit configurable
    
    To aid in detecting and debugging stack overflow issues make the
    user space stack limit configurable via a new ZFS_STACK_SIZE
    environment variable.  The value assigned to ZFS_STACK_SIZE will
    be used as the default stack size in bytes.
    
    Because this is mainly useful as a debugging aid in conjunction
    with ztest the stack limit is disabled by default.  See the ztest(1)
    man page for additional details on using the ZFS_STACK_SIZE
    environment variable.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Closes #2743
    Issue #2293

[33mcommit cb08f063074a5363810a39775fd90a4d214c5d87[m
Author: Tim Chase <tim@chase2k.com>
Date:   Thu Sep 25 23:40:41 2014 -0500

    Perform whole-page page truncation for hole-punching under a range lock
    
    As an attempt to perform the page truncation more optimally, the
    hole-punching support added in 223df0161fad50f53a8fa5ffeea8cc4f8137d522
    truncated performed the operation in two steps: first, sub-page "stubs"
    were zeroed under the range lock in zfs_free_range() using the new
    zfs_zero_partial_page() function and then the whole pages were truncated
    within zfs_freesp().  This left a window of opportunity during which
    the full pages could be touched.
    
    This patch closes the window by moving the whole-page truncation into
    zfs_free_range() under the range lock.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2733

[33mcommit dcca723acee9803561dd7ef456a28c4684c28e86[m
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Fri Sep 19 11:10:28 2014 -0700

    Refer to ZED's scripts as ZEDLETs
    
    The executables invoked by the ZED in response to a given zevent
    have been generically referred to as "scripts".  By convention,
    these scripts have aimed to be /bin/sh compatible for reasons of
    portability and comprehensibility.  However, the ZED only requires
    they be executable and (ideally) capable of reading environment
    variables.  As such, these scripts are now referred to as ZEDLETs
    (ZFS Event Daemon Linkage for Executable Tasks).
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2735

[33mcommit 8cb8cf91df8a4902025d814b62b9332ad1b291c7[m
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Mon Sep 22 13:22:48 2014 -0700

    Replace zed's use of malloc with calloc
    
    When zed allocates memory via malloc(), it typically follows that
    with a memset().  However, calloc() implementations can often perform
    optimizations when zeroing memory:
    
    https://stackoverflow.com/questions/2688466/why-mallocmemset-is-slower-than-calloc
    
    This commit replaces zed's use of malloc() with calloc().
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2736

[33mcommit bee6665b88fca3b5e70e8b3c8f6281975721c7be[m
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Thu Sep 11 15:41:35 2014 -0700

    Fix zed io-spare.sh dash incompatibility
    
    The zed's io-spare.sh script defines a vdev_status() function to query
    the 'zpool status' output for obtaining the status of a specified vdev.
    This function contains a small awk script that uses a parameter
    expansion (${parameter/pattern/string}) supported in bash but not
    in dash.  Under dash, this fails with a "Bad substitution" error.
    
    This commit replaces the awk script with a (hopefully more portable)
    sed script that has been tested under both bash and dash.
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2536

[33mcommit 36283ca23346061cb653dc7b6bd583d1cf772808[m
Author: Max Grossman <max.grossman@delphix.com>
Date:   Sun Sep 7 17:06:08 2014 +0200

    Illumos 5138 - add tunable for maximum number of blocks freed in one txg
    
    Reviewed by: Adam Leventhal <adam.leventhal@delphix.com>
    Reviewed by: Mattew Ahrens <mahrens@delphix.com>
    Reviewed by: Josef 'Jeff' Sipek <jeffpc@josefsipek.net>
    Reviewed by: Richard Elling <richard.elling@gmail.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5138
      https://github.com/illumos/illumos-gate/commit/af3465d
    
    Porting notes:
    
    Because support for exposing a uint64_t parameter wasn't added
    until v3.17-rc1 the zfs_free_max_blocks variable has been declared
    as a unsigned long.  This is already far larger than required and
    it allows us to avoid additional autoconf compatibility code.
    
    The default value has been set to 100,000 on Linux instead of
    ULONG_MAX which is used on Illumos.  This was done to limit the
    number of outstanding IOs in the system when snapshots are destroyed.
    This helps ensure individual TXG sync times are kept reasonable and
    memory isn't wasted managing a huge backlog of outstanding IOs.
    
    Ported by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2675
    Closes #2581

[33mcommit acbad6ff6768b0ccfb3c319e981ec211dcecc277[m
Author: Alex Reece <alex@delphix.com>
Date:   Fri Jul 18 07:08:31 2014 -0800

    Illumos 4753 - increase number of outstanding async writes when sync task is waiting
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
        https://www.illumos.org/issues/4753
        https://github.com/illumos/illumos-gate/commit/73527f4
    
    Comments by Matt Ahrens from the issue tracker:
        When a sync task is waiting for a txg to complete, we should hurry
        it along by increasing the number of outstanding async writes
        (i.e. make vdev_queue_max_async_writes() return a larger number).
        Initially we might just have a tunable for "minimum async writes
        while a synctask is waiting" and set it to 3.
    
    Ported-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2716

[33mcommit 1f6f97f3049706aa7ca95636fd587ae5f3d531a9[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Sep 17 17:41:51 2014 +0200

    Illumos 5116 - zpool history -i goes into infinite loop
    
    5116 zpool history -i goes into infinite loop
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Richard Elling <richard.elling@gmail.com>
    Reviewed by: Boris Protopopov <boris.protopopov@me.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5116
      https://github.com/illumos/illumos-gate/commit/3339867
    
    Ported by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2715

[33mcommit ab2894e66f40785b7d56d54f71158d6bf5b31b9a[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Fri Sep 12 18:26:53 2014 +0200

    Illumos 5135 - zpool_find_import_cached() can use fnvlist_*
    
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Max Grossman <max.grossman@delphix.com>
    Reviewed by: Richard Elling <richard.elling@gmail.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5135
      https://github.com/illumos/illumos-gate/commit/b18d6b0
    
    Ported by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2693

[33mcommit d97aa48f7c53e851675ad5d250daecee1bac81c1[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Sep 17 17:25:10 2014 +0200

    Illumos 5139 - SEEK_HOLE failed to report a hole at end of file
    
    5139 SEEK_HOLE failed to report a hole at end of file
    Reviewed by: Adam Leventhal <adam.leventhal@delphix.com>
    Reviewed by: Alex Reece <alex.reece@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Max Grossman <max.grossman@delphix.com>
    Reviewed by: Peng Dai <peng.dai@delphix.com>
    Reviewed by: Richard Elling <richard.elling@gmail.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5139
      https://github.com/illumos/illumos-gate/commit/0fbc0cd
    
    Ported by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2714

[33mcommit 843b4aad504b791eb1e8dfe6772a55d4da090b65[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Tue Apr 29 20:47:47 2014 -0400

    lib/libzpool/kernel.c: Assert no owners in rw_destroy()
    
    This is intended to cause ztest to fail when rw_destroy() is called on a
    rwlock that has owners.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2330

[33mcommit 485c581c41c4da15a17f045605ce5a7562b3b8a2[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Tue Apr 22 23:18:17 2014 -0400

    Fix function call with uninitialized value in vdev_inuse
    
    LLVM's static analyzer reported that we could pass an uninitialized
    pool_guid to spa_by_guid() in vdev_inuse(). Upon review, it is correct.
    An attempt to repurpose a spare or L2ARC drive from an exported pool
    will cause the pool_guid passed to spa_by_guid() to be unintialized
    information from the stack. This will cause non-deterministic behavior.
    Since there is no reason why we cannot repurpose such disks, we modify
    vdev_inuse() to avoid calling spa_by_guid() when they are detected.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2330

[33mcommit 928ee9fe184572a50e686b0c5173edb1b538c627[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Tue Apr 22 20:25:39 2014 -0400

    Properly NULL terminate string in zfs_strcmp_pathname
    
    The utility cppcheck caught this.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2330

[33mcommit a05dfd0028fa0c49dec3ceea48995b4d6fe274ca[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Fri Sep 12 05:07:20 2014 +0200

    Illumos 5147 - zpool list -v should show individual disk capacity
    
    The 'zpool list -v' command displays lots of info but excludes the
    capacity of each disk. This should be added.
    
    5147 zpool list -v should show individual disk capacity
    Reviewed by: Adam Leventhal <adam.leventhal@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Matthew Ahrens <matthew.ahrens@delphix.com>
    Reviewed by: Richard Elling <richard.elling@gmail.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/5147
      https://github.com/illumos/illumos-gate/commit/7a09f97
    
    Ported by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2688

[33mcommit b8bcca18f709abd3d1b7649ebdcb4aeab1e2eb61[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Sat Sep 13 16:13:00 2014 +0200

    Illumos 5161 - add tunable for number of metaslabs per vdev
    
    5161 add tunable for number of metaslabs per vdev
    Reviewed by: Alex Reece <alex.reece@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Paul Dagnelie <paul.dagnelie@delphix.com>
    Reviewed by: Saso Kiselkov <skiselkov.ml@gmail.com>
    Reviewed by: Richard Elling <richard.elling@gmail.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/5161
      https://github.com/illumos/illumos-gate/commit/bf3e216
    
    Ported by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2698

[33mcommit ebcf49365a05fc064bfe6534c2997f3ad6c339e3[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Sep 17 09:07:28 2014 +0200

    Illumos 5177 - remove dead code from dsl_scan.c
    
    5177 remove dead code from dsl_scan.c
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Richard Elling <richard.elling@gmail.com>
    Reviewed by: Richard Lowe <richlowe@richlowe.net>
    Approved by: Robert Mustacchi <rm@joyent.com>
    
    References:
      https://www.illumos.org/issues/5177
      https://github.com/illumos/illumos-gate/commit/5f37736
    
    Porting notes:
    
    The local variable 'buf' was removed from dsl_scan_visitbp().
    This wasn't part of the original patch but it should have been.
    
    Ported by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2712

[33mcommit 64dbba36794422aaed5177203edd0dd7aee77de7[m
Author: Adam Leventhal <adam.leventhal@delphix.com>
Date:   Wed Sep 17 08:53:02 2014 +0200

    Illumos 5174 - add sdt probe for blocked read in dbuf_read()
    
    5174 add sdt probe for blocked read in dbuf_read()
    Reviewed by: Basil Crow <basil.crow@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Steven Hartland <killing@multiplay.co.uk>
    Reviewed by: Richard Elling <richard.elling@gmail.com>
    Reviewed by: Boris Protopopov <bprotopopov@hotmail.com>
    Reviewed by: Steven Hartland <killing@multiplay.co.uk>
    Reviewed by: Garrett D'Amore <garrett@damore.org>
    Approved by: Robert Mustacchi <rm@joyent.com>
    
    References:
      https://www.illumos.org/issues/5174
      https://github.com/illumos/illumos-gate/commit/f6164ad
    
    Ported by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2710

[33mcommit cfd3549a532d3f3551ac2bfd7badbfe2617b0e1f[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Fri Sep 19 11:42:13 2014 -0700

    Remove obsolete comment about guard pages
    
    Remove an obsolete comment that refers to code removed by commit
    79c6e4c4. The code and comment related to space consumed by guard
    pages in user-space stacks, which we no longer take into account.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2722

[33mcommit 5043deaa4077fc4bf748469fc8e89a422c7a5aef[m
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Wed Sep 10 14:22:39 2014 -0700

    Remove reverse indentation from zed comments.
    
    Remove all occurrences of reverse indentation from zed comments for
    consistency within the project code base.
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2695

[33mcommit 6d9036f35049f0917748c89114bac58a5029e989[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Sun Sep 7 17:37:25 2014 +0200

    Illumos 5140 - message about "%recv could not be opened" is printed when booting after crash
    
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Max Grossman <max.grossman@delphix.com>
    Reviewed by: Richard Elling <richard.elling@gmail.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/projects/illumos-gate//issues/5140
      https://github.com/illumos/illumos-gate/commit/2243853
    
    Ported by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2676

[33mcommit 71bd0645554d8bd94bdadaf270ab67f629ad9fa0[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Fri Sep 12 15:44:04 2014 +0200

    Document environment variables for zdb, zfs, zinject and zpool.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2691

[33mcommit 2d501583430e54be39c6aed033fc6f841e469f23[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Sep 8 18:31:27 2014 -0700

    Fix z_teardown_inactive_lock deadlock
    
    When rolling back a mounted filesystem zfs_suspend() is called
    which acquires the z_teardown_inactive_lock.  This lock can not
    be dropped until the filesystem has been rolled back and resumed
    in zfs_resume_fs().
    
    Therefore, we must not call iput() under this lock because it
    may result in the inode->evict() handler being called which also
    takes this lock.  Instead use zfs_iput_async() to ensure dropping
    the last reference is deferred and runs in a safe context.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2670

[33mcommit 52dd454d05a14813ed74e93dfca6ac2994333c4d[m
Author: Tim Chase <tim@chase2k.com>
Date:   Tue Sep 9 07:23:29 2014 -0500

    Document the "readonly" pool property
    
    This documentation is based FreeBSD's zpool(8) man page.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2682

[33mcommit 223df0161fad50f53a8fa5ffeea8cc4f8137d522[m
Author: Tim Chase <tim@chase2k.com>
Date:   Wed Aug 20 17:35:13 2014 -0500

    Implement fallocate FALLOC_FL_PUNCH_HOLE
    
    Add support for the FALLOC_FL_PUNCH_HOLE | FALLOC_FL_KEEP_SIZE mode of
    fallocate(2).  Mimic the behavior of other native file systems such as
    ext4 in cases where the file might be extended. If the offset is beyond
    the end of the file, return success without changing the file. If the
    extent of the punched hole would extend the file, only the existing tail
    of the file is punched.
    
    Add the zfs_zero_partial_page() function, modeled after update_page(),
    to handle zeroing partial pages in a hole-punching operation.  It must
    be used under a range lock for the requested region in order that the
    ARC and page cache stay in sync.
    
    Move the existing page cache truncation via truncate_setsize() into
    zfs_freesp() for better source structure compatibility with upstream code.
    
    Add page cache truncation to zfs_freesp() and zfs_free_range() to handle
    hole punching.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Closes #2619

[33mcommit 4f68d7878fbed9e225022a1d435cfb7177234110[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Fri Sep 5 02:50:36 2014 +0200

    Illumos 5117 - spacemap reallocation can cause corruption
    
    5117 space map reallocation can cause corruption
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Sebastien Roy <sebastien.roy@delphix.com>
    Reviewed by: Richard Elling <richard.elling@gmail.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/projects/illumos-gate/issues/5117
      https://github.com/illumos/illumos-gate/commit/e503a68
    
    Ported by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2662

[33mcommit ceb49b0acd21ed44aa8e4d1464447eef071d3bab[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Aug 29 12:24:26 2014 -0700

    Add object type checking to zap_lockdir()
    
    If a non-ZAP object is passed to zap_lockdir() it will be treated
    as a valid ZAP object.  This can result in zap_lockdir() attempting
    to read what it believes are leaf blocks from invalid disk locations.
    The SCSI layer will eventually generate errors for these bogus IOs
    but the caller will hang in zap_get_leaf_byblk().
    
    The good news is that is a situation which can not occur unless the
    pool has been damaged.  The bad news is that there are reports from
    both FreeBSD and Solaris of damaged pools.  Specifically, there are
    normal files in the filesystem which reference another normal file
    as their parent.
    
    Since pools like this are known to exist the zap_lockdir() function
    has been updated to verify the type of the object.  If a non-ZAP
    object has been passed it EINVAL will be returned immediately.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2597
    Issue #2602

[33mcommit cd3939c5f06945a3883a362379d0c12e57f31a4d[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Mon Aug 4 07:09:32 2014 -0400

    Linux AIO Support
    
    nfsd uses do_readv_writev() to implement fops->read and fops->write.
    do_readv_writev() will attempt to read/write using fops->aio_read and
    fops->aio_write, but it will fallback to fops->read and fops->write when
    AIO is not available. However, the fallback will perform a call for each
    individual data page. Since our default recordsize is 128KB, sequential
    operations on NFS will generate 32 DMU transactions where only 1
    transaction was needed. That was unnecessary overhead and we implement
    fops->aio_read and fops->aio_write to eliminate it.
    
    ZFS originated in OpenSolaris, where the AIO API is entirely implemented
    in userland's libc by intelligently mapping them to VOP_WRITE, VOP_READ
    and VOP_FSYNC.  Linux implements AIO inside the kernel itself. Linux
    filesystems therefore must implement their own AIO logic and nearly all
    of them implement fops->aio_write synchronously. Consequently, they do
    not implement aio_fsync(). However, since the ZPL works by mapping
    Linux's VFS calls to the functions implementing Illumos' VFS operations,
    we instead implement AIO in the kernel by mapping the operations to the
    VOP_READ, VOP_WRITE and VOP_FSYNC equivalents. We therefore implement
    fops->aio_fsync.
    
    One might be inclined to make our fops->aio_write implementation
    synchronous to make software that expects this behavior safe. However,
    there are several reasons not to do this:
    
    1. Other platforms do not implement aio_write() synchronously and since
    the majority of userland software using AIO should be cross platform,
    expectations of synchronous behavior should not be a problem.
    
    2. We would hurt the performance of programs that use POSIX interfaces
    properly while simultaneously encouraging the creation of more
    non-compliant software.
    
    3. The broader community concluded that userland software should be
    patched to properly use POSIX interfaces instead of implementing hacks
    in filesystems to cater to broken software. This concept is best
    described as the O_PONIES debate.
    
    4. Making an asynchronous write synchronous is non sequitur.
    
    Any software dependent on synchronous aio_write behavior will suffer
    data loss on ZFSOnLinux in a kernel panic / system failure of at most
    zfs_txg_timeout seconds, which by default is 5 seconds. This seems like
    a reasonable consequence of using non-compliant software.
    
    It should be noted that this is also a problem in the kernel itself
    where nfsd does not pass O_SYNC on files opened with it and instead
    relies on a open()/write()/close() to enforce synchronous behavior when
    the flush is only guarenteed on last close.
    
    Exporting any filesystem that does not implement AIO via NFS risks data
    loss in the event of a kernel panic / system failure when something else
    is also accessing the file. Exporting any file system that implements
    AIO the way this patch does bears similar risk. However, it seems
    reasonable to forgo crippling our AIO implementation in favor of
    developing patches to fix this problem in Linux's nfsd for the reasons
    stated earlier. In the interim, the risk will remain. Failing to
    implement AIO will not change the problem that nfsd created, so there is
    no reason for nfsd's mistake to block our implementation of AIO.
    
    It also should be noted that `aio_cancel()` will always return
    `AIO_NOTCANCELED` under this implementation. It is possible to implement
    aio_cancel by deferring work to taskqs and use `kiocb_set_cancel_fn()`
    to set a callback function for cancelling work sent to taskqs, but the
    simpler approach is allowed by the specification:
    
    ```
    Which operations are cancelable is implementation-defined.
    ```
    
    http://pubs.opengroup.org/onlinepubs/009695399/functions/aio_cancel.html
    
    The only programs on my system that are capable of using `aio_cancel()`
    are QEMU, beecrypt and fio use it according to a recursive grep of my
    system's `/usr/src/debug`. That suggests that `aio_cancel()` users are
    rare. Implementing aio_cancel() is left to a future date when it is
    clear that there are consumers that benefit from its implementation to
    justify the work.
    
    Lastly, it is important to know that handling of the iovec updates differs
    between Illumos and Linux in the implementation of read/write. On Linux,
    it is the VFS' responsibility whle on Illumos, it is the filesystem's
    responsibility.  We take the intermediate solution of copying the iovec
    so that the ZFS code can update it like on Solaris while leaving the
    originals alone. This imposes some overhead. We could always revisit
    this should profiling show that the allocations are a problem.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #223
    Closes #2373

[33mcommit 1ca56e603395b2d84c8043d5ff18f2082f57e6f1[m
Author: ilovezfs <ilovezfs@icloud.com>
Date:   Thu Sep 4 23:06:55 2014 -0700

    Fragmentation should display as '-' if spacemap_histogram=disabled
    
    When com.delphix:spacemap_histogram is disabled, the value of
    fragmentation was printing as 18446744073709551615 (UINT64_MAX),
    when it should print as '-'.
    
    The issue was caused by a small mistake during the merge of
    "4980 metaslabs should have a fragmentation metric."
    
    upstream: https://github.com/illumos/illumos-gate/commit/2e4c998
    ZoL: https://github.com/zfsonlinux/zfs/commit/f3a7f66
    
    The problem is in zpool_get_prop_literal, where the handling of the
    pool property ZPOOL_PROP_FRAGMENTATION was added to wrong the
    section. In particular, ZPOOL_PROP_FRAGMENTATION should not be in
    the section where zpool_get_state(zhp) == POOL_STATE_UNAVAIL, but
    lower down after it's already been determined that the pool is in
    fact available, which is where upstream illumos correctly has had
    it.
    
    Thanks to lundman for helping to track down this bug.
    
    Signed-off-by: Jorgen Lundman <lundman@lundman.net>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2664

[33mcommit f38dfec3fd3757fd02d8c7bb46fecdfc427678ce[m
Author: Alex Reece <alex@delphix.com>
Date:   Thu Sep 4 16:08:28 2014 -0700

    Illumos 5049 - panic when removing log device
    
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Mattew Ahrens <mahrens@delphix.com>
    Reviewed by: Paul Dagnelie <paul.dagnelie@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Saso Kiselkov <skiselkov@gmail.com>
    Approved by: Rich Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/5049
      https://github.com/illumos/illumos-gate/commit/2986efa
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2636

[33mcommit 2078f21015b1f33329849997c9f918e5196806bd[m
Author: Stanislav Seletskiy <s.seletskiy@gmail.com>
Date:   Wed Sep 3 16:41:10 2014 +0700

    Fix invalid locking order in rename operation
    
    This commit should prevent a deadlock on dp_config_rwlock when
    running `zfs rename` by ensuring zvol_rename_minors() is not
    called under this lock.
    
    Signed-off-by: Stanislav Seletskiy <s.seletskiy@gmail.com>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2652.
    Closes #2525.

[33mcommit 4f6a14798d43e20e50dac015e332328ec3eae36f[m
Author: alteriks <alteriks@gmail.com>
Date:   Sat Jul 26 18:45:15 2014 +0200

    Import zfs pools after cryptsetup
    
    The zfs-import-cache.service and zfs-import-scan.service should
    should be started after cryptsetup to ensure all LUKS devices have
    been opened.
    
    Signed-off-by: alteriks <alteriks@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1474

[33mcommit 0dfc732416922e1dd59028fa900d38d04dceaa12[m
Author: Alexey Smirnoff <fling@member.fsf.org>
Date:   Sat Aug 30 09:13:26 2014 +0700

    Change the default 'zfs_dedup_prefetch' value to '0'
    
    This gives a huge performance improvement in operations with deduped
    datasets especially when the bottleneck is the amount of ram
    available for zfs.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2639

[33mcommit 287be44f536e27d377518badd2bd8e2758db2be6[m
Author: Dan Swartzendruber <dswartz@druber.com>
Date:   Fri Aug 29 15:12:21 2014 -0400

    Improve handling of filesystem versions
    
    Change mount code to diagnose filesystem versions that
    are not supported by the current implementation.
    
    Change upgrade code to do likewise and refuse to upgrade
    a pool if any filesystems on it are a version which is
    not supported by the current implementation.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Dan Swartzendruber <dswartz@druber.com>
    Closes: #2616

[33mcommit bcd9624d0f941bebf732f61bcb7bdbd223b0d396[m
Author: louwrentius <louwrentius@gmail.com>
Date:   Sat Aug 30 00:14:20 2014 +0200

    Change delimiter for ZED email scripts
    
    When the ZED_EMAIL_INTERVAL_SECS="3600" option is set in zed.rc
    configuration file then notification emails should be rate limited.
    
    Rate limiting is accomplished by maintaining a colon delimited state
    file which includes the device name.  Unfortunately there are valid
    device names which include a colon and therefore prevent the rate
    limiting for working properly.  For this reason the delimiter has
    been changed to a semi-colon.
    
    Signed-off-by: louwrentius <louwrentius@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Closes #2645

[33mcommit 76c3a616420c2b16c117adf8c845cc1e0d262301[m
Author: Ralf Ertzinger <ralf@skytale.net>
Date:   Sat Apr 12 13:51:29 2014 +0200

    Change startup mode of ZED
    
    Change the startup mode of ZED to non-forking. While systemd can
    track processes that detach from the terminal just fine, running
    processes in non-forking mode is the preferred mode of operation.
    
    Also remove user/group definitions as root/root is the default.
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2252

[33mcommit 8125fb71905cd97a5954db34014a455eb2c1c3d2[m
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Thu Aug 28 14:39:48 2014 -0700

    Cleanup zed logging
    
    This is a set of minor cleanup changes related to zed logging:
    - Remove the program identity prefix from messages written to stderr
      since systemd already prepends this output with the program name.
    - Replace the copy of the program identity string with a ptr reference.
    - Replace "pid" with "PID" for consistency in comments & strings.
    - Rename the zed_log.c struct _ctx component "level" to "priority".
    - Add the LOG_PID option for messages written to syslog.
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2252

[33mcommit 5a8855b716ad9177ed393769834ce9e08d2a3cfe[m
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Wed Aug 27 13:18:01 2014 -0700

    Fix race condition with zed pidfile creation
    
    When the zed is started as a forking daemon (by default),
    a race-condition exists where the parent process can terminate before
    the pidfile has been created by the grandchild process.  When invoked
    as a Type=forking systemd service, this can result in the following:
    
      systemd[1]: Starting ZFS Event Daemon (zed)...
      systemd[1]: PID file /var/run/zed.pid not readable (yet?) after start.
    
    This commit adds a daemonize pipe to allow the grandchild process to
    signal the parent process that initialization is complete (and the
    pidfile has been created).  The parent process will wait for this
    notification before exiting.
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2252

[33mcommit 6c3c3387b1cc81bb428a934a8a97c3c583fb1280[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Sep 2 14:16:37 2014 -0700

    Add a missing > to AUTHORS
    
    An email address in the AUTHORS file was missing its trailing >.
    This patch fixes that typo.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit c3f8dc2a48e0c310abb7b58019fbcf944fa2697c[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Sat Jun 7 01:23:22 2014 +0200

    Add a pkgconfig file
    
    Providing a pkg-config file makes is easy for 3rd party applications
    to link against the libzfs libraries.  It also allows the libzfs
    developers to modify the list of required libraries and cflags
    without breaking existing applications.
    
    The following example illustrates how pkg-config can be used:
    
    cc `pkg-config --cflags --libs libzfs` -o myapp myapp.c
    
    /*
     * myapp.c
     */
    void main()
    {
    	libzfs_handle_t *hdl;
    
    	hdl = libzfs_init();
    	if (hdl)
    		libzfs_fini(hdl);
    }
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes: #585

[33mcommit 9ad656b2d025a23ba27a4bc482638e753e62d947[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Aug 27 14:12:18 2014 -0700

    Retire HAVE_IOCTL_* configure checks
    
    The HAVE_IOCTL_* configure checks were originally added for
    compatibility with an ancient version of glibc.  This support
    and additional complexity is no longer needed and is therefore
    being removed.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Closes #585

[33mcommit dea377c0d9d92bd7d10c0e2f006efa11ab28060a[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Tue Jul 15 10:58:41 2014 -0800

    Illumos 4970-4974 - extreme rewind enhancements
    
    4970 need controls on i/o issued by zpool import -XF
    4971 zpool import -T should accept hex values
    4972 zpool import -T implies extreme rewind, and thus a scrub
    4973 spa_load_retry retries the same txg
    4974 spa_load_verify() reads all data twice
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    
    References:
      https://www.illumos.org/issues/4970
      https://www.illumos.org/issues/4971
      https://www.illumos.org/issues/4972
      https://www.illumos.org/issues/4973
      https://www.illumos.org/issues/4974
      https://github.com/illumos/illumos-gate/commit/e42d205
    
    Notes:
        This set of patches adds a set of tunable parameters for the
        "extreme rewind" mode of pool import which allows control over
        the traversal performed during such an import.
    
    Ported by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2598

[33mcommit 49ddb315066e372f31bda29a5c546a9eccc8b418[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Aug 20 10:09:40 2014 -0700

    Illumos 5034 - ARC's buf_hash_table is too small
    
    5034 ARC's buf_hash_table is too small
    
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Saso Kiselkov <skiselkov.ml@gmail.com>
    Reviewed by: Richard Elling <richard.elling@gmail.com>
    Approved by: Gordon Ross <gwr@nexenta.com>
    
    References:
      https://www.illumos.org/issues/5034
      https://github.com/illumos/illumos-gate/commit/63e911b
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2615

[33mcommit d09a99f96b4399cb0e2611b4b57c9e64d6097e19[m
Author: Andrew Hamilton <ahamilto@tjhsst.edu>
Date:   Wed Aug 13 10:58:08 2014 -0400

    2493 change efi_rescan() to wait longer
    
    Change efi_rescan() to loop 10 times instead of 5 on EBUSY and
    to sleep at the end of each loop. This helps with some instances
    where the kernel does not reload the partition table fast enough
    for ZFS to detect.
    
    Signed-off-by: Andrew Hamilton <ahamilto@tjhsst.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2493

[33mcommit 0426c16804e572f088dd293029ab39fa75e1e203[m
Author: Isaac Huang <he.huang@intel.com>
Date:   Mon Mar 3 20:00:11 2014 -0700

    Fixed memory leaks in zevent handling
    
    Some nvlist_t could be leaked in error handling paths.
    Also make sure cb argument to zfs_zevent_post() cannnot
    be NULL.
    
    Signed-off-by: Isaac Huang <he.huang@intel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2158

[33mcommit bd089c547784a4ab23fa20f307e8b23b0a622525[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Tue Jul 15 03:43:18 2014 -0400

    Illumos 4631 - zvol_get_stats triggering too many reads
    
    4631 zvol_get_stats triggering too many reads
    
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Sebastien Roy <sebastien.roy@delphix.com>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/4631
      https://github.com/illumos/illumos-gate/commit/bbfa8ea
    
    Ported-by: Boris Protopopov <bprotopopov@hotmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2612
    Closes #2480

[33mcommit 2fe5011008641d34d34ca9aabd27e2cfbf207e03[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Thu Aug 14 14:59:12 2014 -0400

    Drive database update
    
    The Intel DC S3500 and Intel DC S3700 are optimized to handle 4KB
    sectors well despite of their 8KB page sizes, so we move them to a new
    category for enterprise drives where they will receive ashift=12. They
    are joined by the Intel 730 series, which uses the same disk controller,
    as well as a San Disk enterprise drive. The drive IDs for these two were
    obtained by myself with the drive_id utility. The drive ID for the 240GB
    Intel 730 model was extrapolated from the drive ID for the 480GB model.
    
    Lastly, we also add some Western Digital mobile drives.  ryuo in
    \#zfsonlinux on freenode obtained "ATA     WDC WD2500BEVT-0" from
    running drive_id on his own hardware. The additional drives in that
    family were extrapolated from that identifer.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2601

[33mcommit 8b0a0840b405c67d7a2d4a78c9ebeb04fcb9d988[m
Author: Tim Chase <tim@chase2k.com>
Date:   Thu Aug 14 07:01:20 2014 -0500

    Don't upgrade a metaslab when the pool is not writable
    
    Illumos 4982 added code to metaslab_fragmentation() to proactively update
    space maps when the spacemap_histogram feature is enabled.  This should
    only happen when the pool is writeable.
    
    References:
      https://www.illumos.org/issues/4982
      https://github.com/illumos/illumos-gate/commit/2e4c998
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2595

[33mcommit f3a7f6610f2df0217ba3b99099019417a954b673[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Sat Jul 19 12:19:24 2014 -0800

    Illumos 4976-4984 - metaslab improvements
    
    4976 zfs should only avoid writing to a failing non-redundant top-level vdev
    4978 ztest fails in get_metaslab_refcount()
    4979 extend free space histogram to device and pool
    4980 metaslabs should have a fragmentation metric
    4981 remove fragmented ops vector from block allocator
    4982 space_map object should proactively upgrade when feature is enabled
    4983 need to collect metaslab information via mdb
    4984 device selection should use fragmentation metric
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Adam Leventhal <adam.leventhal@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
      https://www.illumos.org/issues/4976
      https://www.illumos.org/issues/4978
      https://www.illumos.org/issues/4979
      https://www.illumos.org/issues/4980
      https://www.illumos.org/issues/4981
      https://www.illumos.org/issues/4982
      https://www.illumos.org/issues/4983
      https://www.illumos.org/issues/4984
      https://github.com/illumos/illumos-gate/commit/2e4c998
    
    Notes:
        The "zdb -M" option has been re-tasked to display the new metaslab
        fragmentation metric and the new "zdb -I" option is used to control
        the maximum number of in-flight I/Os.
    
        The new fragmentation metric is derived from the space map histogram
        which has been rolled up to the vdev and pool level and is presented
        to the user via "zpool list".
    
        Add a number of module parameters related to the new metaslab weighting
        logic.
    
    Ported by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2595

[33mcommit f67d709080f3d4a247191f0d25cbedc5da103f78[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Fri Jul 25 12:42:00 2014 +0200

    Create an 'overlay' property
    
    Add a new 'overlay' property (default 'off') that controls whether the
    filesystem should be mounted even if the mountpoint is busy or if it
    should fail with a 'mountpoint not empty'.
    
    Doing overlay mounts is the default mount behavior on Linux, but not
    in ZFS. It have been decided that following the ZFS behavior should
    be the default, but this overlay allows for site administrator to
    override this decision on a per-dataset basis.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes: #2503

[33mcommit 194e56234a58fa39c22aada5210f06ddf62c69d5[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Fri Jun 20 13:23:15 2014 -0400

    Include sys/taskq.h in linux/vfs_compat.h
    
    We should have included sys/taskq.h directly because we use the taskq
    code here, but we instead had files that included sys/taskq.h also
    include sys/kmem.h, which happened to include sys/taskq.h. sys/kmem.h no
    longer does this, so we must define the include as we should
    have done in the first place.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2411

[33mcommit dc55d791011b31317ad57ecb36be0a27b7647ef2[m
Author: Evan Susarret <evansus@gmail.com>
Date:   Thu Mar 20 16:21:34 2014 -0400

    Correct autodetection of bootfs property
    
    Remove lines that contain only a hyphen (match '^-$' instead of '-').
    
    I had a root fs with a hyphen in the name (fedora/ROOT/Fedora20-Dev),
    it was not detected because sed eliminated that line of output from
    'zpool list -Ho bootfs'.
    
    Signed-off-by: Evan Susarret <evansus@gmail.com>
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2196

[33mcommit 449e75d76816a0074fef8f8962f5f91a51dd007e[m
Author: Alec Salazar <alec.j.salazar@gmail.com>
Date:   Tue Aug 5 10:53:16 2014 -0400

    Avoid PAGESIZE redefinition
    
    Add #ifndef PAGESIZE to avoid redefinition warning on platforms
    where this value is already provided.
    
    Signed-off-by: Alec Salazar <alec.j.salazar@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2588

[33mcommit 22a11a5b5abc6b82972f8c6fa1d9b6efab3a4ab5[m
Author: Alec Salazar <alec.j.salazar@gmail.com>
Date:   Tue Aug 5 09:10:54 2014 -0400

    Replace __va_list with va_list
    
    Most of the code base already uses va_list, which is specified by
    iso-c. gcc/glibc provides 'typedef __gnuc_va_list va_list'. and
    when not using gcc/glibc we can't expect to find __gnuc_va_list.
    
    Signed-off-by: Alec Salazar <alec.j.salazar@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2588

[33mcommit 0d5c500d6cf4dd9e133cbffd82440c95d89478a4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jul 31 11:19:47 2014 -0700

    Revert "Revert "Revert "Fix unlink/xattr deadlock"""
    
    This reverts commit 7973e46 which brings the basic flow of the
    code back in line with the other ZFS implementations.  This
    was possible due to the following related changes.
    
    e89260a Directory xattr znodes hold a reference on their parent
    6f9548c Fix deadlock in zfs_zget()
    0a50679 Add zfs_iput_async() interface
    4dd1893 Avoid 128K kmem allocations in mzap_upgrade()
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Closes #457
    Closes #2058
    Closes #2128
    Closes #2240

[33mcommit 0a50679ce9eb8ded7bf20685e9d32724ded9cb8d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Aug 4 13:30:20 2014 -0700

    Add zfs_iput_async() interface
    
    Handle all iputs in zfs_purgedir() and zfs_inode_destroy()
    asynchronously to prevent deadlocks.  When the iputs are allowed
    to run synchronously in the destroy call path deadlocks between
    xattr directory inodes and their parent file inodes are possible.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Closes #457

[33mcommit 4dd18932ba4cfdcf9b16609f6a80c2d6c239cb15[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Aug 5 13:46:49 2014 -0700

    Avoid 128K kmem allocations in mzap_upgrade()
    
    As originally implemented the mzap_upgrade() function will
    perform up to SPA_MAXBLOCKSIZE allocations using kmem_alloc().
    These large allocations can potentially block indefinitely
    if contiguous memory is not available.  Since this allocation
    is done under the zap->zap_rwlock it can appear as if there is
    a deadlock in zap_lockdir().  This is shown below.
    
    The optimal fix for this would be to rework mzap_upgrade()
    such that no large allocations are required.  This could be
    done but it would result in us diverging further from the other
    implementations.  Therefore I've opted against doing this
    unless it becomes absolutely necessary.
    
    Instead mzap_upgrade() has been updated to use zio_buf_alloc()
    which can reliably provide buffers of up to SPA_MAXBLOCKSIZE.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Close #2580

[33mcommit 50b25b2187134ac7b19cf93bd35a420223f1d343[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Aug 5 13:57:59 2014 -0700

    Avoid dynamic allocation of 'search zio'
    
    As part of commit e8b96c6 the search zio used by the
    vdev_queue_io_to_issue() function was moved to the heap
    to minimize stack usage.  Functionally this is fine, but
    to maximize performance it's best to minimize the number
    of dynamic allocations.
    
    To avoid this allocation temporary space for the search
    zio has been reserved in the vdev_queue structure.  All
    access must be serialized through the vq_lock.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Closes #2572

[33mcommit ab6f407faa0188219fb4852ac5e05f1934c985ee[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Aug 6 09:59:01 2014 -0700

    Use KM_PUSHPAGE in dsl_dataset_rollback_check()
    
    The dsl_dataset_rollback_check() function is executed in the
    txg_sync context.  To prevent a potential deadlock due to direct
    memory reclaim it must use KM_PUSHPAGE.  This was introduced by
    the recent 'zfs bookmark' features, commit da53684.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Eric Dillmann <eric@jave.fr>
    Closes #2569

[33mcommit 1ffe90c5d3b63d2e7f9fab02da20671965e1d7b4[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Sat Jul 19 01:45:49 2014 +0200

    Add bash completions by Aneurin Price.
    
    These can be manually installed as needed by end users.  They
    have been added to the repository so they can be kept up to date
    with the latest code.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1588

[33mcommit 5dbd68a352a04672c2f88654d1652cdf12f66708[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Jun 25 10:37:59 2014 -0800

    Illumos 4914 - zfs on-disk bookmark structure should be named *_phys_t
    
    4914 zfs on-disk bookmark structure should be named *_phys_t
    
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Richard Lowe <richlowe@richlowe.net>
    Reviewed by: Saso Kiselkov <skiselkov.ml@gmail.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    
    References:
      https://www.illumos.org/issues/4914
      https://github.com/illumos/illumos-gate/commit/7802d7b
    
    Porting notes:
    
    There were a number of zfsonlinux-specific uses of zbookmark_t which
    needed to be updated.  This should reduce the likelihood of further
    problems like issue #2094 from occurring.
    
    Ported by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2558

[33mcommit 1fa8f795d586208defe2ed499c691c5bc2e28eee[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Thu Jun 5 13:34:21 2014 -0800

    Illumos 4881 - zfs send performance regression with embedded data
    
    4881 zfs send performance degradation when embedded block pointers
         are encountered
    
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/4881
      https://github.com/illumos/illumos-gate/commit/06315b7
    
    Ported by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2547

[33mcommit 3bec585e6c86de869ba1bf132567ed2a01d6a15b[m
Author: Saso Kiselkov <saso.kiselkov@nexenta.com>
Date:   Thu May 22 10:11:57 2014 +0100

    Illumos 4897 - Space accounting mismatch in L2ARC/zpool
    
    4897 Space accounting mismatch in L2ARC/zpool
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Boris Protopopov <bprotopopov@hotmail.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    From the illumos issue tracker:
    
    	L2ARC vdev space usage statistics are calculated as the delta
    	between the maximum and minimum vdev offset ever written to
    	by the L2ARC fill thread, but do not inform the user of how
    	much space in between these two offsets is actually taken up by
    	cached buffers. This fix changes that so that vdev space usage
    	stats on L2ARC devices accurately track the volume of buffers
    	stored on them, allowing users to see the exact L2ARC usage in
    	"zpool iostat -v".
    
    References:
      https://www.illumos.org/issues/4897
      https://github.com/illumos/illumos-gate/commit/3038a2b
    
    Ported by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2555

[33mcommit fbeddd60b79690b6a6ececc9b00b6014d21405aa[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Thu Jun 5 13:20:08 2014 -0800

    Illumos 4390 - I/O errors can corrupt space map when deleting fs/vol
    
    4390 i/o errors when deleting filesystem/zvol can lead to space map corruption
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: Saso Kiselkov <saso.kiselkov@nexenta.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/4390
      https://github.com/illumos/illumos-gate/commit/7fd05ac
    
    Porting notes:
    
    Previous stack-reduction efforts in traverse_visitb() caused a fair
    number of un-mergable pieces of code.  This patch should reduce its
    stack footprint a bit more.
    
    The new local bptree_entry_phys_t in bptree_add() is dynamically-allocated
    using kmem_zalloc() for the purpose of stack reduction.
    
    The new global zfs_free_leak_on_eio has been defined as an integer
    rather than a boolean_t as was the case with the related zfs_recover
    global.  Also, zfs_free_leak_on_eio's definition has been inserted into
    zfs_debug.c for consistency with the existing definition of zfs_recover.
    Illumos placed it in spa_misc.c.
    
    Ported by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2545

[33mcommit 9b67f605601c77c814037613d8129562db642a29[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Thu Jun 5 13:19:08 2014 -0800

    Illumos 4757, 4913
    
    4757 ZFS embedded-data block pointers ("zero block compression")
    4913 zfs release should not be subject to space checks
    
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Max Grossman <max.grossman@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/4757
      https://www.illumos.org/issues/4913
      https://github.com/illumos/illumos-gate/commit/5d7b4d4
    
    Porting notes:
    
    For compatibility with the fastpath code the zio_done() function
    needed to be updated.  Because embedded-data block pointers do
    not require DVAs to be allocated the associated vdevs will not
    be marked and therefore should not be unmarked.
    
    Ported by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2544

[33mcommit faf0f58c69607a15e2d1563567afb815842805de[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Fri May 23 08:21:07 2014 -0800

    Illumos 3835 zfs need not store 2 copies of all metadata
    
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    Description from Matt Ahrens's bug report at Delphix:
    
        Add a new zfs property, "redundant_metadata" which can have values
        "all" or "most".  The default will be "all", which is the current
        behavior.  Setting to "most" will cause us to only store 1 copy of
        level-1 indirect blocks of user data files.
    
    Additional notes:
    
        The new man page section for this property states
    
            "The exact behavior of which metadata blocks
             are stored redundantly may change in future releases."
    
        and:
    
            "When set to most, ZFS stores an extra copy of most types of
             metadata. This can improve performance of random writes,
             because less metadata must be written."
    
        The current implementation is as described above in Matt's blog.
        It is controlled by a new global integer
        "zfs_redundant_metadata_most_ditto_level", currently initialized
        to 2. When "redundant_metadata" is set to "most", only indirect
        blocks of the specified level and higher will have additional ditto
        blocks created.
    
    Ported by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2542

[33mcommit 603cb25ca51ff89366886f9a4ed58f68b6aba2da[m
Author: Tim Chase <tim@chase2k.com>
Date:   Sun Jun 15 08:47:40 2014 -0500

    zed needs libzfs_core
    
    As of a recent group of Illumos/Delphix updates, zed needs libzfs_core
    in order to resolve lzc_get_bookmarks() and likely other functions
    going forward.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2534

[33mcommit 672692c7b77cfcf1d7abbdec2388a08741a32c57[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Fri Apr 18 08:35:03 2014 -0800

    Illumos 4754, 4755
    
    4754 io issued to near-full luns even after setting noalloc threshold
    4755 mg_alloc_failures is no longer needed
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/4754
      https://www.illumos.org/issues/4755
      https://github.com/illumos/illumos-gate/commit/b6240e8
    
    Ported by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2533

[33mcommit 9bd274ddd846cd4024ebe3253c7b2d4f3b6f9dc0[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Tue Apr 15 19:40:22 2014 -0800

    Illumos #4374
    
    4374 dn_free_ranges should use range_tree_t
    
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Max Grossman <max.grossman@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com
    Reviewed by: Garrett D'Amore <garrett@damore.org>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/4374
      https://github.com/illumos/illumos-gate/commit/bf16b11
    
    Ported by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2531

[33mcommit da536844d55b2f3aaefdaebd36fb97bb867494aa[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Dec 11 14:33:41 2013 -0800

    Illumos 4368, 4369.
    
    4369 implement zfs bookmarks
    4368 zfs send filesystems from readonly pools
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
      https://www.illumos.org/issues/4369
      https://www.illumos.org/issues/4368
      https://github.com/illumos/illumos-gate/commit/78f1710
    
    Ported by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2530

[33mcommit b0bc7a84d90dcbf5321d48c5b24ed771c5a128b0[m
Author: Max Grossman <max.grossman@delphix.com>
Date:   Mon Dec 9 10:37:51 2013 -0800

    Illumos 4370, 4371
    
    4370 avoid transmitting holes during zfs send
    4371 DMU code clean up
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Josef 'Jeff' Sipek <jeffpc@josefsipek.net>
    Approved by: Garrett D'Amore <garrett@damore.org>a
    
    References:
      https://www.illumos.org/issues/4370
      https://www.illumos.org/issues/4371
      https://github.com/illumos/illumos-gate/commit/43466aa
    
    Ported by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2529

[33mcommit fa86b5dbb6d33371df344efb2adb0aba026d097c[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Tue Oct 8 09:13:05 2013 -0800

    Illumos 4171, 4172
    
    4171 clean up spa_feature_*() interfaces
    4172 implement extensible_dataset feature for use by other zpool features
    
    Reviewed by: Max Grossman <max.grossman@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Jerry Jelinek <jerry.jelinek@joyent.com>
    Approved by: Garrett D'Amore <garrett@damore.org>a
    
    References:
      https://www.illumos.org/issues/4171
      https://www.illumos.org/issues/4172
      https://github.com/illumos/illumos-gate/commit/2acef22
    
    Ported-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2528

[33mcommit 62b693930876ba8d929632e1ba0ae5dc48a85001[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jul 25 12:22:45 2014 -0700

    Remove patches directory
    
    Support for ZFS has now been merged in to both blkid and grub.
    Therefore, there is no longer a need to carry these stale
    patches in the ZFS source tree.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 79eb71dc6ca16d57893fb06ad6f8b73656651c60[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Wed Jul 23 12:14:09 2014 +0200

    Support '-H' (scripted mode) to 'zpool get'
    
    This functionality is already available in 'zfs get'.  Providing
    it for 'zpool get' is useful and good for consistency.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes: #2522

[33mcommit a60e668bd2d4c91ce1398bcf2f51636973abdd19[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Tue Jun 3 16:36:14 2014 +0200

    Initial attempt to document events and payloads.
    
    In no way complete - most have been trial and error and some
    deducing what they could mean. It needs more information from
    someone that knows the code better. But this is a start and
    it lays the basic structure for adding this additional detail.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2357

[33mcommit 093219a6b333d9e04dde3cbb282d262016ad5ef6[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jul 22 14:43:22 2014 -0700

    zpool-create.sh: allow features to be disabled
    
    The zimport.sh script makes use of the zpool-create.sh script
    to construct test pools for importing with older versions of
    ZoL.  It is desirable to have a way to disable all the features
    so new pools can be imported with older code.
    
    The simplest and most flexible way to achieve this was to merge
    the VERBOSE_FLAG and FORCE_FLAG in to a single ZPOOL_FLAGS
    variable.  The contents of this variable will be used in the
    'zpool create' allowing us to easily pass arbitrary flags.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Closes #2524

[33mcommit 1139491da702a160a2ea927d1d737a2cb45e51e8[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jul 18 12:22:40 2014 -0700

    Revert "Disable GCCs aggressive loop optimization"
    
    This reverts commit 0f62f3f9abc4bfa0bcafee9bfa3d55e91dcb371d.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2010

[33mcommit aca19e063b5126aab797f5739faaf3ddc82bd587[m
Author: Jan Engelhardt <jengelh@inai.de>
Date:   Fri Jul 18 20:00:27 2014 +0200

    Do not attempt access beyond the declared end of the dn_blkptr array
    
    This loop in dmu_objset_write_ready():
    
    	for (i = 0; i < dnp->dn_nblkptr; i++)
    		bp->blk_fill += dnp->dn_blkptr[i].blk_fill;
    
    invokes _undefined behavior_ for the (common) case of dn_nblkptr=3,
    therefore, the compiler is free to do whatever it wants (such as
    optimizing it away, or otherwise messing up your expections).
    
    The fix is to be honest about the array size.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2511
    Closes #2010

[33mcommit 7a8f0e80eae9053ebe6a3c5ce5f3360e8df8de2f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jul 21 10:19:25 2014 -0700

    zfs_trunc() should use dmu_tx_assign(tx, TXG_WAIT)
    
    As part of the write throttle & i/o schedule performance work the
    zfs_trunc() function should have been updated to use TXG_WAIT.
    Using TXG_WAIT ensures that the tx will be part of the next txg.
    If TXG_NOWAIT is used and retried for ERESTART errors then the
    tx can suffer from starvation.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Closes #2488

[33mcommit 080b3100155c472f8c8a380db2458bf70bd13279[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Thu Jun 12 15:29:11 2014 -0800

    Illumos #4756 Fix metaslab_group_preload deadlock
    
    4756 metaslab_group_preload() could deadlock
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Reviewed by: Saso Kiselkov <saso.kiselkov@nexenta.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    The metaslab_group_preload() function grabs the mg_lock and then later
    tries to grab the metaslab lock. This lock ordering may lead to a
    deadlock since other consumers of the mg_lock will grab the metaslab
    lock first.
    
    References:
      https://www.illumos.org/issues/4756
      https://github.com/illumos/illumos-gate/commit/30beaff
    
    Ported-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2488

[33mcommit 3c51c5cb1f1c6097ecbfd18aa1177ba0f67c215e[m
Author: George Wilson <george@delphix.com>
Date:   Mon May 19 12:04:04 2014 -0800

    Illumos #4730 destroy metaslab group taskq
    
    4730 metaslab group taskq should be destroyed in metaslab_group_destroy()
    
    Reviewed by: Alex Reece <alex.reece@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Sebastien Roy <sebastien.roy@delphix.com>
    Reviewed by: Rich Lowe <richlowe@richlowe.net>
    Reviewed by: Dan McDonald <danmcd@omniti.com>
    Approved by: Dan McDonald <danmcd@omniti.com>
    
    References:
      https://www.illumos.org/issues/4730
      https://github.com/illumos/illumos-gate/commit/be08211
    
    Porting notes:
    
    Under ZFSonlinux, one of the effects of not destroying the taskq is that
    zdb would never exit (due to the SPL taskq implementation).
    
    Ported-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2488

[33mcommit 93cf20764a1be64a603020f54b45200e37b3877e[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Tue Oct 1 13:25:53 2013 -0800

    Illumos #4101, #4102, #4103, #4105, #4106
    
    4101 metaslab_debug should allow for fine-grained control
    4102 space_maps should store more information about themselves
    4103 space map object blocksize should be increased
    4105 removing a mirrored log device results in a leaked object
    4106 asynchronously load metaslab
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Sebastien Roy <seb@delphix.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    Prior to this patch, space_maps were preferred solely based on the
    amount of free space left in each. Unfortunately, this heuristic didn't
    contain any information about the make-up of that free space, which
    meant we could keep preferring and loading a highly fragmented space map
    that wouldn't actually have enough contiguous space to satisfy the
    allocation; then unloading that space_map and repeating the process.
    
    This change modifies the space_map's to store additional information
    about the contiguous space in the space_map, so that we can use this
    information to make a better decision about which space_map to load.
    This requires reallocating all space_map objects to increase their
    bonus buffer size sizes enough to fit the new metadata.
    
    The above feature can be enabled via a new feature flag introduced by
    this change: com.delphix:spacemap_histogram
    
    In addition to the above, this patch allows the space_map block size to
    be increase. Currently the block size is set to be 4K in size, which has
    certain implications including the following:
    
        * 4K sector devices will not see any compression benefit
        * large space_maps require more metadata on-disk
        * large space_maps require more time to load (typically random reads)
    
    Now the space_map block size can adjust as needed up to the maximum size
    set via the space_map_max_blksz variable.
    
    A bug was fixed which resulted in potentially leaking an object when
    removing a mirrored log device. The previous logic for vdev_remove() did
    not deal with removing top-level vdevs that are interior vdevs (i.e.
    mirror) correctly. The problem would occur when removing a mirrored log
    device, and result in the DTL space map object being leaked; because
    top-level vdevs don't have DTL space map objects associated with them.
    
    References:
      https://www.illumos.org/issues/4101
      https://www.illumos.org/issues/4102
      https://www.illumos.org/issues/4103
      https://www.illumos.org/issues/4105
      https://www.illumos.org/issues/4106
      https://github.com/illumos/illumos-gate/commit/0713e23
    
    Porting notes:
    
    A handful of kmem_alloc() calls were converted to kmem_zalloc(). Also,
    the KM_PUSHPAGE and TQ_PUSHPAGE flags were used as necessary.
    
    Ported-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2488

[33mcommit 1be627f5c28a355bcd49e4e097114c13fae7731b[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Fri Jul 11 13:03:29 2014 -0700

    Move metaslab_group_alloc_update() call
    
    This changes moves the called to metaslab_group_alloc_update() to the
    metaslab_sync_reassess() function. The original placement of the call
    within metaslab_sync_done() appears to have been a simple mistake,
    introduced by ac72fac3eaa569902cad88053167f7d74e7fe7e4.
    
    This aligns us more closely to the upstream illumos code base.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 1e8db7710220332808920a582e5794d6fc37b109[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jul 15 13:29:57 2014 -0700

    Fix zil_commit() NULL dereference
    
    Update the current code to ensure inodes are never dirtied if they are
    part of a read-only file system or snapshot.  If they do somehow get
    dirtied an attempt will make made to write them to disk.  In the case
    of snapshots, which don't have a ZIL, this will result in a NULL
    dereference in zil_commit().
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2405

[33mcommit a5778ea2427bd340e3b4f697d9b6e1452bd71909[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Sun Jun 8 14:10:14 2014 -0400

    zdb: Introduce -V for verbatim import
    
    When given a pool name via -e, zdb would attempt an import. If it
    failed, then it would attempt a verbatim import. This behavior is
    not always desirable so a -V switch is added to zdb to control the
    behavior. When specified, a verbatim import is done. Otherwise,
    the behavior is as it was previously, except no verbatim import
    is done on failure.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2372

[33mcommit 2fbc542ebdee773ab45fd0d35029d6978aa5900b[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Fri Oct 4 14:13:23 2013 -0800

    Illumos 4168, 4169, 4170: ztest, zdb and zhack fixes
    
    4168 ztest assertion failure in dbuf_undirty
    4169 verbatim import causes zdb to segfault
    4170 zhack leaves pool in ACTIVE state
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Dan McDonald <danmcd@nexenta.com>
    
    References:
        https://www.illumos.org/issues/4168
        https://www.illumos.org/issues/4169
        https://www.illumos.org/issues/4170
        https://github.com/illumos/illumos-gate/commit/7fdd916
    
    Porting notes:
    
    Of particular interest when troubleshooting corrupted pools, the
    commonly-used "zdb -e" operation may perform verbatim imports and
    furthermore, it will soon have direct support for verbatim imports via
    a new "-V" option.  The 4169 fix eliminates a common segfault case in
    which spa_history_log_version() tries to access an un-opened dsl_pool_t.
    
    Ported by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2451
    Closes #2283
    Closes #2467

[33mcommit f4a4046bd60523c2d5d9c3ed85e74c3d08638393[m
Author: Tim Chase <tim@chase2k.com>
Date:   Wed Jul 9 22:36:03 2014 -0500

    Convert zfs_mg_noalloc_threshold to a module parameter and document
    
    The parameter was added as illumos issue 4081 which was committed to
    zfsonlinux in ac72fac3eaa569902cad88053167f7d74e7fe7e4.  This patch
    documents the parameter and allows for it to be set as a module parameter.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2483

[33mcommit d5869641416362c82bb7f090d13af4b86a7270f9[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Sun Mar 24 13:24:51 2013 -0800

    Illumos #3641 compressed block histograms with zdb
    
    This patch is a zdb extension of the '-b' option, producing a histogram
    of the physical compressed block sizes per DMU object type on disk. The
    '-bbbb' option to zdb will uncover this new feature; here's an example
    usage on a new pool and snippet of the output it generates:
    
        # zpool create tank /dev/vd{b,c,d}
        # dd bs=1k  if=/dev/urandom of=/tank/1kfile  count=1
        # dd bs=3k  if=/dev/urandom of=/tank/3kfile  count=1
        # dd bs=64k if=/dev/urandom of=/tank/64kfile count=1
        # zdb -bbbb tank
        ...
             3  68.0K   68.0K   68.0K   22.7K    1.00    34.26  ZFS plain file
        psize (in 512-byte sectors): number of blocks
                                  2:      1 *
                                  3:      0
                                  4:      0
                                  5:      0
                                  6:      1 *
                                  7:      0
        ...
                                127:      0
                                128:      1 *
        ...
    
    The blocks are also broken down by their indirection level. Expanding on
    the above example:
    
        # zfs set recordsize=1k tank
        # dd bs=1k if=/dev/urandom of=/tank/2x1kfile count=2
        # zdb -bbbb tank
        ...
             1    16K      1K      2K      2K   16.00     1.02      L1 ZFS plain file
        psize (in 512-byte sectors): number of blocks
                                  2:      1 *
             5  70.0K   70.0K   70.0K   14.0K    1.00    35.71      L0 ZFS plain file
        psize (in 512-byte sectors): number of blocks
                                  2:      3 ***
                                  3:      0
                                  4:      0
                                  5:      0
                                  6:      1 *
                                  7:      0
        ...
                                127:      0
                                128:      1 *
             6  86.0K   71.0K   72.0K   12.0K    1.21    36.73  ZFS plain file
        psize (in 512-byte sectors): number of blocks
                                  2:      4 ****
                                  3:      0
                                  4:      0
                                  5:      0
                                  6:      1 *
                                  7:      0
        ...
                                127:      0
                                128:      1 *
        ...
    
    There's now a single 1K L1 block which is the indirect block needed for
    the '2x1kfile' file just created, as well as two more 1K L0 blocks from
    the same file.
    
    This can be used to get a distribution of the block sizes used within
    the pool, on a per object type basis.
    
    References:
      https://illumos.org/issues/3641
      https://github.com/illumos/illumos-gate/commit/490d05b
    
    Ported by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Boris Protopopov <boris.protopopov@me.com>
    Closes #2456

[33mcommit 61e99a73bc34d602639c5a991abdc1e011a52d8d[m
Author: Andrew Barnes <barnes333@gmail.com>
Date:   Tue Jun 10 16:29:12 2014 +1000

    Preserve asize when last mirror child promoted to top-level vdev
    
    If the smaller of 2 different sized child vdev's of a mirrored vdev is
    detached, and the pool has the autoexpand property set to off, as the
    remaining larger vdev is promoted to a top level vdev it fails to retain
    the asize of the original top level mirror vdev and therefore partially
    autoexpands.
    
    This partially autoexpanded state leaves the new vdev too large to
    re-mirror by adding the smaller vdev back in, and the pool fails to
    utilize the space until next imported.
    
    If the autoexpand property is set to on, the child vdev grows
    in size after it has been promoted to a top level vdev as expected.
    
    This commit causes the remaining child mirror to retain the asize of its
    old parent mirror vdev if the autoexpand property is set to off,
    this allows the smaller vdev to be re-added if required the vdev
    can then be told to expand if required by the usual using zpool online -e.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Andrew Barnes <barnes333@gmail.com>
    Signed-off-by: George Wilson <george.wilson@delphix.com>
    Closes #1208

[33mcommit b8fce77b08d110e5f1b8d3161b888b3e6f8e750c[m
Author: Garrison Jensen <garrison.jensen@gmail.com>
Date:   Sun Jun 15 10:17:45 2014 -0700

    Fix comment spelling errors.
    
    Signed-off-by: Garrison Jensen <garrison.jensen@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2402

[33mcommit 52e68edc2d486f530610ed0fe14f80cf50b31067[m
Author: Tim Chase <tim@chase2k.com>
Date:   Sat Jun 21 09:38:32 2014 -0500

    Document the optional "device" argument for "zpool split"
    
    Most ZFS implementations seemed to have missed this bit of documentation.
    The additional text is based on FreeBSD's man page.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2416

[33mcommit 09c0b8fe5e95935d529e6b5d1135f66b232d271d[m
Author: Tim Chase <tim@chase2k.com>
Date:   Fri Jun 13 07:45:08 2014 -0500

    Return default value on numeric properties failing the "head check.
    
    Updates 962d52421236fc9cd61d59b4f18cff3276077da9.
    
    The referenced fix to get_numeric_property() caused numeric property
    lookups to consider the type of the parent (head) dataset when checking
    validity but there are some cases in the caller expects to see the
    property's default value even when the lookup is invalid.
    
    One case in which this is true is change_one() which is part of the
    renaming infrastructure.  It may look up "zoned" on a snapshot of a volume
    which is not valid but it expects to see the default value of false.
    
    There may be other, yet unidentified cases in which zfs_prop_get_int()
    is used on technically invalid properties but which expect the property's
    default value to be returned.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Turbo Fredriksson <turbo@bayour.com>
    Closes #2320

[33mcommit ee4712284cd6c0532b6fb78e23a3799f4ccdd675[m
Author: Dan McDonald <danmcd@omniti.com>
Date:   Mon Jun 23 22:25:02 2014 -0400

    Illumos #4936 fix potential overflow in lz4
    
    4936 lz4 could theoretically overflow a pointer with a certain input
    Reviewed by: Saso Kiselkov <skiselkov.ml@gmail.com>
    Reviewed by: Keith Wesolowski <keith.wesolowski@joyent.com>
    Approved by: Gordon Ross <gordon.ross@nexenta.com>
    Ported by: Tim Chase <tim@chase2k.com>
    
    References:
      https://illumos.org/issues/4936
      https://github.com/illumos/illumos-gate/commit/58d0718
    
    Porting notes:
    
    This fixes the widely-reported "20-year-old vulnerability" in
    LZO/LZ4 implementations which inherited said bug from the reference
    implementation.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2429

[33mcommit 4240dc332d2ca41c31d95a81d9217c1b311666ff[m
Author: Tim Chase <tim@chase2k.com>
Date:   Sat Jun 28 09:08:44 2014 -0500

    Comment the lack of real_LZ4_uncompress()
    
    Added several comments regarding the removal of real_LZ4_uncompress()
    which exists in the reference implementation but has been removed here
    since it's not used.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit d4aae2a05475ed7a9b39bd0c6b4fe99085a1cbd5[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jun 26 16:36:13 2014 -0700

    Improve differing sector size error
    
    When adding or replacing a vdev with a different sector size the
    error message should be more useful.  In addition to describing
    the problem provide a hint that the '-o ashift' option can be
    used to override the optimal default value.
    
    Since using a non-optimal value may incur a significant performance
    penalty we should issue this error.  But there a numerous reasons
    why a administrator may wish to do this anyway.
    
    Signed-off-by: Niklas Edmundsson <ZNikke@github>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2421

[33mcommit 628668a39f48e836260965e5b33e101c78f16b79[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Wed Jun 25 13:59:32 2014 +0200

    Add information about the -o option to zpool replace
    
    Users need to be aware that when replacing devices in an existing
    pool they may need to override automatically detected ashift value.
    This will all depend on the exact hardware they are using.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2024

[33mcommit 1567e0758b1674ff06ca1eaaaf4a3bbd04fb201e[m
Author: SenH <sen@senhaerens.be>
Date:   Thu Jun 26 15:26:21 2014 -0700

    Fix man zpool property feature_guid
    
    The property name gets mangled with the explanation due to the property
    length.  Fixed by putting the explanation on the next line.
    
    Before:
      unsupported@feature_Info rmation about unsupported features that are
      enabled on the pool. See zpool-features(5) for details.
    
    After:
      unsupported@feature_guid
      Information about unsupported features that are enabled on the pool. See
      zpool-features(5) for details.
    
    Signed-off-by: SenH <sen@senhaerens.be>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2419

[33mcommit 07dabd234dd51a1e5adc5bd21cddf5b5fdc70732[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jun 12 11:55:52 2014 -0700

    Tag zfs-0.6.3
    
    META file and release log updated.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 5d2107d82b21e81d718f3381d8eb572429b72e61[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jun 12 13:11:26 2014 -0700

    Fix zfs.spec.in defaults
    
    Commit 2ee4e7da accidentally introduced two issues which only occur
    when rebuilding the ZFS source rpm outside the ZFS build system.
    
    1) The _dracutdir, _udevdir, and _udevruledir macros must be checked
       using the 'undefined' keyword.  This was just overlooked in the
       patch review and does not cause a failure when using 'make pkg'
       because the values are provided by the make target.
    
    2) The default _udevruledir path included a typo.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2310

[33mcommit 2ee4e7da9081207e847088be682c0eee48a2284a[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Fri Jun 6 16:07:58 2014 +0200

    Accept udev and dracut paths specified by ./configure
    
    There are two common locations where udev and dracut components are
    commonly installed.  When building packages using the 'make rpm|deb'
    targets check those common locations and pass them to rpmbuild.  For
    non-standard configurations these values can be provided by the
    the following configure options:
    
      --with-udevdir=DIR      install udev helpers [default=check]
      --with-udevruledir=DIR  install udev rules [[UDEVDIR/rules.d]]
      --with-dracutdir=DIR    install dracut helpers [default=check]
    
    When rebuilding using the source packages the per-distribution
    default values specified in the spec file will be used.  This is
    the preferred way to build packages for a distribution but the
    ability to override the defaults is provided as a convenience.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2310
    Closes #1680

[33mcommit 7f6884f419f822f89609f6ed7595f78d12c31834[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jun 10 14:37:13 2014 -0700

    Revert "Fix __zio_execute() asynchronous dispatch"
    
    This reverts commit 91579709fccd3e55a21970742b66c388fb1403db which
    limited the asynchronous dispatch to kernel space.  We want to do
    this for two reasons:
    
    1) While we have slightly more headroom in user space excessively
       deep stacks have been observed while running ztest, see #2293.
    
    2) Removing this conditional makes the pipeline behave consistently
       regardless of if it's executing in kernel space or user space.
       This way we're more likely to uncover subtle issues with ztest.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2384

[33mcommit 0f629346bb335d8521600ae1491884fe8a8a2d27[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Mon Jun 9 23:27:09 2014 +0200

    Set LANG to a reasonable default (C)
    
    Set LANG=C before calling 'rpmbuild' to avoid rpmbuild failing on
    the translated date string in the changelog.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes: zfsonlinux/spl#306

[33mcommit 21b446a79e2ebd372d34c81a1d97f5f4519ebea9[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Fri Jun 6 20:58:58 2014 +0200

    Document the -X and -T options to 'zpool import'
    
    These options have existed for a long time but have historically
    been undocumented because they are not guaranteed to be safe.  They
    should only be used as a last resort when attempting to recover a
    damaged pool.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1130

[33mcommit 27b293be8af2cd83ae26ef50e6ee12600dce1d5b[m
Author: Tim Chase <tim@chase2k.com>
Date:   Wed Jun 4 07:23:31 2014 -0500

    Expand the description of scan-related and other parameters.
    
    Document that the scan-related parameters are, in fact, applicable only
    to scrub and/or resilver operations as appropriate.
    
    Expand a few of the prefetch-related descriptions.
    
    Add clarification to other module parameters.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2361

[33mcommit beb4be77b706ea48a02da581f80e36660692b2f5[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Fri Jun 6 19:41:18 2014 +0200

    Man page updates for 'zfs share'
    
    * Remove the references to share(1M), unshare(1M) and dfstab(4)
      since they are not applicable to Linux.
    * Add the exact exportfs command line used when setting sharenfs=on.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue: #1641

[33mcommit 022f7bf68e2868890a4b1957d5ee0a67909dfd1a[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Fri Jun 6 18:47:10 2014 +0200

    Document the fact that ashift is vdev specific, not a pool global.
    
    Users need to be aware that when adding devices to an existing pool
    they may need to override automatically detected ashift value.
    This will all depend on the exact hardware they are using.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes: #2024

[33mcommit 480f62655d2a4c8fa9e3cf12f1245b455edac349[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Fri Jun 6 16:59:11 2014 +0200

    Only automatically mount a clone when 'canmount == on'.
    
    According to the man page, "When the noauto option is set, a dataset
    can only be mounted and unmounted explicitly. The dataset is not
    mounted automatically when the dataset is created or imported ...."
    
    When cloning a dataset the canmount property was not being honored.
    This patch adds the required check to achieve the behavior described
    in the man page.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2241

[33mcommit 7a870db1b90db4ca31b67fbe856fd426431fa8b5[m
Author: Derek Dai <daiderek@gmail.com>
Date:   Mon Jun 2 01:27:58 2014 +0800

    Do not export pool to prevent cache from been removed
    
    Signed-off-by: Derek Dai <daiderek@gmail.com>
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2353

[33mcommit 69c7bdb6e70644bb2efebcee4bf109ace08eb0be[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Sat Nov 16 03:29:53 2013 +0000

    Accept kernel source dir(s) specified by ./configure
    
    This adds ability to set the location of the kernel via defines
    when building from the spec files.  This is useful when building
    against a kernel installed in a non-standard location.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1874

[33mcommit 8b974ba036972d601542deec08d68a422a70c9f6[m
Author: Ben Allen <bsallen@alcf.anl.gov>
Date:   Mon Jun 2 20:04:57 2014 +0000

    Update spec file to enable systemd for RHEL7
    
    Signed-off-by: Ben Allen <bsallen@alcf.anl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2355

[33mcommit c9b5cc8c00bd702d675108bb03365091fc9138a5[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Sat May 17 13:20:59 2014 +0200

    Move the libraries into separate packages
    
    From day one the various ZFS libraries should have been placed in their
    own sub-packages.  Primarily this allows for multiple major versions of
    the libraries to be concurrently installed.  It also facilitates a
    smaller build environment by minimizing the required dependencies.
    
    The specific changes required to split the libraries from the utilities
    are as follows:
    
    * libzpool2, libnvpair1, libuutil1, and libzfs2 packages were added
      and contain the versioned shared libraries.  The Fedora packaging
      guidelines discourage providing static libraries so they are not
      included in the packages.
    
      http://fedoraproject.org/wiki/Packaging:Guidelines#Packaging_Static_Libraries
    
    * The zfs-devel package was renamed libzfs2-devel and the new package
      obsoletes the old zfs-devel package.   This package includes all
      the required headers for the libzpool2, libnvpair1, libuutil1, and
      libzfs2 libraries and their respective unversioned shared libraries.
    
      This package should eventually be split in to individual lib*-devel
      packages but it will still take some work to cleanly separate them.
      Therefore the libzfs2-devel package provides the expected lib*-devel
      packages so the all proper dependencies can still be created.
    
      http://fedoraproject.org/wiki/Packaging:Guidelines#Devel_Packages
    
    * Moved '/sbin/ldconfig' execution from the zfs packge to each of the
      new library packages as described by the packaging guidelines.
    
      http://fedoraproject.org/wiki/Packaging:Guidelines#Shared_Libraries
    
    * The /usr/share/doc/ files were moved in to the libzfs2-devel package.
    
    * Updated config/deb.am to be aware of the packaging changes.  This
      ensures that 'deb-utils' make target converts all the resulting
      packages generated by the 'rpm-utils' target.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes: #2329
    Closes: #2341
    Issue: #2145

[33mcommit 2024041b6c5134a925a33c10eff24a47ecb541a6[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Wed Apr 23 00:04:41 2014 -0400

    Remove superfluous statement
    
    Clang's static analyzer reported that the value assigned to pcksum is
    never used. That is because we initialize both zc and pcksum to {{ 0 }}
    and then do `pcksum = zc;`. That is fairly pointless. However, it has
    the effect of generating a false positive in Clang's static analyzer.
    Since noise from false positives can obscure real issues, we fix it
    anyway.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2330

[33mcommit 4def05f8a68f7255dfb88606a9b475314c828a06[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Tue Apr 22 23:35:38 2014 -0400

    Fix memory leak in zpool_clear_label()
    
    Clang's static analyzer reported a memory leak in zpool_clear_label().
    Upon review, it turns out to be right. This should be a very short lived
    leak because no daemons use this functionality, but that does not
    preclude the possibility of third party daemons that do use it. Lets fix
    it to be a good Samaritan.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2330

[33mcommit 62a05896e8a438a980912236bc2b00fcce71c015[m
Author: Chris Wedgwood <cw@f00f.org>
Date:   Mon May 26 17:09:45 2014 -0700

    Allow building without ACLs
    
    Some kernel definitions were buried inside the #if... #endif logic for
    ACLs.  When ACLs are not available these definitions get lost causing
    the build to fail.
    
    Signed-off-by: Chris Wedgwood <cw@f00f.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2349

[33mcommit 866c162340f3ff3810e2c5fcfd05f95446abd6c2[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu May 29 13:36:24 2014 -0700

    Fix DKMS package upgrade and packager
    
    Running 'yum upgrade zfs-dkms' package could appear to work properly
    and still leave you with no zfs modules installed.  This will occur
    when only the zfs release, and not the version, are incremented.
    This may be the case for a fast moving zfs-testing repository.
    
    During the upgrade process DKMS will realize that zfs-x.y.z is already
    installed and remove it.  DKMS then correctly builds the new modules
    for zfs-x.y.z.  However, as a final step when the old zfs-x.y.z-r is
    removed the %preun script runs and removes the newly build modules.
    To handle this case the %preun script has been updated to only run
    when the installed version exactly matches the full spec file version.
    
    This change also updated ChangeLog section based on the DKMS
    reference spec file.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 79aada6105f3aa3698df28cc10fe30a51c5b47aa[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu May 29 15:03:43 2014 -0700

    Restrict release number to META version
    
    When creating packages in a git repository the release number
    can be automatically set by 'git describe'.  This normally works
    well but if your repository has newer tags which match the form
    NAME-VERSION* the release may be incorrectly calculated.  To
    prevent this the match patten has been restricted to the contents
    of the META file, NAME-VERSION.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 6795a698f4ec2f49abef843d5de8f7b55abdfffe[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed May 14 18:17:39 2014 -0700

    Use default slab types
    
    We should not override the default memory type of the kmem cache.  This
    was done previously to force certain objects which were slightly over
    object size limit cut off in to KMC_KMEM caches for better performance.
    
    The zfsonlinux/spl#356 patch slightly increases the default cut off
    from 511 bytes 1024 bytes for x86_64.  This means there is long longer
    a need to override the default for the caches.  And since the default
    values are now being used the new spl_kmem_cache_slab_limit and
    spl_kmem_cache_kmem_limit tunables will apply to all kmem caches.
    
    The following is a list of caches that will be impacted:
    
                      | object size   | forced type   | default type
    ----------------- | ------------- | ------------- | --------------
    dnode_t           | 936 bytes     | KMC_KMEM      | KMC_KMEM
    zio_cache         | 1104 bytes    | *KMC_KMEM     | *KMC_VMEM
    zio_link_cache    | 48 bytes      | KMC_KMEM      | KMC_KMEM
    zio_vdev_cache    | 131088 bytes  | KMC_VMEM      | KMC_VMEM
    zio_buf_512       | 512 bytes     | KMC_KMEM      | KMC_KMEM
    zio_data_buf_512  | 512 bytes     | KMC_KMEM      | KMC_KMEM
    zio_buf_1024      | 1024 bytes    | KMC_KMEM      | KMC_KMEM
    zio_data_buf_1024 | 1024 bytes    | +KMC_VMEM     | +KMC_KMEM
    
    * Cache memory type will change from KMC_KMEM to KMC_VMEM.
    + Cache memory type will change from KMC_VMEM to KMC_KMEM.
    
    This patch removes another slight point of divergence between ZoL
    and Illumos.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Closes #2337

[33mcommit 58bd7ad060b4675c47389844da25f7c25a209704[m
Author: Marcel Huber <marcelhuberfoo@gmail.com>
Date:   Wed May 21 11:17:23 2014 +0200

    Omit compiler warning by sticking to RAII
    
    Resolve gcc 4.9.0 20140507 warnings about uninitialized 'ptr' when
    using -Wmaybe-uninitialized.  The first two cases appears appear
    to be legitimate but not the second two.  In general this is a
    good practice so they are all initialized.
    
    Signed-off-by: Marcel Huber <marcelhuberfoo@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2345

[33mcommit 5f3c101b8ff05a5af9e83a5e86b5019bd6b02a3c[m
Author: John Albietz <inthecloud247@gmail.com>
Date:   Tue Mar 11 16:39:35 2014 -0700

    Added INTEL SSD 530 Series
    
    INTEL SSD 530 Series... SSDSC2BW24
    
    Signed-off-by: John Albietz <inthecloud247@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2184

[33mcommit f9a1ac4d59c2a7b0d0065eccd1d68fcc32541f5b[m
Author: HC <mmttdebbcc@yahoo.com>
Date:   Wed May 14 20:58:11 2014 -0400

    Honor zfs_nocacheflush for file vdevs
    
    For consistency with disk vdevs honor the zfs_nocacheflush tunable.
    This setting is available primarily for debugging and performance
    analysis.
    
    Signed-off-by: HC <mmttdebbcc@yahoo.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2336

[33mcommit 83021b47c2870c0ba948cbcfe08f41bd7730f5fb[m
Author: Tim Chase <tim@chase2k.com>
Date:   Sat May 10 20:13:12 2014 -0500

    Calculate header size correctly in sa_find_sizes()
    
    In the case where a variable-sized SA overlaps the spill block pointer and
    a new variable-sized SA is being added, the header size was improperly
    calculated to include the to-be-moved SA.  This problem could be
    reproduced when xattr=sa enabled as follows:
    
    	ln -s $(perl -e 'print "x" x 120') blah
    	setfattr -n security.selinux -v blahblah -h blah
    
    The symlink is large enough to interfere with the spill block pointer and
    has a typical SA registration as follows (shown in modified "zdb -dddd"
    <SA attr layout obj> format):
    
    	[ ... ZPL_DACL_COUNT ZPL_DACL_ACES ZPL_SYMLINK ]
    
    Adding the SA xattr will attempt to extend the registration to:
    
    	[ ... ZPL_DACL_COUNT ZPL_DACL_ACES ZPL_SYMLINK ZPL_DXATTR ]
    
    but since the ZPL_SYMLINK SA interferes with the spill block pointer, it
    must also be moved to the spill block which will have a registration of:
    
    	[ ZPL_SYMLINK ZPL_DXATTR ]
    
    This commit updates extra_hdrsize when this condition occurs, allowing
    hdrsize to be subsequently decreased appropriately.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Issue #2214
    Issue #2228
    Issue #2316
    Issue #2343

[33mcommit 3937ab20f32fc7b79cacfd91c0891f4e1b4ab2de[m
Author: Tim Chase <tim@chase2k.com>
Date:   Thu May 8 09:51:01 2014 -0500

    Allow for lock-free reading zfsdev_state_list.
    
    Restructure the zfsdev_state_list to allow for lock-free reading by
    converting to a simple singly-linked list from which items are never
    deleted and over which only forward iterations are performed.  It depends
    on, among other things, the atomicity of accessing the zs_minor integer
    and zs_next pointer.
    
    This fixes a lock inversion in which the zfsdev_state_lock is used by
    both the sync task (txg_sync) and indirectly by any user program which
    uses /dev/zfs; the zfsdev_release method uses the same lock and then
    blocks on the sync task.
    
    The most typical failure scenerio occurs when the sync task is cleaning
    up a user hold while various concurrent "zfs" commands are in progress.
    
    Neither Illumos nor Solaris are affected by this issue because they use
    DDI interface which provides lock-free reading of device state via the
    ddi_get_soft_state() function.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2301

[33mcommit 1cbae971c5ef215d1036b65511a839879e446c4c[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Sat May 17 09:35:10 2014 -0400

    Handle ZPOOL_STATUS_HOSTID_MISMATCH in zpool status
    
    Verbatim imports can cause hostid mismatches, but things otherwise work. `zpool
    status` does not handle this and will fail when assertions are enabled:
    
    ```
    zpool: ../../cmd/zpool/zpool_main.c:4418: status_callback: Assertion `reason == ZPOOL_STATUS_OK' failed.
    
    Program received signal SIGABRT, Aborted.
    ```
    
    Lets instead add a case to display an informative message such as this:
    
    ```
      pool: rpool
     state: ONLINE
    status: Mismatch between pool hostid and system hostid on imported pool.
            This pool was previously imported into a system with a different hostid,
            and then was verbatim imported into this system.
    action: Export this pool on all systems on which it is imported.
            Then import it to correct the mismatch.
       see: http://zfsonlinux.org/msg/ZFS-8000-EY
      scan: scrub repaired 0 in 0h8m with 0 errors on Thu Apr 17 19:43:57 2014
    config:
    
            NAME        STATE     READ WRITE CKSUM
            rpool       ONLINE       0     0     0
              sda       ONLINE       0     0     0
    
    errors: No known data errors
    ```
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2342

[33mcommit bc25c9325b0e5ced897b9820dad239539d561ec9[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Tue May 13 10:36:35 2014 +0800

    Use a dedicated taskq for vdev_file
    
    Originally, vdev_file used system_taskq. This would cause a deadlock,
    especially on system with few CPUs. The reason is that the prefetcher
    threads, which are on system_taskq, will sometimes be blocked waiting
    for I/O to finish. If the prefetcher threads consume all the tasks in
    system_taskq, the I/O cannot be served and thus results in a deadlock.
    
    We fix this by creating a dedicated vdev_file_taskq for vdev_file I/O.
    
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2270

[33mcommit 2c33b9127569ad62b4cfe7dd4f651ceeee3d005c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon May 5 11:28:12 2014 -0700

    Handle vdev_lookup_top() failure in dva_get_dsize_sync()
    
    The dva_get_dsize_sync() function incorrectly assumes that the call
    to vdev_lookup_top() cannot fail.  However, the NULL dereference at
    clearly shows that under certain circumstances it is possible.  Note
    that offset 0x570 (1376) maps as expected to vd->vdev_deflate_ratio.
    
      BUG: unable to handle kernel NULL pointer dereference at 00000570
    
      crash> struct -o vdev
      struct vdev {
           [0] uint64_t vdev_id;
           ... ...
        [1376] uint64_t vdev_deflate_ratio;
    
    Given that this can happen this patch add the required error handling.
    In the case where vdev_lookup_top() fails assume that no deflation
    will occur for the DVA and use the asize.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Alexey Zhuravlev <alexey.zhuravlev@intel.com>
    Closes #1707
    Closes #1987
    Closes #1891
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 962d52421236fc9cd61d59b4f18cff3276077da9[m
Author: Tim Chase <tim@chase2k.com>
Date:   Mon Apr 21 13:22:08 2014 -0500

    Check the dataset type more rigorously when fetching properties.
    
    When fetching property values of snapshots, a check against the head
    dataset type must be performed.  Previously, this additional check was
    performed only when fetching "version", "normalize", "utf8only" or "case".
    
    This caused the ZPL properties "acltype", "exec", "devices", "nbmand",
    "setuid" and "xattr" to be erroneously displayed with meaningless values
    for snapshots of volumes.  It also did not allow for the display of
    "volsize" of a snapshot of a volume.
    
    This patch adds the headcheck flag paramater to zfs_prop_valid_for_type()
    and zprop_valid_for_type() to indicate the check is being done
    against a head dataset's type in order that properties valid only for
    snapshots are handled correctly.  This allows the the head check in
    get_numeric_property() to be performed when fetching a property for
    a snapshot.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2265

[33mcommit 1ce0457348aeb26754ced9b575aa374fcd8dff8b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue May 6 10:35:54 2014 -0700

    Fix style
    
    A minor style issue was accidentally introduced by aa7d06a.
    This change resolves that style problem.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit aa7d06a98a2b3b0d864aadd310113c52b946b842[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Mon Mar 31 17:22:55 2014 -0700

    Illumos #4101 finer-grained control of metaslab_debug
    
    Today the metaslab_debug logic performs two tasks:
    
    - load all metaslabs on import/open
    - don't unload metaslabs at the end of spa_sync
    
    This change provides knobs for each of these independently.
    
    References:
      https://illumos.org/issues/4101
      https://github.com/illumos/illumos-gate/commit/0713e23
    
    Notes:
    
    1) This is a small piece of the metaslab improvement patch from
    Illumos. It was worth bringing over before the rest, since it's
    low risk and it can be useful on fragmented pools (e.g. Lustre
    MDTs). metaslab_debug_unload would give the performance benefit
    of the old metaslab_debug option without causing unwanted delay
    during pool import.
    
    Ported-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2227

[33mcommit cc79a5c263802b58de62b190e264c7f61b6235c9[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri May 2 12:26:47 2014 -0700

    Treat spill block dbufs as meta data
    
    When the system attributes (SAs) for an object exceed what can
    can be stored in the bonus area of a dnode a spill block is
    allocated.  These spill blocks are currently considered data
    blocks.  However, they should be accounted for as meta data
    because they are effectively an extension of the dnode.
    
    While this may seem like a minor accounting issue it has broader
    implications.  The key thing to be aware of is that each spill
    block will hold a reference on its parent dnode.  The dnode in
    turn holds a reference on its dbuf in the dnode object.  This
    means that a single 512 byte data buffer for a spill block can
    pin over 16k of meta data.  This is analogous to the small file
    situation described in 2b13331 where a relatively small number
    of data buffer can cause the ARC to exceed the meta limit.
    
    However, unlike the small file case a spill block can legitimately
    be considered meta data.  By changing the spill block to meta data
    they will now be dropped from the cache when the meta limit is
    reached.  This then allows the dnodes and dbufs which the spill
    block was pinning to be released.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Closes #2294

[33mcommit 51268f31a8a5d5c7a48a449437001f77591587f2[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu May 1 16:22:01 2014 -0700

    Remove SELinux enforcing check from init scripts
    
    The default SELinux policy for RHEL and Fedora has been updated
    to include ZFS in the list of filesystems which support xattrs.
    Therefore, there's no longer a need to detect this in the init
    scripts.
    
    References:
      https://bugzilla.redhat.com/show_bug.cgi?id=811532
      https://bugzilla.redhat.com/show_bug.cgi?id=816543
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2166

[33mcommit 7809eb8b65bec8e8ea09b2ea645d320e0b3a1710[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Wed Apr 30 12:51:28 2014 -0400

    ztest: Switch to LWP rwlock interface
    
    ztest is intended to subject the ZFS code in userland to stress that it
    should be able to withstand. Any failures that occur when running it are
    failures that likely would occur inside the kernel. However, being in
    userland, it is much easier to debug them. In practice, this prevents
    a large number of problems from reaching production code.
    
    A design decision was made by the original authors of ztest to make a
    distinction between userland locking primitives and kernel locking
    primitives. The ztest code itself calls userland locking primitives
    while the kernel code being run in userland will call emulated kernel
    locking primitives that wrap the userland locking primitives.
    
    When ztest was first ported to Linux, a decision was made to use the
    emulated kernel interfaces everywhere. In effect, the userland
    rw_rdlock()/rw_wrlock() became the kernel rw_enter() and and the userland
    rw_unlock() became the kernel rw_exit(). This caused a regression
    because of an assertion in rw_enter() to catch recursive locking. That
    is permitted in userland, but not in the kernel. Consequently, the ztest
    code itself does recursive read locking. The use of the emulated kernel
    interfaces consequently caused the following failure:
    
    ztest: ../../lib/libzpool/kernel.c:384: Assertion `rwlp->rw_owner !=
    zk_thread_current() (0x1c87150 != 0x1c87150)' failed.
    
    That occurs because ztest_dmu_objset_create_destroy() will take a read
    lock and call ztest_dmu_object_alloc_free(). That will call ztest_io(),
    which will take a readlock only when asked to do ZTEST_IO_REWRITE. This
    triggered the assertion.
    
    The pthreads rwlock interface was based on the LWP rwlock interface
    implemented in Illumos libc. Luckily enough, the subset used by ztest is
    almost identical, so we can solve this problem by switching to the LWP
    thread rwlock interface in ztest. This eliminates a point of divergence
    with Illumos and should make code sharing slightly easier.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1970

[33mcommit 3af3df905fb43dd3a3957f3daea7777a434fee05[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Wed Apr 30 13:12:27 2014 -0400

    libspl: Implement LWP rwlock interface
    
    This implements a subset of the LWP rwlock interface by wrapping the
    equivalent POSIX thread interface. It is a superset of the features
    needed by ztest.
    
    The missing bits are {,_}rw_read_held() and {,_}rw_write_held().
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1970

[33mcommit c6e924fea8fd2abc1359ad08e51bf326cbeb3ed4[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Mon Apr 28 19:27:58 2014 -0400

    Fix libblkid ZFS detection when making new pools
    
    zfsonlinux/zfs@1db7b9be75a225cedb3b7a60028ca5695e5b8346 should have
    fixed this, but this particular string was overlooked.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2288

[33mcommit 12f9a6a3f954b3bb8de94e3bfc072d42b7231abc[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Apr 28 13:56:47 2014 -0700

    dmu_tx_assign() should not return ENOMEM
    
    As described in the comment above dmu_tx_assign() this function must
    only fail if the pool is out of space.  If for some other reason the
    TX cannot be assigned (such as memory pressure) ERESTART must be
    returned.  Alternately, EAGAIN could be returned to inject a delay
    but that isn't required because the caller will block on the condition
    variable waiting for the next TXG.
    
    /*
     * Assign tx to a transaction group.  txg_how can be one of:
     *
     * (1)  TXG_WAIT.  If the current open txg is full, waits until there's
     *      a new one.  This should be used when you're not holding locks.
     *      It will only fail if we're truly out of space (or over quota).
     * ...
     */
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Closes #2287

[33mcommit 9d317793aa66d05a8c44410ea24a9a4166a89bbd[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Fri Jul 1 15:56:35 2011 -0700

    Implement File Attribute Support
    
    We add support for lsattr and chattr to resolve a regression caused
    by 88c283952f0bfeab54612f9ce666601d83c4244f that broke Python's
    xattr.list(). That changet broke Gentoo Portage's FEATURES=xattr,
    which depended on Python's xattr.list().
    
    Only attributes common to both Solaris and Linux are supported. These
    are 'a', 'd' and 'i' in Linux's lsattr and chattr commands. File
    attributes exclusive to Solaris are present in the ZFS code, but cannot
    be accessed or modified through this method.  That was the case prior to
    this patch. The resolution of issue zfsonlinux/zfs#229 should implement
    some method to permit access and modification of Solaris-specific
    attributes.
    
    References:
      https://bugs.gentoo.org/show_bug.cgi?id=483516
    
    Original-patch-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1691

[33mcommit 3b4f425a5a321c02f6cf10e2ffba891ff79b80c6[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Tue Apr 29 22:42:09 2014 -0400

    Refactor inode_owner_or_capable() autotools check
    
    We need inode_owner_or_capable() for ZFS file attributes in addition to
    xattrs, so it should go into its own file. This moves it into its own
    file and changes it to be more comprehensive. It will now fail if no
    known good API is detected.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1691

[33mcommit 78597769b488633c9b61ded8ede0c8790b849b75[m
Author: ilovezfs <ilovezfs@icloud.com>
Date:   Tue Apr 29 22:47:14 2014 -0700

    Fill in mountpoint buffer before using it in errors
    
    zfs_is_mountable() fills in the mountpoint buffer, so, as in
    upstream, it needs to have been called before the mountpoint
    buffer can be used in error messages.
    
    In particular,
    
    	return (zfs_error_fmt(hdl, EZFS_MOUNTFAILED,
    	    dgettext(TEXT_DOMAIN, "cannot mount '%s'"),
    	    mountpoint));
    
    should not come before the call to zfs_is_mountable().
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: ilovezfs <ilovezfs@icloud.com>
    Closes #2284

[33mcommit 17584980b9ca6fc1aecb520ffc520cd306624854[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Thu Apr 24 11:11:02 2014 +0800

    Add assertion to catch 0-count page
    
    Some network related block device uses tcp_sendpage, which doesn't
    behave well when using 0-count page. Add assertion to catch them.
    
    This has a runtime dependency on:
    zfsonlinux/spl@ae16ed9 Fix crash when using ZFS on Ceph rbd
    
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2277

[33mcommit cdf37f0c596bbdca8464ccf99482725507724fae[m
Author: Jorgen Lundman <lundman@lundman.net>
Date:   Wed Apr 16 12:20:31 2014 +0900

    Add support for aarch64 (ARMv8)
    
    Using the ARM reference simulation (fast model foundation v8) I
    cross compiled spl and zfs, to confirm it works on ARMv8 (64 bit
    arm architecture, called aarch64 in Linux).
    
    As it is based on previous ARM porting, the resulting patch is
    disappointingly small, there was very little to do. The code fixes
    the compile issues and has light testing done.
    
    Signed-off-by: Jorgen Lundman <lundman@lundman.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2260

[33mcommit de39ec11b885f97e6256324ee89eaf75af9852f6[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Fri Apr 18 13:29:43 2014 -0700

    Fix LZ4 endianness autodetection
    
    Endianness detection in LZ4 is broken in user-space builds.  This
    bug corrupts compressed data and manifests itself in several ztest
    failures.  When LZ4 was originally ported to Illumos ZFS, the proper
    checks for Linux were stripped out. The Linux port then inherited
    the remaining detection code that works on Illumos but not on Linux.
    
    The current LZ4 endianness check misuses the condition
    defined(__BIG_ENDIAN) to indicate a big-endian system.  On Linux
    __BIG_ENDIAN is defined uncondtionally in the user-space header
    /usr/include/endian.h, regardless of the endianness of the system.
    The kernel does not use this header, so only user-space builds are
    affected.
    
    While we could fix this by restoring the upstream LZ4 endianness
    detection code, reliable checks already exist in
    libspl/include/sys/isa_defs.h. This change uses the libspl results
    to replace the word-size and endianness checks in LZ4, simplifying
    the code and reducing duplication.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: DHE <git@dehacked.net>
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Fixes #1963
    Fixes #1964
    Fixes #1965

[33mcommit 4fd762f8ad59f5840c790357a0e50f15cc9ccc08[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Apr 17 10:06:37 2014 -0700

    Fix zfsdev_ioctl() kmem leak warning
    
    Due to an asymmetry in the kmem accounting a memory leak was being
    reported when it was only an accounting issue.  All memory allocated
    with kmem_alloc() must be released with kmem_free() or it will not
    be properly accounted for.
    
    In this case the code used strfree() to release the memory allocated
    by kmem_alloc().  Presumably this was done because the size of the
    memory region wasn't available when the memory needed to be freed.
    
    To resolve this issue the code has been updated to use strdup() instead
    of kmem_alloc() to allocate the memory.  Like strfree(), strdup() is
    not integrated with the memory accounting.  This means we can use
    strfree() to release it like Illumos.
    
      SPL: kmem leaked 10/4368729 bytes
      address          size  data             func:line
      ffff880067e9aa40 10    ZZZZZZZZZZ       zfsdev_ioctl:5655
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Closes #2262

[33mcommit e0b8f6290216a3d10af008a160617d89517fc631[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Apr 16 16:06:24 2014 -0700

    Various zimport.sh fixes
    
    1) $SPLSRC and $SRCDIR should be changed to $SRC_DIR.  These are
       vestiges of an earlier version of the script and were missed when
       it was updated.  Additionally ensure the directory is created.
    
    2) The 'fail' function should take an integer argument for the
       error code to return.  Otherwise 0 (success) will be mistakenly
       returned and errors will we incorrectly suppressed.  The error
       code should be meaningful enough to determine where the script
       failed.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit b066274a773b8dcac329786f95a2e4ea52a291a1[m
Author: Tim Chase <tim@chase2k.com>
Date:   Mon Apr 14 10:33:16 2014 -0500

    Report atime and relatime as the property's actual value.
    
    Neither atime nor relatime should be considered to be "temporary mount
    point properties".  Their semantics are enforced completely within ZFS
    and also they're (correctly) not documented as being temporary mount
    point properties.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2257

[33mcommit 2dbedf5484bd81dde024eeca80e172af8ad871ac[m
Author: DHE <git@dehacked.net>
Date:   Tue Apr 15 19:50:56 2014 -0400

    Uninitialized variable spa_autoreplace used
    
    Caught by ztest and valgrind.
    
    Signed-off-by: DHE <git@dehacked.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2259

[33mcommit 0b75bdb369df4e0dab96b2778a6421773268df21[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Tue Feb 25 17:32:21 2014 +0800

    Use ddi_time_after and friends to compare time
    
    Also, make sure we use clock_t for ddi_get_lbolt to prevent type conversion
    from screwing things.
    
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2142

[33mcommit 888f7141a3fcb73e2ec254de7628eee12022c4fc[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Apr 10 16:03:33 2014 -0700

    Make zimport.sh bash dependency explicit
    
    Unfortunately, the zimport.sh test script really does depend on
    bash.  Moving to /bin/sh should be possible once the shared
    infrastructure scripts it depends on is made portable.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit b761912b3473f09a642eea21d609ce9bc1c91546[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Sat Mar 29 20:26:17 2014 +0800

    Linux 3.14 compat: rq_for_each_segment in dmu_req_copy
    
    rq_for_each_segment changed from taking bio_vec * to taking bio_vec.
    We provide rq_for_each_segment4 which takes both.
    
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2124

[33mcommit 22760eebeff0e0ad826132b1be1113eecb39938a[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Sat Mar 29 19:50:30 2014 +0800

    Revert "Fix zvol+btrfs hang"
    
    After the dmu_req_copy change, bi_io_vecs are not touched, so this is no
    longer needed.
    
    This reverts commit e26ade5101ba1d8e8350ff1270bfca4258e1ffe3.
    
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2124

[33mcommit 215b4634c77b7914078baad9260ea854af85ec33[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Sat Mar 29 19:49:55 2014 +0800

    Refactor dmu_req_copy for immutable biovec changes
    
    Originally, dmu_req_copy modifies bv_len and bv_offset in bio_vec so that it
    can continue in subsequent passes. However, after the immutable biovec changes
    in Linux 3.14, this is not allowed. So instead, we just tell dmu_req_copy how
    many bytes are already copied and it will skip to the right spot accordingly.
    
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2124

[33mcommit d4541210f3e07930dfefb6723d21cd8b313bb156[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Fri Mar 28 15:08:21 2014 +0800

    Linux 3.14 compat: Immutable biovec changes in vdev_disk.c
    
    bi_sector, bi_size and bi_idx are moved from bio to bio->bi_iter.
    This patch creates BIO_BI_*(bio) macros to hide the differences.
    
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2124

[33mcommit 408ec0d2e13188f6f500f7010b5bc5bc5bf5bb9c[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Fri Mar 28 12:59:36 2014 +0800

    Linux 3.14 compat: posix_acl_{create,chmod}
    
    posix_acl_{create,chmod} is changed to __posix_acl_{create_chmod}
    
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2124

[33mcommit 443c3f73321d18d0092b11390e628e3de9d15d7c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Apr 10 10:44:00 2014 -0700

    Improve zfs.sh error messages
    
    Ensure an error message is logged when the 'zfs.sh' script fails
    to either load a module or if udev fails to create the /dev/zfs
    device.  Error messages for missing KERNEL_MODULES are suppressed
    because that functionality may just be built-in to the kernel.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 6ac770b1961b9468daf0c69eae6515c608535789[m
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Tue Apr 8 15:31:36 2014 -0700

    Replace zed_file_create_dirs() with mkdirp()
    
    When processing directory components starting from the root dir,
    zed_file_create_dirs() contained a bug in checking the return value of
    mkdir().  A typo was made, and the test for (mkdir_errno != EEXIST) was
    erroneously written as (mkdir_errno == EEXIST).  If some of the leading
    directory components already existed, this bug would cause the routine
    to exit before creating the remaining directory components.
    
    Instead of fixing the above mkdir_errno test, this commit replaces
    zed_file_create_dirs() with mkdirp().  This cleanup was already
    planned, and zed_file_create_dirs() only existed because I didn't
    realize mkdirp() was already in tree at the time.
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2248

[33mcommit 7368eb621e6c94dd8fd37020568f32c120afabf9[m
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Tue Apr 8 15:31:11 2014 -0700

    Set errno for mkdirp() called with NULL path ptr
    
    If mkdirp() is called with a NULL ptr for the path arg, it will return
    -1 with errno unchanged.  This is unexpected since on error it should
    return -1 and set errno to one of the error values listed for mkdir(2).
    
    This commit sets errno = ENOENT for this NULL ptr case.  This is in
    accordance with the errors specified by mkdir(2):
    
      ENOENT
      A component of the path prefix does not exist or is a null pathname.
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2248

[33mcommit cc9ee13e1a36511decb526bf84146e20a846b3d6[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Apr 8 16:46:13 2014 -0700

    Dynamically create loop devices
    
    Several of the in-tree regression tests depend on the availability
    of loop devices.  If for some reason no loop devices are available
    the tests will fail.
    
    Normally this isn't an issue because most Linux distributions create
    8 loop devices by default.  This is enough for our purposes.  However,
    recent Fedora releases have only been creating a single loop device
    and this leads to failures.  Alternately, if something else of the
    system is using the loop devices we may see failures.
    
    The fix for this is to update the support scripts to dynamically
    create loop devices as needed.  The scripts need only create a node
    under /dev/ and the loop driver with create the minor.  This behavior
    has been supported by the loop driver for ages.
    
    Additionally this patch updates cleanup_loop_devices() to cleanup
    loop devices which have already had their file store deleted.  This
    helps prevent stale loop devices from accumulating on the system due
    to test failures.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Closes #2249

[33mcommit 787c455ed7a519bbf2e56140621259eb7b23b6fb[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Thu Jan 9 12:52:10 2014 -0500

    Improve partition detection on lesser used devices
    
    The format strings in efi_get_info() are intended to extract both the
    main device and partition number. However, this is only done correctly
    for hd, sd and vd devices. The format strings for ram, dm-, md and loop
    devices misparse the input. This causes the partition device to be
    incorrectly labelled as the main device with the partition being
    labelled 0.
    
    Reported-by: ilovezfs <ilovezfs@icloud.com>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2175

[33mcommit b79e1f1f27e72e0603beb176c9d8e4c78bc62c95[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Mon Feb 3 21:54:40 2014 +0000

    Allow specifying '-o <opts>' in defaults/init script.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2103

[33mcommit e37212f9a28e2b74f9d7ba6c0845a309ed49366a[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Mon Feb 3 21:52:50 2014 +0000

    Support using overlay mounts in defaults/init script.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2103

[33mcommit cbca6076b33e3d1af330e0e1f00cbf1baaf26d82[m
Author: John M. Layman <jml@frijid.net>
Date:   Wed Mar 26 13:17:17 2014 -0400

    Fix for re-reading /etc/mtab.
    
    This is a continuation of fb5c53ea65b75c67c23f90ebbbb1134a5bb6c140:
    
        When /etc/mtab is updated on Linux it's done atomically with
        rename(2).  A new mtab is written, the existing mtab is unlinked,
        and the new mtab is renamed to /etc/mtab.  This means that we
        must close the old file and open the new file to get the updated
        contents.  Using rewind(3) will just move the file pointer back
        to the start of the file, freopen(3) will close and open the file.
    
    In this commit, a few more rewind(3) calls were replaced with freopen(3)
    to allow updated mtab entries to be picked up immediately.
    
    Signed-off-by: John M. Layman <jml@frijid.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2215
    Issue #1611

[33mcommit f3ad9cd67ae57760a7ec9e8cdb0e33aa8bbea4d0[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Tue Mar 25 17:49:47 2014 -0400

    Fix locking order in zfs_zget()
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 6f9548c487dbcf958f2f226c5f1eac2b85f8f78e[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Tue Mar 25 15:41:18 2014 -0400

    Fix deadlock in zfs_zget()
    
    zfsonlinux/zfs#180 occurred because of a race between inode eviction and
    zfs_zget(). zfsonlinux/zfs@36df284 tried to address it by making a call
    to the VFS to learn whether an inode is being evicted.  If it was being
    evicted the operation was retried after dropping and reacquiring the
    relevant resources.  Unfortunately, this introduced another deadlock.
    
      INFO: task kworker/u24:6:891 blocked for more than 120 seconds.
            Tainted: P           O 3.13.6 #1
      "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
      kworker/u24:6   D ffff88107fcd2e80     0   891      2 0x00000000
      Workqueue: writeback bdi_writeback_workfn (flush-zfs-5)
       ffff8810370ff950 0000000000000002 ffff88103853d940 0000000000012e80
       ffff8810370fffd8 0000000000012e80 ffff88103853d940 ffff880f5c8be098
       ffff88107ffb6950 ffff8810370ff980 ffff88103a9a5b78 0000000000000000
      Call Trace:
       [<ffffffff813dd1d4>] schedule+0x24/0x70
       [<ffffffff8115fc09>] __wait_on_freeing_inode+0x99/0xc0
       [<ffffffff8115fdd8>] find_inode_fast+0x78/0xb0
       [<ffffffff811608c5>] ilookup+0x65/0xd0
       [<ffffffffa035c5ab>] zfs_zget+0xdb/0x260 [zfs]
       [<ffffffffa03589d6>] zfs_get_data+0x46/0x340 [zfs]
       [<ffffffffa035fee1>] zil_add_block+0xa31/0xc00 [zfs]
       [<ffffffffa0360642>] zil_commit+0x12/0x20 [zfs]
       [<ffffffffa036a6e4>] zpl_putpage+0x174/0x840 [zfs]
       [<ffffffff811071ec>] do_writepages+0x1c/0x40
       [<ffffffff8116df2b>] __writeback_single_inode+0x3b/0x2b0
       [<ffffffff8116ecf7>] writeback_sb_inodes+0x247/0x420
       [<ffffffff8116f5f3>] wb_writeback+0xe3/0x320
       [<ffffffff81170b8e>] bdi_writeback_workfn+0xfe/0x490
       [<ffffffff8106072c>] process_one_work+0x16c/0x490
       [<ffffffff810613f3>] worker_thread+0x113/0x390
       [<ffffffff81066edf>] kthread+0xdf/0x100
    
    This patch implements the original fix in a slightly different manner in
    order to avoid both deadlocks.  Instead of relying on a call to ilookup()
    which can block in __wait_on_freeing_inode() the return value from igrab()
    is used.  This gives us the information that ilookup() provided without
    the risk of a deadlock.
    
    Alternately, this race could be closed by registering an sops->drop_inode()
    callback.  The callback would need to detect the active SA hold thereby
    informing the VFS that this inode should not be evicted.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #180

[33mcommit 8ac67298b175f98de07e040456d0fe7b1841a5eb[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Apr 3 14:26:16 2014 -0700

    Revert "Fixed a use-after-free bug in zfs_zget()."
    
    This reverts commit 36df284366caa77cb40083d2e6bcce02274e2f05.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 7c05c6185bd77a4b7f4e111d581d9ca70b30eab9[m
Merge: 4d8c78c 518eba1
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Wed Apr 2 15:41:47 2014 -0700

    Merge branch 'zed-initial'
    
    zed monitors ZFS events. When a zevent is posted, zed will run any
    scripts that have been enabled for the corresponding zevent class.
    Multiple scripts may be invoked for a given zevent. The zevent nvpairs
    are passed to the scripts as environment variables. Refer to the zed(8)
    manpage for details.
    
    Events are processed synchronously by the single thread, and there is
    no maximum timeout for script execution. Consequently, a misbehaving
    script can delay (or forever block) the processing of subsequent
    zevents. Plans are to address this in future commits.
    
    An EID (Event IDentifier) has been added to each event to uniquely
    identify it throughout the lifetime of the loaded ZFS kernel module;
    it is a monotonically increasing integer that resets to 1 each time
    the module is loaded.
    
    Initial scripts have been developed to log zevents to syslog,
    automatically rebuild to a hot spare device, and send email in
    response to checksum / data / io / resilver.finish / scrub.finish
    zevents. To enable email notifications, configure ZED_EMAIL in zed.rc
    (which is serving as a config file of sorts until a proper
    configuration file is implemented). To enable hot sparing, uncomment
    ZED_SPARE_ON_IO_ERRORS and ZED_SPARE_ON_CHECKSUM_ERRORS in zed.rc;
    note that the autoexpand property is not yet supported.
    
    zed is a work-in-progress.
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2

[33mcommit 518eba14928ddf2c1871d33d4b0cdff7ec45bc23[m
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Tue Apr 1 14:21:56 2014 -0700

    Replace check for _POSIX_MEMLOCK w/ HAVE_MLOCKALL
    
    zed supports a '-M' cmdline opt to lock all pages in memory via
    mlockall().  The _POSIX_MEMLOCK define is checked to determine whether
    this function is supported.  The current test assumes mlockall()
    is supported if _POSIX_MEMLOCK is non-zero.  However, this test is
    insufficient according to mlock(2) and sysconf(3).  If _POSIX_MEMLOCK
    is -1, mlockall() is not supported; but if _POSIX_MEMLOCK is 0,
    availability must be checked at runtime.
    
    This commit adds an autoconf check for mlockall() to user.m4.  The zed
    code block for mlockall() is now guarded with a test for HAVE_MLOCKALL.
    If defined, mlockall() will be called and its runtime availability
    checked via its return value.
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2

[33mcommit 904ea2763e6576f6971be4a684e6765aaea5221c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jan 24 15:47:46 2014 -0800

    Add automatic hot spare functionality
    
    When a vdev starts getting I/O or checksum errors it is now
    possible to automatically rebuild to a hot spare device.
    
    To cleanly support this functionality in a shell script some
    additional information was added to all zevent ereports which
    include a vdev.  This covers both io and checksum zevents but
    may be used but other scripts.
    
    In the Illumos FMA solution the same information is required
    but it is retrieved through the libzfs library interface.
    Specifically the following members were added:
    
      vdev_spare_paths  - List of vdev paths for all hot spares.
      vdev_spare_guids  - List of vdev guids for all hot spares.
      vdev_read_errors  - Read errors for the problematic vdev
      vdev_write_errors - Write errors for the problematic vdev
      vdev_cksum_errors - Checksum errors for the problematic vdev.
    
    By default the required hot spare scripts are installed but this
    functionality is disabled.  To enable hot sparing uncomment the
    ZED_SPARE_ON_IO_ERRORS and ZED_SPARE_ON_CHECKSUM_ERRORS in the
    /etc/zfs/zed.d/zed.rc configuration file.
    
    These scripts do no add support for the autoexpand property. At
    a minimum this requires adding a new udev rule to detect when
    a new device is added to the system.  It also requires that the
    autoexpand policy be ported from Illumos, see:
    
      https://github.com/illumos/illumos-gate/blob/master/usr/src/cmd/syseventd/modules/zfs_mod/zfs_mod.c
    
    Support for detecting the correct name of a vdev when it's not
    a whole disk was added by Turbo Fredriksson.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Issue #2

[33mcommit d21705eab952e5aa1c0bcf920b76e8428384d80b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jan 24 15:43:07 2014 -0800

    Add missing DATA_TYPE_STRING_ARRAY output
    
    This functionality has always been missing.  But until now there
    were no zevents which included an array of strings so it wasn't
    missed.  However, that's now changed so to ensure this information
    is output correctly by 'zpool events -v' the DATA_TYPE_STRING_ARRAY
    has been implemented.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Issue #2

[33mcommit 1a5c611a2281b792634672a267b9c9cd7b60ef12[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jan 24 15:27:59 2014 -0800

    Make command line guid parsing more tolerant
    
    Several of the zfs utilities allow you to pass a vdev's guid rather
    than the device name.  However, the utilities are not consistent in
    how they parse that guid.  For example, 'zinject' expects the guid
    to be passed as a hex value while 'zpool replace' wants it as a
    decimal.  The user is forced to just know what format to use.
    
    This patch improve things by making the parsing more tolerant.
    When strtol(3) is called using 0 for the base, rather than say
    10 or 16, it will then accept hex, decimal, or octal input based
    on the prefix.  From the man page.
    
        If base is zero or 16, the string may then include a "0x"
        prefix, and  the number  will  be read in base 16; otherwise,
        a zero base is taken as 10 (decimal) unless the next character
        is '0', in which case it  is  taken as 8 (octal).
    
    NOTE: There may be additional conversions not caught be this patch.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Issue #2

[33mcommit 11a7043324b3df606b7d7e8f214cbe2eba076446[m
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Tue Mar 11 12:33:32 2014 -0700

    Add systemd unit file for zed
    
    This commit adds a systemd unit file for zed.service and integrates
    it into the zfs.target from commit 881f45c.
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2108
    Issue #2

[33mcommit 9e246ac3d8ef9ff8aed86ecf277eea2cae3a79d3[m
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Tue Jan 21 13:30:03 2014 -0800

    Initial implementation of zed (ZFS Event Daemon)
    
    zed monitors ZFS events.  When a zevent is posted, zed will run any
    scripts that have been enabled for the corresponding zevent class.
    Multiple scripts may be invoked for a given zevent.  The zevent
    nvpairs are passed to the scripts as environment variables.
    
    Events are processed synchronously by the single thread, and there is
    no maximum timeout for script execution.  Consequently, a misbehaving
    script can delay (or forever block) the processing of subsequent
    zevents.  Plans are to address this in future commits.
    
    Initial scripts have been developed to log events to syslog
    and send email in response to checksum/data/io errors and
    resilver.finish/scrub.finish events.  By default, email will only
    be sent if the ZED_EMAIL variable is configured in zed.rc (which is
    serving as a config file of sorts until a proper configuration file
    is implemented).
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2

[33mcommit 8c7aa0cfc47578d1d38f80ecb7c66eed7cde5c59[m
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Wed Feb 12 10:30:18 2014 -0800

    Replace zpool_events_next() "block" parm w/ "flags"
    
    zpool_events_next() can be called in blocking mode by specifying a
    non-zero value for the "block" parameter.  However, the design of
    the ZFS Event Daemon (zed) requires additional functionality from
    zpool_events_next().  Instead of adding additional arguments to the
    function, it makes more sense to use flags that can be bitwise-or'd
    together.
    
    This commit replaces the zpool_events_next() int "block" parameter with
    an unsigned bitwise "flags" parameter.  It also defines ZEVENT_NONE
    to specify the default behavior.  Since non-blocking mode can be
    specified with the existing ZEVENT_NONBLOCK flag, the default behavior
    becomes blocking mode.  This, in effect, inverts the previous use
    of the "block" parameter.  Existing callers of zpool_events_next()
    have been modified to check for the ZEVENT_NONBLOCK flag.
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2

[33mcommit 07917db9908516aa3fd55d39d2c1792aca8bebcd[m
Author: Chris Dunlap <cdunlap@llnl.gov>
Date:   Mon Jan 6 16:15:45 2014 -0800

    Add defs for makefile installation dir vars
    
    Add macro definitions to AM_CPPFLAGS to propagate makefile installation
    directory variables for libexecdir, runstatedir, sbindir, and
    sysconfdir.
    
    https://www.gnu.org/software/autoconf/manual/autoconf-2.69/html_node/Installation-Directory-Variables.html
    
      A corollary is that you should not use these variables except
      in makefiles. For instance, instead of trying to evaluate
      datadir in configure and hard-coding it in makefiles using e.g.,
      'AC_DEFINE_UNQUOTED([DATADIR], ["$datadir"], [Data directory.])',
      you should add -DDATADIR='$(datadir)' to your makefile's definition
      of CPPFLAGS (AM_CPPFLAGS if you are also using Automake).
    
    The runstatedir directory is for "installing data files which the
    programs modify while they run, that pertain to one specific machine,
    and which need not persist longer than the execution of the program".
    
    https://www.gnu.org/prep/standards/html_node/Directory-Variables.html
    
    It will be defined by autoconf 2.70 or later, and default to
    "$(localstatedir)/run".
    
    http://git.savannah.gnu.org/gitweb/?p=autoconf.git;a=commit;h=a197431414088a417b407b9b20583b2e8f7363bd
    
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2

[33mcommit 9b101a73203faecdc6d466fe446d787bc341ee14[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Nov 22 16:00:39 2013 -0800

    Clarify zpool_events_next() comment
    
    Due to the very poorly chosen argument name 'cleanup_fd' it was
    completely unclear that this file descriptor is used to track the
    current cursor location.  When the file descriptor is created by
    opening ZFS_DEV a private cursor is created in the kernel for the
    returned file descriptor.  Subsequent calls to zpool_events_next()
    and zpool_events_seek() then require the file descriptor as an
    argument to reposition the cursor.  When the file descriptor is
    closed the kernel state tracking the cursor is destroyed.
    
    This patch contains no functional change, it just changes a
    few variable names and clarifies the documentation.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Issue #2

[33mcommit 75e3ff58feda2d836c4546c5dc2e98fcd2d1a67b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Nov 22 14:52:16 2013 -0800

    Add zpool_events_seek() functionality
    
    The ZFS_IOC_EVENTS_SEEK ioctl was added to allow user space callers
    to seek around the zevent file descriptor by EID.  When a specific
    EID is passed and it exists the cursor will be positioned there.
    If the EID is no longer cached by the kernel ENOENT is returned.
    The caller may also pass ZEVENT_SEEK_START or ZEVENT_SEEK_END to seek
    to those respective locations.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Issue #2

[33mcommit a2f1945ee3ce8eba02ef54168c72f3be8f2cebdc[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Nov 22 11:20:41 2013 -0800

    Add a unique "eid" value to all zevents
    
    Tagging each zevent with a unique monotonically increasing EID
    (Event IDentifier) provides the required infrastructure for a user
    space daemon to reliably process zevents.  By writing the EID to
    persistent storage the daemon can safely resume where it left off
    in the event stream when it's restarted.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Issue #2

[33mcommit 4d8c78c84445c099873c77c9fa20287dca982ed5[m
Author: Gunnar Beutner <gunnar@beutner.name>
Date:   Fri Mar 21 13:27:18 2014 +0100

    Remount datasets for "zfs inherit".
    
    Changing properties with "zfs inherit" should cause the datasets
    to be remounted.  This ensures that the modified property values
    will be propagated in to the filesystem namespace where they can
    be enforced.  This change is modeled after an identical fix made
    to zfs_prop_set().
    
    Signed-off-by: Gunnar Beutner <gunnar@beutner.name>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2201

[33mcommit 1de1488fdc0b0f54e7ac05fadae1902df104cba3[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Fri Mar 21 11:10:36 2014 -0400

    Linux 3.13 compat: Handle __must_check bdi_setup_and_register
    
    torvalds/linux@8077c0d983ab276ec5f2700df56a64d671781905 added a
    __must_check to the bdi_setup_and_register(), which caused our autotools
    check to break. zfsonlinux/zfs@729210564a5325e190fc4fba22bf17bacf957ace
    was intended to correct that, but it depended on -Wno-unused-result,
    which is unrecognized in older GCC versions. That commit has been
    reverted in favor of a solution that does not require
    -Wno-unused-result.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2102
    Closes #2135

[33mcommit 6b6b8d10418bc0679cecac7885a1e6d6ba4967a1[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Fri Mar 21 11:07:28 2014 -0400

    Revert "Properly ignore bdi_setup_and_register return value"
    
    Older GCC versions do not obey -Wno-unused-result. This reverts commit
    729210564a5325e190fc4fba22bf17bacf957ace in favor of a solution that
    does not require -Wno-unused-result.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1906

[33mcommit 0ed212dc0e858a68c912b517e7c63fa9d0dc2701[m
Author: Boris Protopopov <boris.protopopov@nexenta.com>
Date:   Thu Mar 20 16:55:09 2014 -0700

    Illumos #4089 NULL pointer dereference in arc_read()
    
    4089 NULL pointer dereference in arc_read()
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Saso Kiselkov <skiselkov.ml@gmail.com>
    Reviewed by: Garrett D'Amore <garrett@damore.org>
    Approved by: Dan McDonald <danmcd@nexenta.com>
    
    References:
      https://www.illumos.org/issues/4089
      illumos/illumos-gate@57815f6b95a743697e148327725b7f568e75e6ea
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2171
    Issue #2165
    Closes #2198

[33mcommit d3773fda1434e02587d4848aa18f9657cbfca5bd[m
Author: Yuri Pankov <yuri.pankov@nexenta.com>
Date:   Thu Mar 20 15:21:37 2014 -0700

    Illumos #3120 zinject hangs in zfsdev_ioctl() due to uninitialized zc
    
    3120 zinject hangs in zfsdev_ioctl() due to uninitialized zc
    
    Reviewed by: Richard Lowe <richlowe@richlowe.net>
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/3120
      illumos/illumos-gate@f4c46b1eda9212fd32ba197043d52239ef5c0a7f
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2152

[33mcommit a15dac42df202bf9e6825a62b81a36ad449ef53f[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Sat Mar 15 14:24:40 2014 +0800

    config: compile test rather than run test
    
    When testing compiler flags, we only need to do compile test. Otherwise,
    configure will fail with "configure: error: cannot run test program while
    cross compiling" when cross compiling.
    
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2191

[33mcommit 26b42f3f9d03f85cc7966dc2fe4dfe9216601b0e[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Mon Jul 1 10:57:04 2013 -0400

    Implement -t option to zpool import for temporary pool names
    
    Originally, users had to handle spa namespace collisions by either
    exporting the already imported pool or by specifying a new name for the
    pool with a conflicting name. In the case of root pools from virtual
    guests, neither approach to collision resolution is reasonable. This is
    addressed by extending the new name syntax with a -t option to specify
    that the new name is temporary. When specified, this sets an internal
    flag that is passed into the kernel to tell it that all label updates
    should refer to the name used in the original label. Consequently, the
    original pool name will be retained on export.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2189

[33mcommit 8959b29e31975a281acc411e9f60203f09716e79[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Mon Jan 20 19:47:21 2014 -0500

    Assert alignment in umem_alloc_aligned
    
    Valgrind suggests that the address we are returning is not properly
    aligned, so lets add an assertion.
    
    ==87740==  Address 0x1012a22a is 554 bytes inside a block of size 4,096
    alloc'd
    ==87740==    at 0x4C2BBA0: memalign (in
    /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==87740==    by 0x4C2BCC7: posix_memalign (in
    /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==87740==    by 0x52FA845: zio_buf_alloc (umem.h:101)
    ==87740==    by 0x52F6226: zil_alloc_lwb (zil.c:463)
    ==87740==    by 0x52F8559: zil_commit (zil.c:566)
    ==87740==    by 0x40611D: ztest_freeze (ztest.c:5909)
    ==87740==    by 0x4066A7: ztest_init (ztest.c:6048)
    ==87740==    by 0x407AF4: main (ztest.c:6226)
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2174

[33mcommit 312f82ce65f37ed60f440194623fe38cdb1f601d[m
Author: Isaac Huang <he.huang@intel.com>
Date:   Tue Mar 11 17:05:46 2014 -0600

    sighandler() should take 2 arguments
    
    Stopping arcstat.py with ^C always ends up with error:
    TypeError: sighandler() takes no arguments (2 given)
    
    Since no special signal handling was done in sighandler(),
    it's simpler to just set SIGINT handler to SIG_DFL, which
    terminates the script.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Isaac Huang <he.huang@intel.com>
    Closes #2179

[33mcommit d9119bd66df789cbd43d0f6aef4cd43b6baba58c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Mar 20 11:02:26 2014 -0700

    Revert "sighandler() should take 2 arguments"
    
    This reverts commit 0bb89b6c594259829556f6dea5a89e722f214fd3 in
    favor of a cleaner implementation.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2182

[33mcommit 00fcdee1f88f5f1413913f26ebd1cc43107e82e0[m
Author: Andrey Vesnovaty <andrey.vesnovaty@gmail.com>
Date:   Tue Nov 26 16:21:23 2013 +0200

    Fix regression introduced in port of Illumos #3744
    
    Remove the redundant call to zfs_unmount_snap() which was being
    done after char array was freed,
    
    This fixes an upstream regression that was introduced in commit
    zfsonlinux/zfs@d09f25dc66774959499a89bf3680d09c6e541ce8, which
    ported the Illumos 3744 changes.
    
    Signed-off-by: Andrey Vesnovaty <andrey.vesnovaty@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Closes #2156

[33mcommit e2282ef57edc79cdce2a4b9b7e3333c56494a807[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Mon Jul 1 10:06:59 2013 -0400

    Remove unused option -r from 'zpool import'
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2178

[33mcommit 202619623022722f30c2ee49931a4fa6896421c7[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Thu Dec 26 15:51:35 2013 -0500

    Switch ztest mmap(2) ASSERTs to VERIFYs
    
    This is just a small bit of cleanup to ensure ztest fails early
    on systems where mmap(2) is not functioning.  For the automated
    testing which is the primary consumer of ztest there is no
    functional change because debugging is always enabled.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2177

[33mcommit 85802aa42bf8f878022ec73ddde6bf3702f67d01[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Mon Jan 20 20:30:04 2014 -0500

    Free props in ztest_init()
    
    Valgrind complained about this and it's absolutely right.  The
    props nvlist was not being freed in ztest_init.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Closes #2174

[33mcommit 0bb89b6c594259829556f6dea5a89e722f214fd3[m
Author: Isaac Huang <he.huang@intel.com>
Date:   Mon Mar 10 23:16:33 2014 -0600

    sighandler() should take 2 arguments
    
    Stopping arcstat.py with ^C always ends up with error:
    
      TypeError: sighandler() takes no arguments (2 given)
    
    This patch corrects the error by updating the signal handler
    to take the correct number of arguments.
    
    Signed-off-by: Isaac Huang <he.huang@intel.com>
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2182

[33mcommit 4e1c9f9c48186f61b5fbe1dd8bc150d48a9b9431[m
Author: Isaac Huang <he.huang@intel.com>
Date:   Mon Mar 10 23:27:56 2014 -0600

    Make arcstat.py default to one header per screen
    
    Today arcstat.py prints one header every hdr_intr (20 by default)
    lines. It would be more consistent with out utilities like vmstat
    if hdr_intr defaulted to terminal window size, i.e.  one header
    per screenful of outputs.
    
    Signed-off-by: Isaac Huang <he.huang@intel.com>
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2183

[33mcommit 4e26f2fccd8935c35017a18b0b5ae90464e6b8fe[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Wed Mar 5 11:07:02 2014 +0100

    Fix NAME section of manpages zhack and fsck.zfs.
    
    In Debian GNU/Linux a program called 'linitian' is used to make sure
    that packages conforms to the Debian GNU/Linux packaging guide lines.
    This fixes the problem reported as:
    
         W: zfsutils: manpage-has-bad-whatis-entry usr/share/man/man1/zhack.1.gz
         W: zfsutils: manpage-has-bad-whatis-entry usr/share/man/man8/fsck.zfs.8.gz
    
    Not something that ZoL needs to addhere to, but every other man page
    have their NAME section in a special way - why not these two as well?
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2161

[33mcommit 47fe91b54c9c2d844059d50cb9622d7bbde9da27[m
Author: Boris Protopopov <boris.protopopov@nexenta.com>
Date:   Fri Aug 30 12:12:45 2013 -0700

    Illumos #4088 use after free in arc_release()
    
    4088 use after free in arc_release()
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Garrett D'Amore <garrett@damore.org>
    Reviewed by: Saso Kiselkov <skiselkov.ml@gmail.com>
    Approved by: Dan McDonald <danmcd@nexenta.com>
    
    References:
      https://www.illumos.org/issues/4088
      illumos/illumos-gate@ccc22e130479b5bd7c0002267fee1e0602d3f772
    
    From the illumos issue:
    
    A race-induced use after free occurs in arc_release() where the
    ARC header is used outside the critical section protected by the
    hash_lock.
    
    Ported by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Closes #2162

[33mcommit a45fc6a677bee01c0461b848e6e47ac3cb7797df[m
Author: Tim Chase <tim@chase2k.com>
Date:   Sat Mar 8 17:01:16 2014 -0600

    Use KM_PUSHPAGE in spa_add() for spa_label_features.
    
    The spa_label_features nvlist is used in the sync context during pool
    version upgrade.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2168

[33mcommit e74400155f40f21361e9e3015396c3b0152a33fd[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Mar 7 09:57:28 2014 -0800

    Export symbols dsl_sync_task{_nowait}
    
    These are needed by consumers (i.e. Lustre) who wish to perform a
    callback in the syncing context.  Both a blocking and non-blocking
    version are available to callers.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit a77c4c8332ea17293bb6565409f8c04a6dd2135b[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Fri Feb 28 15:07:00 2014 -0800

    Improve reporting of tx assignment wait times
    
    Some callers of dmu_tx_assign() use the TXG_NOWAIT flag and call
    dmu_tx_wait() themselves before retrying if the assignment fails.
    The wait times for such callers are not accounted for in the
    dmu_tx_assign kstat histogram, because the histogram only records
    time spent in dmu_tx_assign().  This change moves the histogram
    update to dmu_tx_wait() to properly account for all time spent there.
    
    One downside of this approach is that it is possible to call
    dmu_tx_wait() multiple times before successfully assigning a
    transaction, in which case the cumulative wait time would not be
    recorded.  However, this case should not often arise in practice,
    because most callers currently use one of these forms:
    
      dmu_tx_assign(tx, TXG_WAIT);
      dmu_tx_assign(tx, waited ?  TXG_WAITED : TXG_NOWAIT);
    
    The first form should make just one call to dmu_tx_delay() inside of
    dmu_tx_assign(). The second form retries with TXG_WAITED if the first
    assignment fails and incurs a delay, in which case no further waiting
    is performed.  Therefore transaction delays normally occur in one
    call to dmu_tx_wait() so the histogram should be fairly accurate.
    
    Another possible downside of this approach is that the histogram will
    no longer record overhead outside of dmu_tx_wait() such as in
    dmu_tx_try_assign(). While I'm not aware of any reason for concern on
    this point, it is conceivable that lock contention, long list
    traversal, etc. could cause assignment delays that would not be
    reflected in the histogram.  Therefore the histogram should strictly
    be used for visibility in to the normal delay mechanisms and not as a
    profiling tool for code performance.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1915

[33mcommit 3ccab25205cc8836ceb79bbd164208021468233a[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Thu Feb 27 16:32:36 2014 -0800

    replace nreserved with ndirty in txgs kstat
    
    The nreserved column in the txgs kstat file always contains 0
    following the write throttle restructuring of commit
    e8b96c6007bf97cdf34869c1ffbd0ce753873a3d.
    
    Prior to that commit, the nreserved column showed the number of bytes
    temporarily reserved in the pool by a transaction group at sync time.
    The new write throttle did away with temporary reservations and uses
    the amount of dirty data instead.  To approximate the old output of
    the txgs kstat, the number of dirty bytes per-txg was passed in as
    the nreserved value to spa_txg_history_set_io().  This approach did
    not work as intended, because the per-txg dirty value is decremented
    as data is written out to disk, so it is zero by the time we call
    spa_txg_history_set_io().  To fix this, save the number of dirty
    bytes before calling spa_sync(), and pass this value in to
    spa_txg_history_set_io().
    
    Also, since the name "nreserved" is now a misnomer, the column
    heading is now labeled "ndirty".
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1696

[33mcommit 3d920a1567d550273413a741c5fbece42cea6f00[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Thu Feb 27 16:11:11 2014 -0800

    dmu_tx kstat cleanup
    
    A few counters in the dmu_tx kstats are obsolete or no longer
    bumped properly.
    
    - The sync task restructuring commit
      13fe019870c8779bf2f5b3ff731b512cf89133ef removed the code
      that bumpted dmu_tx_quota. The counter is now bumped in two
      cases, instead of just the one case as before (after the result
      of dsl_dataset_check_quota call). The second case is where
      we check the requested reservation against the actual pool size,
      as this is an implicit quota of sorts.
    
    - The write throttle restructuring commit
      e8b96c6007bf97cdf34869c1ffbd0ce753873a3d makes dmu_tx_how and
      dmu_tx_inflight obsolete, so they are removed.
    
    Signed-off-by: Kohsuke Kawaguchi <kk@kohsuke.org>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1914

[33mcommit cecb7487fc8eea3508c3b67810ba5f0e2a265ba1[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Thu Feb 27 14:03:39 2014 -0500

    Invalidate Linux buffer cache on vdevs upon each flush
    
    Userland tools such as blkid, grub2-probe and zdb will go through the
    buffer cache. However, ZFS uses on submit_bio() to bypass the buffer
    cache when performing IO operations on vdevs for efficiency purposes.
    This permits the on-disk state and buffer cache to fall out of
    synchronization. That causes seemingly random failures when tools
    reading stale metadata from the buffer cache try to access references to
    data that is no longer there.
    
    A particularly bad failure this causes involves grub2-probe, which is
    used by grub2-mkconfig. Ordinarily, a rootfs might be called
    rpool/ROOT/gentoo. However, when a failure occurs in grub2-probe,
    grub2-mkconfig will generate a configuration file containing
    /ROOT/gentoo, which omits the pool name and causes a boot failure.
    
    This is avoidable by calling invalidate_bdev() on each flush, which is a
    simple way to ensure that all non-dirty pages are wiped. Since userland
    tools rarely access vdevs directly, this should be a fancy noop >99.999%
    of the time and have little impact on IO. We could have tried a finer
    grained approach for the rare instances in which the vdevs are accessed
    frequently by userland. However, that would require consideration of
    corner cases and it is not worth the effort.
    
    Memory-wise, it would have been better to use a Linux kernel API hook to
    disable the buffer cache on such devices, but it provides us no way of
    doing that, so we opt for this approach instead. We should revisit that
    idea in the future when higher priority issues have been tackled.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2150

[33mcommit b42b812efbbe5f9c9a8a2f2cb787e95aa09e158d[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Mon Dec 9 20:22:13 2013 -0500

    Inform OpenRC that ZFS uses mtab
    
    p_l in #zfsonlinux reported that he had issues mounting filesystems that
    were resolved by adding rc_need="mtab" to /etc/init.d/zfs. Closer
    inspection revealed that we do have a race, but it is not clear how this
    race caused mounting to fail. What is clear is that this race should be
    fixed, so lets add the proper `use mtab` line to handle it.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2148

[33mcommit 36f92e93e5dcd88efd74522ac0efd237168c1dfd[m
Author: Alexander Stetsenko <astetsenko@racktopsystems.com>
Date:   Wed Feb 5 21:34:18 2014 +0400

    Illumos #4574 get_clones_stat does not call zap_count in non-debug kernel
    
    4574 get_clones_stat does not call zap_count in non-debug kernel
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Marcel Telka <marcel@telka.sk>
    Approved by: Gordon Ross <gwr@nexenta.com>
    
    References:
      https://www.illumos.org/issues/4574
      illumos/illumos-gate@03d1795fa6f720eafbee821ad37f4343c391cfe4
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2147

[33mcommit 13a7ba1c2c5572391094800472f4a78899b4b843[m
Author: Tim Chase <tim@chase2k.com>
Date:   Mon Feb 24 13:42:36 2014 -0600

    Fix zap_lookup() in feature_is_supported().
    
    The length (number of integers) argument passed to zap_lookup was wrong;
    likely as a result of performing stack-reduction on the function.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2141

[33mcommit e78b6da3d06d754e70a02580481275ee8558cd29[m
Author: cburroughs <chris.burroughs@gmail.com>
Date:   Wed Feb 12 15:44:07 2014 -0500

    Include l2asize in arcstat
    
    For consistency with upstream pull in the l2asize update after
    reworking it from Perl to Python.
    
    References:
      https://github.com/mharsch/arcstat/pull/11
      https://github.com/mharsch/arcstat/pull/12
    
    Signed-off-by: cburroughs <chris.burroughs@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2122

[33mcommit 1ba1615925895ebd49d76d8c6ef8d06717515003[m
Author: Andrew Barnes <barnes333@gmail.com>
Date:   Mon Jan 20 15:39:28 2014 +1100

    Remove recursion from dsl_dir_willuse_space()
    
    Remove recursion from dsl_dir_willuse_space() to reduce stack usage.
    Issues with stack overflow were observed in zfs recv of zvols,
    likelihood of an overflow is proportional to the depth of the dataset
    as dsl_dir_willuse_space() recurses to parent datasets.
    
    Signed-off-by: Andrew Barnes <barnes333@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2069

[33mcommit 0ad85ed91e2e68f0ba377e7c3d2cef45241eeeef[m
Merge: 3965d2e 2b13331
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 21 16:14:53 2014 -0800

    Merge branch 'arc-changes'
    
    This stack of patches has been empirically shown to drastically improve
    the hit rate of the ARC for certain workloads. As a result, fewer reads
    to disk are required, which is generally a good thing and can
    drastically improve performance if the workload is disk limited.
    
    For the impatient, I'll summarize the results of the tests performed:
    
        * Test 1 - Creating many empty directories. This test saw 99.9%
                   fewer reads and 12.8% more inodes created when running
                   *with* these changes.
    
        * Test 2 - Creating many empty files. This test saw 4% fewer reads
                   and 0% more inodes created when running *with* these
                   changes.
    
        * Test 3 - Creating many 4 KiB files. This test saw 96.7% fewer
                   reads and 4.9% more inodes created when running *with*
                   these changes.
    
        * Test 4 - Creating many 4096 KiB files. This test saw 99.4% fewer
                   reads and 0% more inodes created (but took 6.9% fewer
                   seconds to complete) when running *with* these changes.
    
        * Test 5 - Rsync'ing a dataset with many empty directories. This
                   test saw 36.2% fewer reads and 66.2% more inodes created
                   when running *with* these changes.
    
        * Test 6 - Rsync'ing a dataset with many empty files. This test saw
                   30.9% fewer reads and 0% more inodes created (but took
                   24.3% fewer seconds to complete) when running *with*
                   these changes.
    
        * Test 7 - Rsync'ing a dataset with many 4 KiB files. This test saw
                   30.8% fewer reads and 173.3% more inodes created when
                   running *with* these changes.
    
    For the patient, the following consists of more a more detailed
    description of the tests performed and the results gathered.
    
    All the tests were run using identical machines, each with a pool
    consisting of 5 mirror pairs with 2TB 7200 RPM disks. Each test was run
    twice, once *without* this set of patches and again *with* this set of
    patches to highlight the performance changes introduced. The first four
    workloads tested were:
    
        ** NOTE: None of these tests were run to completion. They ran for a
                 set amount of time and then were terminated or hit ENOSPC.
    
        1. Creating many empty directories:
    
           * fdtree -d 10 -l 8 -s 0 -f 0 -C
             -> 111,111,111 Directories
             ->           0 Files
             ->           0 KiB File Data
    
        2. Creating many empty files:
    
           * fdtree -d 10 -l 5 -s 0 -f 10000 -C
             ->       111,111 Directories
             -> 1,111,110,000 Files
             ->             0 KiB File Data
    
        3. Creating many 4 KiB files:
    
           * fdtree -d 10 -l 5 -s 1 -f 10000 -C
             ->       111,111 Directories
             -> 1,111,110,000 Files
             -> 4,444,440,000 KiB File Data
    
        4. Creating many 4096 KiB files:
    
           * fdtree -d 10 -l 5 -s 1024 -f 10000 -C
             ->           111,111 Directories
             ->     1,111,110,000 Files
             -> 4,551,106,560,000 KiB File Data
    
    Results for these first four tests are below:
    
                      | Time (s) |   inodes |  reads |    writes |
                    --+----------+----------+--------+-----------+
        Test 1 Before |    65069 | 37845363 | 831975 |   3214646 |
        Test 1 After  |    65069 | 42703608 |    778 |   3327674 |
                    --+----------+----------+--------+-----------+
        Test 2 Before |    65073 | 54257583 | 208647 |   2413056 |
        Test 2 After  |    65069 | 54255782 | 200038 |   2533759 |
                    --+----------+----------+--------+-----------+
        Test 3 Before |    65068 | 49857744 | 487130 |   5533348 |
        Test 3 After  |    65071 | 52294311 |  16078 |   5648354 |
                    --+----------+----------+--------+-----------+
        Test 4 Before |    34854 |  2448329 | 385870 | 162116572 |
        Test 4 After  |    32419 |  2448329 |   2339 | 162175706 |
                    --+----------+----------+--------+-----------+
    
        * "Time (s)" - The run time of the test in seconds
        * "inodes"   - The number of inodes created by the test
        * "reads"    - The number of reads performed by the test
        * "writes"   - The number of writes performed by the test
    
    As you can see from the table above, running with this patch stack
    *significantly* reduced the number of reads performed in 3 out of the 4
    tests (due to an improved ARC hit rate).
    
    In addition to the tests described above, which specifically targeted
    creates only, three other workloads were tested. These additional tests
    were targeting rsync performance against the datasets created in the
    previous tests. A brief description of the workloads and results for
    these tests are below:
    
        ** NOTE: Aside from (6), these tests didn't run to completion. They
                 ran for a set amount of time and then were terminated.
    
        5. Rsync the dataset created in Test 1 to a new dataset:
    
           * rsync -a /tank/test-1 /tank/test-5
    
        6. Rsync the dataset created in Test 2 to a new dataset:
    
           * rsync -a /tank/test-2 /tank/test-6
    
        7. Rsync the dataset created in Test 3 to a new dataset:
    
           * rsync -a /tank/test-3 /tank/test-7
    
    Results for Test 5, 6, and 7 are below:
    
                      | Time (s) |   inodes |    reads |  writes |
                    --+----------+----------+----------+---------+
        Test 5 Before |    93041 | 17921014 | 47632823 | 4094848 |
        Test 5 After  |    93029 | 29785847 | 30376206 | 4484459 |
                    --+----------+----------+----------+---------+
        Test 6 Before |    15290 | 54264474 |  6018331 |  733087 |
        Test 6 After  |    11573 | 54260826 |  4155661 |  617285 |
                    --+----------+----------+----------+---------+
        Test 7 Before |    93057 | 10093749 | 41561635 | 3659098 |
        Test 7 After  |    93045 | 27587043 | 28773151 | 5612234 |
                    --+----------+----------+----------+---------+
    
        * "Time (s)" - The run time of the test in seconds
        * "inodes"   - The number of inodes created by the test
        * "reads"    - The number of reads performed by the test
        * "writes"   - The number of writes performed by the test
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2110

[33mcommit 2b13331d62a58e3efaecd0b7ab884c45c52b8d3b[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Mon Feb 3 12:21:51 2014 -0800

    Set "arc_meta_limit" to 3/4 arc_c_max by default
    
    Unfortunately, this change is an cheap attempt to work around a
    pathological workload for the ARC. A "real" solution still needs to be
    fleshed out, so this patch is intended to alleviate the situation in the
    meantime. Let me try and describe the problem..
    
    Data buffers residing in the dbuf hash table (dbuf cache) will keep a
    hold on their respective dnode, this dnode will in turn keep a hold on
    its backing dbuf (the physical block of the dnode object backing it).
    Since the dnode has a hold on its backing dbuf, the arc buffer for this
    dbuf is unevictable. What this essentially boils down to, "data" buffers
    have the potential to pin "metadata" in the arc (as a result of these
    dnode object buffers being unevictable).
    
    This scenario becomes a real problem when the workload consists of many
    small files (e.g. creating millions of 4K files). With this workload,
    the arc's "arc_meta_used" space get filled up with buffers for any
    resident directories as well as buffers for the objset's dnode object.
    Once the "arc_meta_limit" is reached, the directory buffers will be
    evicted and only the unevictable dnode object buffers will reside. If
    the workload is simply creating new small files, these dnode object
    buffers will never even be needed again, whereas the directory buffers
    will be used constantly until the creates move to a new directory.
    
    If "arc_c" and "arc_meta_limit" are sized appropriately, this
    situation wont occur. This is because as the data buffers accumulate,
    "arc_size" will eventually approach "arc_c" (before "arc_meta_used"
    reaches "arc_meta_limit"); at that point the data buffers will be
    evicted, which releases the hold on the dnode, which releases the hold
    on the dnode object's dbuf, which allows that buffer to be evicted from
    the arc in preference to more "useful" metadata.
    
    So, to side step the issue, we simply need to ensure "arc_size" reaches
    "arc_c" before "arc_meta_used" reaches "arc_meta_limit". In order to
    pick a proper limit, we have to do some math.
    
    To make things a little easier to follow, it is assumed that there will
    only be a single data buffer per file (which is probably always the case
    for "small" files anyways).
    
    Based on the current internals of the arc, if N files residing in the
    dbuf cache all pin a single dnode buffer (i.e. their dnodes all share
    the same physical dnode object block), then the following amount of
    "arc_meta_used" space will be consumed:
    
        - 16K for the dnode object's block - [        16384 bytes]
        - N * sizeof(dnode_t) -------------- [      N * 928 bytes]
        - (N + 1) * sizeof(arc_buf_t) ------ [(N + 1) *  72 bytes]
        - (N + 1) * sizeof(arc_buf_hdr_t) -- [(N + 1) * 264 bytes]
        - (N + 1) * sizeof(dmu_buf_impl_t) - [(N + 1) * 280 bytes]
    
    To simplify, these N files will pin the following amount of
    "arc_meta_used" space as unevictable:
    
        Pinned "arc_meta_used" bytes = 16384 + N * 928 + (N + 1) * (72 + 264 + 280)
        Pinned "arc_meta_used" bytes = 17000 + N * 1544
    
    This pinned space is regardless of the size of the files, and is only
    dependent on the number of pinned dnodes sharing a physical block
    (i.e. N). For example, 32 512b files sharing a single dnode object
    block would consume the same "arc_meta_used" space as 32 4K files
    sharing a single dnode object block.
    
    Now, given a files size of S, we can determine the total amount of
    space that will be consumed in the arc:
    
        Total = 17000 + N * 1544 + S * N
                ^^^^^^^^^^^^^^^^   ^^^^^
                    metadata        data
    
    So, given these formulas, we can generate a table which states the ratio
    of pinned metadata to total arc (meta + data) using different values of
    N (number of pinned dnodes per pinned physical dnode block) and S (size
    of the file).
    
                                      File Sizes (S)
           |    512   |   1024   |   2048   |   4096   |   8192   |   16384  |
        ---+----------+----------+----------+----------+----------+----------+
         1 | 0.973132 | 0.947670 | 0.900544 | 0.819081 | 0.693597 | 0.530921 |
         2 | 0.951497 | 0.907481 | 0.830632 | 0.710325 | 0.550779 | 0.380051 |
     N   4 | 0.918807 | 0.849809 | 0.738842 | 0.585844 | 0.414271 | 0.261250 |
         8 | 0.877541 | 0.781803 | 0.641770 | 0.472505 | 0.309333 | 0.182965 |
        16 | 0.835819 | 0.717945 | 0.559996 | 0.388885 | 0.241376 | 0.137253 |
        32 | 0.802106 | 0.669597 | 0.503304 | 0.336277 | 0.202123 | 0.112423 |
    
    As you can see, if we wanted to support the absolute worst case of 1
    dnode per physical dnode block and 512b files, we would have to set the
    "arc_meta_limit" to something greater than 97.3132% of "arc_c_max". At
    that point, it essentially defeats the purpose of having an
    "arc_meta_limit" at all.
    
    This patch changes the default value of "arc_meta_limit" to be 75% of
    "arc_c_max", which should be good enough for "most" workloads (I think).
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2110

[33mcommit cc7f677c1610bd4ae11676ba02ec8987c347b83d[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Mon Feb 3 12:41:47 2014 -0800

    Split "data_size" into "meta" and "data"
    
    Previously, the "data_size" field in the arcstats kstat contained the
    amount of cached "metadata" and "data" in the ARC. The problem is this
    then made it difficult to extract out just the "metadata" size, or just
    the "data" size.
    
    To make it easier to distinguish the two values, "data_size" has been
    modified to count only buffers of type ARC_BUFC_DATA, and "meta_size"
    was added to count only buffers of type ARC_BUFC_METADATA. If one wants
    the old "data_size" value, simply sum the new "data_size" and
    "meta_size" values.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2110

[33mcommit da8ccd0ee0d4eed08200e706cb2ca1da3bdfb5cf[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Mon Dec 30 09:30:00 2013 -0800

    Prioritize "metadata" in arc_get_data_buf
    
    When the arc is at it's size limit and a new buffer is added, data will
    be evicted (or recycled) from the arc to make room for this new buffer.
    As far as I can tell, this is to try and keep the arc from over stepping
    it's bounds (i.e. keep it below the size limitation placed on it).
    
    This makes sense conceptually, but there appears to be a subtle flaw in
    its current implementation, resulting in metadata buffers being
    throttled. When it evicts from the arc's lists, it also passes in a
    "type" so as to remove a buffer of the same type that it is adding. The
    problem with this is that once the size limit is hit, the ratio of
    "metadata" to "data" contained in the arc essentially becomes fixed.
    
    For example, consider the following scenario:
    
        * the size of the arc is capped at 10G
        * the meta_limit is capped at 4G
        * 9G of the arc contains "data"
        * 1G of the arc contains "metadata"
    
    Now, every time a new "metadata" buffer is created and added to the arc,
    an older "metadata" buffer(s) will be removed from the arc; preserving
    the 9G "data" to 1G "metadata" ratio that was in-place when the size
    limit was reached. This occurs even though the amount of "metadata" is
    far below the "metadata" limit. This can result in the arc behaving
    pathologically for certain workloads.
    
    To fix this, the arc_get_data_buf function was modified to evict "data"
    from the arc even when adding a "metadata" buffer; unless it's at the
    "metadata" limit. In addition, arc_evict now more closely resembles
    arc_evict_ghost; such that when evicting "data" from the arc, it may
    make a second pass over the arc lists and evict "metadata" if it cannot
    meet the eviction size the first time around.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2110

[33mcommit 77765b540b79bdc42d4f25f174004bbbd06b0a32[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Fri Jan 3 10:11:14 2014 -0800

    Remove "arc_meta_used" from arc_adjust calculation
    
    Using "arc_meta_used" to determine if the arc's mru list is over it's
    target value of "arc_p" doesn't seem correct. The size of the mru list
    and the value of "arc_meta_used", although related, are completely
    independent. Buffers contained in "arc_meta_used" may not even be
    contained in the arc's mru list. As such, this patch removes
    "arc_meta_used" from the calculation in arc_adjust.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2110

[33mcommit 94520ca4626c7b01340473bccdaa3ed038a85a8f[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Fri Jan 3 11:40:52 2014 -0800

    Prune metadata from ghost lists in arc_adjust_meta
    
    To maintain a strict limit on the metadata contained in the arc, while
    preventing the arc buffer headers from completely consuming the
    "arc_meta_used" space, we need to evict metadata buffers from the arc's
    ghost lists along with the regular lists.
    
    This change modifies arc_adjust_meta such that it more closely models
    the adjustments made in arc_adjust. "arc_meta_used" is used similarly to
    "arc_size", and "arc_meta_limit" is used similarly to "arc_c".
    
    Testing metadata intensive workloads (e.g. creating, copying, and
    removing millions of small files and/or directories) has shown this
    change to make a dramatic improvement to the hit rate maintained in the
    arc. While I think there is still room for improvement, this is a big
    step in the right direction.
    
    In addition, zpl_free_cached_objects was made into a no-op as I'm not
    yet sure how to properly implement that function.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2110

[33mcommit 1e3cb67b53fba067fd7bf9a13d21b53de4626dc1[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Mon Dec 23 11:34:20 2013 -0800

    Revert "Return -1 from arc_shrinker_func()"
    
    This reverts commit c11a12bc3b2e5ee9a6bd74e26f1a396b6025fbd4.
    
    Out of memory events were fixed by reverting this patch.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2110

[33mcommit 624227854e619d1bf555445f3bc38730fb9278c4[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Fri Jan 3 10:36:26 2014 -0800

    Disable arc_p adapt dampener by default
    
    It's unclear why adjustments to arc_p need to be dampened as they are in
    arc_adjust. With that said, it's removal significantly improves the arc's
    ability to "warm up" to a given workload. Thus, I'm disabling by default
    until its usefulness is better understood.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2110

[33mcommit f521ce1b9c6102f9175f26548d4c521e115f8d60[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Fri Jan 3 10:20:21 2014 -0800

    Allow "arc_p" to drop to zero or grow to "arc_c"
    
    Setting a limit on the minimum value of "arc_p" has been shown to have
    detrimental effects on the arc hit rate for certain "metadata" intensive
    workloads. Specifically, this has been exhibited with a workload that
    constantly dirties new "metadata" but also frequently touches a "small"
    amount of mfu data (e.g. mkdir's).
    
    What is seen is that the new anon data throttles the mfu list to a
    negligible size (because arc_p > anon + mru in arc_get_data_buf), even
    though the mfu ghost list receives a constant stream of hits. To remedy
    this, arc_p is now allowed to drop to zero if the algorithm deems it
    necessary.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2110

[33mcommit 89c8cac493687875eecc80a4a03f667d98dd82d0[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Wed Dec 11 09:40:13 2013 -0800

    Disable aggressive arc_p growth by default
    
    For specific workloads consisting mainly of mfu data and new anon data
    buffers, the aggressive growth of arc_p found in the arc_get_data_buf()
    function can have detrimental effects on the mfu list size and ghost
    list hit rate.
    
    Running a workload consisting of two processes:
    
        * Process 1 is creating many small files
        * Process 2 is tar'ing a directory consisting of many small files
    
    I've seen arc_p and the mru grow to their maximum size, while the mru
    ghost list receives 100K times fewer hits than the mfu ghost list.
    
    Ideally, as the mfu ghost list receives hits, arc_p should be driven
    down and the size of the mfu should increase. Given the specific
    workload I was testing with, the mfu list size should grow to a point
    where almost no mfu ghost list hits would occur. Unfortunately, this
    does not happen because the newly dirtied anon buffers constancy drive
    arc_p to its maximum value and keep it there (effectively prioritizing
    the mru list and starving the mfu list down to a negligible size).
    
    The logic to increment arc_p from within the arc_get_data_buf() function
    was introduced many years ago in this upstream commit:
    
        commit 641fbdae3a027d12b3c3dcd18927ccafae6d58bc
        Author: maybee <none@none>
        Date:   Wed Dec 20 15:46:12 2006 -0800
    
            6505658 target MRU size (arc.p) needs to be adjusted more aggressively
    
    and since I don't fully understand the motivation for the change, I am
    reluctant to completely remove it.
    
    As a way to test out how it's removal might affect performance, I've
    disabled that code by default, but left it tunable via a module option.
    Thus, if its removal is found to be grossly detrimental for certain
    workloads, it can be re-enabled on the fly, without a code change.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2110

[33mcommit 39e055c44b3025d9ef87f6c6178ef5ae5e2a55c6[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Wed Dec 11 12:25:30 2013 -0800

    Adjust arc_p based on "bytes" in arc_shrink
    
    In an attempt to prevent arc_c from collapsing "too fast", the
    arc_shrink() function was updated to take a "bytes" parameter by this
    change:
    
        commit 302f753f1657c05a4287226eeda1f53ae431b8a7
        Author: Brian Behlendorf <behlendorf1@llnl.gov>
        Date:   Tue Mar 13 14:29:16 2012 -0700
    
            Integrate ARC more tightly with Linux
    
    Unfortunately, that change failed to make a similar change to the way
    that arc_p was updated. So, there still exists the possibility for arc_p
    to collapse to near 0 when the kernel start calling the arc's shrinkers.
    
    This change attempts to fix this, by decrementing arc_p by the "bytes"
    parameter in the same way that arc_c is updated.
    
    In addition, a minimum value of arc_p is attempted to be maintained,
    similar to the way a minimum arc_p value is maintained in arc_adapt().
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2110

[33mcommit 914158259225d9723bbb288457797936b41d3c9a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jul 23 15:33:23 2013 -0700

    Set zfs_arc_min to 4MB
    
    Decrease the mimimum ARC size from 1/32 of total system memory
    (or 64MB) to a much smaller 4MB.
    
    1) Large systems with over a 1TB of memory are being deployed
       and reserving 1/32 of this memory (32GB) as the mimimum
       requirement is overkill.
    
    2) Tiny systems like the raspberry pi may only have 256MB of
       memory in which case 64MB is far too large.
    
    The ARC should be reclaimable if the VFS determines it needs
    the memory for some other purpose.  If you want to ensure the
    ARC is never completely reclaimed due to memory pressure you
    may still set a larger value with zfs_arc_min.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Issue #2110

[33mcommit 3965d2e6ee3ce3ef646c29736ce311695fd8ebc3[m
Merge: 98fad86 4f2dcb3
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 21 12:12:20 2014 -0800

    Merge branch 'issue-2094'
    
    This patch stack was designed to accomplish the following:
    
    * Cleanly address the pool incompatibility which was accidentally
      introduced post-0.6.2 but pre-0.6.3.  This required adding
      infrastructure which can be used from now on to notify system
      administrators of errata which affect their pool.
    
    * Add additional automated regression testing to ensure this type
      of compatibility issue is caught prior to the change being merged.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2094

[33mcommit 4f2dcb3eee0e6c922f1f54955c3e15fd20b3b4f6[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Thu Feb 20 20:28:33 2014 -0800

    Add erratum for issue #2094
    
    ZoL commit 1421c89 unintentionally changed the disk format in a forward-
    compatible, but not backward compatible way. This was accomplished by
    adding an entry to zbookmark_t, which is included in a couple of
    on-disk structures. That lead to the creation of pools with incorrect
    dsl_scan_phys_t objects that could only be imported by versions of ZoL
    containing that commit.  Such pools cannot be imported by other versions
    of ZFS or past versions of ZoL.
    
    The additional field has been removed by the previous commit.  However,
    affected pools must be imported and scrubbed using a version of ZoL with
    this commit applied.  This will return the pools to a state in which they
    may be imported by other implementations.
    
    The 'zpool import' or 'zpool status' command can be used to determine if
    a pool is impacted.  A message similar to one of the following means your
    pool must be scrubbed to restore compatibility.
    
    $ zpool import
       pool: zol-0.6.2-173
         id: 1165955789558693437
      state: ONLINE
     status: Errata #1 detected.
     action: The pool can be imported using its name or numeric identifier,
             however there is a compatibility issue which should be corrected
             by running 'zpool scrub'
        see: http://zfsonlinux.org/msg/ZFS-8000-ER
     config:
     ...
    
    $ zpool status
      pool: zol-0.6.2-173
     state: ONLINE
      scan: pool compatibility issue detected.
       see: https://github.com/zfsonlinux/zfs/issues/2094
    action: To correct the issue run 'zpool scrub'.
    config:
    ...
    
    If there was an async destroy in progress 'zpool import' will prevent
    the pool from being imported.  Further advice on how to proceed will be
    provided by the error message as follows.
    
    $ zpool import
       pool: zol-0.6.2-173
         id: 1165955789558693437
      state: ONLINE
     status: Errata #2 detected.
     action: The pool can not be imported with this version of ZFS due to an
             active asynchronous destroy.  Revert to an earlier version and
             allow the destroy to complete before updating.
             see: http://zfsonlinux.org/msg/ZFS-8000-ER
     config:
     ...
    
    Pools affected by the damaged dsl_scan_phys_t can be detected prior to
    an upgrade by running the following command as root:
    
    zdb -dddd poolname 1 | grep -P '^\t\tscan = ' | sed -e 's;scan = ;;' | wc -w
    
    Note that `poolname` must be replaced with the name of the pool you wish
    to check. A value of 25 indicates the dsl_scan_phys_t has been damaged.
    A value of 24 indicates that the dsl_scan_phys_t is normal. A value of 0
    indicates that there has never been a scrub run on the pool.
    
    The regression caused by the change to zbookmark_t never made it into a
    tagged release, Gentoo backports, Ubuntu, Debian, Fedora, or EPEL
    stable respositorys.  Only those using the HEAD version directly from
    Github after the 0.6.2 but before the 0.6.3 tag are affected.
    
    This patch does have one limitation that should be mentioned.  It will not
    detect errata #2 on a pool unless errata #1 is also present.  It expected
    this will not be a significant problem because pools impacted by errata #2
    have a high probably of being impacted by errata #1.
    
    End users can ensure they do no hit this unlikely case by waiting for all
    asynchronous destroy operations to complete before updating ZoL.  The
    presence of any background destroys on any imported pools can be checked
    by running `zpool get freeing` as root.  This will display a non-zero
    value for any pool with an active asynchronous destroy.
    
    Lastly, it is expected that no user data has been lost as a result of
    this erratum.
    
    Original-patch-by: Tim Chase <tim@chase2k.com>
    Reworked-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2094

[33mcommit ffe9d38275f63dbd0e6a23f3dd310249684ad518[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Feb 20 19:57:17 2014 -0800

    Add generic errata infrastructure
    
    From time to time it may be necessary to inform the pool administrator
    about an errata which impacts their pool.  These errata will by shown
    to the administrator through the 'zpool status' and 'zpool import'
    output as appropriate.  The errata must clearly describe the issue
    detected, how the pool is impacted, and what action should be taken
    to resolve the situation.  Additional information for each errata will
    be provided at http://zfsonlinux.org/msg/ZFS-8000-ER.
    
    To accomplish the above this patch adds the required infrastructure to
    allow the kernel modules to notify the utilities that an errata has
    been detected.  This is done through the ZPOOL_CONFIG_ERRATA uint64_t
    which has been added to the pool configuration nvlist.
    
    To add a new errata the following changes must be made:
    
    * A new errata identifier must be assigned by adding a new enum value
      to the zpool_errata_t type.  New enums must be added to the end to
      preserve the existing ordering.
    
    * Code must be added to detect the issue.  This does not strictly
      need to be done at pool import time but doing so will make the
      errata visible in 'zpool import' as well as 'zpool status'.  Once
      detected the spa->spa_errata member should be set to the new enum.
    
    * If possible code should be added to clear the spa->spa_errata member
      once the errata has been resolved.
    
    * The show_import() and status_callback() functions must be updated
      to include an informational message describing the errata.  This
      should include an action message describing what an administrator
      should do to address the errata.
    
    * The documentation at http://zfsonlinux.org/msg/ZFS-8000-ER must be
      updated to describe the errata.  This space can be used to provide
      as much additional information as needed to fully describe the errata.
      A link to this documentation will be automatically generated in the
      output of 'zpool import' and 'zpool status'.
    
    Original-idea-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Richard Yao <ryao@gentoo.or
    Issue #2094

[33mcommit 731782ec316656c0d1b78d6c9f0194d35ebb7eff[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Feb 20 19:42:15 2014 -0800

    Use expected zpool_status_t type
    
    Both the zpool_import_status() and zpool_get_status() functions
    return the zpool_status_t enum.  This explicit type should be used
    rather than the more generic int type.
    
    This patch makes no functional change and should only be considered
    code cleanup.  It happens to have been done in the context of #2094
    because that's when I noticed this issue.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Richard Yao <ryao@gentoo.or
    Issue #2094

[33mcommit ed9e8368d3e6ed565174270bd7f5fb7caeac9727[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Wed Feb 5 17:15:35 2014 -0500

    Revert changes to zbookmark_t
    
    Commit 1421c89142376bfd41e4de22ed7c7846b9e41f95 added a field to
    zbookmark_t that unintentinoally caused a disk format change. This
    negatively affected backward compatibility and platform portability.
    Therefore, this field is being removed.
    
    The function that field permitted is left unimplemented until a later
    patch that will reimplement the field in a way that does not affect the
    disk format.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2094

[33mcommit a16bc6bdd9613c38cc9ceb6041e733b77435d476[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Feb 4 16:10:38 2014 -0800

    Add zimport.sh compatibility test script
    
    Verify that an assortment of known good reference pools can be imported
    using different versions of the ZoL code.
    
    By default references pools for the major ZFS implementation will be
    checked against the most recent ZoL tags and the master development branch.
    Alternate tags or branches may be verified with the '-s <src-tag> option.
    Passing the keyword "installed" will instruct the script to test whatever
    version is installed.
    
    Preferentially a reference pool is used for all tests.  However, if one
    does not exist and the pool-tag matches one of the src-tags then a new
    reference pool will be created using binaries from that source build.
    This is particularly useful when you need to test your changes before
    opening a pull request.
    
    New reference pools may be added by placing a bzip2 compressed tarball
    of the pool in the scripts/zpool-example directory and then passing
    the -p <pool-tag> option.  To increase the test coverage reference pools
    should be collected for all the major ZFS implementations.  Having these
    pools easily available is also helpful to the developers.
    
    Care should be taken to run these tests with a kernel supported by all
    the listed tags.  Otherwise build failure will cause false positives.
    
    EXAMPLES:
    
    The following example will verify the zfs-0.6.2 tag, the master branch,
    and the installed zfs version can correctly import the listed pools.
    Note there is no reference pool available for master and installed but
    because binaries are available one is automatically constructed.  The
    working directory is also preserved between runs (-k) preventing the
    need to rebuild from source for multiple runs.
    
     zimport.sh -k -f /var/tmp/zimport \
         -s "zfs-0.6.1 zfs-0.6.2 master installed" \
         -p "all master installed"
    
    --------------------- ZFS on Linux Source Versions --------------
                    zfs-0.6.1       zfs-0.6.2       master          0.6.2-180
    -----------------------------------------------------------------
    Clone SPL       Skip		Skip		Skip		Skip
    Clone ZFS       Skip		Skip		Skip		Skip
    Build SPL       Skip		Skip		Skip		Skip
    Build ZFS       Skip		Skip		Skip		Skip
    -----------------------------------------------------------------
    zevo-1.1.1      Pass		Pass		Pass		Pass
    zol-0.6.1       Pass		Pass		Pass		Pass
    zol-0.6.2-173   Fail		Fail		Pass		Pass
    zol-0.6.2       Pass		Pass		Pass		Pass
    master          Fail		Fail		Pass		Pass
    installed       Pass		Pass		Pass		Pass
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Issue #2094

[33mcommit 98fad862937cddc3aeb4d527e357cd7265eae91b[m
Author: Tim Chase <tim@chase2k.com>
Date:   Tue Feb 11 07:34:17 2014 -0600

    Propagate errors when registering "relatime" property callback.
    
    Various errors can occur when registering property callbacks.  As the
    author's comments indicate, the code is very paranoid about preserving
    the first-seen error when registering callbacks.  This patch causes an
    error seen while registering the "relatime" callback to not clobber a
    previously-seen error.
    
    Reported-by: Jorgen Lundman <lundman@lundman.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2117

[33mcommit 99d3ece84797086407fbb4d94d3817f2dc891af0[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Feb 4 16:09:55 2014 -0800

    Add default FILEDIR path to zpool-config scripts
    
    Allow the caller of the zpool-create.sh script to override
    the default path where file vdevs are created.  This allows
    for greated flexibilty when scripting.
    
    Additionally, update the default path from /tmp/ to /var/tmp/
    because these days /tmp/ is likely a ramdisk.  Even though
    these files are sparse they may grow large in which case they
    should be backed by a physical device.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2120

[33mcommit f12971e6f5cf0e84e385eb9636fbe2ae313ab257[m
Author: Ralf Ertzinger <ralf@skytale.net>
Date:   Sat Feb 8 22:48:53 2014 +0100

    Add explicit Conflicts for zfs-fuse packages
    
    zfs-fuse provides the same commands and man page names as ZoL.
    Changing the names on either side would make each incompatible with
    all existing documentation about ZFS. Providing bit identical files
    is not possible due to differing codebases.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1866

[33mcommit 0820ec65c4027b878894776a0fbbeac271e87803[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 7 10:54:11 2014 -0800

    Fix zconfig.sh test 9
    
    Commit ba6a240 adjusted the behavior of 'zfs create -V'.  The
    caller is no longer guaranteed that udev will have finished
    creating the /dev/ entries by the time to command exits.  It
    is therefore required that we explicitly block waiting for
    udev to settle for this test to run reliably.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 881f45c6a8f44486f76c4713ecef0d533d6601e8[m
Author: Ralf Ertzinger <ralf@skytale.net>
Date:   Sun Jan 19 15:36:49 2014 +0100

    Add systemd unit files for ZFS startup
    
    This adds systemd unit files replacing the functionality offered by
    the SysV init script found in etc/init.d.
    
    It has been developed and tested on Fedora 19, Fedora 20
    and openSuSE 13.1.
    
    Four unit files and one target are offered.
    
    zfs-import-cache.service:
        Import pools from /etc/zfs/zpool.cache. This unit will wait for
        udev to settle.
    zfs-import-scan.service:
        Import pools by scanning /dev/disk/by-id for zvols. This unit will
        only run if /etc/zfs/zpool.cache is not present. This unit will wait
        for udev to settle
    zfs-mount.service:
        Mount ZFS native filesystems. It contains a dependency to be loaded
        before local-fs.target.
    zfs-share.service:
        Share NFS/SMB filesystems. This unit contains a dependency that
        will cause it to be restarted whenever the smb or nfs-server unit
        is restarted, restoring the shares added.
    zfs.target:
        This target pulls in the other units in order to start ZFS. It's
        the only unit that can be enabled/disabled, all other services
        are static and pulled in by dependencies. It will honour zfs=off
        and zfs=no options on the kernel command line.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2108

[33mcommit c5cb66addcb947ae8843c40c6db134ccd821adb7[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jan 31 16:35:53 2014 -0800

    Fix corrupted l2_asize in arcstats
    
    Commit e0b0ca9 accidentally corrupted the l2_asize displayed in
    arcstats.  This was caused by changing the l2arc_buf_hdr.b_asize
    member from an int to uint32_t type.  There are places in the
    code where this field is cast to a uint64_t resulting in the
    b_hits member being treated as part of b_asize.
    
    To resolve the issue the type has been changed to a uint64_t,
    and the b_hits member is placed after the enum to prevent the
    size of the structure from increasing.
    
    This is a good example of exactly why it's a bad idea to use
    ambiguous types (int) in these structures.
    
    Signed-off-by: DHE <git@dehacked.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1990

[33mcommit 2e7b7657cdb9ad02c0e0fcf6c8b2bb1c58d1273a[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Sat Feb 1 02:52:11 2014 +1100

    4188 assertion failed in dmu_tx_hold_free(): dn_datablkshift != 0
    
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    Refences:
      https://www.illumos.org/issues/4188
      illumos/illumos-gate@bb411a08b05466bfe0c7095b6373bbc1587e259a
    
    Ported-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2091

[33mcommit 8b4646494c23fc17c7cc5f7a857e27c463540098[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Fri Jan 24 09:54:37 2014 -0600

    Illumos 4504 traverse_visitbp: visit group before user
    
    4504 traverse_visitbp: visit DMU_GROUPUSED_OBJECT before DMU_USERUSED_OBJECT
    
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    
    References:
      https://illumos.org/issues/4504
      http://code.delphix.com/illumos-4504
      http://svnweb.freebsd.org/base?view=revision&revision=260812
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Closes #2079

[33mcommit 6d111134c0d1eb9b179eb9fddf26a31d5d45ae22[m
Author: Tim Chase <tim@chase2k.com>
Date:   Sat Jan 18 13:00:53 2014 -0600

    Implement relatime.
    
    Add the "relatime" property.  When set to "on", a file's atime will only
    be updated if the existing atime at least a day old or if the existing
    ctime or mtime has been updated since the last access.  This behavior
    is compatible with the Linux "relatime" mount option.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2064
    Closes #1917

[33mcommit 2278381ce2a820afe76dd9650298858d7037a01b[m
Author: Patrik Greco <sikevux@sikevux.se>
Date:   Fri Jan 24 19:19:34 2014 +0100

    Fix error message in zpios
    
    The chunksize must always be strictly smaller than the regionsize.
    
    Signed-off-by: Andrew Uselton <andrew.c.uselton@intel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2072

[33mcommit 01b738f457f2a406fb6b4b264fb7a947b9b9989b[m
Author: Cyril Plisko <cyril.plisko@mountall.com>
Date:   Wed Jan 15 11:26:12 2014 +0200

    Call gethrtime() only once per new txg creation
    
    When transitioning current open TXG into QUIESCE state and opening
    a new one txg_quiesce() calls gethrtime():
      - to mark the birth time of the new TXG
      - to record the SPA txg history kstat
      - implicitely inside spa_txg_history_add()
    
    These timestamps are practically the same, so that the first one
    can be used instead of the other two.  The only visible difference
    is that inside spa_txg_history_add() the time spent in kmem_zalloc()
    will be counted towards the opened TXG.
    
    Since at this point the new TXG already exists (tx->tx_open_txg
    has been already incremented) it is actually a correct accounting.
    
    In any case this extra work is only happening when spa_txg_history
    kstat is activated (i.e. zfs_txg_history > 0) and doesn't affect
    the normal processing in any way.
    
    Signed-off-by: Cyril Plisko <cyril.plisko@mountall.com>
    Issue #2075

[33mcommit 478d64fdaeb89c8f029f3dd1969447317eedaa6e[m
Author: Igor Lvovsky <ilvovsky@gmail.com>
Date:   Thu Jan 16 11:41:27 2014 +0200

    Add additional state TXG_STATE_WAIT_FOR_SYNC for txg.
    
    In several cases when digging into kstats we can found two txgs
    in SYNC state, e.g.
    
    txg     birth            state  nreserved  nread      nwritten ...
    985452  258127184872561  C      0          373948416  2376272384 ...
    985453  258129016180616  C      0          378173440  28793344 ...
    985454  258129016271523  S      0          0          0 ...
    985455  258130864245986  S      0          0          0 ...
    985456  258130867458851  O      0          0          0 ...
    
    However only first txg (985454) is really syncing at this moment.
    The other one (985455) marked as SYNCED is actually in a post-QUIESCED
    state and waiting to start sync.   So, the new TXG_STATE_WAIT_FOR_SYNC
    state between TXG_STATE_QUIESCED and TXG_STATE_SYNCED was added to
    reveal this situation.
    
    txg     birth            state  nreserved  nread      nwritten ...
    1086896 235261068743969  C      0          163577856  8437248 ...
    1086897 235262870830801  C      0          280625152  822594048 ...
    1086898 235264172219064  S      0          0          0 ...
    1086899 235264936134407  W      0          0          0 ...
    1086900 235264936296156  O      0          0          0 ...
    
    Signed-off-by: Igor Lvovsky <ilvovsky@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #2075

[33mcommit 93292b308178cb885e1b11ca1a270c36f5b08a23[m
Author: Shen Yan <shenyanxxxy@qq.com>
Date:   Wed Jan 22 12:44:35 2014 +0800

    Use enum type(zfetch_dirn_t) instead
    
    Fix code with zfetch_dirn_t, which is more readable and clear.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2068

[33mcommit 4461aa6118fa55dc83f5d75c6d428767c3634fba[m
Author: Tim Chase <tim@chase2k.com>
Date:   Sat Jan 18 10:46:43 2014 -0600

    Allow chown/chgrp when no ACL SAs exist.
    
    From the comment in the commit:
    
    Some ZFS implementations (ZEVO) create neither a ZNODE_ACL nor a DACL_ACES
    SA in which case ENOENT is returned from zfs_acl_node_read() when the
    SA can't be located.  Allow chown/chgrp to succeed in these cases rather
    than returning an error that makes no sense in the context of the caller.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue zfs-osx/zfs#86
    Closes #1911
    Closes #2029

[33mcommit 04aa2de8f788654dda15e0b598fc874915b0fc06[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Wed Jan 15 13:52:57 2014 -0800

    vdev_file_io_start() to use taskq_dispatch(TQ_PUSHPAGE)
    
    The vdev_file_io_start() function may be processing a zio that the
    txg_sync thread is waiting on.  In this case it is not safe to perform
    memory allocations that may generate new I/O since this could cause a
    deadlock.  To avoid this, call taskq_dispatch() with TQ_PUSHPAGE
    instead of TQ_SLEEP.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1928

[33mcommit 3566d5c7c3cb415a53218251fc0247da55dfde46[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jan 17 11:21:48 2014 -0800

    Remove incorrect use of EXTRA_DIST for man pages
    
    Setting the 'dist_' prefix is the correct way to instruct Automake
    to include these files in the distribution.  The EXTRA_DIST variable
    is reserved for files which are not covered by the automatic rules.
    
      http://www.gnu.org/software/automake/manual/automake.html#Basics
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 09d0b30fd1ba08a95e86909d2e1abb2997b0a871[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Mon Jan 13 13:32:41 2014 -0800

    vdev_id: support per-channel slot mappings
    
    The vdev_id udev helper currently applies slot renumbering rules to
    every channel (JBOD) in the system.  This is too inflexible for systems
    with non-homogeneous storage topologies.  The "slot" keyword now takes
    an optional third parameter which names a channel to which the mapping
    will apply.  If the third parameter is omitted then the rule applies to
    all channels.  The first-specified rule that can match a slot takes
    precedence.  Therefore a channel-specific rule for a given slot should
    generally appear before a generic rule for the same slot number.  In
    this way a custom slot mapping can be applied to a particular channel
    and a default mapping applied to the rest.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2056

[33mcommit 35d3e32274ff05d9b080ea0a77ade1f9c9d7bafc[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jan 13 14:27:33 2014 -0800

    Use long holds in zvol_set_volsize()
    
    Under Linux the zvol_set_volsize() function was originally written
    to use dmu_objset_hold()/dmu_objset_rele().  Subsequently, the
    dmu_objset_own()/dmu_objset_disown() interfaces were added but
    the ZVOL code wasn't updated to take advantage of them.
    
    This was never an issue but after the dsl_pool_config changes
    the code now takes the config lock twice.  The cleanest solution
    is to shift to using dmu_objset_own() which takes a long hold
    on the dataset and does not hold the dsl pool lock.
    
    This patch also slightly restructures the existing code such
    that it more closely resembles the upstream Illumos code.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2039

[33mcommit 0f62f3f9abc4bfa0bcafee9bfa3d55e91dcb371d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jan 14 09:39:13 2014 -0800

    Disable GCCs aggressive loop optimization
    
    GCC >+ 4.8's aggressive loop optimization breaks some of the iterators
    over the dn_blkptr[] pseudo-array in dnode_phys. Since dn_blkptr[] is
    defined as a single-element array, GCC believes an iterator can only
    access index 0 and will unroll the loop into a single iteration.
    
    One way to resolve the issue would be to cast the array to a pointer
    and fix all the iterators that might break.  The only loop where it
    is known to cause a problem is this loop in dmu_objset_write_ready():
    
        for (i = 0; i < dnp->dn_nblkptr; i++)
                bp->blk_fill += dnp->dn_blkptr[i].blk_fill;
    
    In the common case where dn_nblkptr is 3, the loop is only executed a
    single time and "i" is equal to 1 following the loop.
    
    The specific breakage caused by this problem is that the blk_fill of
    root block pointers wouldn't be set properly when more than one blkptr
    is in use (when no indrect blocks are needed).
    
    The simple reproducing sequence is:
    
    zpool create tank /tank.img
    zdb -ddddd tank 0
    
    Notice that "fill=31", however, there are two L0 indirect blocks with
    "F=31" and "F=5". The fill count should be 36 rather than 31. This
    problem causes an assert to be hit in a simple "zdb tank" when built
    with --enable-debug.
    
    However, this approach was not taken because we need to be absolutely
    sure we catch all instances of this unwanted optimization.  Therefore,
    the build system has been updated to detect if GCC supports the
    aggressive loop optimization.  If it does the optimization will be
    explicitly disabled using the -fno-aggressive-loop-optimization option.
    
    Original-fix-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2010
    Closes #2051

[33mcommit cbe8e6198cb167f34adc30c6993032a4f4491397[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Sat Jan 11 16:07:27 2014 -0500

    Properly link zpool command to libblkid
    
    31fc19399e597e3391f19f1392ab120f1de0d5f2 incorrectly removed $(LIBBLKID)
    from cmd/zpool/Makefile.am. This meant that the toolchain was not given
    -lblkid, which resulted in the following build failure on Ubuntu 13.10:
    
    /usr/bin/ld: zpool_vdev.o: undefined reference to symbol
    'blkid_put_cache@@BLKID_1.0'
    /lib/x86_64-linux-gnu/libblkid.so.1: error adding symbols: DSO missing
    from command line
    collect2: error: ld returned 1 exit status
    
    That commit reworked various Makefile.am to follow best practices, so we
    reintroduce $(LIBBLKID) in a manner consistent with that, rather than
    explicitly reverting the change.
    
    Reproduction of this issue was done on a Gentoo Linux system by
    executing the following commands:
    
    zfs create -o mountpoint=/mnt/ubuntu-13.10 rpool/ROOT/ubuntu-13.10
    debootstrap --variant=buildd --arch amd64 saucy /mnt/ubuntu-13.10 http://archive.ubuntu.com/ubuntu/
    mount -o bind /dev /mnt/ubuntu-13.10/dev/
    mount -o bind /proc/ /mnt/ubuntu-13.10/proc/
    mount -o bind /sys/ /mnt/ubuntu-13.10/sys/
    cp /etc/resolv.conf /mnt/ubuntu-13.10/etc/
    (cd /mnt/ubuntu-13.10/root/ && git clone git://github.com/zfsonlinux/zfs.git)
    chroot /mnt/ubuntu-13.10/
    apt-get install git autoconf libtool zlib1g-dev uuid-dev libblkid-dev
    \#apt-get install alien fakeroot vim
    cd /root/zfs
    ./autogen.sh
    ./configure --with-config=user --prefix=/usr
    make
    
    That will create a Ubuntu 13.10 chroot, fetch the sources and build
    test. At this point, cmd/zpool/Makefile.am was modified and the
    following commands were run to verify that the build issue was resolved:
    
    git clean -xdf
    ./autogen.sh
    ./configure --with-config=user --prefix=/usr
    make
    
    Although it is not shown here, the absence of libblkid-dev enables ZFS
    to build successfully without the patch. This could explain how this
    escaped detection until recently. A test without libblkid-dev was done
    to verify that the patch did not cause a regression in the absence of
    libblkid:
    
    apt-get remove libblkid-dev
    git clean -xdf
    ./autogen.sh
    ./configure --with-config=user --prefix=/usr
    make
    
    Additionally, the commands themselves were tested against my live system
    from within the chroot to ensure basic functionality. My live system had
    corresponding kernel modules already installed and basic commands such
    as `zpool list` and `zfs list` worked without incident. Lastly, this
    patch was also build tested on Gentoo Linux, where it caused no
    problems.
    
    At time of writing, these steps can be used to reproduce these results
    on any modern Linux system that has debootstrap installed. On Gentoo,
    installing debootstrap can be done with `emerge dev-util/debootstrap`.
    The current ZFSOnLinux HEAD revision as of writing is
    fd23720ae14dca926800ae70e6c8f4b4f82efc08.  Once this is fixed in HEAD,
    either that revision or another before this fix and after
    31fc19399e597e3391f19f1392ab120f1de0d5f2 will be needed to reproduce
    this issue.
    
    Lastly, it remains to be seen why the toolchains on the systems
    performing regression tests did not catch this. This is not a
    ZFS-specific issue, but it is something that we will want to explore in
    the future.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2038

[33mcommit 741304503a28fc51a6c0a14a0f3c1c88cc825979[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jan 13 13:02:59 2014 -0800

    Prevent duplicate mnttab cache entries
    
    Under Linux its possible to mount the same filesystem multiple
    times in the namespace.  This can be done either with bind mounts
    or simply with multiple mount points.  Unfortunately, the mnttab
    cache code is implemented using an AVL tree which does not support
    duplicate entries.  To avoid this issue this patch updates the
    code to check for a duplicate entry before adding a new one.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Michael Martin <mgmartin.mgm@gmail.com>
    Closes #2041

[33mcommit fd23720ae14dca926800ae70e6c8f4b4f82efc08[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jan 8 10:25:42 2014 -0800

    Drain iput taskq outside z_teardown_lock
    
    It's unsafe to drain the iput taskq while holding the z_teardown_lock
    as a writer.  This is because when the last reference on an inode is
    dropped it may still have pages which need to be written to disk.
    This will be done through zpl_writepages which will acquire the
    z_teardown_lock as a reader in ZFS_ENTER.  Therefore, if we're
    holding the lock as a writer in zfs_sb_teardown the unmount will
    deadlock.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chris Dunlop <chris@onthe.net.au>
    Closes #1988

[33mcommit 4fcc43790c872139a2e318ebe4100e8404f841c0[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jan 8 00:24:30 2014 +0100

    Force LZ4_FORCE_SW_BITCOUNT for Sparc
    
    This change was proposed for Sparc but it's not clear to me
    why it's required.  Proper support exists in the lz4 code to
    detect the endianness and the required builtins are available
    for gcc.  Still I'm including the patch because it will only
    impact Sparc and it may resolve a case which hasn't occured
    to me.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: marku89 <mar42@kola.li>
    Issue #1700

[33mcommit b585bc4afaf37b744acba6be87f5909b4564b845[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jan 8 00:17:24 2014 +0100

    Fix zfs_getattr_fast types
    
    On Sparc sp->blksize will be a 64-bit value which is then cast
    incorrectly to a 32-bit value.  For big endian systems this
    results in an incorrect value for sp->blksize.  To resolve the
    problem local variables of the correct size are used and then
    assigned to sp->blksize.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: marku89 <mar42@kola.li>
    Issue #1700

[33mcommit aa0218d6a12814fac50b287214f9f3b0b99e11b1[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jan 7 23:24:37 2014 +0100

    Fix nvlist 'Bus Error' for Sparc
    
    The mis-aligned memory accesses in nvpair_native_embedded() and
    nvpair_native_embedded_array() will cause a 'Bus Error' for
    architectures such as Sparc which not fully byte addressible.
    To avoid this issue care is taken to avoid dereferencing the
    potentially mis-aligned packed nvlist_t.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: marku89 <mar42@kola.li>
    Issue #1700

[33mcommit 7f89ae6ba0f4e3c1b3e62272bbaa8228afdb020d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jan 7 23:16:46 2014 +0100

    Use local variable to read zp->z_mode
    
    When accessing the zp->z_mode through the SA bulk interface we
    expect that 64-bits are available to hold the result.  However,
    on 32-bit platforms mode_t will only be 32-bits so we cannot
    pass it to SA_ADD_BULK_ATTR().  Instead a local uint64_t variable
    must be used and the result assigned to zp->z_mode.
    
    This went unnoticed on 32-bit little endian platforms because
    the bytes happen to end up in the correct 32-bits.  But on big
    endian platforms like Sparc the zp->z_mode will always end up
    set to zero.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: marku89 <mar42@kola.li>
    Issue #1700

[33mcommit d7ec8d4fd9b704f6bc1220e6a79472ad9b3af0c8[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jan 7 23:14:33 2014 +0100

    Define the needed ISA types for Sparc
    
    Add the minimum required ISA types to support the Sparc
    architecture.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: marku89 <mar42@kola.li>
    Issue #1700

[33mcommit ecf3d9b8e63e5659269e15db527380c65780f71a[m
Author: John Layman <jlayman@sagecloud.com>
Date:   Tue Nov 19 16:34:46 2013 -0500

    Add ddt, ddt_entry, and l2arc_hdr caches
    
    Back the allocations for ddt tables+entries and l2arc headers with
    kmem caches.  This will reduce the cost of allocating these commonly
    used structures and allow for greater visibility of them through the
    /proc/spl/kmem/slab interface.
    
    Signed-off-by: John Layman <jlayman@sagecloud.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1893

[33mcommit 4dad7d91e24875f077e26808fec900224e97dcb2[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jan 7 09:31:38 2014 -0800

    Remove unconditional sharetab update
    
    Removes the unconditional sharetab update when running any zfs
    command. This means the sharetab might become out of date if
    users are manually adding/removing shares with exportfs.  But
    we shouldn't punish all callers to zfs in order to handle that
    unlikely case. In the unlikely event we observe issues because
    of this it can always be added back to just the share/unshare
    call paths where we need an up to date sharetab.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Chris Dunlop <chris@onthe.net.au>
    Issue #845

[33mcommit e07306687d0862e8d43b5a0e32003748dedcfa3b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jan 7 09:21:20 2014 -0800

    Enable /etc/mtab cache to improve performance
    
    Re-enable the /etc/mtab cache to prevent the zfs command from
    having to repeatedly open and read from the /etc/mtab file.
    Instead an AVL tree of the mounted filesystems is created and
    used to vastly speed up lookups. This means that if non-zfs
    filesystems are mounted concurrently the 'zfs mount' will not
    immediately detect them.  In practice that will rarely happen
    and even if it does the absolute worst case would be a failed
    mount.  This was originally disabled out of an abundance of
    paranoia.
    
    NOTE: There may still be some parts of the code which do not
    consult the mtab cache.  They should be updated to check the
    mtab cache as they as discovered to be a problem.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Chris Dunlop <chris@onthe.net.au>
    Issue #845

[33mcommit 8c091798f26e7c1e6fd105e90065ebe12d97dfc2[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Tue Dec 24 16:18:00 2013 +0000

    Add UNSHARING of filesystems and EXPORTING pools
    
    As a 'stop' action ensure the filesystem is unshared before
    it is unmounted, just in case.  Additionally, export the pool
    so it may be cleanly imported by a different host.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #2003

[33mcommit fb8e608d9dacf2f6703da8c853f6086e4dd79824[m
Author: Tim Chase <tim@chase2k.com>
Date:   Mon Dec 23 14:06:34 2013 -0600

    Fix the creation of ZPOOL_HIST_CMD pool history entries.
    
    Move the libzfs_fini() after the zpool_log_history() call so the
    ZPOOL_HIST_CMD entry can get written.
    
    Fix the handling of saved_poolname in zfsdev_ioctl()
    which was broken as part of the stack-reduction work in
    a16878805388c4d96cb8a294de965071d138a47b.
    
    Since ZoL destroys the TSD data in which the previously successful
    ioctl()'s pool name is stored following every vop, the ZFS_IOC_LOG_HISTORY
    ioctl has a very important restriction: it can only successfully write
    a long entry following a successful ioctl() if no intervening vops have
    been performed.  Some of zfs subcommands do perform intervening vops and
    to do the logging themselves. At the moment, the "create" and "clone"
    subcommands have been modified appropriately.
    
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1998

[33mcommit 5d862cb0d9a4b6dcc97a88fa0d5a7a717566e5ab[m
Author: Tim Chase <tim@chase2k.com>
Date:   Thu Dec 19 00:30:56 2013 -0600

    Properly handle updates of variably-sized SA entries.
    
    During the update process in sa_modify_attrs(), the sizes of existing
    variably-sized SA entries are obtained from sa_lengths[]. The case where
    a variably-sized SA was being replaced neglected to increment the index
    into sa_lengths[], so subsequent variable-length SAs would be rewritten
    with the wrong length. This patch adds the missing increment operation
    so all variably-sized SA entries are stored with their correct lengths.
    
    Previously, a size-changing update of a variably-sized SA that occurred
    when there were other variably-sized SAs in the bonus buffer would cause
    the subsequent SAs to be corrupted.  The most common case in which this
    would occur is when a mode change caused the ZPL_DACL_ACES entry to
    change size when a ZPL_DXATTR (SA xattr) entry already existed.
    
    The following sequence would have caused a failure when xattr=sa was in
    force and would corrupt the bonus buffer:
    
    	open(filename, O_WRONLY | O_CREAT, 0600);
    	...
    	lsetxattr(filename, ...);	/* create xattr SA */
    	chmod(filename, 0650);		/* enlarges the ACL */
    
    Signed-off-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1978

[33mcommit ac0340970c8f548a97f3c3c1e9c6fc7b60efd824[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 19 14:30:11 2013 -0800

    Register correct handlers for nvlist_{dup,pack,unpack}
    
    This change is related to commit 81eaf15 which ensured the correct
    allocation handlers were installed for nvlist_alloc().  The nvlist
    functions nvlist_dup(), nvlist_pack(), and nvlist_unpack() suffer
    from the same issue and have been updated accordingly.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1937

[33mcommit 11b9ec23b98eefe1e7bde0033dc8285f94cb0b90[m
Author: Matthew Thode <mthode@mthode.org>
Date:   Thu Dec 19 00:24:14 2013 -0600

    Add full SELinux support
    
    Four new dataset properties have been added to support SELinux.  They
    are 'context', 'fscontext', 'defcontext' and 'rootcontext' which map
    directly to the context options described in mount(8).  When one of
    these properties is set to something other than 'none'.  That string
    will be passed verbatim as a mount option for the given context when
    the filesystem is mounted.
    
    For example, if you wanted the rootcontext for a filesystem to be set
    to 'system_u:object_r:fs_t' you would set the property as follows:
    
      $ zfs set rootcontext="system_u:object_r:fs_t" storage-pool/media
    
    This will ensure the filesystem is automatically mounted with that
    rootcontext.  It is equivalent to manually specifying the rootcontext
    with the -o option like this:
    
      $ zfs mount -o rootcontext=system_u:object_r:fs_t storage-pool/media
    
    By default all four contexts are set to 'none'.  Further information
    on SELinux contexts is detailed in mount(8) and selinux(8) man pages.
    
    Signed-off-by: Matthew Thode <prometheanfire@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Closes #1504

[33mcommit d1d7e2689db9e03f11c069ebc9f1ba12829e5dac[m
Author: Michael Kjorling <michael@kjorling.se>
Date:   Fri Nov 1 20:26:11 2013 +0100

    cstyle: Resolve C style issues
    
    The vast majority of these changes are in Linux specific code.
    They are the result of not having an automated style checker to
    validate the code when it was originally written.  Others were
    caused when the common code was slightly adjusted for Linux.
    
    This patch contains no functional changes.  It only refreshes
    the code to conform to style guide.
    
    Everyone submitting patches for inclusion upstream should now
    run 'make checkstyle' and resolve any warning prior to opening
    a pull request.  The automated builders have been updated to
    fail a build if when 'make checkstyle' detects an issue.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1821

[33mcommit 8ffef572ed2ba97e0c2d6a8aa2240012e611dc6f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Dec 17 13:30:44 2013 -0800

    cstyle: Allow spaces in all comments
    
    Update the cstyle.pl script to allow pictures in all comments not
    just header comments.  Recent changes from Illumos such as d3cc8b1
    have relocated various pictures in the standard block comments to
    make the code more readable.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1821

[33mcommit 351a26ddc0a1ec85886fc961612f05686cce82e6[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Dec 17 16:11:57 2013 -0800

    cstyle: Exclude several files from 'make checkstyle'
    
    The zfs_config.h header and *.mod.c files are both products
    of the build process.  They must be excluded from the style
    check because they are not part of the pristine source.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1821

[33mcommit 2820bc49c5b7d63aa3941b8e173005f17dd0cee4[m
Author: John Wren Kennedy <john.kennedy@delphix.com>
Date:   Wed Dec 18 15:09:45 2013 -0800

    Illumos #4208
    
    4208 Typo in zfs_main.c: "posxiuser"
    
    Reviewed by: Sonu Pillai <sonu.pillai@delphix.com>
    Reviewed by: Will Guyette <will.guyette@delphix.com>
    Reviewed by: Eric Diven <eric.diven@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/4208
      illumos/illumos-gate@f38cb554a534c6df738be3f4d23327e69888e634
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1986

[33mcommit fd8febbd1e6ff3d3eec6b9d395ab65400769da19[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Tue Dec 17 21:53:52 2013 +0000

    Add zfs_send_corrupt_data module option
    
    Tuning setting to ignore read/checksum errors when sending data.
    
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1982
    Issue #1897

[33mcommit 4788a01dbd11b8fd22e0ff95a197a753778e04ca[m
Author: Aaron Fineman <abyxcos@mnetic.ch>
Date:   Wed Dec 18 02:33:40 2013 +0000

    Cause zfs.spec to place dracut files properly
    
    This is an extension of commit ffb2111.  As the fedora conditional
    has been added, this allows centos/rhel-6 to fall back to the
    proper directory (/usr/share/dracut)
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1984

[33mcommit a5f3665168946318c98ed5407b9314d400bd6dde[m
Author: renelson <bnelson@nelsonbe.com>
Date:   Tue Dec 17 10:44:23 2013 -0800

    Handle acl flags from util-linux mount command
    
    Add acl, noacl and posixacl to option_map, avoiding ENOENT error
    case when mount from util-linux-2.24 execs mount.zfs with any of
    those flags
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: renelson <bnelson@nelsonbe.com>
    Issue #1968

[33mcommit 758d35520b7e15fd6db2e8c8f45294a9cf0514cb[m
Author: renelson <bnelson@nelsonbe.com>
Date:   Tue Dec 17 10:38:28 2013 -0800

    Fix grammar in parse_options() error message
    
    A minor grammar error was corrected in in the parse_options()
    error handling for the ENOENT case.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: renelson <bnelson@nelsonbe.com>
    Issue #1968

[33mcommit 7dc71949f2f013a7bf744230d60770893ce23a6a[m
Author: Chunwei Chen <tuxoko@gmail.com>
Date:   Tue Dec 17 10:18:25 2013 -0800

    Fix z_sync_cnt decrement in zfs_close
    
    The comment in zfs_close states that "Under Linux the zfs_close() hook
    is not symmetric with zfs_open()". This is not true. zfs_open/zfs_close
    is associated with every successful struct file creation/deletion, which
    should always be balanced.
    
    Here is an example of what's wrong:
    
    Process A		B
    	open(O_SYNC)
    	z_sync_cnt = 1
    			open(O_SYNC)
    			z_sync_cnt = 2
    	close()
    	z_sync_cnt = 0
    
    So z_sync_cnt is 0 even if B still has the file with O_SYNC.
    
    Also moves the generic_file_open call before zfs_open to ensure that in
    the case generic_file_open fails z_sync_cnt is not incremented.  This
    is safe because generic_file_open has no side effects.
    
    Signed-off-by: Chunwei Chen <tuxoko@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1962

[33mcommit c2d439dffd4c404d39e82e5b174a338515080f26[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Dec 13 11:29:06 2013 -0800

    Silence e2fsck warning in zconfig.sh
    
    When running zconfig.sh test 7 and 8 cause the following warning to
    be printed to the console.  It's caused because we're snapshoting a
    mounted ext2 filesystem which is not in a 'clean' state.  This is
    to be expected since we have no guarentees about the on-disk
    consistency of the filesystem.
    
    EXT2-fs warning: mounting unchecked fs, running e2fsck is recommended
    
    To silence the warning and preserve the intent of these test cases
    they have been updated to unmount the filesystem prior to snapshoting
    them.  This ensures the ext2 filesystem is in a consistent state
    when the snapshot is taken.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Closes #1972

[33mcommit ce37ebd2ebcbc8ec6bbaa56cd22e6e807b6d36f3[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 12 13:04:40 2013 -0800

    cstyle: zvol.c
    
    Update zvol.c to conform to the style guidelines, verified by
    running cstyle.pl on the source file.  This patch contains
    no functional changes.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Issue #1821

[33mcommit d17eab9ce0437d99e165c8d9758a9d0e2c029bdf[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 12 14:55:19 2013 -0800

    Update zfs(8) Snapshots section
    
    The Snapshots section of the zfs(8) man page is incorrect and should
    have been updated as part of #1312.  Snapshots of volumes can be
    accessed independently and their visibility is determined by the
    'snapdev=hidden|visible' property.  This is analogous to the existing
    'snapdir=hidden|visible' property.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Closes #1921

[33mcommit 2e0358cbcab49f7be18762e8cb51e642188709e7[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Dec 13 14:49:33 2013 -0800

    Sync /dev/zfs ioctl ordering
    
    In order to minimize any future disruption caused by the addition
    and removal /dev/zfs ioctls this patch makes the following changes.
    
    1) Sync ZoL's ioctl ordering such that it matches Illumos.  For
       historic reasons the ZFS_IOC_DESTROY_SNAPS and ZFS_IOC_POOL_REGUID
       ioctls were out of order.
    
    2) Move Linux and FreeBSD specific ioctls in to their own reserved
       ranges.  This allows us to preserve the existing ordering when
       new ioctls are added by either Illumos or FreeBSD.  When an
       ioctl is no longer needed it should be retired in place.
    
    This change alters the ZFS user/kernel ABI so make sure you rebuild
    both your user and kernel modules.  However, it should allow for a
    much stabler interface going forward.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Closes #1973

[33mcommit ba6a24026c6eb910188c24b5c921fb793d3c998e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Dec 6 14:20:22 2013 -0800

    Remove ZFC_IOC_*_MINOR ioctl()s
    
    Early versions of ZFS coordinated the creation and destruction
    of device minors from userspace.  This was inherently racy and
    in late 2009 these ioctl()s were removed leaving everything up
    to the kernel.  This significantly simplified the code.
    
    However, we never picked up these changes in ZoL since we'd
    already significantly adjusted this code for Linux.  This patch
    aims to rectify that by finally removing ZFC_IOC_*_MINOR ioctl()s
    and moving all the functionality down in to the kernel.  Since
    this cleanup will change the kernel/user ABI it's being done
    in the same tag as the previous libzfs_core ABI changes.  This
    will minimize, but not eliminate, the disruption to end users.
    
    Once merged ZoL, Illumos, and FreeBSD will basically be back
    in sync in regards to handling ZVOLs in the common code.  While
    each platform must have its own custom zvol.c implemenation the
    interfaces provided are consistent.
    
    NOTES:
    
    1) This patch introduces one subtle change in behavior which
       could not be easily avoided.  Prior to this change callers
       of 'zfs create -V ...' were guaranteed that upon exit the
       /dev/zvol/ block device link would be created or an error
       returned.  That's no longer the case.  The utilities will no
       longer block waiting for the symlink to be created.  Callers
       are now responsible for blocking, this is why a 'udev_wait'
       call was added to the 'label' function in scripts/common.sh.
    
    2) The read-only behavior of a ZVOL now solely depends on if
       the ZVOL_RDONLY bit is set in zv->zv_flags.  The redundant
       policy setting in the gendisk structure was removed.  This
       both simplifies the code and allows us to safely leverage
       set_disk_ro() to issue a KOBJ_CHANGE uevent.  See the
       comment in the code for futher details on this.
    
    3) Because __zvol_create_minor() and zvol_alloc() may now be
       called in a sync task they must use KM_PUSHPAGE.
    
    References:
      illumos/illumos-gate@681d9761e8516a7dc5ab6589e2dfe717777e1123
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Closes #1969

[33mcommit dda12da9f1ec714af0e468aa03c24f402961f135[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Thu Dec 12 10:19:54 2013 -0800

    Illumos #4121 vdev_label_init read only
    
    4121 vdev_label_init should treat request as succeeded when pool
         is read only
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Saso Kiselkov <skiselkov.ml@gmail.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/4121
      illumos/illumos-gate@973c78e94bf9634782164382c9e291bf81161fa5
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1863

[33mcommit 84b0aac5fdab6daf8c4179dfba4abeb47e0d8b8e[m
Author: Tim Chase <tim@chase2k.com>
Date:   Tue Dec 10 16:36:42 2013 -0600

    Fix atime handling.
    
    Previously, the atime-modifying vnops called ZFS_ACCESSTIME_STAMP()
    followed by zfs_inode_update() to update the atime.  However, since atimes
    are cached in the znode for delayed writing, the zfs_inode_update()
    function would effectively ignore the cached atime by reading it from
    the SA.
    
    This commit moves the updating of the atime in the inode into
    zfs_tstamp_update_setup() which is called by the ZFS_ACCESSTIME_STAMP()
    macro and eliminates the call to zfs_inode_update() in the atime-modifying
    vnops.
    
    It's possible the same thing could have been done directly in
    zfs_inode_update() but I wasn't sure that it was safe in all cases where
    it is called.
    
    The effect is that atime handling is as if "strictatime" were selected;
    even if the filesystem is mounted with "relatime".
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1949

[33mcommit 5cb65efe2c3d4aaa77a5881be364c443c859bbc8[m
Author: Shen Yan <shenyanxxxy@qq.com>
Date:   Tue Dec 10 14:58:53 2013 +0800

    Fix zstream_t incorrect type
    
    The DMU zfetch code organizes streams with lists not avl trees.  A
    avl_node_t was mistakenly used for a list_node_t in the zstream_t
    type.  This is incorrect (but harmless) and when unnoticed because:
    
    1) The list functions explicitly cast the value preventing a warning,
    2) sizeof(avl_node_t) >= sizeof(list_node_t) so no overrun occurs, and
    3) The calculated offset is the same regardless of the type.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1946

[33mcommit be5db977eaffd11ae52ddcbb0b64b53ec000082a[m
Author: david.chen <tuxoko@gmail.com>
Date:   Mon Dec 9 15:55:01 2013 +0800

    Remove MAX when initializing arc_c_max
    
    The MAX when initializing arc_c_max doesn't make any sense because
    it hasn't been set anywhere before. Though, arc_c_max should be
    implicitly set to zero when initializing arc_stats, so the MAX
    doesn't make any difference.
    
    The MAX was mistakenly left if place when the Illumos default
    values were changed for Linux.
    
    Signed-off-by: david.chen <tuxoko@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1941

[33mcommit 383efa5743ecf05e11b859e2dcc0133ceab8b458[m
Author: Simon Guest <Simon Guest simon.guest@agresearch.co.nz>
Date:   Mon Dec 9 17:20:20 2013 +1300

    Fix multipath bug in vdev_id caused by inconsistent field numbering
    
    The bug is caused by multipath output like this:
    
    35000c50056bd77a7 dm-15 HP,MB3000FCWDH
    size=2.7T features='0' hwhandler='0' wp=rw
    |-+- policy='round-robin 0' prio=0 status=active
    | `- 2:0:16:0 sdq  65:0    active undef running
    `-+- policy='round-robin 0' prio=0 status=enabled
      `- 4:0:52:0 sdfp 130:176 active undef running
    
    Note that the pipe symbols mean that the field numbering is different
    between the sdq and sdfp lines.  The fix edits out the pipe symbols.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1692

[33mcommit b6e335bfc489c08bb92a8667e71fa7f69e87d960[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Fri Dec 6 15:56:22 2013 -0800

    Revert "Use directory xattrs for symlinks"
    
    This reverts commit 6a7c0ccca44ad02c476a111d8f7911fc8b12fff7.
    
    A proper fix for Issue #1648 was landed under Issue #1890, so this is no
    longer needed.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1648

[33mcommit 472e7c60853af099fbdf9d52162fd39818884f4f[m
Author: James Pan <jiaming.pan@yahoo.com>
Date:   Fri Dec 6 14:16:40 2013 -0800

    sa_find_sizes() may compute wrong SA header size
    
    Under the right conditions sa_find_sizes() will compute an incorrect
    size of the system attribute (SA) header.  This causes a failed assertion
    when the SA_HDR_SIZE_MATCH_LAYOUT() test returns false, and may lead
    to corruption of SA data.
    
    The bug presents itself when there are more than two variable-length SAs
    of just the right size to fit in the bonus buffer of a dnode.  The
    existing logic fails to account for the SA header space needed to store
    the sizes of all the variable-length SAs.
    
    A reproducer was possible on Linux by setting the xattr=sa dataset
    property and storing xattrs on symbolic links (Issue #1648).  Note the
    corrupt link target name:
    
    $ zfs set xattr=sa tank/fish
    $ cd /tank/fish
    $ ln -fs 12345678901234567 link
    $ setfattr -n trusted.0000000000000000000 -v 0x000000000000000000000000 -h link
    $ setfattr -n trusted.1111111111111111111 -v 0x000000000000000000000000 -h link
    $ ls -l link
    lrwxrwxrwx 1 root root 17 Dec  6 15:40 link -> 90123456701234567
    
    Commit 6a7c0ccca44ad02c476a111d8f7911fc8b12fff7 worked around this bug
    by forcing xattr's on symlinks to be stored in directory format.  This
    change implements a proper fix, so the workaround can now be reverted.
    
    The reference link below contains a reproducer for FreeBSD.
    
    References:
      http://lists.open-zfs.org/pipermail/developer/2013-November/000306.html
    
    Ported-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1890

[33mcommit c1ab64d3931cbab45fbb197588cb27cb6fd10c33[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Thu Dec 5 11:37:25 2013 +0000

    Update init script to allow verbose mounts
    
    Allow verbose mounts to make is easier to monitor progress when
    mounting a large number of filesystems.
    
    This functionality is disabled by default.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1929

[33mcommit fc220e9ea536ea7a5bcdd231c8ae36e8fef18cfa[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Thu Dec 5 11:36:58 2013 +0000

    Update init script to allow /dev/disk/by-id import
    
    Many people prefer to use by-id at import time instead of using
    the cache file.  This can be a much better solution than the cache
    file in some environments so we're adding some infrastructure to
    allow it.
    
    This functionality is disabled by default.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1929

[33mcommit 90ee9ed32faa31174c673165c876b92272a93c72[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Dec 4 13:50:34 2013 -0800

    Fix 'zfs diff' shares error
    
    When creating a dataset with ZoL a zsb->z_shares_dir ZAP object
    will not be created because shares are unimplemented.  Instead ZoL
    just sets zsb->z_shares_dir to zero to indicate there are no shares.
    
    However, if you import a pool which was created with a different
    ZFS implementation then the shares ZAP object may exist.  Code was
    added to handle this case but it clearly wasn't sufficiently tested
    with other ZFS pools.
    
    There was a bug in the zpl_shares_getattr() function which passed
    the wrong inode to zfs_getattr_fast() for the case where are shares
    ZAP object does exist.  This causes an EIO to be returned to stat64()
    which in turn causes 'zfs diff' to fail.
    
    This fix is the pass the correct inode after a sucessful zfs_zget().
    Additionally, only put away the references if we were able to get one.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Graham Booker <https://github.com/gbooker>
    Signed-off-by: timemaster67 <https://github.com/timemaster67>
    Closes #1426
    Closes #481

[33mcommit 99e349db92008ee61dad5a612056cf0fdecb3896[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Dec 4 10:32:08 2013 -0800

    Add module versioning
    
    Use the standard Linux MODULE_VERSION macro to expose the installed
    zavl, znvpair, zunicode, zcommon, zfs, and zpios module versions.
    This will also automatically add a checksum of the .c files and
    headers in "srcversion".  See:
    
      /sys/module/zavl/version
      /sys/module/zavl/srcversion
      /sys/module/znvpair/version
      /sys/module/znvpair/srcversion
      /sys/module/zunicode/version
      /sys/module/zunicode/srcversion
      /sys/module/zcommon/version
      /sys/module/zcommon/srcversion
      /sys/module/zfs/version
      /sys/module/zfs/srcversion
      /sys/module/zpios/version
      /sys/module/zpios/srcversion
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1923

[33mcommit e8b96c6007bf97cdf34869c1ffbd0ce753873a3d[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Aug 28 20:01:20 2013 -0700

    Illumos #4045 write throttle & i/o scheduler performance work
    
    4045 zfs write throttle & i/o scheduler performance work
    
    1. The ZFS i/o scheduler (vdev_queue.c) now divides i/os into 5 classes: sync
    read, sync write, async read, async write, and scrub/resilver.  The scheduler
    issues a number of concurrent i/os from each class to the device.  Once a class
    has been selected, an i/o is selected from this class using either an elevator
    algorithem (async, scrub classes) or FIFO (sync classes).  The number of
    concurrent async write i/os is tuned dynamically based on i/o load, to achieve
    good sync i/o latency when there is not a high load of writes, and good write
    throughput when there is.  See the block comment in vdev_queue.c (reproduced
    below) for more details.
    
    2. The write throttle (dsl_pool_tempreserve_space() and
    txg_constrain_throughput()) is rewritten to produce much more consistent delays
    when under constant load.  The new write throttle is based on the amount of
    dirty data, rather than guesses about future performance of the system.  When
    there is a lot of dirty data, each transaction (e.g. write() syscall) will be
    delayed by the same small amount.  This eliminates the "brick wall of wait"
    that the old write throttle could hit, causing all transactions to wait several
    seconds until the next txg opens.  One of the keys to the new write throttle is
    decrementing the amount of dirty data as i/o completes, rather than at the end
    of spa_sync().  Note that the write throttle is only applied once the i/o
    scheduler is issuing the maximum number of outstanding async writes.  See the
    block comments in dsl_pool.c and above dmu_tx_delay() (reproduced below) for
    more details.
    
    This diff has several other effects, including:
    
     * the commonly-tuned global variable zfs_vdev_max_pending has been removed;
    use per-class zfs_vdev_*_max_active values or zfs_vdev_max_active instead.
    
     * the size of each txg (meaning the amount of dirty data written, and thus the
    time it takes to write out) is now controlled differently.  There is no longer
    an explicit time goal; the primary determinant is amount of dirty data.
    Systems that are under light or medium load will now often see that a txg is
    always syncing, but the impact to performance (e.g. read latency) is minimal.
    Tune zfs_dirty_data_max and zfs_dirty_data_sync to control this.
    
     * zio_taskq_batch_pct = 75 -- Only use 75% of all CPUs for compression,
    checksum, etc.  This improves latency by not allowing these CPU-intensive tasks
    to consume all CPU (on machines with at least 4 CPU's; the percentage is
    rounded up).
    
    --matt
    
    APPENDIX: problems with the current i/o scheduler
    
    The current ZFS i/o scheduler (vdev_queue.c) is deadline based.  The problem
    with this is that if there are always i/os pending, then certain classes of
    i/os can see very long delays.
    
    For example, if there are always synchronous reads outstanding, then no async
    writes will be serviced until they become "past due".  One symptom of this
    situation is that each pass of the txg sync takes at least several seconds
    (typically 3 seconds).
    
    If many i/os become "past due" (their deadline is in the past), then we must
    service all of these overdue i/os before any new i/os.  This happens when we
    enqueue a batch of async writes for the txg sync, with deadlines 2.5 seconds in
    the future.  If we can't complete all the i/os in 2.5 seconds (e.g. because
    there were always reads pending), then these i/os will become past due.  Now we
    must service all the "async" writes (which could be hundreds of megabytes)
    before we service any reads, introducing considerable latency to synchronous
    i/os (reads or ZIL writes).
    
    Notes on porting to ZFS on Linux:
    
    - zio_t gained new members io_physdone and io_phys_children.  Because
      object caches in the Linux port call the constructor only once at
      allocation time, objects may contain residual data when retrieved
      from the cache. Therefore zio_create() was updated to zero out the two
      new fields.
    
    - vdev_mirror_pending() relied on the depth of the per-vdev pending queue
      (vq->vq_pending_tree) to select the least-busy leaf vdev to read from.
      This tree has been replaced by vq->vq_active_tree which is now used
      for the same purpose.
    
    - vdev_queue_init() used the value of zfs_vdev_max_pending to determine
      the number of vdev I/O buffers to pre-allocate.  That global no longer
      exists, so we instead use the sum of the *_max_active values for each of
      the five I/O classes described above.
    
    - The Illumos implementation of dmu_tx_delay() delays a transaction by
      sleeping in condition variable embedded in the thread
      (curthread->t_delay_cv).  We do not have an equivalent CV to use in
      Linux, so this change replaced the delay logic with a wrapper called
      zfs_sleep_until(). This wrapper could be adopted upstream and in other
      downstream ports to abstract away operating system-specific delay logic.
    
    - These tunables are added as module parameters, and descriptions added
      to the zfs-module-parameters.5 man page.
    
      spa_asize_inflation
      zfs_deadman_synctime_ms
      zfs_vdev_max_active
      zfs_vdev_async_write_active_min_dirty_percent
      zfs_vdev_async_write_active_max_dirty_percent
      zfs_vdev_async_read_max_active
      zfs_vdev_async_read_min_active
      zfs_vdev_async_write_max_active
      zfs_vdev_async_write_min_active
      zfs_vdev_scrub_max_active
      zfs_vdev_scrub_min_active
      zfs_vdev_sync_read_max_active
      zfs_vdev_sync_read_min_active
      zfs_vdev_sync_write_max_active
      zfs_vdev_sync_write_min_active
      zfs_dirty_data_max_percent
      zfs_delay_min_dirty_percent
      zfs_dirty_data_max_max_percent
      zfs_dirty_data_max
      zfs_dirty_data_max_max
      zfs_dirty_data_sync
      zfs_delay_scale
    
      The latter four have type unsigned long, whereas they are uint64_t in
      Illumos.  This accommodates Linux's module_param() supported types, but
      means they may overflow on 32-bit architectures.
    
      The values zfs_dirty_data_max and zfs_dirty_data_max_max are the most
      likely to overflow on 32-bit systems, since they express physical RAM
      sizes in bytes.  In fact, Illumos initializes zfs_dirty_data_max_max to
      2^32 which does overflow. To resolve that, this port instead initializes
      it in arc_init() to 25% of physical RAM, and adds the tunable
      zfs_dirty_data_max_max_percent to override that percentage.  While this
      solution doesn't completely avoid the overflow issue, it should be a
      reasonable default for most systems, and the minority of affected
      systems can work around the issue by overriding the defaults.
    
    - Fixed reversed logic in comment above zfs_delay_scale declaration.
    
    - Clarified comments in vdev_queue.c regarding when per-queue minimums take
      effect.
    
    - Replaced dmu_tx_write_limit in the dmu_tx kstat file
      with dmu_tx_dirty_delay and dmu_tx_dirty_over_max.  The first counts
      how many times a transaction has been delayed because the pool dirty
      data has exceeded zfs_delay_min_dirty_percent.  The latter counts how
      many times the pool dirty data has exceeded zfs_dirty_data_max (which
      we expect to never happen).
    
    - The original patch would have regressed the bug fixed in
      zfsonlinux/zfs@c418410, which prevented users from setting the
      zfs_vdev_aggregation_limit tuning larger than SPA_MAXBLOCKSIZE.
      A similar fix is added to vdev_queue_aggregate().
    
    - In vdev_queue_io_to_issue(), dynamically allocate 'zio_t search' on the
      heap instead of the stack.  In Linux we can't afford such large
      structures on the stack.
    
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Ned Bass <bass6@llnl.gov>
    Reviewed by: Brendan Gregg <brendan.gregg@joyent.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    
    References:
      http://www.illumos.org/issues/4045
      illumos/illumos-gate@69962b5647e4a8b9b14998733b765925381b727e
    
    Ported-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1913

[33mcommit 384f8a09f8423d951bb81d9ca945e588de14f95f[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Fri Nov 22 15:13:18 2013 -0800

    Illumos #4347 ZPL can use dmu_tx_assign(TXG_WAIT)
    
    Fix a lock contention issue by allowing threads not holding
    ZPL locks to block when waiting to assign a transaction.
    
    Porting Notes:
    
    zfs_putpage() still uses TXG_NOWAIT, unlike the upstream version.  This
    case may be a contention point just like zfs_write(), however it is not
    safe to block here since it may be called during memory reclaim.
    
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Dan McDonald <danmcd@nexenta.com>
    Reviewed by: Boris Protopopov <boris.protopopov@nexenta.com>
    Approved by: Dan McDonald <danmcd@nexenta.com>
    
    References:
      https://www.illumos.org/issues/4347
      illumos/illumos-gate@e722410c49fe67cbf0f639cbcc288bd6cbcf7dd1
    
    Ported-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 729210564a5325e190fc4fba22bf17bacf957ace[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Mon Nov 25 12:21:21 2013 -0500

    Properly ignore bdi_setup_and_register return value
    
    This broke compilation against Linux 3.13 and GCC 4.7.3.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1906

[33mcommit 2e40f094109c2b345447351f07b0b525f44988d2[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Dec 2 10:26:21 2013 -0800

    Remove incorrect ASSERT in zfs_sb_teardown()
    
    As part of zfs_sb_teardown() there is an assertion that all inodes
    which are part of the zsb->z_all_znodes list have at least one
    reference on them.  This is always true for the standard unmount
    case but there are two other cases where it is not strictly true.
    
    * zfs_ioc_rollback() - This is the most common case and it results
      from the fact that we aren't unmounting the filesystem.  During a
      normal unmount the MS_ACTIVE flag will be cleared on the super block
      causing iput_final() to evict the inode when its reference count
      drops to zero.  However, during a rollback MS_ACTIVE remains set
      since we're rolling back a live filesystem and need to preserve the
      existing super block.  This allows inodes with a zero reference count
      to stay in the cache thereby violating the assertion.
    
    * destroy_inode() / zfs_sb_teardown() - There exists a small race
      between dropping the last reference on an inode and removing it from
      the zsb->z_all_znodes list.  This is unlikely to occur but could also
      trigger the assertion which is incorrect.  The inode may safely have
      a zero reference count in this case.
    
    Since allowing a zero reference count on the inode is expected and
    safe for both of these cases the simplest thing to do is remove the
    ASSERT.  This code is only enabled for default builds so removing
    this entirely is a very safe change.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Tim Chase <tim@chase2k.com>
    Closes #1417
    Closes #1536

[33mcommit c8c8d1e7e5dd156ac0c268895edcd9e552a3adea[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Wed Nov 13 09:30:21 2013 -0500

    Drive database update
    
    Added:
    
    Adata S396 (obtained from drive_id)
    Apple MacBookAir3,1 SSD (obtained from drive_id)
    Apple MacBookPro10,1 SSD (obtained from drive_id)
    Intel 510 (obtained from drive_id)
    Intel 710 (obtained from drive_id)
    Intel DC S3500 (obtained from drive_id)
    Netapp LUN (obtained from illumos user's sd.conf)
    OCZ Agility 3 (obtained from drive_id)
    OCZ Vertex (obtained from drive_id)
    Samsung PM800 (obtained from drive_id)
    Sandisk U100 (obtained from drive_id)
    Sun Comstar (obtained from illumos user's sd.conf)
    
    Notes:
    
    1. The entries for the Intel DC S3500 were extrapolated from the 800GB
    model's entry, which is "ATA     INTEL SSDSC2BB80".
    
    2. The entires for the Intel 710 were extrapolated from the 120GG
    model's entry, which is "ATA     INTEL SSDSA2BZ12".
    
    3. The entires for the Intel 510 were extrapolated from the 250GB
    model's entry, which is "ATA     INTEL SSDSC2MH25".
    
    4. The entires for the Apple MacBookPro10,1 SSD were extrapolated from
    the 512GB model's entry, which is "ATA     APPLE SSD SM512E". Google
    searches suggest that this is a rebadged Samsung 830.
    
    5. The entires for the Apple MacBookAir3,1 SSD were extrapolated from
    the 128GB model's entry, which is "ATA     APPLE SSD TS128C". Google
    searches suggest that this is a rebadged Kingston SSDNow V+ 100 (based
    on Toshiba).
    
    6. Sun Comstar is an iSCSI Target, so we cannot tell what the correct
    sector size is through this method. We list it only for reference
    purposes, but it is commented out. Similarly, it is not clear what the
    right thing to do for Netapp is, so we comment it out.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1907

[33mcommit f707635fa5a0a687f243a9b0976d7296955744d9[m
Author: Tim Chase <tim@chase2k.com>
Date:   Wed Nov 20 07:56:56 2013 -0600

    Some nvlist allocations in hold processing need to use KM_PUSHPAGE.
    
    This should hopefully catch the rest of the allocations in the
    user hold/release processing that were missed by commit
    65c67ea86e9f112177f1ad32de8e780f10798a64.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1852
    Closes #1855

[33mcommit 119a394ab0eee137a5198ad3fffab45fb11ef108[m
Author: Etienne Dechamps <etienne@edechamps.fr>
Date:   Sun Nov 10 15:00:11 2013 +0000

    Only commit the ZIL once in zpl_writepages() (msync() case).
    
    Currently, using msync() results in the following code path:
    
        sys_msync -> zpl_fsync -> filemap_write_and_wait_range -> zpl_writepages -> write_cache_pages -> zpl_putpage
    
    In such a code path, zil_commit() is called as part of zpl_putpage().
    This means that for each page, the write is handed to the DMU, the ZIL
    is committed, and only then do we move on to the next page. As one might
    imagine, this results in atrocious performance where there is a large
    number of pages to write: instead of committing a batch of N writes,
    we do N commits containing one page each. In some extreme cases this
    can result in msync() being ~700 times slower than it should be, as well
    as very inefficient use of ZIL resources.
    
    This patch fixes this issue by making sure that the requested writes
    are batched and then committed only once. Unfortunately, the
    implementation is somewhat non-trivial because there is no way to run
    write_cache_pages in SYNC mode (so that we get all pages) without
    making it wait on the writeback tag for each page.
    
    The solution implemented here is composed of two parts:
    
     - I added a new callback system to the ZIL, which allows the caller to
       be notified when its ITX gets written to stable storage. One nice
       thing is that the callback is called not only in zil_commit() but
       in zil_sync() as well, which means that the caller doesn't have to
       care whether the write ended up in the ZIL or the DMU: it will get
       notified as soon as it's safe, period. This is an improvement over
       dmu_tx_callback_register() that was used previously, which only
       supports DMU writes. The rationale for this change is to allow
       zpl_putpage() to be notified when a ZIL commit is completed without
       having to block on zil_commit() itself.
    
     - zpl_writepages() now calls write_cache_pages in non-SYNC mode, which
       will prevent (1) write_cache_pages from blocking, and (2) zpl_putpage
       from issuing ZIL commits. zpl_writepages() will issue the commit
       itself instead of relying on zpl_putpage() to do it, thus nicely
       batching the writes. Note, however, that we still have to call
       write_cache_pages() again in SYNC mode because there is an edge case
       documented in the implementation of write_cache_pages() whereas it
       will not give us all dirty pages when running in non-SYNC mode. Thus
       we need to run it at least once in SYNC mode to make sure we honor
       persistency guarantees. This only happens when the pages are
       modified at the same time msync() is running, which should be rare.
       In most cases there won't be any additional pages and this second
       call will do nothing.
    
    Note that this change also fixes a bug related to #907 whereas calling
    msync() on pages that were already handed over to the DMU in a previous
    writepages() call would make msync() block until the next TXG sync
    instead of returning as soon as the ZIL commit is complete. The new
    callback system fixes that problem.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1849
    Closes #907

[33mcommit 14cecbb159a45c37f84948c758db1009dda49c62[m
Author: Trey Dockendorf <treydock@gmail.com>
Date:   Fri Nov 15 13:36:24 2013 -0600

    Change zfs-dkms requirement
    
    Version 2.2.0.3-20 of dkms in the EPEL/Fedora repositories added the
    necessary patches to support ZoL,  Therefore, the zfs-dkms requirement
    on dkms is set to match that version or higher.  This allows us to
    drop the custom dkms build in the ZoL EPEL/Fedora repositories.
    
    References:
      https://bugzilla.redhat.com/show_bug.cgi?id=1023598
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1873

[33mcommit 54d5378faea6861156fe94b4cd8d817836ed0242[m
Author: Yuri Pankov <yuri.pankov@nexenta.com>
Date:   Tue Nov 19 16:41:37 2013 +0100

    Illumos #2583
    
    2583 Add -p (parsable) option to zfs list
    
    References:
      https://www.illumos.org/issues/2583
      illumos/illumos-gate@43d68d68c1ce08fb35026bebfb141af422e7082e
    
    Ported-by: Gregor Kopka <gregor@kopka.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes: #937

[33mcommit e3dc14b86182a82d99faaa5979846750d937160e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Nov 15 09:59:09 2013 -0800

    Add I/O Read/Write Accounting
    
    Because ZFS bypasses the page cache we don't inherit per-task I/O
    accounting for free.  However, the Linux kernel does provide helper
    functions allow us to perform our own accounting.  These are most
    commonly used for direct IO which also bypasses the page cache, but
    they can be used for the common read/write call paths as well.
    
    Signed-off-by: Pavel Snajdr <snajpa@snajpa.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #313
    Closes #1275

[33mcommit 29714574fa17291d8427f9a45b109292166d5551[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Sat Nov 16 06:52:54 2013 +0000

    Document ZFS module parameters.
    
    This is a first draft of a zfs-module-parameters(5) man page. I have
    just extracted the parameter name and its description with modinfo,
    then checked the source what type it is and its default value.
    
    This will need more work, preferably someone that actually know these
    values and what to use them for.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1856

[33mcommit 539defc873dd1b53d7fc483947e56cbfaeebeee8[m
Author: Maximilian Mehnert <maximilian.mehnert@gmx.de>
Date:   Sun Nov 17 11:47:50 2013 +0100

    Add missing libzfs_core to Makefiles
    
    On some platforms symbols provided by libzfs_core and used by
    libzfs were not available to the linker.  To avoid this issue
    libzfs_core has been added to the list of required libraries
    when building utilities which depend on libzfs.  This should
    have been handled properly by libtool and it's still not
    entirely clear why it wasn't on all platforms.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1841

[33mcommit e5bacf2109943b813e77185cffb7db07747a6d9c[m
Author: Steven Hartland <smh@freebsd.org>
Date:   Wed Nov 20 00:48:28 2013 +1100

    Illumos #4322
    
    4322 ZFS deadlock on dp_config_rwlock
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Ilya Usvyatsky <ilya.usvyatsky@nexenta.com>
    Approved by: Dan McDonald <danmcd@nexenta.com>
    
    References:
      https://www.illumos.org/issues/4322
      illumos/illumos-gate@c50d56f667f119d78fa3d94d6bef2c298ba556f6
    
    Ported by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1886

[33mcommit fd2366300025ef7b836d80d629bd505c10693b4f[m
Author: DHE <git@dehacked.net>
Date:   Tue Nov 19 19:00:43 2013 -0500

    Fix typos in commit b83e3e48c9b183a80dd00eb6c7431a1cbc7d89c9
    
    There's a missing semicolon and equals sign in the first hunk of this
    commit in config/kernel-bdi.m4. This results in the test always
    failing. The effects were noticed when rrdtool, a tool which modifies
    files by mmap() and msync(), would have data never get saved to disk
    in spite of the files working while the mounted filesystem remains
    mounted.
    
    Signed-off-by: DHE <git@dehacked.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Closes #1889

[33mcommit 64ad2b26e24ae9f70d3a41c786144552c2e6ac12[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Nov 14 14:22:52 2013 -0800

    Remove the slog restriction on bootfs pools
    
    Under Linux this restriction does not apply because we have access
    to all the required devices.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1631

[33mcommit 28967367c9e1e97bbd9745da21e26650b508f6f8[m
Author: Cyril Plisko <cyril.plisko@mountall.com>
Date:   Mon Aug 26 09:04:38 2013 +0300

    Tighten zfs dependency on zfs-kmod
    
    Make zfs depend on the same version of zfs-kmod, rather than on same or
    better. When yum repository contains a number of versions the dependency
    resolution breaks on trying to install non-latest version.
    
    Signed-off-by: Cyril Plisko <cyril.plisko@mountall.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1677

[33mcommit 227bc96951c020a6ea16dbb244901d65d5ee4ba1[m
Author: Matthew Thode <mthode@mthode.org>
Date:   Wed Nov 6 15:54:54 2013 -0600

    Fixes (extends) support for selinux xattrs to more inode types
    
    Properly initialize SELinux xattrs for all inode types.  The
    initial implementation accidentally only did this for files.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1832

[33mcommit a16878805388c4d96cb8a294de965071d138a47b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Nov 13 11:05:17 2013 -0800

    Reduce stack for traverse_visitbp() recursion
    
    During pool import stack overflows may still occur due to the
    potentially deep recursion of traverse_visitbp().  This is most
    likely to occur when additional layers are added to the block
    device stack such as DM multipath.  To minimize the stack usage
    for this call path the following changes were made:
    
    1) Added the keywork 'noinline' to the vdev_*_map_alloc() functions
       to prevent them from being inlined by gcc.  This reduced the
       stack usage of vdev_raidz_io_start() from 208 to 128 bytes, and
       vdev_mirror_io_start() from 144 to 128 bytes.
    
    2) The 'saved_poolname' charater array in zfsdev_ioctl() was moved
       from the stack to the heap.  This reduced the stack usage of
       zfsdev_ioctl() from 368 to 112 bytes.
    
    3) The major saving came from slimming down traverse_visitbp() from
       from 224 to 144 bytes.  Since this function is called recursively
       the 80 bytes saved per invokation adds up.  The following changes
       were made:
    
      a) The 'hard' local variable was replaced by a TD_HARD() macro.
    
      b) The 'pd' local variable was replaced by 'td->td_pfd' references.
    
      c) The zbookmark_t was moved to the heap.  This does cost us an
         additional memory allocation per recursion by that cost should
         still be minimal.  The cost could be further reduced by adding
         a dedicated zbookmark_t slab cache.
    
      d) The variable declarations in 'if (BP_GET_LEVEL()) { }' were
         restructured to use the minimum amount of stack.  This includes
         removing the 'cbp' local variable.
    
    Overall for the offending use case roughly 1584 of total stack space
    has been saved.  This is enough to avoid overflowing the stack on
    stock kernels with 8k stacks.  See #1778 for additional details.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Closes #1778

[33mcommit 65c67ea86e9f112177f1ad32de8e780f10798a64[m
Author: Tim Chase <tim@chase2k.com>
Date:   Sun Nov 10 09:00:54 2013 -0600

    Some nvlist allocations in hold processing need to use KM_PUSHPAGE.
    
    Commit 95fd54a1c5b93bb2aa3e7dffc28c784b1e21a8bb restructured the
    hold/release processing and moved some of the work into the sync task.
    A number of nvlist allocations now need to use KM_PUSHPAGE.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1852
    Closes #1855

[33mcommit 2008e9209f2ec37321ec06de4988c5c7f9a015b8[m
Author: Tim Chase <tim@chase2k.com>
Date:   Sat Nov 9 19:22:06 2013 -0600

    Fix rollback of mounted filesystem regression
    
    The Illumos #3875 patch reverted a part of ZoL's 7b3e34b which added
    special-case error handling for zfs_rezget().  The error handling dealt
    with the case in which an all-ones object number ended up being passed
    to dnode_hold() and causing an EINVAL to be returned from zfs_rezget().
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1859
    Closes #1861

[33mcommit 09d672d331377e5764bc94b3362c35481ae96a52[m
Author: Matthew Thode <mthode@mthode.org>
Date:   Fri Nov 8 15:53:54 2013 -0600

    Python 3 fixes
    
    Future proofing for compatibility with newer versions of Python.
    
    Signed-off-by: Matthew Thode <prometheanfire@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1838

[33mcommit 23bc1f91fc5694699750be6343070e0d16fbe4ea[m
Author: Matthew Thode <mthode@mthode.org>
Date:   Fri Nov 8 15:52:06 2013 -0600

    pep8 code readability changes
    
    Update the code to follow the pep8 style guide.
    
    References:
      http://www.python.org/dev/peps/pep-0008/
    
    Signed-off-by: Matthew Thode <prometheanfire@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1838

[33mcommit 7a4f54688ee9503c5bf9fcd7a88c4b4b33c36572[m
Author: Bassu <bassu@phi9.com>
Date:   Sat Nov 9 02:16:38 2013 +0500

    Explain 'zfs list -t snap -o name -s name' speedup
    
    Commit 0cee240 from FreeBSD dramatically speeds up 'zfs list'
    performance assuming you're only interested in the dataset
    names.  This optimization should be mentioned in the man page
    to allow end users to take advantage of it.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1847

[33mcommit 760ec997dfde8cf7dcbe1f367456423668e0cf76[m
Author: Matthew Thode <mthode@mthode.org>
Date:   Wed Nov 6 16:56:50 2013 -0600

    Updating init scripts to have more robust grepping
    
    The previous pattern could accidentally match on things like
    'real_root=ZFS=node02-zp00/ROOT/rootfs' due to the 'ZFS=no'
    substring.
    
    Signed-off-by: Matthew Thode <mthode@mthode.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1837

[33mcommit fd4f76160cb34539f875781fe7f2dea4b937ace5[m
Author: Tim Chase <tim@chase2k.com>
Date:   Wed Nov 6 23:55:18 2013 -0600

    Handle concurrent snapshot automounts failing due to EBUSY.
    
    In the current snapshot automount implementation, it is possible for
    multiple mounts to attempted concurrently.  Only one of the mounts will
    succeed and the other will fail.  The failed mounts will cause an EREMOTE
    to be propagated back to the application.
    
    This commit works around the problem by adding a new exit status,
    MOUNT_BUSY to the mount.zfs program which is used when the underlying
    mount(2) call returns EBUSY.  The zfs code detects this condition and
    treats it as if the mount had succeeded.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1819

[33mcommit b1d13a60d12a7df0f2e1bed6405529790213a6cb[m
Author: Tim Chase <tim@chase2k.com>
Date:   Thu Nov 7 22:45:39 2013 -0600

    Document the dedupditto pool property.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1839

[33mcommit b695c34ea4ca3037cfbc0fe7a9283334b761abc1[m
Author: Massimo Maggi <me@massimo-maggi.eu>
Date:   Sun Nov 3 00:40:26 2013 +0100

    Honor CONFIG_FS_POSIX_ACL kernel option
    
    The required Posix ACL interfaces are only available for kernels
    with CONFIG_FS_POSIX_ACL defined.  Therefore, only enable Posix
    ACL support for these kernels.  All major distribution kernels
    enable CONFIG_FS_POSIX_ACL by default.
    
    If your kernel does not support Posix ACLs the following warning
    will be printed at ZFS module load time.
    
      "ZFS: Posix ACLs disabled by kernel"
    
    Signed-off-by: Massimo Maggi <me@massimo-maggi.eu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1825

[33mcommit 78e2739d3c9e433c92cd1623a510edb2c83a97d9[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Mon Aug 12 12:53:33 2013 -0400

    26126 panic system rather than corrupting pool if we hit bug 26100
    
    References:
      delphix/delphix-os@931c8aaab74b6412933d299890894262e2ef8380
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1650

[33mcommit 2517c8ee08ef21ba112c00a94070302cdca04a58[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Nov 5 10:32:39 2013 -0800

    Switch allocations from KM_SLEEP to KM_PUSHPAGE
    
    A couple of kmem_alloc() allocations were using KM_SLEEP in
    the sync thread context.  These were accidentally introduced
    by the recent set of Illumos patches.  The solution is to
    switch to KM_PUSHPAGE.
    
    dsl_dataset_promote_sync() -> promote_hold() -> snaplist_make() ->
    kmem_alloc(sizeof (*snap), KM_SLEEP);
    
    dsl_dataset_user_hold_sync() -> dsl_onexit_hold_cleanup() ->
    kmem_alloc(sizeof (*ca), KM_SLEEP)
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775

[33mcommit 1ca546b33888b8f4c7e737faf8f038732926fd6e[m
Author: Saso Kiselkov <skiselkov.ml@gmail.com>
Date:   Mon Oct 14 18:29:45 2013 -0400

    Illumos #3995
    
    3995 Memory leak of compressed buffers in l2arc_write_done
    
    References:
      https://illumos.org/issues/3995
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1688
    Issue #1775

[33mcommit 43a696ed38cae25ec2d7b6466ab4a99eb86df7bd[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Fri Oct 4 14:13:23 2013 -0800

    Illumos #4168, #4169, #4170
    
    4168 ztest assertion failure in dbuf_undirty
    4169 verbatim import causes zdb to segfault
    4170 zhack leaves pool in ACTIVE state
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Dan McDonald <danmcd@nexenta.com>
    
    References:
      https://www.illumos.org/issues/4168
      https://www.illumos.org/issues/4169
      https://www.illumos.org/issues/4170
      illumos/illumos-gate@7fdd916c474ea52896c671bbe7b56ba34a1ca132
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775

[33mcommit 92bc214c2e00bd4a430eac1629f1bcf2fc590d51[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Fri Aug 30 01:19:35 2013 -0800

    Illumos #4082
    
    4082 zfs receive gets EFBIG from dmu_tx_hold_free()
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/4082
      illumos/illumos-gate@5253393b09789ec67bec153b866d7285a1cf1645
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775

[33mcommit ac72fac3eaa569902cad88053167f7d74e7fe7e4[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Thu Aug 29 10:56:49 2013 -0800

    Illumos #3954, #4080, #4081
    
    3954 metaslabs continue to load even after hitting zfs_mg_alloc_failure limit
    4080 zpool clear fails to clear pool
    4081 need zfs_mg_noalloc_threshold
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/3954
      https://www.illumos.org/issues/4080
      https://www.illumos.org/issues/4081
      illumos/illumos-gate@22e30981d82a0b6dc89253596ededafae8655e00
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775

[33mcommit a169a625a6d57ae0a92147cfde0da69235b2d4f1[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Thu Aug 22 09:51:47 2013 -0800

    Illumos #4046
    
    4046 dsl_dataset_t ds_dir->dd_lock is highly contended
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
      https://www.illumos.org/issues/4046
      illumos/illumos-gate@b62969f868a827f0823a084bc0af9c7d8b76c659
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775
    
    Porting notes:
    
    1. This commit removed dsl_dataset_namelen in Illumos, but that
       appears to have been removed from ZFSOnLinux in an earlier commit.

[33mcommit 8ce0af07bb3227c152d32e74683d1fdc1869246c[m
Author: Marcel Telka <marcel.telka@nexenta.com>
Date:   Thu Aug 15 22:33:42 2013 -0400

    Illumos #4061
    
    4061 libzfs: memory leak in iter_dependents_cb()
    Reviewed by: Jeffry Molanus <jeffry.molanus@nexenta.com>
    Reviewed by: Boris Protopopov <boris.protopopov@nexenta.com>
    Reviewed by: Andy Stormont <andyjstormont@gmail.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Dan McDonald <danmcd@nexenta.com>
    
    References:
      https://www.illumos.org/issues/4061
      illumos/illumos-gate@2fbdf8dbf01ec1c85fcd3827cdf9e9f5f46c4c8a
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775

[33mcommit b663a23d36d805dd5e9d1b4663dbf5966944002d[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Tue Aug 20 20:11:52 2013 -0800

    Illumos #4047
    
    4047 panic from dbuf_free_range() from dmu_free_object() while
         doing zfs receive
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Dan McDonald <danmcd@nexenta.com>
    
    References:
      https://www.illumos.org/issues/4047
      illumos/illumos-gate@713d6c208802cfbb806329ec0d154b641b80c355
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775
    
    Porting notes:
    
    1. The exported symbol dmu_free_object() was renamed to
       dmu_free_long_object() in Illumos.

[33mcommit 46ba1e59d3ae7e374c7a98f15f4bef21ee3fcded[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Aug 14 11:42:31 2013 -0800

    Illumos #3996
    
    3996 want a libzfs_core API to rollback to latest snapshot
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Andy Stormont <andyjstormont@gmail.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/3996
      illumos/illumos-gate@a7027df17fad220a20367b9d1eb251bc6300d203
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775

[33mcommit 5d1f7fb647e8923d154901ef3e19676e7bf3d345[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Wed Aug 7 12:16:22 2013 -0800

    Illumos #3956, #3957, #3958, #3959, #3960, #3961, #3962
    
    3956 ::vdev -r should work with pipelines
    3957 ztest should update the cachefile before killing itself
    3958 multiple scans can lead to partial resilvering
    3959 ddt entries are not always resilvered
    3960 dsl_scan can skip over dedup-ed blocks if physical birth != logical birth
    3961 freed gang blocks are not resilvered and can cause pool to suspend
    3962 ztest should print out zfs debug buffer before exiting
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/3956
      https://www.illumos.org/issues/3957
      https://www.illumos.org/issues/3958
      https://www.illumos.org/issues/3959
      https://www.illumos.org/issues/3960
      https://www.illumos.org/issues/3961
      https://www.illumos.org/issues/3962
      illumos/illumos-gate@b4952e17e8858d3225793b28788278de9fe6038d
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    Porting notes:
    
    1. zfs_dbgmsg_print() is only used in userland. Since we do not have
       mdb on Linux, it does not make sense to make it available in the
       kernel. This means that a build failure will occur if any future
       kernel patch depends on it. However, that is unlikely given that
       this functionality was added to support zdb.
    
    2. zfs_dbgmsg_print() is only invoked for -VVV or greater log levels.
       This preserves the existing behavior of minimal noise when running
       with -V, and -VV.
    
    3. In vdev_config_generate() the call to nvlist_alloc() was not
       changed to fnvlist_alloc() because we must pass KM_PUSHPAGE in
       the txg_sync context.

[33mcommit 621dd7bb2c970838bcf2226ac365c517af7a4bb1[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Wed Aug 7 10:24:34 2013 -0800

    Illumos #3949, #3950, #3952, #3953
    
    3949 ztest fault injection should avoid resilvering devices
    3950 ztest: deadman fires when we're doing a scan
    3951 ztest hang when running dedup test
    3952 ztest: ztest_reguid test and ztest_fault_inject don't place nice together
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/3949
      https://www.illumos.org/issues/3950
      https://www.illumos.org/issues/3951
      https://www.illumos.org/issues/3952
      illumos/illumos-gate@2c1e2b44148432fb7a509dd216a99299b6740250
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775
    
    Porting notes:
    
    1. The deadman thread was removed from ztest during the original
       port because it depended on Solaris thr_create() interface.
       This functionality should be reintroduced using the more
       portable pthreads.

[33mcommit 383fc4a9970ede483dc4bd7579f1c62942d1312f[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Aug 7 10:32:46 2013 -0800

    Illumos #3955
    
    3955 ztest failure: assertion refcount_count(&tx->tx_space_written) +
         delta <= tx->tx_space_towrite
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/3955
      illumos/illumos-gate@be9000cc677e0a8d04e5be45c61d7370fc8c7b54
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775

[33mcommit 9554185d90a9f833c023c1bb8bc35779b8fd1b10[m
Author: Steven Hartland <smh@freebsd.org>
Date:   Tue Aug 6 09:50:40 2013 -0800

    Illumos #3973
    
    3973 zfs_ioc_rename alters passed in zc->zc_name
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Christopher Siden <christopher.siden@delphix.com>
    
    References:
      https://www.illumos.org/issues/3973
      illumos/illumos-gate@a0c1127b147dc6a0372b141deb8c0c2b0195b8ea
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775

[33mcommit 6389d42205f56083b7658b2c67f117a244f13e52[m
Author: Steven Hartland <smh@freebsd.org>
Date:   Mon Jul 29 11:36:31 2013 -0800

    Illumos #3909
    
    3909 "zfs send -D" does not work
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Christopher Siden <christopher.siden@delphix.com>
    
    References:
      https://www.illumos.org/issues/3909
      illumos/illumos-gate@36f7455d36b60be70d7aae5959fa19e71954678e
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775

[33mcommit ea97f8ce35a8a515610e52b7e4744549f9c510f4[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Mon Jul 29 10:58:53 2013 -0800

    Illumos #3834
    
    3834 incremental replication of 'holey' file systems is slow
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/3834
      illumos/illumos-gate@ca48f36f20f6098ceb19d5b084b6b3d4b8eca9fa
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775

[33mcommit 2883cad5b747b5e4e2164fbe3236451d5b43f333[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Jul 3 08:13:38 2013 -0800

    Illumos #3836
    
    3836 zio_free() can be processed immediately in the common case
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Approved by: Dan McDonald <danmcd@nexenta.com>
    
    References:
      https://www.illumos.org/issues/3836
      illumos/illumos-gate@9cb154a3c9f170904dce9bad5bd5a7d256b922a4
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775

[33mcommit 498877baf5038b32c1531e5ec96b435023200f4d[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Thu May 16 14:18:06 2013 -0700

    Illumos #3112, #3113, #3114
    
    3112 ztest does not honor ZFS_DEBUG
    3113 ztest should use watchpoints to protect frozen arc bufs
    3114 some leaked nvlists in zfsdev_ioctl
    
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Matt Amdur <Matt.Amdur@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Christopher Siden <chris.siden@delphix.com>
    Approved by: Eric Schrock <eric.schrock@delphix.com>
    
    References:
      https://www.illumos.org/issues/3112
      https://www.illumos.org/issues/3113
      https://www.illumos.org/issues/3114
      illumos/illumos-gate@cd1c8b85eb30b568e9816221430c479ace7a559d
    
    The /proc/self/cmd watchpoint interface is specific to Solaris.
    Therefore, the #3113 implementation was reworked to use the more
    portable mprotect(2) system call.  When the pages are watched they
    are marked read-only for protection.  Any write to the protected
    address range immediately trigger a SIGSEGV.  The pages are marked
    writable again when they are unwatched.
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1489

[33mcommit 03c6040bee6c87a9413b7da41d9f580f79a8ab62[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Fri May 10 12:47:54 2013 -0700

    Illumos #3236
    
    3236 zio nop-write
    Reviewed by: Matt Ahrens <matthew.ahrens@delphix.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Christopher Siden <chris.siden@delphix.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
      illumos/illumos-gate@80901aea8e78a2c20751f61f01bebd1d5b5c2ba5
      https://www.illumos.org/issues/3236
    
    Porting Notes
    
    1. This patch is being merged dispite an increased instance of
       https://www.illumos.org/issues/3113 being triggered by ztest.
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1489

[33mcommit 831baf06efb3023ddee7ed41800d3b44521bf2ee[m
Author: Keith M Wesolowski <wesolows@foobazco.org>
Date:   Sat Jul 27 10:50:07 2013 -0700

    Illumos #3875
    
    3875 panic in zfs_root() after failed rollback
    Reviewed by: Jerry Jelinek <jerry.jelinek@joyent.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Gordon Ross <gwr@nexenta.com>
    
    References:
      https://www.illumos.org/issues/3875
      illumos/illumos-gate@91948b51b8e978ddc88a36b2bc3ae83c20cdc9aa
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775

[33mcommit 19580676295b4e271da63dce145bb17c3731d069[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Mon Jul 29 10:55:16 2013 -0800

    Illumos #3888
    
    3888 zfs recv -F should destroy any snapshots created since
         the incremental source
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Peng Dai <peng.dai@delphix.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/3888
      illumos/illumos-gate@34f2f8cf94052481c81be2e134b94a00b501bf21
    
    Porting notes:
    
    1. Commit 1fde1e37208c2f56c72c70a06676676f04b65998 wrapped a
       declaration in dsl_dataset_modified_since_lastsnap in ASSERTV().
       The ASSERTV() and local variable have been removed to avoid an
       unused variable warning.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Ported-by: Richard Yao <ryao@gentoo.org>
    Issue #1775

[33mcommit 96c2e961938d4018ddb393fa60e004d8a91a58e9[m
Author: Keith M Wesolowski <wesolows@foobazco.org>
Date:   Sat Jul 27 10:51:50 2013 -0700

    Illumos #3894
    
    3894 zfs should not allow snapshot of inconsistent dataset
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Gordon Ross <gwr@nexenta.com>
    
    References:
      https://www.illumos.org/issues/3894
      illumos/illumos-gate@ca48f36f20f6098ceb19d5b084b6b3d4b8eca9fa
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775

[33mcommit 1a077756e8ba946a55f999fa1cb5f0e7dcb9aa81[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Thu Jun 20 14:43:17 2013 -0800

    Illumos #3829
    
    3829 fix for 3740 changed behavior of zfs destroy/hold/release ioctl
    Reviewed by: Matt Amdur <matt.amdur@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/3829
      illumos/illumos-gate@bb6e70758d0c30c09f148026d6e686e21cfc8d18
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775

[33mcommit 34ffbed88c949bc4c8b52691e548db16a6e6816a[m
Author: Steven Hartland <smh@freebsd.org>
Date:   Tue Jun 18 22:36:40 2013 -0800

    Illumos #3818
    
    3818 zpool status -x should report pools with removed l2arc devices
    Reviewed by: Saso Kiselkov <skiselkov.ml@gmail.com>
    Reviewed by: George Wilson <gwilson@zfsmail.com>
    Approved by: Christopher Siden <christopher.siden@delphix.com>
    
    References:
      https://www.illumos.org/issues/3818
      illumos/illumos-gate@7f2416ef64fb43dab18d9b36c0da64bea37c0df3
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775

[33mcommit 95fd54a1c5b93bb2aa3e7dffc28c784b1e21a8bb[m
Author: Steven Hartland <smh@freebsd.org>
Date:   Sat May 25 02:06:23 2013 +0000

    Illumos #3740
    
    3740 Poor ZFS send / receive performance due to snapshot
         hold / release processing
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Christopher Siden <christopher.siden@delphix.com>
    
    References:
      https://www.illumos.org/issues/3740
      illumos/illumos-gate@a7a845e4bf22fd1b2a284729ccd95c7370a0438c
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775
    
    Porting notes:
    
    1. 13fe019870c8779bf2f5b3ff731b512cf89133ef introduced a merge conflict
       in dsl_dataset_user_release_tmp where some variables were moved
       outside of the preprocessor directive.
    
    2. dea9dfefdd747534b3846845629d2200f0616dad made the previous merge
       conflict worse by switching KM_SLEEP to KM_PUSHPAGE. This is notable
       because this commit refactors the code, adding a new KM_SLEEP
       allocation. It is not clear to me whether this should be converted
       to KM_PUSHPAGE.
    
    3. We had a merge conflict in libzfs_sendrecv.c because of copyright
       notices.
    
    4. Several small C99 compatibility fixed were made.

[33mcommit 7bc7f25040e68d6094a6c46fc300a3c4d66d2970[m
Author: Will Andrews <will@firepipe.net>
Date:   Tue Jun 11 09:13:47 2013 -0800

    Illumos #3745, #3811
    
    3745 zpool create should treat -O mountpoint and -m the same
    3811 zpool create -o altroot=/xyz -O mountpoint=/mnt ignores
         the mountpoint option
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Christopher Siden <christopher.siden@delphix.com>
    
    References:
      https://www.illumos.org/issues/3745
      https://www.illumos.org/issues/3811
      illumos/illumos-gate@8b713775314bbbf24edd503b4869342d8711ce95
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775

[33mcommit d09f25dc66774959499a89bf3680d09c6e541ce8[m
Author: Will Andrews <will@firepipe.net>
Date:   Tue Jun 11 09:13:43 2013 -0800

    Illumos #3744
    
    3744 zfs shouldn't ignore errors unmounting snapshots
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Christopher Siden <christopher.siden@delphix.com>
    
    References:
      https://www.illumos.org/issues/3744
      illumos/illumos-gate@fc7a6e3fefc649cb65c8e2a35d194781445008b0
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775
    
    Porting notes:
    
    1. There is no clear way to distinguish between a failure when we
       tried to unmount the snapdir of a zvol (which does not exist)
       and the failure when we try to unmount a snapdir of a dataset,
       so the changes to zfs_unmount_snap() were dropped in favor of
       an altered Linux function that unconditionally returns 0.

[33mcommit 3a84951d7dfb5357509a1ed1699f80b71f87982a[m
Author: Will Andrews <will@firepipe.net>
Date:   Tue Jun 11 09:13:38 2013 -0800

    Illumos #3743
    
    3743 zfs needs a refcount audit
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Christopher Siden <christopher.siden@delphix.com>
    
    References:
      https://www.illumos.org/issues/3743
      illumos/illumos-gate@b287be1ba86043996f49b1cc34c80cc620f9b841
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775

[33mcommit d3cc8b152edc608fa4b73d4cb5354356da6b451c[m
Author: Will Andrews <will@firepipe.net>
Date:   Tue Jun 11 09:12:34 2013 -0800

    Illumos #3742
    
    3742 zfs comments need cleaner, more consistent style
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Approved by: Christopher Siden <christopher.siden@delphix.com>
    
    References:
      https://www.illumos.org/issues/3742
      illumos/illumos-gate@f7170741490edba9d1d9c697c177c887172bc741
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775
    
    Porting notes:
    
    1. The change to zfs_vfsops.c was dropped because it involves
       zfs_mount_label_policy, which does not exist in the Linux port.

[33mcommit e49f1e20a09181d03382d64afdc4b7a12a5dfdf1[m
Author: Will Andrews <will@firepipe.net>
Date:   Tue Jun 11 09:12:34 2013 -0800

    Illumos #3741
    
    3741 zfs needs better comments
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Approved by: Christopher Siden <christopher.siden@delphix.com>
    
    References:
      https://www.illumos.org/issues/3741
      illumos/illumos-gate@3e30c24aeefdee1631958ecf17f18da671781956
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775

[33mcommit b1118acbb16ec347f6a3eb091d9b7097d12b8d54[m
Author: Martin Matuska <mm@FreeBSD.org>
Date:   Thu May 23 13:07:25 2013 -0400

    Illumos #3699, #3739
    
    3699 zfs hold or release of a non-existent snapshot does not output error
    3739 cannot set zfs quota or reservation on pool version < 22
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Eric Shrock <eric.schrock@delphix.com>
    Approved by: Dan McDonald <danmcd@nexenta.com>
    
    References:
      https://www.illumos.org/issues/3699
      https://www.illumos.org/issues/3739
      illumos/illumos-gate@013023d4ed2f6d0cf75380ec686a4aac392b4e43
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775

[33mcommit 63fd3c6cfd264cab94dc186fe8cceecac8bc0d50[m
Author: Adam Leventhal <ahl@delphix.com>
Date:   Wed Aug 28 16:05:48 2013 -0700

    Illumos #3582, #3584
    
    3582 zfs_delay() should support a variable resolution
    3584 DTrace sdt probes for ZFS txg states
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Dan McDonald <danmcd@nexenta.com>
    Reviewed by: Richard Elling <richard.elling@dey-sys.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
        https://www.illumos.org/issues/3582
        illumos/illumos-gate@0689f76
    
    Ported by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775

[33mcommit c1fabe7961b100a7dfd77cddba1650d9a6580dc0[m
Author: Mark Shellenbaum <Mark.Shellenbaum@Oracle.COM>
Date:   Wed Aug 18 13:59:31 2010 -0600

    6977619 NULL pointer deference in sa_handle_get_from_db()
    
    References:
      illumos/illumos-gate@44bffe012cad6481c82ad67bacd6b40bd29def2b
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775

[33mcommit c0ebc844c78cd40c086dd145dc129b73f17af21b[m
Author: Mark Shellenbaum <Mark.Shellenbaum@Sun.COM>
Date:   Mon Apr 5 19:59:44 2010 -0600

    6939941 problem with moving files in zfs
    
    References:
      illumos/illumos-gate@d39ee142a97a7c58f60f7b52c62409f2ff64b234
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775
    
    Porting notes:
    
    1. This commit was so old that only two lines applied to the modern
       code base.

[33mcommit 2696dfafd9ebce5e3aa227c630b13f2c5b26bce9[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Tue Apr 23 09:31:42 2013 -0800

    Illumos #3642, #3643
    
    3642 dsl_scan_active() should not issue I/O to determine if async
         destroying is active
    3643 txg_delay should not hold the tc_lock
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Approved by: Gordon Ross <gwr@nexenta.com>
    
    References:
      https://www.illumos.org/issues/3642
      https://www.illumos.org/issues/3643
      illumos/illumos-gate@4a92375985c37d61406d66cd2b10ee642eb1f5e7
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775
    
    Porting Notes:
    
    1. The alignment assumptions for the tx_cpu structure assume that
       a kmutex_t is 8 bytes.  This isn't true under Linux but tc_pad[]
       was adjusted anyway for consistency since this structure was
       never carefully aligned in ZoL.  If careful alignment does impact
       performance significantly this should be reworked to be portable.

[33mcommit 7ec09286b761ee1fb85178ff55daaf8f74d935be[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Apr 10 13:54:56 2013 -0800

    Illumos #3645, #3692
    
    3645 dmu_send_impl: possibilty of pool hold leak
    3692 Panic on zfs receive of a recursive deduplicated stream
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Dan McDonald <danmcd@nexenta.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/3645
      https://www.illumos.org/issues/3692
      illumos/illumos-gate@de8d9cff565e928d0ace86f3ea0e2b15094d61df
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1792
    Issue #1775

[33mcommit 2e528b49f8a0f8f2f51536a00fdf3ea9343bf302[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Fri Mar 8 10:41:28 2013 -0800

    Illumos #3598
    
    3598 want to dtrace when errors are generated in zfs
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
      https://www.illumos.org/issues/3598
      illumos/illumos-gate@be6fd75a69ae679453d9cda5bff3326111e6d1ca
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775
    
    Porting notes:
    
    1. include/sys/zfs_context.h has been modified to render some new
       macros inert until dtrace is available on Linux.
    
    2. Linux-specific changes have been adapted to use SET_ERROR().
    
    3. I'm NOT happy about this change.  It does nothing but ugly
       up the code under Linux.  Unfortunately we need to take it to
       avoid more merge conflicts in the future.  -Brian

[33mcommit 7011fb6004b2227ff9e89894ed69ab83d36c1696[m
Author: Yuri Pankov <yuri.pankov@nexenta.com>
Date:   Wed Mar 6 17:57:09 2013 -0800

    Illumos #3517
    
    3517 importing pool with autoreplace=on and "hole" vdevs crashes syseventd
    Reviewed by: Albert Lee <trisk@nexenta.com>
    Reviewed by: Jeffry Molanus <jeffry.molanus@nexenta.com>
    Reviewed by: George Wilson <gwilson@zfsmail.com>
    Approved by: Christopher Siden <christopher.siden@delphix.com>
    
    References:
      https://www.illumos.org/issues/3517
      illumos/illumos-gate@efb4a871d8fd510a833bdca610528dde5ed69e42
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775

[33mcommit d1fada1e6d953e32de4080bd366df17c640de191[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Fri Jul 5 15:37:16 2013 -0400

    Illumos #3603, #3604: bobj improvements
    
    3603 panic from bpobj_enqueue_subobj()
    3604 zdb should print bpobjs more verbosely
    3871 GCC 4.5.3 does not like issue 3604 patch
    Reviewed by: Henrik Mattson <henrik.mattson@delphix.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Garrett D'Amore <garrett@damore.org>
    Approved by: Dan McDonald <danmcd@nexenta.com>
    
    References:
      https://www.illumos.org/issues/3603
      https://www.illumos.org/issues/3604
      https://www.illumos.org/issues/3871
      illumos/illumos-gate@d04756377ddd1cf28ebcf652541094e17b03c889
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775
    
    Note that the patch from Illumos issue 3871 is not accepted into Illumos
    at the time of this writing. It is something that I wrote when porting
    this. Documentation is in the Illumos issue.

[33mcommit 24a64651b4163d47b1187821152d762e9a263d5a[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Fri Feb 22 01:23:09 2013 -0800

    Illumos #3588
    
    3588 provide zfs properties for logical (uncompressed) space
         used and referenced
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Dan McDonald <danmcd@nexenta.com>
    Reviewed by: Richard Elling <richard.elling@dey-sys.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/3588
      illumos/illumos-gate@77372cb0f35e8d3615ca2e16044f033397e88e21
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit c2e42f9d53bec422abb71efade2c004383345038[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Wed Feb 20 13:30:36 2013 -0800

    Illumos #3578, #3579
    
    3578 transferring the freed map to the defer map should be constant time
    3579 ztest trips assertion in metaslab_weight()
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Richard Elling <richard.elling@dey-sys.com>
    Approved by: Dan McDonald <danmcd@nexenta.com>
    
    References:
      https://www.illumos.org/issues/3578
      https://www.illumos.org/issues/3579
      illumos/illumos-gate@9eb57f7f3fbb970d4b9b89dcd5ecf543fe2414d5
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 23c0a1333c09f353ec872fb9eca2d36f6214cedc[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Sun Feb 17 12:00:54 2013 -0800

    Illumos #3561, #3116
    
    3561 arc_meta_limit should be exposed via kstats
    3116 zpool reguid may log negative guids to internal SPA history
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Gordon Ross <gordon.ross@nexenta.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
      https://www.illumos.org/issues/3561
      https://www.illumos.org/issues/3116
      illumos/illumos-gate@20128a0826f9c53167caa9215c12f08beee48e30
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    Porting Notes:
    
    1. The spa change was accidentally included in the libzfs_core merge.
    
    2. "Add missing arcstats" (1834f2d8b715d25bafbb0e4a099994f45c3211ae)
       already implemented these kstats a few years ago.

[33mcommit 330847ff36146a427a48e79a9733dda3828284e8[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Mon Aug 26 17:09:29 2013 -0700

    Illumos #3537
    
    3537 want pool io kstats
    
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Reviewed by: Sa?o Kiselkov <skiselkov.ml@gmail.com>
    Reviewed by: Garrett D'Amore <garrett@damore.org>
    Reviewed by: Brendan Gregg <brendan.gregg@joyent.com>
    Approved by: Gordon Ross <gwr@nexenta.com>
    
    References:
      http://www.illumos.org/issues/3537
      illumos/illumos-gate@c3a6601
    
    Ported by: Cyril Plisko <cyril.plisko@mountall.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    Porting Notes:
    
    1. The patch was restructured to take advantage of the existing
       spa statistics infrastructure.  To accomplish this the kstat
       was moved in to spa->io_stats and the init/destroy code moved
       to spa_stats.c.
    
    2. The I/O kstat was simply named <pool> which conflicted with the
       pool directory we had already created.  Therefore it was renamed
       to <pool>/io
    
    3. An update handler was added to allow the kstat to be zeroed.

[33mcommit a117a6d66e5cf1e9d4f173bccc786a169e9a8e04[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Sun Feb 10 22:21:05 2013 -0800

    Illumos #3522
    
    3522 zfs module should not allow uninitialized variables
    Reviewed by: Sebastien Roy <seb@delphix.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
      https://www.illumos.org/issues/3522
      illumos/illumos-gate@d5285cae913f4e01ffa0e6693a6d8ef1fbea30ba
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    Porting notes:
    
    1. ZFSOnLinux had already addressed many of these issues because of
       its use of -Wall. However, the manner in which they were addressed
       differed. The illumos fixes replace the ones previously made in
       ZFSOnLinux to reduce code differences.
    
    2. Part of the upstream patch made a small change to arc.c that might
       address zfsonlinux/zfs#1334.
    
    3. The initialization of aclsize in zfs_log_create() differs because
       vsecp is a NULL pointer on ZFSOnLinux.
    
    4. The changes to zfs_register_callbacks() were dropped because it
       has diverged and needs to be resynced.

[33mcommit a35beedfb3f25596b4ec9122742c1337083118f5[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Oct 30 11:19:53 2013 -0700

    Add cstyle.pl utility and cstyle.1 man page
    
    Cstyle is the C source style checker used by Illumos.  Since the
    original ZFS source was written using these style guidelines they
    must also be followed by ZoL for consistency.
    
    The checker has been added to the scripts directory and may be
    run on a per file basis.  New patches should be careful to avoid
    introducing new style warnings.
    
    Additionally, the 'checkstyle' target has been added to the top
    level Makefile and can be used to check the entire source tree.
    While Zol has historically attempted to follow the SunOS style
    guide the lack of a rigorous style checker has allowed various
    warning to be introduced.  Currently there are 2211 reported
    style violations and we want to gradually eliminate these from
    the tree.
    
    Note the cstyle.1 man page is provided under man/man1/cstyle.1
    but since it is a developer utility it is not installed along
    with the other man pages.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 495b25a91a8f29aeec9e2965752a1fc9b9569583[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Tue Oct 8 22:37:38 2013 -0400

    Add missing code to zfs_debug.{c,h}
    
    This is required to make Illumos 3962 merge.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>

[33mcommit 632a242e8352f0a4684f41286a288689f97e504b[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Mon Oct 7 06:53:58 2013 -0400

    Add missing copyright notices from Illumos
    
    This resolves merge conflicts when merging Illumos #3588 and Illumos #4047.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775

[33mcommit 20f04f08aa5032f1e958ba38654d9ed833b6b636[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Tue Oct 8 17:59:42 2013 -0400

    Fix incorrect usage of strdup() in zfs_unmount_snap()
    
    Modifying the length of a string returned by strdup() is incorrect
    because strfree() is allowed to use strlen() to determine which slab
    cache was used to do the allocation.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775

[33mcommit 8c8417933f11d2bda734056f34f5d7c982acbcec[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Mon Oct 7 07:30:22 2013 -0400

    Fix order of function calls in zio_free_sync()
    
    The resolution of a merge conflict when merging Illumos #3464 caused us
    to invert the order couple of function calls in zio_free_sync() versus
    what they are in Illumos.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775

[33mcommit 9cac042cfeccb2d3ecc5a96c0c2ba9afe631338b[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Mon Sep 2 00:22:30 2013 -0400

    Reintroduce uio_prefaultpages()
    
    This was accidentally removed by overzealous commenting.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1775

[33mcommit 023699cd62eb033ebed5e5fae4e13acaba4c5461[m
Author: Massimo Maggi <me@massimo-maggi.eu>
Date:   Mon Oct 28 09:22:15 2013 -0700

    Posix ACL Support
    
    This change adds support for Posix ACLs by storing them as an xattr
    which is common practice for many Linux file systems.  Since the
    Posix ACL is stored as an xattr it will not overwrite any existing
    ZFS/NFSv4 ACLs which may have been set.  The Posix ACL will also
    be non-functional on other platforms although it may be visible
    as an xattr if that platform understands SA based xattrs.
    
    By default Posix ACLs are disabled but they may be enabled with
    the new 'aclmode=noacl|posixacl' property.  Set the property to
    'posixacl' to enable them.  If ZFS/NFSv4 ACL support is ever added
    an appropriate acltype will be added.
    
    This change passes the POSIX Test Suite cleanly with the exception
    of xacl/00.t test 45 which is incorrect for Linux (Ext4 fails too).
    
      http://www.tuxera.com/community/posix-test-suite/
    
    Signed-off-by: Massimo Maggi <me@massimo-maggi.eu>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #170

[33mcommit 7c2448a33ee71be1671c158a167559d1320ff839[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Oct 28 11:57:15 2013 -0700

    Improve xattr property documentation
    
    Extend the xattr property section of zfs(8) such that it covers
    both styles of supported xattr.  A short discussion of the benefits
    and drawbacks of each type is presented to allow users to make an
    informed choice.
    
    Signed-off-by: Massimo Maggi <me@massimo-maggi.eu>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #170

[33mcommit fc9e0530c9b1be00c122f88d9e4c8c329f2d5d26[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Oct 28 09:07:00 2013 -0700

    Prevent xattr remove from creating xattr directory
    
    Attempting to remove an xattr from a file which does not contain
    any directory based xattrs would result in the xattr directory
    being created.  This behavior is non-optimal because it results
    in write operations to the pool in addition to the expected error
    being returned.
    
    To prevent this the CREATE_XATTR_DIR flag is only passed in
    zpl_xattr_set_dir() when setting a non-NULL xattr value.  In
    addition, zpl_xattr_set() is updated similarly such that it will
    return immediately if passed an xattr name which doesn't exist
    and a NULL value.
    
    Signed-off-by: Massimo Maggi <me@massimo-maggi.eu>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #170

[33mcommit 37fd6e00a699aff3fea24199497e9484cd218a84[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Mon Aug 26 09:23:09 2013 -0700

    Add script to fix file names in upstream patches
    
    Added a simple sed script to do a search and replace on the Illumos
    ZFS file names and replace them with the ZFS on Linux equivalent.
    
    Example usage:
    
        # Replace Illumos paths with Linux paths
        $ ./scripts/zfs2zol-patch.sed arc.c.patch > arc.c.patch.linux
    
        # Ensure the script worked as expected
        $ diff arc.c.patch arc.c.patch.linux
    
        # Apply the patch using Linux paths
        $ patch -p1 < arc.c.patch.linux
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1679

[33mcommit c12e3a594a49ed10b7870d950c1f336f78f136cb[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Wed Oct 2 11:22:53 2013 -0400

    Restructure zfs_readdir() to fix regressions
    
    This does the following:
    
    1. It creates a uint8_t type value, which is initialized to DT_DIR on
    dot directories and ZFS_DIRENT_TYPE(zap.za_first_integer) otherwise.
    This resolves a regression where we return unintialized values as the
    directory entry type on dot directories. This was accidentally
    introduced by commit 8170d281263e52ff33d7fba93ab625196844df36.
    
    2. It restructures zfs_readdir() code to use `uint64_t offset` like
    Illumos instead of `loff_t *pos`. This resolves a regression where
    negative ZAP cursors were treated as if they were dot directories.
    
    3. It restructures the function to more closely match the structure of
    zfs_readdir() on Illumos and removes the unused variable outcount, which
    was only used on Illumos.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1750

[33mcommit d65e73810938e5619b72591d3438063b00949e77[m
Author: Ralf Ertzinger <ralf@skytale.net>
Date:   Wed Oct 23 10:50:48 2013 +0200

    Add -p switch to "zpool get"
    
    This works the same as the -p switch to "zfs get", displaying full
    resolution values for appropriate attributes.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1813

[33mcommit 8b921f667afc86c452242be0b6d3b257472ebe76[m
Author: Ralf Ertzinger <ralf@skytale.net>
Date:   Wed Oct 23 10:33:33 2013 +0200

    Introduce zpool_get_prop_literal interface
    
    This change introduces zpool_get_prop_literal. It's an expanded version
    of zpool_get_prop taking one additional boolean parameter. With this
    parameter set to B_FALSE it will behave identically to zpool_get_prop.
    Setting it to B_TRUE will return full precision numbers for the
    following properties:
    
    ZPOOL_PROP_SIZE
    ZPOOL_PROP_ALLOCATED
    ZPOOL_PROP_FREE
    ZPOOL_PROP_FREEING
    ZPOOL_PROP_EXPANDSZ
    ZPOOL_PROP_ASHIFT
    
    Also introduced is a wrapper function for zpool_get_prop making it
    use zpool_get_prop_literal in the background.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1813

[33mcommit 157c9b6981ab6203550e8857144ac49e1e867fb7[m
Author: Steven Hartland <steven.hartland@multiplay.co.uk>
Date:   Thu Oct 24 00:45:45 2013 +0100

    Corrected "zfs list -t <type>" syntax
    
    in man page and in command help.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1805

[33mcommit 8eaf9f3543aa6843aa276010768cce8c0626e2d8[m
Merge: 11cb9d7 d738d34
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Oct 25 15:22:34 2013 -0700

    Merge branch 'kstat'
    
    This branch updates several of the zfs kstats to take advantage
    of the improved raw kstat functionality.  In addition, two new
    kstats and a script called dbufstat.py are introduced.
    
    Updated+New Kstats
    * dbufs        - Stats for all dbufs in the dbuf_hash
    * <pool>/txgs  - Stats for the last N txgs synced to disk
    * <pool>/reads - Stats for rhe last N reads issues by the ARC
    * <pool>/dmu_tx_assign - Histogram of tx assign times
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit d738d34da5b25b5e5daef966c29386468fd16263[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Oct 25 13:58:45 2013 -0700

    Add dbufstat.py command
    
    The dbufstat.py command was added to provide a conveniant way to
    easily determine what ZFS is caching.  The script consumes the
    raw /proc/spl/kstat/zfs/dbufs kstat data can consolidates it in
    to a more human readable form.  This was designed primarily as
    a tool to aid developers but it may also be useful for advanced
    users who want more visibility in to what the ARC is caching.
    
    When run without options dbufstat.py will default to showing a
    list of all objects with at least one buffer present in the
    cache.  The total cache space consumed by that object will be
    printed on the right along with the object type.  Similar to the
    arcstats.py command the -x option may used to display additional
    fields.
    
    Two other modes of operation are also supported by dbufstat.py
    and the expectation is additional display modes may be added as
    needed.  The -t option will summerize the total number of bytes
    cached for each object type, and the -b option will show every
    dbuf currently cached.
    
    The script was designed to be consistent with arcstat.py and
    includes most of the same options and funcationality.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit e0b0ca983d6897bcddf05af2c0e5d01ff66f90db[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Oct 2 17:11:19 2013 -0700

    Add visibility in to cached dbufs
    
    Currently there is no mechanism to inspect which dbufs are being
    cached by the system.  There are some coarse counters in arcstats
    by they only give a rough idea of what's being cached.  This patch
    aims to improve the current situation by adding a new dbufs kstat.
    
    When read this new kstat will walk all cached dbufs linked in to
    the dbuf_hash.  For each dbuf it will dump detailed information
    about the buffer.  It will also dump additional information about
    the referenced arc buffer and its related dnode.  This provides a
    more complete view in to exactly what is being cached.
    
    With this generic infrastructure in place utilities can be written
    to post-process the data to understand exactly how the caching is
    working.  For example, the data could be processed to show a list
    of all cached dnodes and how much space they're consuming.  Or a
    similar list could be generated based on dnode type.  Many other
    ways to interpret the data exist based on what kinds of questions
    you're trying to answer.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Prakash Surya <surya1@llnl.gov>

[33mcommit 2d37239a28b8b2ddc0e8312093f8d8810c6351fa[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Oct 2 11:43:52 2013 -0700

    Add visibility in to dmu_tx_assign times
    
    This change adds a new kstat to gain some visibility into the
    amount of time spent in each call to dmu_tx_assign. A histogram
    is exported via the new dmu_tx_assign file. The information
    contained in this histogram is the frequency dmu_tx_assign
    took to complete given an interval range.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 0b1401ee911c5a0c0bdb7a8e6ad36840cea3af24[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Oct 1 09:50:50 2013 -0700

    Add visibility in to txg sync behavior
    
    This change is an attempt to add visibility in to how txgs are being
    formed on a system, in real time. To do this, a list was added to the
    in memory SPA data structure for a pool, with each element on the list
    corresponding to txg. These entries are then exported through the kstat
    interface, which can then be interpreted in userspace.
    
    For each txg, the following information is exported:
    
     * Unique txg number (uint64_t)
     * The time the txd was born (hrtime_t)
       (*not* wall clock time; relative to the other entries on the list)
     * The current txg state ((O)pen/(Q)uiescing/(S)yncing/(C)ommitted)
     * The number of reserved bytes for the txg (uint64_t)
     * The number of bytes read during the txg (uint64_t)
     * The number of bytes written during the txg (uint64_t)
     * The number of read operations during the txg (uint64_t)
     * The number of write operations during the txg (uint64_t)
     * The time the txg was closed (hrtime_t)
     * The time the txg was quiesced (hrtime_t)
     * The time the txg was synced (hrtime_t)
    
    Note that while the raw kstat now stores relative hrtimes for the
    open, quiesce, and sync times.  Those relative times are used to
    calculate how long each state took and these deltas and printed by
    output handlers.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 1421c89142376bfd41e4de22ed7c7846b9e41f95[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Fri Sep 6 16:09:05 2013 -0700

    Add visibility in to arc_read
    
    This change is an attempt to add visibility into the arc_read calls
    occurring on a system, in real time. To do this, a list was added to the
    in memory SPA data structure for a pool, with each element on the list
    corresponding to a call to arc_read. These entries are then exported
    through the kstat interface, which can then be interpreted in userspace.
    
    For each arc_read call, the following information is exported:
    
     * A unique identifier (uint64_t)
     * The time the entry was added to the list (hrtime_t)
       (*not* wall clock time; relative to the other entries on the list)
     * The objset ID (uint64_t)
     * The object number (uint64_t)
     * The indirection level (uint64_t)
     * The block ID (uint64_t)
     * The name of the function originating the arc_read call (char[24])
     * The arc_flags from the arc_read call (uint32_t)
     * The PID of the reading thread (pid_t)
     * The command or name of thread originating read (char[16])
    
    From this exported information one can see, in real time, exactly what
    is being read, what function is generating the read, and whether or not
    the read was found to be already cached.
    
    There is still some work to be done, but this should serve as a good
    starting point.
    
    Specifically, dbuf_read's are not accounted for in the currently
    exported information. Thus, a follow up patch should probably be added
    to export these calls that never call into arc_read (they only hit the
    dbuf hash table). In addition, it might be nice to create a utility
    similar to "arcstat.py" to digest the exported information and display
    it in a more readable format. Or perhaps, log the information and allow
    for it to be "replayed" at a later time.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 76463d4026e0fa4b3d7b96acd58cb5fb79c49af7[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Sep 30 11:51:20 2013 -0700

    Revert "Add txgs-<pool> kstat file"
    
    This reverts commit e95853a331529a6cb96fdf10476c53441e59f4e1.

[33mcommit 98ab38d1096079d82247350f526f0d7268956fb5[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Sep 30 11:45:58 2013 -0700

    Revert "Add new kstat for monitoring time in dmu_tx_assign"
    
    This reverts commit 92334b14ec378b1693573b52c09816bbade9cf3e.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 11cb9d773f48830cf3ff718861c070a8937c6a03[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Oct 11 14:24:18 2013 -0700

    Increase default udev wait time
    
    When creating a new pool, or adding/replacing a disk in an existing
    pool, partition tables will be automatically created on the devices.
    Under normal circumstances it will take less than a second for udev
    to create the expected device files under /dev/.  However, it has
    been observed that if the system is doing heavy IO concurrently udev
    may take far longer.  If you also throw in some cheap dodgy hardware
    it may take even longer.
    
    To prevent zpool commands from failing due to this the default wait
    time for udev is being increased to 30 seconds.  This will have no
    impact on normal usage, the increase timeout should only be noticed
    if your udev rules are incorrectly configured.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1646

[33mcommit b3c49d3df82466646bde9beebce7bbf0b3c41853[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Sat Oct 5 17:55:24 2013 -0400

    Linux 3.11 compat: Rename LZ4 symbols
    
    Linus Torvalds merged LZ4 into Linux 3.11. This causes a conflict
    whenever CONFIG_LZ4_DECOMPRESS=y or CONFIG_LZ4_COMPRESS=y are set in the
    kernel's .config. We rename the symbols to avoid the conflict.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1789

[33mcommit 2e2ddc30b47c174d95c2eb491452a7587e3e129f[m
Author: Tim Chase <tim@chase2k.com>
Date:   Sun Oct 13 11:36:15 2013 -0500

    Dedup-related documentation additions for zpool and zdb.
    
    Document the "-D" and "-T" options and the optional interval
    and count or "zpool status".
    
    Also for zpool's man page, use a consistent order for the
    various "-T" options to match the program's help output.
    
    Document the effect of additional "-D" options for zdb.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1786

[33mcommit fbcb768c8fd1f32653f46ed4a8a9ceafe139087b[m
Author: Tim Chase <tim@chase2k.com>
Date:   Sat Oct 12 17:33:28 2013 -0500

    Add missing dsl pool configuration lock
    
    The semantics introduced by the restructured sync task of illumos
    3464 require this lock when calling dmu_snapshot_list_next().
    The pool is locked/unlocked for each iteration to reduce the
    chance of long-running locks.
    
    This was accidentally missed when doing the original port because
    ZoL's control directory code is Linux-specific and is in a
    different file than in illumos.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1785

[33mcommit 7a6144076166944655d86f1449be8566d1a3c71a[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Thu Feb 21 13:58:29 2013 -0800

    Illumos #3552
    
    3552 condensing one space map burns 3 seconds of CPU in spa_sync()
         thread (fix race condition)
    
    References:
      https://www.illumos.org/issues/3552
      illumos/illumos-gate@03f8c366886542ed249a15d755ae78ea4e775d9d
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    Porting notes:
    
    This fixes an upstream regression that was introduced in commit
    zfsonlinux/zfs@e51be06697762215dc3b679f8668987034a5a048, which
    ported the Illumos 3552 changes. This fix was added to upstream
    rather quickly, but at the time of the port, no one spotted it and
    the race was rare enough that it passed our regression tests. I
    discovered this when comparing our metaslab.c to the illumos
    metaslab.c.
    
    Without this change it is possible for metaslab_group_alloc() to
    consume a large amount of cpu time.  Since this occurs under a
    mutex in a rcu critical section the kernel will log this to the
    console as a self-detected cpu stall as follows:
    
      INFO: rcu_sched self-detected stall on CPU { 0}
      (t=60000 jiffies g=11431890 c=11431889 q=18271)
    
    Closes #1687
    Closes #1720
    Closes #1731
    Closes #1747

[33mcommit a6ce1eae54ca048ae7e7dfdcad05c5565a129226[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Thu Sep 26 13:44:10 2013 -0400

    Fix libzfs_core changes to follow GNU libtool guidelines
    
    The GNU libtool documentation states to start with a version of 0:0:0,
    rather than 1:1:0. Illumos uses the name libzfs_core.so.1, so to be
    consistent, we should go with 1:0:0.
    
    http://www.gnu.org/software/libtool/manual/libtool.html#Updating-version-info
    
    The GNU libtool documentation also provides guidence on how the version
    information should be incremented. Doing this does a SONAME bump of the
    libzfs and libzpool libraries. This is particularly important on Gentoo
    because a SONAME bump enables portage to retain the older libraries
    until any packages that link to them are rebuilt. The main example of
    this is GRUB2's grub2-mkconfig, which will break unless it is rebuilt
    against the new libraries.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1751

[33mcommit 31fc19399e597e3391f19f1392ab120f1de0d5f2[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Thu Sep 26 13:42:41 2013 -0400

    Generate libraries with correct DT_NEEDED entries
    
    Libraries that depend on other libraries should list them in ELF's
    DT_NEEDED field so that programs linking to them do not need to specify
    those libraries unless they depend on them as well. This is not the case
    in the current code and the consequence is that anything that needs a
    library must know its dependencies. This is fragile and caused GRUB2's
    configure script to break when a dependency was added on libblkid in
    libzfs.
    
    This resolves that problem by using LIBADD/LDADD to specify libraries in
    Makefile.am instead of LDFLAGS. This ensures that proper DT_NEEDED
    entries are generated and prevents GRUB2's configure script from
    breaking in the presence of a libblkid dependency. This also removes
    unneeded dependencies from various files.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1751

[33mcommit 1db7b9be75a225cedb3b7a60028ca5695e5b8346[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Wed Aug 28 16:17:47 2013 -0400

    Fix libblkid support
    
    libblkid support is dormant because the autotools check is broken and
    liblkid identifies ZFS vdevs as "zfs_member", not "zfs". We fix that
    with a few changes:
    
    First, we fix the libblkid autotools check to do a few things:
    
    1. Make a 64MB file, which is the minimum size ZFS permits.
    2. Make 4 fake uberblock entries to make libblkid's check succeed.
    3. Return 0 upon success to make autotools use the success case.
    4. Include stdlib.h to avoid implicit declration of free().
    5. Check for "zfs_member", not "zfs"
    6. Make --with-blkid disable autotools check (avoids Gentoo sandbox violation)
    7. Pass '-lblkid' correctly using LIBS not LDFLAGS.
    
    Second, we change the libblkid support to scan for "zfs_member", not
    "zfs".
    
    This makes --with-blkid work on Gentoo.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1751

[33mcommit 65ee05acd773beafd03bfedf96a092dd08cb2739[m
Author: Neil Stockbridge <neil@dist.ro>
Date:   Wed Oct 9 18:58:30 2013 +1300

    Update detach section of zpool(8)
    
    The detach section of the zpool(8) man page now suggests the
    offline command.  Using offline may be more appropriate for
    certain situations.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1776

[33mcommit 40a806df259c0b826b8e962579dff64e8dfbf0d7[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Mon Sep 30 16:29:37 2013 -0700

    Export symbols dsl_pool_config_{enter,exit}
    
    These are needed by consumers (i.e. Lustre) who wish to use the
    dsl_prop_register() interface to register callbacks when pool
    properties of interest change.  This interface requires that the
    DSL pool configuration lock is held when called.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1762

[33mcommit 222b94805903dfa6879565ab9b1c8e3b0d70cbdf[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Oct 2 10:00:04 2013 -0700

    Fix memory leak false positive in log_internal()
    
    When building the spl with --enable-debug-kmem-tracking a memory
    leak is detected in log_internal().  This happens to be a false
    positive because the memory was freed using strfree() instead of
    kmem_free().  All kmem_alloc()'s must be released with kmem_free()
    to ensure correct accounting.
    
      SPL: kmem leaked 135/5641311 bytes
      address          size  data             func:line
      ffff8800cba7cd80 135   ZZZZZZZZZZZZZZZZ log_internal:456
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 3549721c9e1f737fb7ba83d1fd52f396fd16889c[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Thu Sep 5 15:23:24 2013 -0400

    Update drive database
    
    Add Corsair Force GS drive (obtained from drive_id)
    Add Kingston HyperX 3K (obtained from drive_id)
    Add OCZ Vertex 4 drive (obtained from drive_id)
    Add Samsung SM843T enterprise drive (obtained from drive_id)
    Add entries for additional sizes of Intel 320/330/335/520 series
    Add Cruical C400 (obtained from Illumos user's sd.conf)
    Add Toshiba SSD (obtained from Illumos user's sd.conf)
    Add Samsung's first SLC SSD (obtained from drive_id)
    Add OCZ Core Series (obtained from drive_id)
    Add Intel DC S3700 (obtained from drive_id)
    
    Notes:
    
    1. The drive identifer obtained for the Samsung SM843T was MZ7WD480. The
    rest were extrapolated. The additional entries were checked with Google
    to verify that such drives exist in the wild.
    
    2. The additional entries for Intel drives were extrapolated from
    existing entries. The additional entries were checked with Google to
    verify that such drives exist in the wild.
    
    3. The "ATA     C400-MTFDDAC512M" and "ATA     TOSHIBA THNSNH51" entries
    are from the sd.conf of gcbirzan on freenode. Additional entries were
    extrapolated from them and checked with Google.
    
    4. I obtained the Samsung MCCOE64G entry from an actual drive. The
    Samsung MCCOE32G entry was extrapolated from it and checked with
    Google.
    
    5. I obtained the SSDSC2BA10 from a 100GB Intel DC S3700 drive and
    extrapolated the entries for the additional models.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1752

[33mcommit 36342b13d9973a8c4e83f7c702545494aa5b80b4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Sep 25 09:33:00 2013 -0700

    Export addition dsl_prop_* symbols
    
    The recent sync task restructuring in 13fe019 introduced several
    new symbols which should be exported for use by consumers such
    as Lustre.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 8769db396691978a48abee1d1855709d7b01d4d0[m
Author: Tim Chase <tim@onlight.com>
Date:   Fri Sep 20 09:30:04 2013 -0500

    Allocate the ioctl "output" nvlist with KM_PUSHPAGE.
    
    Some ZFS errors such as certain snapshot failures can occur in
    the sync task context.  Because they may require additional memory
    allocations, the initial nvlist must be allocated with KM_PUSHPAGE.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1746
    Issue #1737

[33mcommit c5322236eccc7c5e1d23983c78928ad566685e7c[m
Author: Tim Chase <tim@chase2k.com>
Date:   Sat Sep 14 22:09:09 2013 -0500

    Fix several new KM_SLEEP warnings
    
    A handful of allocations now occur in the sync path and need
    to use KM_PUSHPAGE.  These were introduced by commit 13fe019.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1746
    Issue #1737

[33mcommit cbfa294de4937ae1af5845e9f765a3dc188cbcef[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Sep 25 09:29:30 2013 -0700

    Fix spa_deadman() TQ_SLEEP warning
    
    The spa_deadman() and spa_sync() functions can both be run in the
    spa_sync context and therefore should use TQ_PUSHPAGE instead of
    TQ_SLEEP.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1734
    Closes #1749

[33mcommit f9f3f1ef983e987a2e09a49c3684405561fed634[m
Author: GregorKopka <mailfrom-github@kopka.net>
Date:   Thu Sep 19 16:42:17 2013 +0200

    Removing unneeded mutex for reading vq_pending_tree size
    
    Locking mutex &vq->vq_lock in vdev_mirror_pending is unneeded:
    
    * no data is modified
    * only vq_pending_tree is read
    * in case garbage is returned (eg. vq_pending_tree being updated
      while the read is made) the worst case would be that a single
      read could be queued on a mirror side which more busy than thought
    
    The benefit of this change is streamlining of the code path since
    it is taken for *every* mirror member on *every* read.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1739

[33mcommit 77831e17385ba822fe70436d862c0e14df5d67b2[m
Author: Kohsuke Kawaguchi <kk@kohsuke.org>
Date:   Wed Sep 25 15:14:47 2013 -0700

    Reduce the stack usage of dsl_dataset_remove_clones_key
    
    dataset_remove_clones_key does recursion, so if the recursion goes
    deep it can overrun the linux kernel stack size of 8KB. I have seen
    this happen in the actual deployment, and subsequently confirmed it by
    running a test workload on a custom-built kernel that uses 32KB stack.
    
    See the following stack trace as an example of the case where it would
    have run over the 8KB stack kernel:
    
            Depth    Size   Location    (42 entries)
            -----    ----   --------
      0)    11192      72   __kmalloc+0x2e/0x240
      1)    11120     144   kmem_alloc_debug+0x20e/0x500
      2)    10976      72   dbuf_hold_impl+0x4a/0xa0
      3)    10904     120   dbuf_prefetch+0xd3/0x280
      4)    10784      80   dmu_zfetch_dofetch.isra.5+0x10f/0x180
      5)    10704     240   dmu_zfetch+0x5f7/0x10e0
      6)    10464     168   dbuf_read+0x71e/0x8f0
      7)    10296     104   dnode_hold_impl+0x1ee/0x620
      8)    10192      16   dnode_hold+0x19/0x20
      9)    10176      88   dmu_buf_hold+0x42/0x1b0
     10)    10088     144   zap_lockdir+0x48/0x730
     11)     9944     128   zap_cursor_retrieve+0x1c4/0x2f0
     12)     9816     392   dsl_dataset_remove_clones_key.isra.14+0xab/0x190
     13)     9424     392   dsl_dataset_remove_clones_key.isra.14+0x10c/0x190
     14)     9032     392   dsl_dataset_remove_clones_key.isra.14+0x10c/0x190
     15)     8640     392   dsl_dataset_remove_clones_key.isra.14+0x10c/0x190
     16)     8248     392   dsl_dataset_remove_clones_key.isra.14+0x10c/0x190
     17)     7856     392   dsl_dataset_remove_clones_key.isra.14+0x10c/0x190
     18)     7464     392   dsl_dataset_remove_clones_key.isra.14+0x10c/0x190
     19)     7072     392   dsl_dataset_remove_clones_key.isra.14+0x10c/0x190
     20)     6680     392   dsl_dataset_remove_clones_key.isra.14+0x10c/0x190
     21)     6288     392   dsl_dataset_remove_clones_key.isra.14+0x10c/0x190
     22)     5896     392   dsl_dataset_remove_clones_key.isra.14+0x10c/0x190
     23)     5504     392   dsl_dataset_remove_clones_key.isra.14+0x10c/0x190
     24)     5112     392   dsl_dataset_remove_clones_key.isra.14+0x10c/0x190
     25)     4720     392   dsl_dataset_remove_clones_key.isra.14+0x10c/0x190
     26)     4328     392   dsl_dataset_remove_clones_key.isra.14+0x10c/0x190
     27)     3936     392   dsl_dataset_remove_clones_key.isra.14+0x10c/0x190
     28)     3544     392   dsl_dataset_remove_clones_key.isra.14+0x10c/0x190
     29)     3152     392   dsl_dataset_remove_clones_key.isra.14+0x10c/0x190
     30)     2760     392   dsl_dataset_remove_clones_key.isra.14+0x10c/0x190
     31)     2368     392   dsl_dataset_remove_clones_key.isra.14+0x10c/0x190
     32)     1976     392   dsl_dataset_remove_clones_key.isra.14+0x10c/0x190
     33)     1584     392   dsl_dataset_remove_clones_key.isra.14+0x10c/0x190
     34)     1192     232   dsl_dataset_destroy_sync+0x311/0xf60
     35)      960      72   dsl_sync_task_group_sync+0x12f/0x230
     36)      888     168   dsl_pool_sync+0x48b/0x5c0
     37)      720     184   spa_sync+0x417/0xb00
     38)      536     184   txg_sync_thread+0x325/0x5b0
     39)      352      48   thread_generic_wrapper+0x7a/0x90
     40)      304     128   kthread+0xc0/0xd0
     41)      176     176   ret_from_fork+0x7c/0xb0
    
    This change reduces the stack usage in dsl_dataset_remove_clones_key
    by allocating structures in heap, not in stack.  This is not a fundamental
    fix, as one can create an arbitrary large data set that runs over any
    fixed size stack, but this will make the problem far less likely.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Kohsuke Kawaguchi <kk@kohsuke.org>
    Closes #1726

[33mcommit 34d5a5fd03210d9efdd5966070df1f71c0dbef96[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Sep 13 13:20:15 2013 -0700

    Fix zpl_mknod() return values
    
    The zpl_mknod() function was incorrectly negating its return value.
    This doesn't cause any problems in the success case, but it does
    prevent us from returning the correct error code for a failure.
    The implementation of this function is now consistent with all
    the other zpl_* functions.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1717

[33mcommit 17897ce2c88476f6fb7413f05e183694cb7482ef[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Sep 13 13:10:36 2013 -0700

    Fix uninitialized variables
    
    When compiling on an ARM device using gcc 4.7.3 several variables
    in the zfs_obj_to_path_impl() function were flagged as uninitialized.
    To resolve the warnings explicitly initialize them to zero.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1716

[33mcommit b83e3e48c9b183a80dd00eb6c7431a1cbc7d89c9[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Tue Sep 10 15:13:44 2013 -0400

    Stop runtime pointer modifications in autotools checks
    
    c38367c73f592ca9729ba0d5e70b5e3bc67e0745 was meant to eliminate runtime
    function pointer modifications in autotools checks because they were
    prone to false negatives on kernels hardened by the PaX project.
    Unfortunately, I missed the xattr_handler and super_block->s_bdi
    autotools checks. Recent changes to PaX constified
    xattr_handler->get/set, which lead me to discover this oversight.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1433

[33mcommit 4cf652e5d4becca29df8c961daaa68f9c9c81245[m
Author: Tim Chase <tim@chase2k.com>
Date:   Wed Sep 11 11:47:43 2013 -0700

    Fix dmu_objset_find_dp() KM_SLEEP warning
    
    After the restructuring in 13fe019 The 'zfs rename' command will
    result in a KM_SLEEP being called in the sync context.  This may
    deadlock due to reclaim so it was changed to KM_PUSHPAGE.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1711

[33mcommit 13fe019870c8779bf2f5b3ff731b512cf89133ef[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Sep 4 07:00:57 2013 -0500

    Illumos #3464
    
    3464 zfs synctask code needs restructuring
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
      https://www.illumos.org/issues/3464
      illumos/illumos-gate@3b2aab18808792cbd248a12f1edf139b89833c13
    
    Ported-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1495

[33mcommit 6f1ffb06655008c9b519108ed29fbf03acd6e5de[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Wed Aug 28 06:45:09 2013 -0500

    Illumos #2882, #2883, #2900
    
    2882 implement libzfs_core
    2883 changing "canmount" property to "on" should not always remount dataset
    2900 "zfs snapshot" should be able to create multiple, arbitrary snapshots at once
    
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Chris Siden <christopher.siden@delphix.com>
    Reviewed by: Garrett D'Amore <garrett@damore.org>
    Reviewed by: Bill Pijewski <wdp@joyent.com>
    Reviewed by: Dan Kruchinin <dan.kruchinin@gmail.com>
    Approved by: Eric Schrock <Eric.Schrock@delphix.com>
    
    References:
      https://www.illumos.org/issues/2882
      https://www.illumos.org/issues/2883
      https://www.illumos.org/issues/2900
      illumos/illumos-gate@4445fffbbb1ea25fd0e9ea68b9380dd7a6709025
    
    Ported-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1293
    
    Porting notes:
    
    WARNING: This patch changes the user/kernel ABI.  That means that
    the zfs/zpool utilities built from master are NOT compatible with
    the 0.6.2 kernel modules.  Ensure you load the matching kernel
    modules from master after updating the utilities.  Otherwise the
    zfs/zpool commands will be unable to interact with your pool and
    you will see errors similar to the following:
    
      $ zpool list
      failed to read pool configuration: bad address
      no pools available
    
      $ zfs list
      no datasets available
    
    Add zvol minor device creation to the new zfs_snapshot_nvl function.
    
    Remove the logging of the "release" operation in
    dsl_dataset_user_release_sync().  The logging caused a null dereference
    because ds->ds_dir is zeroed in dsl_dataset_destroy_sync() and the
    logging functions try to get the ds name via the dsl_dataset_name()
    function. I've got no idea why this particular code would have worked
    in Illumos.  This code has subsequently been completely reworked in
    Illumos commit 3b2aab1 (3464 zfs synctask code needs restructuring).
    
    Squash some "may be used uninitialized" warning/erorrs.
    
    Fix some printf format warnings for %lld and %llu.
    
    Apply a few spa_writeable() changes that were made to Illumos in
    illumos/illumos-gate.git@cd1c8b8 as part of the 3112, 3113, 3114 and
    3115 fixes.
    
    Add a missing call to fnvlist_free(nvl) in log_internal() that was added
    in Illumos to fix issue 3085 but couldn't be ported to ZoL at the time
    (zfsonlinux/zfs@9e11c73) because it depended on future work.

[33mcommit 0c28fb480836ab7bb1bbf8de6e572d2443273396[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Aug 16 15:20:07 2013 -0700

    Tag zfs-0.6.2
    
    META file and release log updated.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 6a7c0ccca44ad02c476a111d8f7911fc8b12fff7[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 22 13:06:33 2013 -0700

    Use directory xattrs for symlinks
    
    There is currently a subtle bug in the SA implementation which
    can crop up which prevents us from safely using multiple variable
    length SAs in one object.
    
    Fortunately, the only existing use case for this are symlinks with
    SA based xattrs.  Therefore, until the root cause in the SA code
    can be identified and fixed we prevent adding SA xattrs to symlinks.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1468

[33mcommit c273d60d80958dea8edc3c6f5702c9c81ffbd8ea[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 22 12:14:26 2013 -0700

    Revert "Evict meta data from ghost lists + l2arc headers"
    
    This reverts commit fadd0c4da1e2ccd6014800d8b1a0fd117dd323e8 which
    introduced a regression in honoring the meta limit.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Close #1660

[33mcommit bff32e0972bbc07ba5f2b9ce5b965813d8edcf78[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Sat Aug 10 08:24:40 2013 -0400

    Implement database to workaround misreported physical sector sizes
    
    This implements vdev_bdev_database_check(). It alters the detected
    sector size of any device listed in a database of drives known to lie
    about their physical sector sizes.
    
    This is based on "6931570 Add flash devices' VID/PID to disk table to
    advertising 4K physical sector size" from Open Solaris and on
    sg_simple4.c from sg3_utils. About two dozen lines are taken from
    sg_simple4.c, which is GPLv2 licensed. However, sg_simple4.c is
    analogous to a Hello World program and is safe for us to use. We
    requested that Douglas Gilbert, the author of sg_simple4.c, confirm that
    this is the case. A cutdown version of his response is as follows:
    
    ```
    I would consider a SCSI INQUIRY example using the Linux sg
    driver interface (also written by me) as the equivalent of an
    "hello world" program in C.
    ```
    
    The database was created with the help of the freenode and ZFSOnLinux
    communities.
    
    Some notes:
    
    1. The following drives both were confirmed to lie via reports in IRC
    and they contain capacity information in their identifiers:
    
    INTEL SSDSA2M080
    INTEL SSDSA2M160
    M4-CT256M4SSD2
    WDC WD15EARS-00S
    WDC WD15EARS-00Z
    WDC WD20EARS-00M
    
    The identifiers for different capacity models were extrapolated and
    added under the assumption that those models also lie. Google was used
    to verify that the extrapolated drive identifiers existed prior to their
    inclusion.
    
    2. The OCZ-VERTEX2 3.5 identifer applies to two drives that differ
    solely in page size (and slightly in capacity). One uses 4096-byte pages
    and the other uses 8192-byte pages. Both are set to use 8192-byte pages.
    We could detect the page size by checking the capacity, but that would
    unnecessarily complicate the code.
    
    3. It is possible for updated drive firmware to correctly report the
    sector size. There were reports of a few advanced format drives doing
    that. One report stated that the vendor changed the identification
    string while another was unclear on this. Both reports involved WDC
    models.
    
    4. Google was used to determine the size of pages in the listed flash
    devices. Reports of 8192-byte pages took precedence over reports of
    4096-byte pages.
    
    5. Devices behind USB adapters can have their identification strings
    altered. Identification strings obtained across USB adapters are
    omitted and no attempt is made to correct for alterations made by USB
    adapters when doing comparisons against the database. Two entries in the
    Open Solaris database that appear to have been altered by a USB
    adapter were omitted.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1652

[33mcommit 0f37d0c8bed442dd0d2c1b1dddd68653fa6eec66[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Wed Aug 7 08:53:45 2013 -0400

    Linux 3.11 compat: fops->iterate()
    
    Commit torvalds/linux@2233f31aade393641f0eaed43a71110e629bb900
    replaced ->readdir() with ->iterate() in struct file_operations.
    All filesystems must now use the new ->iterate method.
    
    To handle this the code was reworked to use the new ->iterate
    interface.  Care was taken to keep the majority of changes
    confined to the ZPL layer which is already Linux specific.
    However, minor changes were required to the common zfs_readdir()
    function.
    
    Compatibility with older kernels was accomplished by adding
    versions of the trivial dir_emit* helper functions.  Also the
    various *_readdir() functions were reworked in to wrappers
    which create a dir_context structure to pass to the new
    *_iterate() functions.
    
    Unfortunately, the new dir_emit* functions prevent us from
    passing a private pointer to the filldir function.  The xattr
    directory code leveraged this ability through zfs_readdir()
    to generate the list of xattr names.  Since we can no longer
    use zfs_readdir() a simplified zpl_xattr_readdir() function
    was added to perform the same task.
    
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1653
    Issue #1591

[33mcommit 34e143323e359b42bc9d06dd19cc4b1f13091283[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Aug 14 16:18:58 2013 -0700

    Fix z_wr_iss_h zio_execute() import hang
    
    Because we need to be more frugal about our stack usage under
    Linux.  The __zio_execute() function was modified to re-dispatch
    zios to a ZIO_TASKQ_ISSUE thread when we're in a context which
    is known to be stack heavy.  Those two contexts are the sync
    thread and what ever thread is performing spa initialization.
    
    Unfortunately, this change introduced an unlikely bug which can
    result in a zio being re-dispatched indefinitely and never being
    executed.  If during spa initialization we handle a zio with
    ZIO_PRIORITY_NOW it will be moved to the high priority queue.
    When __zio_execute() is called again for the zio it will mis-
    interpret the context and re-dispatch it again.  The system
    will get stuck spinning re-dispatching the zio and making no
    forward progress.
    
    To fix this rare issue __zio_execute() has been updated not
    to re-dispatch zios on either the ZIO_TASKQ_ISSUE or
    ZIO_TASKQ_ISSUE_HIGH task queues.
    
    In practice this issue was rarely reported and can usually
    be fixed by rebooting the system and importing the pool again.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1455

[33mcommit 0bc7a7a75429f3f5dc68e57dfad4c5fb84a48558[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Tue Jun 4 03:54:44 2013 +0200

    Don't specifically open /etc/mtab - it is done in libzfs_init()
    a few lines further down and we can share the open file handle.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1498

[33mcommit abbfdca483897d4406889e3517e77baf07573ecb[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Tue Jun 4 03:56:04 2013 +0200

    No point in rewind() mtab in zfs_unshare_proto(). We're not really
    reading the file, but instead use libzfs_mnttab_find() which does
    the nessesary freopen() for us.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1498

[33mcommit f9e459d1435832caa69fdaf236ebaeacd93f1b3e[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Tue Jun 4 03:55:28 2013 +0200

    Use setmntent() OR fopen()
    
    For the same reasons it's used in libzfs_init(), this was just
    overlooked because zinject gets minimal use.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1498

[33mcommit fb5c53ea65b75c67c23f90ebbbb1134a5bb6c140[m
Author: John Layman <jlayman@sagecloud.com>
Date:   Tue Aug 13 15:24:58 2013 -0400

    Fix for re-reading /etc/mtab in zfs_is_mounted()
    
    When /etc/mtab is updated on Linux it's done atomically with
    rename(2).  A new mtab is written, the existing mtab is unlinked,
    and the new mtab is renamed to /etc/mtab.  This means that we
    must close the old file and open the new file to get the updated
    contents.  Using rewind(3) will just move the file pointer back
    to the start of the file, freopen(3) will close and open the file.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1611

[33mcommit 105afebb1529c21c3fb1ef7101918ed9fb704942[m
Author: Yuri Pankov <yuri.pankov@nexenta.com>
Date:   Tue Jul 16 15:54:29 2013 -0500

    Illumos #3098 zfs userspace/groupspace fail
    
    3098 zfs userspace/groupspace fail without saying why when run as non-root
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/3098
      illumos/illumos-gate@70f56fa69343b013f47e010537cff8ef3a7a40a5
    
    Ported-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1596

[33mcommit cb682a173a84813b2aeb5d18f58cff1a07531fb3[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Thu Mar 21 14:47:36 2013 -0800

    Illumos #3618 ::zio dcmd does not show timestamp data
    
    3618 ::zio dcmd does not show timestamp data
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: George Wilson <gwilson@zfsmail.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Garrett D'Amore <garrett@damore.org>
    Approved by: Dan McDonald <danmcd@nexenta.com>
    
    References:
      http://www.illumos.org/issues/3618
      illumos/illumos-gate@c55e05cb35da47582b7afd38734d2f0d9c6deb40
    
    Notes on porting to ZFS on Linux:
    
    The original changeset mostly deals with mdb ::zio dcmd.
    However, in order to provide the requested functionality
    it modifies vdev and zio structures to keep the timing data
    in nanoseconds instead of ticks. It is these changes that
    are ported over in the commit in hand.
    
    One visible change of this commit is that the default value
    of 'zfs_vdev_time_shift' tunable is changed:
    
        zfs_vdev_time_shift = 6
            to
        zfs_vdev_time_shift = 29
    
    The original value of 6 was inherited from OpenSolaris and
    was subotimal - since it shifted the raw tick value - it
    didn't compensate for different tick frequencies on Linux and
    OpenSolaris. The former has HZ=1000, while the latter HZ=100.
    
    (Which itself led to other interesting performance anomalies
    under non-trivial load. The deadline scheduler delays the IO
    according to its priority - the lower priority the further
    the deadline is set. The delay is measured in units of
    "shifted ticks". Since the HZ value was 10 times higher,
    the delay units were 10 times shorter. Thus really low
    priority IO like resilver (delay is 10 units) and scrub
    (delay is 20 units) were scheduled much sooner than intended.
    The overall effect is that resilver and scrub IO consumed
    more bandwidth at the expense of the other IO.)
    
    Now that the bookkeeping is done is nanoseconds the shift
    behaves correctly for any tick frequency (HZ).
    
    Ported-by: Cyril Plisko <cyril.plisko@mountall.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1643

[33mcommit 570d6edf1d94917aab49c5755027d05b3c7bcd43[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Sun Jul 14 12:59:24 2013 -0400

    Linux 3.8 compat: Support CONFIG_UIDGID_STRICT_TYPE_CHECKS
    
    When CONFIG_UIDGID_STRICT_TYPE_CHECKS is enabled uid_t/git_t are
    replaced by kuid_t/kgid_t, which are structures instead of integral
    types. This causes any code that uses an integral type to fail to build.
    The User Namespace functionality introduced in Linux 3.8 requires
    CONFIG_UIDGID_STRICT_TYPE_CHECKS, so we could not build against any
    kernel that supported it.
    
    We resolve this by converting between the new kuid_t/kgid_t structures
    and the original uid_t/gid_t types.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1589

[33mcommit fadd0c4da1e2ccd6014800d8b1a0fd117dd323e8[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jul 25 10:39:31 2013 -0700

    Evict meta data from ghost lists + l2arc headers
    
    When the meta limit is exceeded the ARC evicts some meta data
    buffers from the mfu+mru lists.  Unfortunately, for meta data
    heavy workloads it's possible for these buffers to accumulate
    on the ghost lists if arc_c doesn't exceed arc_size.
    
    To handle this case arc_adjust_meta() has been entended to
    explicitly evict meta data buffers from the ghost lists in
    proportion to what was evicted from the mfu+mru lists.
    
    If this is insufficient we request that the VFS release
    some inodes and dentries.  This will result in the release
    of some dnodes which are counted as 'other' metadata.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 68121a03daf58a7d5b9351f110196b8ce806e1fa[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jul 25 10:28:45 2013 -0700

    Allow arc_evict_ghost() to only evict meta data
    
    The default behavior of arc_evict_ghost() is to start by evicting
    data buffers.  Then only if the requested number of bytes to evict
    cannot be satisfied by data buffers move on to meta data buffers.
    
    This is ideal for honoring arc_c since it's preferable to keep the
    meta data cached.  However, if we're trying to free memory from the
    arc to honor the meta limit it's a problem because we will need to
    discard all the data to get to the meta data.
    
    To avoid this issue the arc_evict_ghost() is now passed a fourth
    argumented describing which buffer type to start with.  The
    arc_evict() function already behaves exactly like this for a
    same reason so this is consistent with the existing code.
    
    All existing callers have been updated to pass ARC_BUFC_DATA so
    this patch introduces no functional change.  New callers may
    pass ARC_BUFC_METADATA to skip immediately to evicting meta
    data leaving the normal data untouched.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 4e59f475118b7081a3f950ebf7c70b5bfc7c9778[m
Author: Saso Kiselkov <skiselkov@gmail.com>
Date:   Thu Aug 8 13:33:18 2013 -0700

    Illumos #3964 L2ARC should always compress metadata buffers
    
    3964 L2ARC should always compress metadata buffers
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    References:
      https://www.illumos.org/issues/3964
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1379

[33mcommit 3a17a7a99a1a6332d0999f9be68e2b8dc3933de1[m
Author: Saso Kiselkov <skiselkov@gmail.com>
Date:   Thu Aug 1 13:02:10 2013 -0700

    Illumos #3137 L2ARC compression
    
    3137 L2ARC compression
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Dan McDonald <danmcd@nexenta.com>
    
    References:
      illumos/illumos-gate@aad02571bc59671aa3103bb070ae365f531b0b62
      https://www.illumos.org/issues/3137
      http://wiki.illumos.org/display/illumos/L2ARC+Compression
    
    Notes for Linux port:
    
    A l2arc_nocompress module option was added to prevent the
    compression of l2arc buffers regardless of how a dataset's
    compression property is set.  This allows the legacy behavior
    to be preserved.
    
    Ported by: James H <james@kagisoft.co.uk>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1379

[33mcommit c11a12bc3b2e5ee9a6bd74e26f1a396b6025fbd4[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Sun Aug 4 19:13:15 2013 -0400

    Return -1 from arc_shrinker_func()
    
    This is analogous to SPL commit zfsonlinux/spl@b9b3715.  While
    we don't have clear evidence of systems getting caught here
    indefinately like in the SPL this ensures that it will never
    happen.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1579

[33mcommit 8170d281263e52ff33d7fba93ab625196844df36[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Sun Aug 4 14:58:45 2013 -0400

    Return correct type and offset from zfs_readdir
    
    zfs_readdir() is used by getdents(), which provides a list of all files
    in directory, their types and an offset that be used by llseek() to seek
    to the next directory entry.
    
    On Solaris, the first two directory entries "." and ".." respectively
    have offsets 1 and 2 on ZFS while the other files have rather large
    numbers. Currently, ZFSOnLinux is  giving "." offset 0 and all other
    entries large numbers. The first entry's next entry offset points to
    itself, which causes software that uses llseek() in conjunction with
    getdents() for filesystem navigation to enter an infinite loop.  The
    offsets used for each directory entry are filesystem specific on all
    platforms, so we can fix this by adopting the Solaris behavior.
    
    Also, we currently report each directory entry as having type 0 (???).
    This is not wrong, but we can do better. getdents() on Solaris does not
    appear to provide this information, but it does on Linux and Mac OS X
    do. ZFS provides easy access to type information in zfs_readdir(), so
    this patch provides this as well.
    
    Reported-by: Andrey <andrey@kudinov.su>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1624

[33mcommit c61f97f426b7e0bc106b7e6795d4ea2ecbd2384d[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Fri Jul 5 15:14:17 2013 -0400

    Illumos #3639 zpool.cache should skip over readonly pools
    
    3639 zpool.cache should skip over readonly pools
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Basil Crow <basil.crow@delphix.com>
    Approved by: Gordon Ross <gwr@nexenta.com>
    
    References:
      illumos/illumos-gate@fb02ae025247e3b662600e5a9c1b4c33ecab7d72
      https://www.illumos.org/issues/3639
    
    Normally we don't list pools that are imported read-only in the cache
    file, however you can accidentally get one into the cache file by
    importing and exporting a read-write pool while a read-only pool is
    imported:
    
    $ zpool import -o readonly test1
    $ zpool import test2
    $ zpool export test2
    $ zdb -C
    
    This is a problem because if the machine reboots we import all pools in
    the cache file as read-write.
    
    Ported-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 78d7a5d780d44708a6e8835a0f1e185cc8ee3dfb[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jul 26 10:38:49 2013 -0700

    Write dirty inodes on close
    
    When the property atime=on is set operations which only access
    and inode do cause an atime update.  However, it turns out that
    dirty inodes with updated atimes are only written to disk when
    the inodes get evicted from the cache.  Somewhat surprisingly
    the source suggests that this isn't a ZoL specific issue.
    
    This behavior may in part explain why zfs's reclaim logic has
    been observed to be slow.  When reclaiming inodes its likely
    that they have a dirty atime which will force a write to disk.
    
    Obviously we don't want to force a write to disk for every
    atime update, these needs to be batched.  The right way to
    do this is to fully implement the .dirty_inode and .write_inode
    callbacks.  However, to do that right requires proper unification
    of some fields in the znode/inode.  Then we could just mark the
    inode dirty and leave it to the VFS to call .write_inode
    periodically.
    
    Until that work gets done we have to settle for some middle
    ground.  The simplest and safest thing we can do for now is
    to write the dirty inode on last close.  This should prevent
    the majority of inodes in the cache from having dirty atimes
    and not drastically increase the number of writes.
    
    Some rudimentally testing to show how long it takes to drop
    500,000 inodes from the cache shows promising results.  This
    is as expected because we're no longer do lots of IO as part
    of the eviction, it was done earlier during the close.
    
    w/out patch: ~30s to drop 500,000 inodes with drop_caches.
    with patch:  ~3s to drop 500,000 inodes with drop_caches.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit e0fd27870850d7beef9f01f93f30b7255338f4b0[m
Author: Steven Burgess <sburgess@dattobackup.com>
Date:   Wed Aug 7 15:52:55 2013 -0400

    Fix man page for the sync property
    
    The help output of for zfs set/get says that sync can be one of
    
      standard | always | disabled
    
    but the man pages claim it can be
    
      sync=default | always | disabled
    
    the accepted value is standard, this changes the manpage to give the
    correct values.
    
    Signed-off-by: Steven Burgess <sburgess@dattobackup.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1634

[33mcommit e43b290fdb61fc9533af96fab48515dec0333a2f[m
Author: Massimo Maggi <me@massimo-maggi.eu>
Date:   Wed Aug 7 10:42:23 2013 +0200

    Fix the default checksum algorithm in the manpage
    
    The manpage reports fletcher2, but in zio.h ZIO_CHECKSUM_ON_VALUE
    is defined to ZIO_CHECKSUM_FLETCHER_4.
    
    Signed-off-by: Massimo Maggi <me@massimo-maggi.eu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1628

[33mcommit cb79a4e8bb19908235d3cb646506530457341b76[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sat Jul 27 04:42:57 2013 -0700

    Add kmod repo integration
    
    When the kmod packaging infrastructure was originally added the
    dependency on the rpmfusion yum repositories was disabled.  This
    was done at the time in favour of getting local builds working.
    
    Now the time has come to conditionally re-enable that functionality
    so we can properly provide binary kmod packages.
    
      ./configure --with-config=srpm
      make SRPM_DEFINE_KMOD='--define="repo rpmfusion"' srpm-kmod
      mock rebuild zfs-kmod-x.y.z-r.el6.src.rpm
    
    One nice benefit of finishing this work is that the generic and
    fedora spl-kmod spec files can be merged again.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 57b650b86f15793195f9bf2185e1161c7c67904d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 1 09:39:46 2013 -0700

    Export additional dmu symbols
    
    The dmu_prefetch, dmu_free_long_range, dmu_free_object,
    dmu_prealloc, dmu_write_policy, and dmu_sync symbols have
    been exported so they may be used by other modules.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 7d63721118a82a29649a3d8ae4b4522afdad1449[m
Author: Nathaniel Clark <Nathaniel.Clark@misrule.us>
Date:   Tue Jul 23 13:32:57 2013 -0400

    dmu_tx: Fix possible NULL pointer dereference
    
    dmu_tx_hold_object_impl can return NULL on error.  Check for this
    condition prior to dereferencing pointer.  This can only occur if
    the passed object was invalid or unallocated.
    
    Signed-off-by: Nathaniel Clark <Nathaniel.Clark@misrule.us>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1610

[33mcommit cb543e6b5e98546a5caec29ca4b25abec98560a2[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Tue Jul 9 10:45:30 2013 -0400

    Remove b_thawed from arc_buf_hdr_t
    
    The code involving b_thawed appears to be dead, so lets discard it.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1614

[33mcommit 3f4058cd15545a83b4e6e50cd7e29af45b54054a[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Sun Jul 7 13:39:59 2013 -0400

    Remove arc_data_buf_alloc()/arc_data_buf_free()
    
    These functions are used in neither Illumos nor ZFSOnLinux. They appear
    to have been replaced by arc_buf_alloc()/arc_buf_free(), so lets remove
    them.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1614

[33mcommit 4edbd2f79a95ac608155bf518ea7253c8a0a61fe[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Sun Jul 7 11:54:51 2013 -0400

    Remove zio_alloc_arena
    
    We declare zio_alloc_arena using extern, but it does not appear to exist
    anywhere in the code. This permits undefined behavior, so lets remove
    it.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1614

[33mcommit bce45ec9fb7bcdd8c306ccc7fc1ecc7f29cecbf5[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jul 24 10:14:11 2013 -0700

    Make arc+l2arc module options writable
    
    The l2arc module options can be made safely writable.  This allows
    the options to be changed without unloading/loading the modules.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit c93504f03a0881992689069a8f78e17933dcd5b3[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jul 24 09:57:56 2013 -0700

    Change l2arc_norw default to zero
    
    These days modern SSDs can efficiently service concurrent reads
    and writes.  When this flag was added that wasn't really the
    case for a variety of SSD controllers.  But now we can set the
    default value to take advantage of this parallelism and only
    disable this as needed for specific troublesome hardware.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 6e1d7276c94cbd7c2e19f9232f6ba4bafa62dbe0[m
Author: Ying Zhu <casualfisher@gmail.com>
Date:   Sat Jun 22 20:35:18 2013 +0800

    Fix inaccurate arcstat_l2_hdr_size calculations
    
    Based on the comments in arc.c we know that buffers can exist both
    in arc and l2arc, under this circumstance both arc_buf_hdr_t and
    l2arc_buf_hdr_t will be allocated. However the current logic only
    cares for memory that l2arc_buf_hdr takes up when the buffer's
    state transfers from or to arc_l2c_only. This will cause obvious
    deviations for illumos's zfs version since the sizeof(l2arc_buf_hdr)
    is larger than ZOL's. We can implement the calcuation in the
    following simple way:
    
    1. When allocate a l2arc_buf_hdr_t we add its memory consumption
       instantly and subtract it when we free or evict the l2arc buf.
    2. According to l2arc_hdr_stat_add and l2arc_hdr_stat_remove, if
       the buffer only stays in l2arc we should also add the memory
       its arc_buf_hdr_t consumes, so we only need to add HDR_SIZE to
       arcstat_l2_hdr_size since we already concerned with L2HDR_SIZE
       in step 1 and the same for transfering arc bufs from l2arc only
       state.
    
    The testbox has 2 4-core Intel Xeon CPUs(2.13GHz), with 16GB memory
    and tests were set upped in the following way:
    
    1. Fdisked a SATA disk into two partitions, one partition for zpool
       storage and the other one was used as the cache device.
    2. Generated some files occupying 14GB altogether in the zpool
       prepared in step 1 using iozone.
    3. Read them all using md5sum and watched the l2arc related statistics
       in /proc/spl/kstat/zfs/arcstats. After the reading ended the
       l2_hdr_size and l2_size were shown like this:
    
          l2_size             4       4403780608
          l2_hdr_size         4       0
    
       which was weird.
    
    4. After applying this patch and reran step 1-3, the results were
       as following:
    
          l2_size             4       4306443264
          l2_hdr_size         4       535600
    
       these numbers made sense, on 64-bit systems the
       sizeof(l2arc_buf_hdr_t) is 16 bytes.  Assue all blocks cached by
       l2arc are 128KB, so 535600/16*128*1024=4387635200, since not all
       blocks are equal-sized, the theoretical result will be a little
       bigger, as we can see.
    
    Since I'm familiar with systemtap instrumentation tool I used it to
    examine what had happened. The script looked like this:
    
    probe module("zfs").function("arc_chage_state")
    {
    	if ($new_state == $arc_l2_only)
    		printf("change arc buf to arc_l2_only\n")
    }
    
    It will print out some information each time we call funciton
    arc_chage_state if the argument new_state is arc_l2_only.  I
    gathered the trace logs and found that none of the arc bufs ran
    into arc state arc_l2_only when the tests was running, this was
    the reason why l2_hdr_size in step 3 was 0. The arc bufs fell into
    arc_l2_only when the pool or the filesystem was offlined.
    
    Signed-off-by: Ying Zhu <casualfisher@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit cd72af9c681779cc88af389bd227a655e776476c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jul 23 12:37:14 2013 -0700

    Fix 'zpool list -H' error code
    
    Due to an uninitialized variable it was possible for the command
    'zpool list -H' to return a non-zero error when there are no pools.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1605

[33mcommit da91c90154f32c56225e44b63aedf7c8d393f38c[m
Author: Christer Ekholm <che@chrekh.se>
Date:   Sun Jul 21 00:04:33 2013 +0200

    Add missing -v to usage help for zpool list.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 6e1b9d03342309358e58e99ac41e2e8e599d31ba[m
Author: Christer Ekholm <che@chrekh.se>
Date:   Fri Jul 19 00:19:32 2013 +0200

    Add documentation for -T and interval to "zpool list"
    
    zpool list has the same options for repeating as zpool iostat
    has, but that is not documented. This patch adds the documentation.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit dba1d705669cf0e33091622d0e950b9459b20e2e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jul 15 13:37:51 2013 -0700

    Fix arc_adapt() spinning in iterate_supers_type()
    
    The iterate_supers_type() function which was introduced in the
    3.0 kernel was supposed to provide a safe way to call an arbitrary
    function on all super blocks of a specific type.  Unfortunately,
    because a list_head was used a bug was introduced which made it
    possible for iterate_supers_type() to get stuck spinning on a
    super block which was just deactivated.
    
    This can occur because when the list head is removed from the
    fs_supers list it is reinitialized to point to itself.  If the
    iterate_supers_type() function happened to be processing the
    removed list_head it will get stuck spinning on that list_head.
    
    The bug was fixed in the 3.3 kernel by converting the list_head
    to an hlist_node.  However, to resolve the issue for existing
    3.0 - 3.2 kernels we detect when a list_head is used.  Then to
    prevent the spinning from occurring the .next pointer is set to
    the fs_supers list_head which ensures the iterate_supers_type()
    function will always terminate.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1045
    Closes #861
    Closes #790

[33mcommit c9ada6d5a00ba66fd54d62b4a1684e561fe2c9a4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jul 17 09:15:46 2013 -0700

    Fix read-only pool hang on unmount
    
    During mount a filesystem dataset would have the MS_RDONLY bit
    incorrectly cleared even if the entire pool was read-only.
    There is existing to code to handle this case but it was being run
    before the property callbacks were registered.  To resolve the
    issue we move this read-only code after the callback registration.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1338

[33mcommit 76351672c222f28ea1b681097a9eff58a6791555[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jul 11 14:11:32 2013 -0700

    Fix zfsctl_expire_snapshot() deadlock
    
    It is possible for an automounted snapshot which is expiring to
    deadlock with a manual unmount of the snapshot.  This can occur
    because taskq_cancel_id() will block if the task is currently
    executing until it completes.  But it will never complete because
    zfsctl_unmount_snapshot() is holding the zsb->z_ctldir_lock which
    zfsctl_expire_snapshot() must acquire.
    
    ---------------------- z_unmount/0:2153 ---------------------
      mutex_lock                <blocking on zsb->z_ctldir_lock>
      zfsctl_unmount_snapshot
      zfsctl_expire_snapshot
      taskq_thread
    
    ------------------------- zfs:10690 -------------------------
      taskq_wait_id             <waiting for z_unmount to exit>
      taskq_cancel_id
      __zfsctl_unmount_snapshot
      zfsctl_unmount_snapshot   <takes zsb->z_ctldir_lock>
      zfs_unmount_snap
      zfs_ioc_destroy_snaps_nvl
      zfsdev_ioctl
      do_vfs_ioctl
    
    We resolve the deadlock by dropping the zsb->z_ctldir_lock before
    calling __zfsctl_unmount_snapshot().  The lock is only there to
    prevent concurrent modification to the zsb->z_ctldir_snaps AVL
    tree.  Moreover, we're careful to remove the zfs_snapentry_t from
    the AVL tree before dropping the lock which ensures no other tasks
    can find it.  On failure it's added back to the tree.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Chris Dunlap <cdunlap@llnl.gov>
    Closes #1527

[33mcommit e34f17a8dfc0ef7650ba489f9772c2c20dc8bec4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jul 11 15:33:10 2013 -0700

    Add dkms_version conditional
    
    By adding a dkms_version conditional it's now possible to specify
    an exact version of dkms.   This is used by the Fedora and EPEL
    yum repositories to ensure the patched version of dkms provided
    by the repository is installed.  The patched version of dkms
    ensures that the spl modules are built before the zfs modules.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1466

[33mcommit 556011dbec2d10579819078559a77630fc559112[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri May 31 12:07:59 2013 -0700

    Improve N-way mirror performance
    
    The read bandwidth of an N-way mirror can by increased by 50%,
    and the IOPs by 10%, by more carefully selecting the preferred
    leaf vdev.
    
    The existing algorthm selects a perferred leaf vdev based on
    offset of the zio request modulo the number of members in the
    mirror.  It assumes the drives are of equal performance and
    that spreading the requests randomly over both drives will be
    sufficient to saturate them.  In practice this results in the
    leaf vdevs being under utilized.
    
    Utilization can be improved by preferentially selecting the leaf
    vdev with the least pending IO.  This prevents leaf vdevs from
    being starved and compensates for performance differences between
    disks in the mirror.  Faster vdevs will be sent more work and
    the mirror performance will not be limitted by the slowest drive.
    
    In the common case where all the pending queues are full and there
    is no single least busy leaf vdev a batching stratagy is employed.
    Of the N least busy vdevs one is selected with equal probability
    to be the preferred vdev for T microseconds.  Compared to randomly
    selecting a vdev to break the tie batching the requests greatly
    improves the odds of merging the requests in the Linux elevator.
    
    The testing results show a significant performance improvement
    for all four workloads tested.  The workloads were generated
    using the fio benchmark and are as follows.
    
    1) 1MB sequential reads from 16 threads to 16 files (MB/s).
    2) 4KB sequential reads from 16 threads to 16 files (MB/s).
    3) 1MB random reads from 16 threads to 16 files (IOP/s).
    4) 4KB random reads from 16 threads to 16 files (IOP/s).
    
                   | Pristine              |  With 1461             |
                   | Sequential  Random    |  Sequential  Random    |
                   | 1MB  4KB    1MB  4KB  |  1MB  4KB    1MB  4KB  |
                   | MB/s MB/s   IO/s IO/s |  MB/s MB/s   IO/s IO/s |
    ---------------+-----------------------+------------------------+
    2 Striped      | 226  243     11  304  |  222  255     11  299  |
    2 2-Way Mirror | 302  324     16  534  |  433  448     23  571  |
    2 3-Way Mirror | 429  458     24  714  |  648  648     41  808  |
    2 4-Way Mirror | 562  601     36  849  |  816  828     82  926  |
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1461

[33mcommit 92334b14ec378b1693573b52c09816bbade9cf3e[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Wed Jul 10 15:53:48 2013 -0700

    Add new kstat for monitoring time in dmu_tx_assign
    
    This change adds a new kstat to gain some visibility into the amount of
    time spent in each call to dmu_tx_assign. A histogram is exported via
    a new dmu_tx_assign_histogram-$POOLNAME file. The information contained
    in this histogram is the frequency dmu_tx_assign took to complete given
    an interval range. For example, given the below histogram file:
    
        $ cat /proc/spl/kstat/zfs/dmu_tx_assign_histogram-tank
        12 1 0x01 32 1536 19792068076691 20516481514522
        name                            type data
        1 us                            4    859
        2 us                            4    252
        4 us                            4    171
        8 us                            4    2
        16 us                           4    0
        32 us                           4    2
        64 us                           4    0
        128 us                          4    0
        256 us                          4    0
        512 us                          4    0
        1024 us                         4    0
        2048 us                         4    0
        4096 us                         4    0
        8192 us                         4    0
        16384 us                        4    0
        32768 us                        4    1
        65536 us                        4    1
        131072 us                       4    1
        262144 us                       4    4
        524288 us                       4    0
        1048576 us                      4    0
        2097152 us                      4    0
        4194304 us                      4    0
        8388608 us                      4    0
        16777216 us                     4    0
        33554432 us                     4    0
        67108864 us                     4    0
        134217728 us                    4    0
        268435456 us                    4    0
        536870912 us                    4    0
        1073741824 us                   4    0
        2147483648 us                   4    0
    
    one can see most calls to dmu_tx_assign completed in 32us or less, but a
    few outliers did not. Specifically, 4 of the calls took between 262144us
    and 131072us. This information is difficult, if not impossible, to gather
    without this change.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1584

[33mcommit bf89c19914c66b030333460952dbdfabf9ff527e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jul 10 15:13:09 2013 -0700

    Log pool suspension warnings to the console
    
    In the event that a pool gets suspended log this information to
    the console.  This is critical information and we want to make
    sure it gets logged.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1555

[33mcommit abc41ac7c78c6f218a226a746f5d92a41fe53285[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jul 10 14:09:08 2013 -0700

    Use GFP_NOIO in vdev_disk_io_flush()
    
    To avoid a potential deadlock when using a zvol as a swap
    device prevent vdev_disk_io_flush() from performing IO during
    the bio_alloc().
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1508

[33mcommit ff3510c1a562914902d78f3d56552e126103f5a4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jul 9 15:13:40 2013 -0700

    Fix zpool_read_label()
    
    The zpool_read_label() function was subtly broken due to a
    difference of behavior in fstat64(2) on Solaris vs Linux.
    
    Under Solaris when a block device is stat'ed the st_size
    field will contain the size of the device in bytes.  Under
    Linux this is only true for regular file and symlinks.  A
    compatibility function called fstat64_blk(2) was added
    which can be used when the Solaris behavior is required.
    
    This flaw was never noticed because the only time we would
    need to use the device size is when the first two labels
    are damaged.  I noticed this issue while adding the
    zpool_clear_label() function which is similar in design
    and does require us to write all the labels.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 131cc95ca78b8552c13555d2cded791808008ff3[m
Author: Dmitry Khasanov <pik4ez@gmail.com>
Date:   Fri Jul 5 18:01:44 2013 +0700

    Add FreeBSD 'zpool labelclear' command
    
    The FreeBSD implementation of zfs adds the 'zpool labelclear'
    command.  Since this functionality is helpful and straight
    forward to add it is being included in ZoL.
    
    References:
      freebsd/freebsd@119a041dc9230275239a8de68c534c0754181e7e
    
    Ported-by: Dmitry Khasanov <pik4ez@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1126

[33mcommit 51a3ae72d23d89d35a4a67059b39e870d66a2495[m
Author: Dmitry Khasanov <pik4ez@gmail.com>
Date:   Fri Jul 5 17:44:53 2013 +0700

    Readd zpool_clear_label() from OpenSolaris
    
    This patch restores the zpool_clear_label() function from
    OpenSolaris.  This was removed by commit d603ed6 because
    it wasn't clear we had a use for it in ZoL.  However, this
    functionality is a prerequisite for adding the 'zpool labelclear'
    command from FreeBSD.
    
    As part of bringing this change in the zpool_clear_label()
    function was changed to use fstat64_blk(2) for compatibility
    with Linux.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1126

[33mcommit 50210587563bb37c48d2624d11e158ab3ad30715[m
Author: Tim Chase <tim@chase2k.com>
Date:   Tue Jul 9 07:15:26 2013 -0500

    zdb: enhancement - Display SA xattrs.
    
    If the znode has SA xattrs, display them following the other
    standard attributes.  The format used is similar to that used
    when listing the contents of a ZAP.  It is as follows:
    
    	$ zdb -vvv <pool>/<dataset> <object>
    	...
    	SA xattrs: <size> bytes, <number> entries
    		<name1> = <value1>
    		<name2> = <value2>
    		...
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1581

[33mcommit 5d3dc3fb72518a4c191e3a014622b74365eb3a74[m
Author: Mike Leddy <mike.leddy@gmail.com>
Date:   Thu Jul 4 01:02:05 2013 -0300

    Avoid abort() in vn_rdwr(): libzpool/kernel.c
    
    Make sure that buffer is aligned to 512 bytes on linux so that
    pread call combined with O_DIRECT does not return EINVAL.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1570

[33mcommit b4f7f105275d996fbcb6abd65760307d2153a89b[m
Author: Ying Zhu <casualfisher@gmail.com>
Date:   Sat Jun 29 15:03:49 2013 +0800

    Improve code in arc_buf_remove_ref
    
    When we remove references of arc bufs in the arc_anon state we
    needn't take its header's hash_lock, so postpone it to where we
    really need it to avoid unnecessary invocations of function buf_hash.
    
    Signed-off-by: Ying Zhu <casualfisher@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1557

[33mcommit 8e07b99b2f5e1e281af72e07dee87301c8872f56[m
Author: Shen Yan <shenyanxxxy@qq.com>
Date:   Wed Jul 3 10:00:16 2013 +0800

    Update zio.c
    
    The cv_wait_io is used to account io time instead of cv_wait.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1566

[33mcommit e77aa730bc9d7ac80aac56b68f9cf7d51b275a29[m
Author: Shen Yan <shenyanxxxy@qq.com>
Date:   Wed Jul 3 09:55:16 2013 +0800

    Fix the comment in zfs.h
    
    The path to code is also changed in zfsonlinux.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issues #1566

[33mcommit 31455ab13056da037410353f10c484dfca3d3ebc[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jul 3 09:55:39 2013 -0700

    Add zfs_autoimport_disable tunable
    
    There are times when it is desirable for zfs to not automatically
    populate the spa namespace at module load time using the pools
    in the /etc/zfs/zpool.cache file.  The zfs_autoimport_disable
    module option has been added to control this behavior.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #330

[33mcommit 50fe577d1f3bd06e15fe2006459debd9fdffd04a[m
Author: Craig Loomis <cloomis@astro.princeton.edu>
Date:   Fri Jul 5 10:51:36 2013 -0400

    Explicitly flush output at end of each zevent
    
    For "zpool events -f" flush stdout to ensure the last zevent
    is always printed immediately.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1568

[33mcommit a1d9543a39942be56879ca9338078afc77c25cea[m
Author: Chris Dunlop <chris@onthe.net.au>
Date:   Mon Jun 3 16:58:52 2013 +1000

    3.10 API change: block_device_operations->release() returns void
    
    Linux kernel commit torvalds/linux@db2a144 changed the return type
    of block_device_operations->release() to void.  Detect the expected
    prototype and defined our callout accordingly.
    
    Signed-off-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1494

[33mcommit 168d056cf8ed073e17f008b9109ad3d37e63f172[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jul 3 21:38:45 2013 -0700

    Add conditional chkconfig to packaging
    
    Unconditionally exit with zero to avoid returning failures
    from the scriptlets.  This should have been part of the
    previous ba661a6 commit.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1376

[33mcommit ba661a6e3f118fbf66ac11dafbe4cb7ac3fa51bd[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jul 3 16:12:37 2013 -0700

    Add conditional chkconfig to packaging
    
    Prior to adopting the kmod style packaging the zfs packages
    would conditionally invoke /sbin/chkconfig to create the
    proper links for the init script.  This is done conditionally
    because many distributions are moving away from SysV style
    init scripts and we don't want to cause errors on those.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1376

[33mcommit e9832eb2721ce1695fa8bdaa908cdde9690f95df[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jul 3 14:22:34 2013 -0700

    Remove zfs-dracut and zfs-test dependencies
    
    Remove from the zfs package the depenencies on the zfs-dracut and
    zfs-test subpackages.  Neither of these packages are required for
    normal operation and they bring in many unnecessary dependencies
    during installation.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1395

[33mcommit 91604b298c24c84fe03bc6c028abb961ca3e6fcf[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jul 2 11:59:51 2013 -0700

    Open pools asynchronously after module load
    
    One of the side effects of calling zvol_create_minors() in
    zvol_init() is that all pools listed in the cache file will
    be opened.  Depending on the state and contents of your pool
    this operation can take a considerable length of time.
    
    Doing this at load time is undesirable because the kernel
    is holding a global module lock.  This prevents other modules
    from loading and can serialize an otherwise parallel boot
    process.  Doing this after module inititialization also
    reduces the chances of accidentally introducing a race
    during module init.
    
    To ensure that /dev/zvol/<pool>/<dataset> devices are
    still automatically created after the module load completes
    a udev rules has been added.  When udev notices that the
    /dev/zfs device has been create the 'zpool list' command
    will be run.  This then will cause all the pools listed
    in the zpool.cache file to be opened.
    
    Because this process in now driven asynchronously by udev
    there is the risk of problems in downstream distributions.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #756
    Issue #1020
    Issue #1234

[33mcommit 2a3871d4bcc65dff7be4c9b55cb863421ddc8c3a[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Tue Jul 2 11:59:10 2013 -0700

    Cleanup zvol initialization code
    
    The following error will occur on some (possibly all) kernels
    because blk_init_queue() will try to take the spinlock before
    we initialize it.
    
      BUG: spinlock bad magic on CPU#0, zpool/4054
       lock: 0xffff88021a73de60, .magic: 00000000,
       .owner: <none>/-1, .owner_cpu: 0
      Pid: 4054, comm: zpool Not tainted 3.9.3 #11
      Call Trace:
       [<ffffffff81478ef8>] spin_dump+0x8c/0x91
       [<ffffffff81478f1e>] spin_bug+0x21/0x26
       [<ffffffff812da097>] do_raw_spin_lock+0x127/0x130
       [<ffffffff8147d851>] _raw_spin_lock_irq+0x21/0x30
       [<ffffffff812c2c1e>] cfq_init_queue+0x1fe/0x350
       [<ffffffff812aacb8>] elevator_init+0x78/0x140
       [<ffffffff812b2677>] blk_init_allocated_queue+0x87/0xb0
       [<ffffffff812b26d5>] blk_init_queue_node+0x35/0x70
       [<ffffffff812b271e>] blk_init_queue+0xe/0x10
       [<ffffffff8125211b>] __zvol_create_minor+0x24b/0x620
       [<ffffffff81253264>] zvol_create_minors_cb+0x24/0x30
       [<ffffffff811bd9ca>] dmu_objset_find_spa+0xea/0x510
       [<ffffffff811bda71>] dmu_objset_find_spa+0x191/0x510
       [<ffffffff81253ea2>] zvol_create_minors+0x92/0x180
       [<ffffffff811f8d80>] spa_open_common+0x250/0x380
       [<ffffffff811f8ece>] spa_open+0xe/0x10
       [<ffffffff8122817e>] pool_status_check.part.22+0x1e/0x80
       [<ffffffff81228a55>] zfsdev_ioctl+0x155/0x190
       [<ffffffff8116a695>] do_vfs_ioctl+0x325/0x5a0
       [<ffffffff8116a950>] sys_ioctl+0x40/0x80
       [<ffffffff814812c9>] ? do_page_fault+0x9/0x10
       [<ffffffff81483929>] system_call_fastpath+0x16/0x1b
       zd0: unknown partition table
    
    We fix this by calling spin_lock_init before blk_init_queue.
    
    The manner in which zvol_init() initializes structures is
    suspectible to a race between initialization and a probe on
    a zvol. We reorganize zvol_init() to prevent that.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 526af78550eb5ccf80ce11e7a9c26f203ae671b0[m
Author: Pawel Jakub Dawidek <pjd@FreeBSD.org>
Date:   Tue May 28 07:50:38 2013 -0400

    Call zvol_create_minors() in spa_open_common() when initializing pool
    
    There is an extremely odd bug that causes zvols to fail to appear on
    some systems, but not others. Recently, I was able to consistently
    reproduce this issue over a period of 1 month. The issue disappeared
    after I applied this change from FreeBSD.
    
    This is from FreeBSD's pool version 28 import, which occurred in
    revision 219089.
    
    Ported-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #441
    Issue #599

[33mcommit c76955eaa5477a71f711e6865a923e7055f8b3cb[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jul 3 09:16:46 2013 -0700

    Fix parse_dataset error handling
    
    A mount failure was accidentally introduced by commit 0c1171d
    which reworked the parse_dataset() function to read pool names
    from devices.  The error case where a label is read from the
    device but the pool name/value pair doesn't exist was not
    handled properly.  In this case we should fall back to the
    previous behavior.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1560

[33mcommit 294f68063b49c06d3118d51016811063e69cf97a[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Tue Jul 2 13:26:24 2013 -0700

    Illumos #3498 panic in arc_read()
    
    3498 panic in arc_read(): !refcount_is_zero(&pbuf->b_hdr->b_refcnt)
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      illumos/illumos-gate@1b912ec7100c10e7243bf0879af0fe580e08c73d
      https://www.illumos.org/issues/3498
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1249

[33mcommit 96b89346c074516a9bb130907646814208035ca8[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Tue Jul 2 13:20:02 2013 -0700

    Illumos #3122 zfs destroy filesystem should prefetch blocks
    
    3122 zfs destroy filesystem should prefetch blocks
    Reviewed by: Christopher Siden <chris.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
      illumos/illumos-gate@b4709335aa83dcbfd0dba33c9be21fcabebd28e4
      https://www.illumos.org/issues/3122
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1565

[33mcommit 3db3ff4a787acf068b122562fb5be5aecec2611f[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Tue Jul 2 00:07:15 2013 -0400

    Use MAXPATHLEN instead of sizeof in snprintf
    
    This silences a GCC 4.8.0 warning by fixing a programming error
    caught by static analysis:
    
    ../../cmd/ztest/ztest.c: In function ‘ztest_vdev_aux_add_remove’:
    ../../cmd/ztest/ztest.c:2584:33: error: argument to ‘sizeof’
      in ‘snprintf’ call is the same expression as the destination;
      did you mean to provide an explicit length?
      [-Werror=sizeof-pointer-memaccess]
      (void) snprintf(path, sizeof (path), ztest_aux_template,
                                     ^
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1480

[33mcommit 29dee3ee9ac68d8a75c0d518b1342f447cd2ddc0[m
Author: Cyril Plisko <cyril.plisko@mountall.com>
Date:   Tue Jun 4 12:25:22 2013 +0300

    Add zfs_sync_pass_* tunable parameters
    
    Commit 55d85d5a8c45c4559a4a0e675c37b0c3afb19c2f (backport of
    the upstream changes) replaced three hardcoded constants:
    
        #define SYNC_PASS_DEFERRED_FREE 2 /* defer frees after this pass */
        #define SYNC_PASS_DONT_COMPRESS 4 /* don't compress after this pass */
        #define SYNC_PASS_REWRITE       1 /* rewrite new bps after this pass */
    
    with a tunable parameters:
    
        int zfs_sync_pass_deferred_free = 2; /* defer frees starting in this pass */
        int zfs_sync_pass_dont_compress = 5; /* don't compress starting in this pass */
        int zfs_sync_pass_rewrite = 2;       /* rewrite new bps starting in this pass */
    
    This commit makes these tunables available as module parameters
    in Linux.  They should only be used for performance analysis
    because changing them can result in subtle and pathological
    performance problems.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1562

[33mcommit 802e7b5feb0135483de119eac1da192404eb5bb7[m
Author: Li Dongyang <dongyang.li@anu.edu.au>
Date:   Thu Jun 13 13:51:09 2013 -0400

    Add SEEK_DATA/SEEK_HOLE to lseek()/llseek()
    
    The approach taken was the rework zfs_holey() as little as
    possible and then just wrap the code as needed to ensure
    correct locking and error handling.
    
    Tested with xfstests 285 and 286.  All tests pass except for
    7-9 of 285 which try to reserve blocks first via fallocate(2)
    and fail because fallocate(2) is not yet supported.
    
    Note that the filp->f_lock spinlock did not exist prior to
    Linux 2.6.30, but we avoid the need for autotools check by
    virtue of the fact that SEEK_DATA/SEEK_HOLE support was not
    added until Linux 3.1.
    
    An autoconf check was added for lseek_execute() which is
    currently a private function but the expectation is that it
    will be exported perhaps as early as Linux 3.11.
    
    Reviewed-by: Richard Laager <rlaager@wiktel.com>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1384

[33mcommit cf91b2b6b2baaca1e56f23c985e3261cd98bd3f0[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Mon Jul 1 09:24:43 2013 -0700

    Readd zfs_holey() from OpenSolaris
    
    This patch restores the zfs_holey() function from OpenSolaris.
    This was removed by commit 3558fd7 because it wasn't clear we
    had a use for it in ZoL.  However, this functionality is a
    prerequisite for adding SEEK_DATA/SEEK_HOLE support to the ZPL.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Issue #1384

[33mcommit 0a6bef26ec80ee4db5f5340bbc007a45311e0415[m
Author: shenyan1 <shenyanxxxy@qq.com>
Date:   Sat Jun 29 19:07:45 2013 +0800

    kmem_zalloc(..., KM_SLEEP) will never fail
    
    By definitition these allocations will never fail.  For
    consistency with the rest of the code remove this dead error
    handling code.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1558

[33mcommit ab68b6e5db29abcd20c0c7b12a8c2fa570031c8b[m
Author: Tim Chase <tim@chase2k.com>
Date:   Mon Jun 24 22:03:56 2013 -0500

    Fix zfs_sb_teardown/zfs_resume_fs NULL dereference
    
    Fix a pair of conditions in which a concurrent umount can cause
    NULL pointer dereferences:
    
    * zfs_sb_teardown - prevent a NULL dereference by not calling
                        dmu_objset_pool with a null z_os.
    
    * zfs_resume_fs - don't try to unmount with a null z_os.  This
                      change makes the ZoL code more consistent
                      with both Illumos and FreeBSD.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1543

[33mcommit 64d7b6cf75e52a4698d9bdec61745573c39d2e5a[m
Author: Cyril Plisko <cyril.plisko@mountall.com>
Date:   Mon Jun 24 09:45:20 2013 +0300

    Override default SPA config location via environment
    
    When using zdb with non-default SPA config file it is not convenient
    to add -U <non-default-config-file-path> all the time. This commit
    introduces support for setting/overriding SPA config location via
    environment variable 'SPA_CONFIG_PATH'.
    
    If -U flag is specified in the command line it will override any other
    value as usual.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1545

[33mcommit 20c17b96c91f1231c59009236afd4277cbc253a8[m
Author: Cyril Plisko <cyril.plisko@mountall.com>
Date:   Mon Jun 24 09:10:56 2013 +0300

    Add absent \n at the end of the help text line
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1545

[33mcommit e2e229eb180fce8a67ba62c0e404d47e82c4c24d[m
Author: Steven Burgess <sburgess@dattobackup.com>
Date:   Thu Jun 27 20:35:11 2013 -0400

    Formating changes for zpool manpage
    
    Some of these entries were hidden before.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1553

[33mcommit bbb75c11908d1009b6749b797b3a763558bbaaaf[m
Author: Aaron Fineman <abyxcos@gmail.com>
Date:   Thu Jun 27 15:19:25 2013 -0400

    Add error message for missing /etc/mtab
    
    The zpool command should not silently fail when the /etc/mtab
    file does not exist.  This can occur in an initramfs environment
    when the /etc/mtab file hasn't yet been generated.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1541

[33mcommit c12936b141e7479a1402561e9e528731d763747e[m
Author: Ying Zhu <casualfisher@gmail.com>
Date:   Thu Jun 27 19:41:30 2013 +0800

    Fix module probe failure on 32-bit systems
    
    Previous commit 7ef5e54e2e28884a04dc800657967b891239e933 caused
    module probe failure on 32-bit systems, dmesg showed
    
      Unknown symbol __moddi3
    
    This was caused by the modulo operation 'gethrtime() % tqs->stqs_count'
    in the committed code.  Instead of implementing __moddi3 for all 32-bit
    systems, Behlendorf advised we can just cast the return value of
    gethrtime() into a uint64_t, since gethrtime does not return negative
    value on all circumstances we need not care about the potential overflow.
    
    Signed-off-by: Ying Zhu <casualfisher@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1551

[33mcommit 88c283952f0bfeab54612f9ce666601d83c4244f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jun 26 12:53:04 2013 -0700

    Return -EOPNOTSUPP for ZFS_IOC_{GET|SET}FLAGS
    
    Until these hooks are fully implemented return the expected
    -EOPNOTSUPP error to indicate they are not functional.  This
    allows test suites such as xfstests to cleanly skip testing
    this functionality until it's implemented.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #229

[33mcommit 0c1171dcb5c50f3a03c60f4346209c23a2b5ef86[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jun 25 15:43:09 2013 -0700

    Allow fetching the pool from the device at mount
    
    To simplify integration with the xfstests test suite the
    mount.zfs helper has been extended.  When passed a block
    device (/dev/sdX) to mount, instead of a pool/dataset,
    the pool name will be read from any existing zfs label
    and used.  This allows you to mount the root dataset of
    a zfs filesystem by specifing any of the member vdevs.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 389cf730cedd42dd1ef653e9358635c114e458d5[m
Author: Nathaniel Clark <Nathaniel.Clark@misrule.us>
Date:   Thu Apr 18 16:57:29 2013 -0400

    Make spl directory setable when building rpms and add --buildroot
    
    This adds ability to set the location of spl via defines when
    building from the spec files.  This is useful for build systems
    that build spl and zfs together without installing the actual rpms.
    
    Signed-off-by: Nathaniel Clark <Nathaniel.Clark@misrule.us>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1486

[33mcommit 81eaf151071eadbb3fba74d74324a0921c5fdb5f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jun 18 10:15:33 2013 -0700

    Register correct handlers in nvlist_alloc()
    
    The non-blocking allocation handlers in nvlist_alloc() would be
    mistakenly assigned if any flags other than KM_SLEEP were passed.
    This meant that nvlists allocated with KM_PUSHPUSH or other KM_*
    debug flags were effectively always using atomic allocations.
    
    While these failures were unlikely it could lead to assertions
    because KM_PUSHPAGE allocations in particular are guaranteed to
    succeed or block.  They must never fail.
    
    Since the existing API does not allow us to pass allocation
    flags to the private allocators the cleanest thing to do is to
    add a KM_PUSHPAGE allocator.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes zfsonlinux/spl#249

[33mcommit df4474f92d0b1b8d54e1914fdd56be2b75f1ff5e[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Thu Jun 6 18:46:55 2013 -0400

    Illumos #3805 arc shouldn't cache freed blocks
    
    3805 arc shouldn't cache freed blocks
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Richard Elling <richard.elling@dey-sys.com>
    Reviewed by: Will Andrews <will@firepipe.net>
    Approved by: Dan McDonald <danmcd@nexenta.com>
    
    References:
      illumos/illumos-gate@6e6d5868f52089b9026785bd90257a3d3f6e5ee2
      https://www.illumos.org/issues/3805
    
    ZFS should proactively evict freed blocks from the cache.
    
    On dcenter, we saw that we were caching ~256GB of metadata, while the
    pool only had <4GB of metadata on disk.  We were wasting about half the
    system's RAM (252GB) on blocks that have been freed.
    
    Even though these freed blocks will never be used again, and thus will
    eventually be evicted, this causes us to use memory inefficiently for 2
    reasons:
    
    1. A block that is freed has no chance of being accessed again, but will
    be kept in memory preferentially to a block that was accessed before it
    (and is thus older) but has not been freed and thus has at least some
    chance of being accessed again.
    
    2. We partition the ARC into several buckets:
    user data that has been accessed only once (MRU)
    metadata that has been accessed only once (MRU)
    user data that has been accessed more than once (MFU)
    metadata that has been accessed more than once (MFU)
    
    The user data vs metadata split is somewhat arbitrary, and the primary
    control on how much memory is used to cache data vs metadata is to
    simply try to keep the proportion the same as it has been in the past
    (each bucket "evicts against" itself).  The secondary control is to
    evict data before evicting metadata.
    
    Because of this bucketing, we may end up with one bucket mostly
    containing freed blocks that are very old, while another bucket has more
    recently accessed, still-allocated blocks.  Data in the useful bucket
    (with still-allocated blocks) may be evicted in preference to data in
    the useless bucket (with old, freed blocks).
    
    On dcenter, we saw that the MFU metadata bucket was 230MB, while the MFU
    data bucket was 27GB and the MRU metadata bucket was 256GB.  However,
    the vast majority of data in the MRU metadata bucket (256GB) was freed
    blocks, and thus useless.  Meanwhile, the MFU metadata bucket (230MB)
    was constantly evicting useful blocks that will be soon needed.
    
    The problem of cache segmentation is a larger problem that needs more
    investigation.  However, if we stop caching freed blocks, it should
    reduce the impact of this more fundamental issue.
    
    Ported-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1503

[33mcommit 6822a0d0582f580a21f70615f29ffe2869be8265[m
Author: Ying Zhu <casualfisher@gmail.com>
Date:   Sat Jun 15 22:25:48 2013 +0800

    Fix compile warning on 32-bit systems
    
    The definition of zfs_vdev_holder casts VDEV_HOLDER into a function pointer
    passing to linux kernel's block layer function blkdev_get_by_path.
    However current VDEV_HOLDER is defined to be wider than 32 bits and the compiler
    warns about potential overflows. Instead of specifying different values for 32-bit and
    64-bit systems using ifdefs, choose the common factor 32-bit addresses.
    Redefine VDEV_HOLDER to 0x2401de7("zholder") here.
    
    Signed-off-by: Ying Zhu <casualfisher@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1520

[33mcommit e51be06697762215dc3b679f8668987034a5a048[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Fri Jun 14 22:30:35 2013 -0500

    Illumos #3552, #3564
    
    3552 condensing one space map burns 3 seconds of CPU in spa_sync() thread
    3564 spa_sync() spends 5-10% of its time in metaslab_sync() (when not condensing)
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      illumos/illumos-gate@16a4a8074274d2d7cc408589cf6359f4a378c861
      https://www.illumos.org/issues/3552
      https://www.illumos.org/issues/3564
    
    Ported-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1513

[33mcommit c99c90015ece64746e20b74245caca41d1dbefe1[m
Author: Madhav Suresh <madhav.suresh@delphix.com>
Date:   Fri May 10 14:17:03 2013 -0700

    Illumos #3006
    
    3006 VERIFY[S,U,P] and ASSERT[S,U,P] frequently check if first
         argument is zero
    
    Reviewed by Matt Ahrens <matthew.ahrens@delphix.com>
    Reviewed by George Wilson <george.wilson@delphix.com>
    Approved by Eric Schrock <eric.schrock@delphix.com>
    
    References:
      illumos/illumos-gate@fb09f5aad449c97fe309678f3f604982b563a96f
      https://illumos.org/issues/3006
    
    Requires:
      zfsonlinux/spl@1c6d149feb4033e4a56fb987004edc5d45288bcb
    
    Ported-by: Tim Chase <tim@chase2k.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1509

[33mcommit 9eaf0832ad945fb8584c39fb9aeb5e8578912aeb[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Tue May 28 20:08:15 2013 -0400

    Improve OpenRC init script
    
    The current zfs OpenRC script's dependencies cause OpenRC to attempt to
    unmount ZFS filesystems at shutdown while things were still using them,
    which would fail. This is a cosmetic issue, but it should still be
    addressed. It probably does not affect systems where the rootfs is a
    legacy filesystem, but any system with the rootfs on ZFS needs to run
    the ZFS init script after the system is ready to shutdown filesystems.
    
    OpenRC's shutdown process occurs in the reverse order of the startup
    process. Therefore running the ZFS shutdown procedure after filesystems
    are ready to be unmounted requires running the startup procedure before
    fstab. This patch changes the dependencies of the script to expliclty
    run before fstab at boot when the rootfs is ZFS and to run after fstab
    at boot whenever the rootfs is not ZFS. This should cover most use
    cases.
    
    The only cases not covered well by this are systems with legacy
    root filesystems where people want to configure fstab to mount a non-ZFS
    filesystem off a zvol and possibly also systems whose pools are stored
    on network block devices. The former requires that the ZFS script run
    before fstab, which could cause ZFS datasets to mount too early and
    appear under the fstab mount points. The latter requires that the ZFS
    script run after networking starts, which precludes the ability to store
    any system information on ZFS. An additional OpenRC script could be
    written to handle non-root pools on network block devices, but that will
    depend on user demand and developer time.
    
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1479

[33mcommit fb02fabf9b8045d6a1ddedf3f79171f69633162d[m
Author: Christ Schlacta <aarcane@aarcane.info>
Date:   Thu Jun 6 21:33:01 2013 -0700

    Modified arcstat.py to run on linux
    
    * Modified kstat_update() to read arcstats from proc.
    * Fix shebang.
    * Added Makefile.am entries for arcstat.py
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1506

[33mcommit 7634cd54db25a69e00aaab6448ad710441bd8e7d[m
Author: Christ Schlacta <aarcane@aarcane.info>
Date:   Thu Jun 6 21:31:18 2013 -0700

    Added arcstat.py from FreeNAS
    
    Original source:
      http://support.freenas.org/browser/nanobsd/Files/usr/local/bin/arcstat.py
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1506

[33mcommit da29fe63f04aab286cfbfadefa12bb58389748c2[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Mon May 13 19:48:24 2013 -0700

    Don't leak mount flags into kernel
    
    When calling mount(), care must be taken to avoid passing in flags
    that are used only by the user space utilities.  Otherwise we may
    stomp on flags that are reserved for other purposes in the kernel.
    
    In particular, openSUSE 12.3 kernels have added a new MS_RICHACL
    super-block flag whose value conflicts with our MS_COMMENT flag. This
    causes incorrect behavior such as the umask being ignored.  The
    MS_COMMENT flag essentially serves as a placeholder in the option_map
    data structure of zfs_mount.c, but its value is never used. Therefore
    we can avoid the conflict by defining it to 0.
    
    The MS_USERS, MS_OWNER, and MS_GROUP flags also conflict with reserved
    flags in the kernel. While this is not known to have caused any
    problems, it is nevertheless incorrect.  For the purposes of the
    mount.zfs helper, the "users", "owner", and "group" options just serve
    as hints to set additional implied options.  Therefore we now define
    their associated mount flags in terms of the options that they imply
    rather than giving them unique values.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1457

[33mcommit fb827006163574fddb7fa837109d228dacd2ebf6[m
Author: Steven Burgess <sburgess@dattobackup.com>
Date:   Sun May 12 13:14:44 2013 -0400

    Adds zpool split to man page
    
    Adds zpool split documentation to the zpool man page.  I only documented
    the options that I could get to work.   While it is documented on some
    sun blogs that devices can be specified for split, I was not able to get
    that to work during my testing.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1456

[33mcommit 0377189b884fab7db02a95088e05712c7cf336f7[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed May 8 09:20:04 2013 -0700

    Only check directory xattr on ENOENT
    
    When SA xattrs are enabled only fallback to checking the directory
    xattrs when the name is not found as a SA xattr.  Otherwise, the SA
    error which should be returned to the caller is overwritten by the
    directory xattr errors.  Positive return values indicating success
    will also be immediately returned.
    
    In the case of #1437 the ERANGE error was being correctly returned
    by zpl_xattr_get_sa() only to be overridden with ENOENT which was
    returned by the subsequent unnessisary call to zpl_xattr_get_dir().
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1437

[33mcommit 4f34b3bdf4ced8f808f6cd928b87bd42ea3039fe[m
Author: Cyril Plisko <cyril.plisko@mountall.com>
Date:   Wed Oct 24 12:26:56 2012 +0200

    zfs_scrub_limit tunable is not used anywhere
    
    As a part of scrub/resilver tuning zfs_scrub_limit fell out of use,
    but the definition of the variable remained in place.
    Moreover various guides still (misleadingly) mention it as a way
    to influence resilver/scrub behavior.
    This commit removes its finally.
    
    Signed-off-by: Cyril Plisko <cyril.plisko@mountall.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1444

[33mcommit ee664d463189d6302877461967afe21ce9d861a0[m
Author: Ying Zhu <casualfisher@gmail.com>
Date:   Tue Apr 30 11:15:12 2013 +0800

    Fix incorrect assertions in ddt_phys_decref and ddt_sync_entry
    
    The assertions in ddt_phys_decref and ddt_sync_entry cast ddp->ddp_refcnt
    from uint64_t to int64_t, with a reference count bigger than 2^63, e.g. the
    reference count of zero blocks commonly available in spare files, we may
    mistakenly hit these assertations, so drop the type conversions here.
    
    Signed-off-by: Ying Zhu <casualfisher@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1436

[33mcommit 044baf009aac4935eca0f96477eb3c43e95d758a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri May 3 14:17:21 2013 -0700

    Use taskq for dump_bytes()
    
    The vn_rdwr() function performs I/O by calling the vfs_write() or
    vfs_read() functions.  These functions reside just below the system
    call layer and the expectation is they have almost the entire 8k of
    stack space to work with.  In fact, certain layered configurations
    such as ext+lvm+md+multipath require the majority of this stack to
    avoid stack overflows.
    
    To avoid this posibility the vn_rdwr() call in dump_bytes() has been
    moved to the ZIO_TYPE_FREE, taskq.  This ensures that all I/O will be
    performed with the majority of the stack space available.  This ends
    up being very similiar to as if the I/O were issued via sys_write()
    or sys_read().
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1399
    Closes #1423

[33mcommit 7ef5e54e2e28884a04dc800657967b891239e933[m
Author: Adam Leventhal <ahl@delphix.com>
Date:   Mon May 6 12:24:30 2013 -0700

    Illumos #3581 spa_zio_taskq[ZIO_TYPE_FREE][ZIO_TASKQ_ISSUE]->tq_lock contention
    
    3581 spa_zio_taskq[ZIO_TYPE_FREE][ZIO_TASKQ_ISSUE]->tq_lock is piping hot
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: Gordon Ross <gordon.ross@nexenta.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      illumos/illumos-gate@ec94d32
      https://illumos.org/issues/3581
    
    Notes for Linux port:
    
    Earlier commit 08d08eb reduced contention on this taskq lock by simply
    reducing the number of z_fr_iss threads from 100 to one-per-CPU.  We
    also optimized the taskq implementation in zfsonlinux/spl@3c6ed54.
    These changes significantly improved unlink performance to acceptable
    levels.
    
    This patch further reduces time spent spinning on this lock by
    randomly dispatching the work items over multiple independent task
    queues.  The Illumos ZFS developers stated that this lock contention
    only arose after "3329 spa_sync() spends 10-20% of its time in
    spa_free_sync_cb()" was landed.  It's not clear if 3329 affects the
    Linux port or not.  I didn't see spa_free_sync_cb() show up in
    oprofile sessions while unlinking large files, but I may just not
    have used the right test case.
    
    I tested unlinking a 1 TB of data with and without the patch and
    didn't observe a meaningful difference in elapsed time.  However,
    oprofile showed that the percent time spent in taskq_thread() was
    reduced from about 16% to about 5%.  Aside from a possible slight
    performance benefit this may be worth landing if only for the sake of
    maintaining consistency with upstream.
    
    Ported-by: Ned Bass <bass6@llnl.gov>
    Closes #1327

[33mcommit 55d85d5a8c45c4559a4a0e675c37b0c3afb19c2f[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Mon May 6 10:14:52 2013 -0700

    Illumos #3329, #3330, #3331, #3335
    
    3329 spa_sync() spends 10-20% of its time in spa_free_sync_cb()
    3330 space_seg_t should have its own kmem_cache
    3331 deferred frees should happen after sync_pass 1
    3335 make SYNC_PASS_* constants tunable
    
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Matt Ahrens <matthew.ahrens@delphix.com>
    Reviewed by: Christopher Siden <chris.siden@delphix.com>
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Reviewed by: Richard Lowe <richlowe@richlowe.net>
    Reviewed by: Dan McDonald <danmcd@nexenta.com>
    Approved by: Eric Schrock <eric.schrock@delphix.com>
    
    References:
      illumos/illumos-gate@01f55e48fb4d524eaf70687728aa51b7762e2e97
      https://www.illumos.org/issues/3329
      https://www.illumos.org/issues/3330
      https://www.illumos.org/issues/3331
      https://www.illumos.org/issues/3335
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 5853fe790d1df58c5dd85ea52c5e165b6d43013c[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Thu May 2 16:36:32 2013 -0700

    Illumos #3306, #3321
    
    3306 zdb should be able to issue reads in parallel
    3321 'zpool reopen' command should be documented in the man
         page and help
    
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Matt Ahrens <matthew.ahrens@delphix.com>
    Reviewed by: Christopher Siden <chris.siden@delphix.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
      illumos/illumos-gate@31d7e8fa33fae995f558673adb22641b5aa8b6e1
      https://www.illumos.org/issues/3306
      https://www.illumos.org/issues/3321
    
    The vdev_file.c implementation in this patch diverges significantly
    from the upstream version.  For consistenty with the vdev_disk.c
    code the upstream version leverages the Illumos bio interfaces.
    This makes sense for Illumos but not for ZoL for two reasons.
    
    1) The vdev_disk.c code in ZoL has been rewritten to use the
       Linux block device interfaces which differ significantly
       from those in Illumos.  Therefore, updating the vdev_file.c
       to use the Illumos interfaces doesn't get you consistency
       with vdev_disk.c.
    
    2) Using the upstream patch as is would requiring implementing
       compatibility code for those Solaris block device interfaces
       in user and kernel space.  That additional complexity could
       lead to confusion and doesn't buy us anything.
    
    For these reasons I've opted to simply move the existing vn_rdwr()
    as is in to the taskq function.  This has the advantage of being
    low risk and easy to understand.  Moving the vn_rdwr() function
    in to its own taskq thread also neatly avoids the possibility of
    a stack overflow.
    
    Finally, because of the additional work which is being handled by
    the free taskq the number of threads has been increased.  The
    thread count under Illumos defaults to 100 but was decreased to 2
    in commit 08d08e due to contention.  We increase it to 8 until
    the contention can be address by porting Illumos #3581.
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1354

[33mcommit 5165473737e488447edfe25209c68704e08b3a2d[m
Author: Carlos Alberto Lopez Perez <clopez@igalia.com>
Date:   Sat Apr 27 20:18:11 2013 +0200

    Ensure --with-spl-timeout waits for spl_config.h and symvers
    
    The previous code was only waiting for the symver file. But the
    postinst target of the DKMS script for SPL will not only create
    the symvers file, but also the header spl_config.h.
    
    If we are waiting in the configure script of ZFS for the SPL
    symvers file, then we also need to wait for spl_config.h.
    Otherwise the configure script will abort because the spl_config.h
    is not yet available.
    
    On top of that, the function ZFS_AC_SPL_MODULE_SYMVERS is moved
    to the end of the function ZFS_AC_SPL to allow both checks share
    the with-spl-timeout parameter.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1431

[33mcommit a4914d38a794915c774670307d6f61480eba2046[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Apr 29 14:07:46 2013 -0700

    Silence 'old_umask' uninit variable warning
    
    Recent changes have caused older versions of gcc to mistakenly
    flag 'old_umask' in vn_open() as an unitialized variable.  To
    silence the warning initialize it.
    
      kernel.c: In function 'vn_open':
      kernel.c:525:6: error: 'old_umask' may be used uninitialized
      in this function
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 937210a54b9c2d3dddc7221e31d5695e9720a055[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed May 1 09:38:49 2013 -0700

    Fix zinject list handlers
    
    The zfs_fd must be opened before calling print_all_handlers() or
    the ioctl() cannot be used to the zfs control device.  This brings
    the zinject code back in sync with the Illumos implementation.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit cc92e9d0c3e67a7e66c844466f85696a087bf60a[m
Author: George.Wilson <george.wilson@delphix.com>
Date:   Mon Apr 29 15:49:23 2013 -0700

    3246 ZFS I/O deadman thread
    
    Reviewed by: Matt Ahrens <matthew.ahrens@delphix.com>
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Reviewed by: Christopher Siden <chris.siden@delphix.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    NOTES: This patch has been reworked from the original in the
    following ways to accomidate Linux ZFS implementation
    
    *) Usage of the cyclic interface was replaced by the delayed taskq
       interface.  This avoids the need to implement new compatibility
       code and allows us to rely on the existing taskq implementation.
    
    *) An extern for zfs_txg_synctime_ms was added to sys/dsl_pool.h
       because declaring externs in source files as was done in the
       original patch is just plain wrong.
    
    *) Instead of panicing the system when the deadman triggers a
       zevent describing the blocked vdev and the first pending I/O
       is posted.  If the panic behavior is desired Linux provides
       other generic methods to panic the system when threads are
       observed to hang.
    
    *) For reference, to delay zios by 30 seconds for testing you can
       use zinject as follows: 'zinject -d <vdev> -D30 <pool>'
    
    References:
      illumos/illumos-gate@283b84606b6fc326692c03273de1774e8c122f9a
      https://www.illumos.org/issues/3246
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1396

[33mcommit 57f5a2008e2e6acf58934cf43c5fdca0faffa73e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Apr 25 16:29:22 2013 -0700

    Fix txg_quiesce thread deadlock
    
    A deadlock was accidentally introduced by commit e95853a which
    can occur when the system is under memory pressure.  What happens
    is that while the txg_quiesce thread is holding the tx->tx_cpu
    locks it enters memory reclaim.  In the context of this memory
    reclaim it then issues synchronous I/O to a ZVOL swap device.
    Because the txg_quiesce thread is holding the tx->tx_cpu locks
    a new txg cannot be opened to handle the I/O.  Deadlock.
    
    The fix is straight forward.  Move the memory allocation outside
    the critical region where the tx->tx_cpu locks are held.  And for
    good measure change the offending allocation to KM_PUSHPAGE to
    ensure it never attempts to issue I/O during reclaim.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1274

[33mcommit 0c15bf16f1050e710cad1783d15eea63cca792c0[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Sat Apr 13 21:38:37 2013 +0200

    Ignore *.{deb,rpm,tar.gz} files in the top directory.
    
    These are build products and should be ignored.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Issue #1402

[33mcommit e013670550641610dc09b6b58f0ea9fd00169d07[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Apr 23 16:40:47 2013 -0700

    Set RPM_DEFINE_COMMON options
    
    When the kmod packaging was introduced the ability to pass the
    --enable-debug and --enable-dmu-tx options from configure all
    the way through to `make rpm|deb` was accidenally lost.  Update
    ZFS_AC_RPM to explicitlu set RPM_DEFINE_COMMON with these
    rpmbuild defines.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1402

[33mcommit 1a33036df9de8f95aea38ec0d9e483106d1abaa4[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Sat Apr 13 18:59:19 2013 +0200

    Add --bump=0 to alien
    
    Preserve the release field when creating Debian packages.  The
    --keep-version option was not used because it results in a failure
    when the git '<commit>_<hash>' syntax is used for the release.
    The '_' is a valid character for RPM packages but not for DEBs.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Turbo Fredriksson <turbo@bayour.com>
    Issue #1402
    Issue #928

[33mcommit d012ba3832e11511451ff71c1c45f4f64c3b759c[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Sat Apr 20 07:24:15 2013 +0200

    Support .nogitrelease file
    
    When building a custom release in a git tree provide the ability
    to prevent the release field from being overwritten by the
    `git describe` output.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1402

[33mcommit 382c4e5184c9caa25e85f277564657243db2a150[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Sun Apr 14 17:41:51 2013 +0200

    Possibility to disable (not start) zfs at bootup.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1402

[33mcommit c4933aade7ecf8a933c4404ea3f99cac5820bd57[m
Author: Etienne Dechamps <etienne@edechamps.fr>
Date:   Sun Apr 21 20:03:12 2013 +0100

    Fix various generic kmod RPM spec issues.
    
    There are a number of issues with the generic kmod RPM spec in its
    current state:
     - The "%{__id_u}" macro seems to not be available on some systems (e.g.
       Debian squeeze). It appears it has been deprecated. Use "${__id} -u"
       instead.
     - The way the "--with-linux=" configure option is generated in the
       non-RHEL/Fedora case is completely wrong with various newline and
       escaping issues (also, $kernel_version is not available in the
       generator context).
    
    The second issue made the generator shell snippet (almost) silently
    fail, which under specific circumstances can result in broken builds
    against the wrong kernel sources.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1416

[33mcommit f706421173c571371afff5e2a2ee0784c5e3f95d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Apr 17 13:07:36 2013 -0700

    Correctly return ERANGE in getxattr(2)
    
    According to the getxattr(2) man page the ERANGE errno should be
    returned when the size of the value buffer is to small to hold the
    result.  Prior to this patch the implementation would just truncate
    the value to size bytes.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1408

[33mcommit 254255f735c4187f00df6d230b80cae508308f31[m
Author: Chris Dunlop <chris@onthe.net.au>
Date:   Thu Apr 18 11:49:25 2013 +1000

    Trivial spelling fix
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1411

[33mcommit 8f1e11b6105bf46a4258958eb3dcae2ab21ed8b2[m
Author: Caleb James DeLisle <calebdelisle@lavabit.com>
Date:   Tue Apr 16 05:23:39 2013 -0400

    Remove .readdir from zpl_file_operations table
    
    The zpl_readdir() function shouldn't be registered as part of
    the zpl_file_operations table, it must only be part of the
    zpl_dir_file_operations table.  By removing this callback
    the VFS will now correctly return ENOTDIR when calling
    getdents() on a file.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1404

[33mcommit b28e57cb82c5d5a992b90c56f67dd7dbf9b6f296[m
Author: Martin Matuska <martin@matuska.org>
Date:   Fri Apr 12 10:26:03 2013 -0700

    Allow setting a lower ashift with -o ashift
    
    Previous patches have allowed you to set an increased ashift to
    avoid doing 512b IO with 4k sector devices.  However, it was not
    possible to set the ashift lower than the reported physical sector
    size even when a smaller logical size was supported.  In practice,
    there are several cases where settong a lower ashift is useful:
    
    * Most modern drives now correctly report their physical sector
      size as 4k.  This causes zfs to correctly default to using a 4k
      sector size (ashift=12).  However, for some usage models this
      new default ashift value causes an unacceptable increase in
      space usage.  Filesystems with many small files may see the
      total available space reduced to 30-40% which is unacceptable.
    
    * When replacing a drive in an existing pool which was created
      with ashift=9 a modern 4k sector drive cannot be used.  The
      'zpool replace' command will issue an error that the new drive
      has an 'incompatible sector alignment'.  However, by allowing
      the ashift to be manual specified as smaller, non-optimal,
      value the device may still be safely used.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1381
    Closes #1328
    Issue #967
    Issue #548

[33mcommit 295304bed6fa6744b8d011e36b9c2180311cedb2[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Wed Apr 10 16:58:22 2013 -0700

    Illumos #3422, #3425
    
    3422 zpool create/syseventd race yield non-importable pool
    3425 first write to a new zvol can fail with EFBIG
    
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
      illumos/illumos-gate@bda8819455defbccd06981d9a13b240b682a3d50
      https://www.illumos.org/issues/3422
      https://www.illumos.org/issues/3425
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1390

[33mcommit 9d248f73a4941a5c5fdf5d701bee159aa6bdfa24[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Apr 2 13:35:32 2013 -0700

    Add additional dependencies for DKMS package
    
    For the DKMS package to successfully build the kernel-devel
    headers must be included along gcc, make, and perl.  The ZFS
    code never directly invokes perl but the kernel build system
    depends on it.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1380

[33mcommit d17eeafbf0c680c154ed83cec60112a0b28ae985[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Apr 2 13:31:42 2013 -0700

    Replace the ZFS_AC_META perl dependency with awk
    
    The only remaining perl dependency is part of the ZFS_AC_META macro.
    By eliminating this and replacing it with awk we can avoid the need
    to pull in perl to rebuild the packages.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1380

[33mcommit c8122d2504e215170b900f955f0fda19ecfe6f04[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Apr 2 14:37:47 2013 -0700

    Only require spl-devel-kmod = %{version}
    
    Commit f6fb7651a0d05b357dc179cc4853263ce15da6ed introduced the idea
    of working builds which work correctly.  However, because the zfs-kmod
    depends on a specific 'spl-devel-kmod = {version}-%{release}' package
    and the release component is unique the dependency is never satisfied.
    
    This requires line was introduced to ensure the correct version of the
    spl is always used.  In this context only the version number is required
    so the release component has been dropped to satisfy the dependency.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 5b5a65b02225e6281b42b12a4d87bb210334b714[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Apr 2 15:16:39 2013 -0700

    Automake 1.10.1 compat: AM_SILENT_RULES
    
    Part of the automated testing involves building the source on Debian Lenny
    which ships an ancient version of automake (1.10.1).  Historically, this
    has caused a non-fatal warning about AM_SILENT_RULES not being defined.
    But when the autogen.sh script was updated to use autoreconf the warning
    became fatal.
    
      configure.ac:31: warning: macro `AM_SILENT_RULES' not found in library
      autoreconf: running: /usr/bin/autoconf --force
      configure.ac:34: error: possibly undefined macro: AM_SILENT_RULES
            If this token and others are legitimate, please use m4_pattern_allow.
    
    To resolve this build issue the call to AM_SILENT_RULES has been wrapped
    by m4_ifdef().  This prevents the macro from being expanded on platforms
    where it's undefined.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 8c3926294579f64f6ebe09b0ddaed5dd9cbd48ef[m
Author: Jan Engelhardt <jengelh@inai.de>
Date:   Sat Mar 30 03:33:09 2013 +0100

    build: do not call boilerplate ourself
    
    Rationale see section 3.5 "Using `autoreconf' to Update `configure'
    Scripts" of the autoconf manual.
    
    http://www.gnu.org/software/autoconf/manual/autoconf-2.67/html_node/autoreconf-Invocation.html
    
    Signed-off-by: Jan Engelhardt <jengelh@inai.de>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit ea0fcfc8752f96ad518793f946b84394a679640c[m
Author: Jan Engelhardt <jengelh@inai.de>
Date:   Sat Mar 30 03:31:52 2013 +0100

    gitignore: anchor entries at their respective directory
    
    .ko is specific to module, .m4 to config, etc.
    
    Signed-off-by: Jan Engelhardt <jengelh@inai.de>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit ecf76e36767cbd5f320d49c9902def14ff89c4a0[m
Author: Jan Engelhardt <jengelh@inai.de>
Date:   Sat Mar 30 03:30:25 2013 +0100

    build: use CPPFLAGS
    
    -D and -I are preprocessor flags, so should preferably be in the
    appropriate variable.
    
    Signed-off-by: Jan Engelhardt <jengelh@inai.de>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 4e95cc99b029f519ec1d3fd86df2910e7cb0d156[m
Author: Jan Engelhardt <jengelh@inai.de>
Date:   Sat Mar 30 03:27:50 2013 +0100

    build: resolve orthographic and other grammatical errors
    
    Signed-off-by: Jan Engelhardt <jengelh@inai.de>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 4a5b1218088842cd5004d167da25ea96eb9a1a11[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Tue Apr 2 10:36:25 2013 -0700

    Man page updates for SMB
    
    * Update manpage with more information about the ACL, guest access
      and that samba needs to be able to authenticate user(s).
    * Add information that 'net' can be used to modify the share after
      ZFS sharing and that it will be undone with a 'zfs unshare'.
    * Give an example on how to mount a SMB filesystem shared via ZFS.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1181
    Issue #1170

[33mcommit be8bc8c0d3ff16888f046e8523051b514ad285e0[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Tue Apr 2 09:27:52 2013 -0700

    Add smb_available() sanity checks
    
    Do basic sanity checks in smb_available() to verify that the 'net'
    command and the usershare directory exists.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1124

[33mcommit b5d8c5fb08d596d598d86afce479be7e8b9bc700[m
Author: Nick Garvey <garvey.nick@gmail.com>
Date:   Tue Mar 26 17:52:22 2013 -0300

    Correct typos in renaming example
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1373

[33mcommit 36c0b62799554d0a41fc0a65602de3b50f9f6409[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Mar 25 13:46:37 2013 -0700

    Tag zfs-0.6.1
    
    META file and release log updated.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit b7f59425f93c8fd7392da903f4a292fff1154dad[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 26 08:40:44 2013 -0700

    Include init scripts in packages
    
    The distribution specific init scripts where excluded from the
    packaging when it was reworked.  The intention is to replace
    them with systemd equivilants.  However, that work has not yet
    been done and the init scripts are still useful so they have
    been added back in to the packaging.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 0df23ca9a18bcc3b76319a3c0b93359a5468d016[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Mar 25 11:28:18 2013 -0700

    Provide ${kmodname}-devel-kmod for yum-builddep
    
    In order to ensure that yum-builddep pulls in all the build
    requirements a generic ${kmodname}-devel-kmod provides line is
    added.  This allows a version of the development headers to be
    included without requiring knowledge of the kernel version.
    
    This is important because unlike rpmbuild which does correctly
    expand the source rpm spec file, yum-builddep does not.  Without
    this generic provides line mock which relies on yum-builddep is
    unable to automatically satisfy the dependency.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit f6fb7651a0d05b357dc179cc4853263ce15da6ed[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Mar 22 14:46:11 2013 -0700

    Use 'git describe' for working builds
    
    When building from an arbitrary commit in the git tree it's useful
    for the resulting packages to be uniquely identifiable.  Therefore,
    the build system has been updated to detect if your compiling in
    git tree.
    
    If you are building in a git tree, and there are commits after the
    last annotated tag.  Then the <id>-<hash> component of 'git describe'
    will be used to overwrite the 'Release:' field in the META file.
    
    The only tricky part is that to ensure the 'make dist' tarball is
    built using the correct release.  A dist-hook was added to the top
    level make file to rewrite the META file using the correct release.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 09fb1ec48a38ad3ade722a1ad39f9ac73ea2b308[m
Author: Darik Horn <dajhorn@vanadac.com>
Date:   Wed Mar 20 22:52:53 2013 -0500

    Fix minor typos and update marketing copy.
    
    Correct spelling mistakes in the AUTHORS and DISCLAIMER files, and
    update the README.markdown file to credit Illumos and mention that
    the ZPL is finished.
    
    The README.markdown file is also the first impression for a handful
    of new users that discover ZoL through a web search because it
    doubles as the splash page for the Github repository. The build blurbs
    are therefore removed because these people should be encouraged to
    visit the regular home page before installing the product.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1366

[33mcommit 352b557bd61e07f173c36d481df3408645e19599[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Mar 20 15:15:05 2013 -0700

    Use requested kernel for dkms builds
    
    The --with-linux and --with-linux-obj options must be specified
    as part of the dkms build otherwise the package will be built
    against the running kernel.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit ae0f0ba950bed72be0635c29d3dfecb5a811f121[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Mar 20 11:01:48 2013 -0700

    Use BUILD_DEPENDS option for dkms builds
    
    Support was added to dkms so build dependencies can be specified.
    This allows us to ensure that the spl package will always be built
    before the zfs package.  Those patches have not yet been merged
    upstream but they are available in the zfsonlinux/dkms repository.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 7865606a6a02daf8b4b20fc95dc02eec100a0523[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Mar 20 11:28:00 2013 -0700

    Remove zfs-dkms conflict with zfs-kmod
    
    Because the zfs-dkms package also provides zfs-kmod for the
    zfs user package yum flags this as a conflict.  To avoid the
    problem remove the Conflicts tag from zfs-dkms and just rely
    on the one in zfs-kmod.
    
      zfs-dkms-0.6.0-rc14.fc18.noarch has installed conflicts
        zfs-kmod: zfs-dkms-0.6.0-rc14.fc18.noarch
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit b9676003665ceee5a859253dde3305eecc215016[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Mar 20 11:25:50 2013 -0700

    Refresh dracut module setup
    
    60-zpool.rules was retired some time ago in favor of 69-vdev.rules.
    Additionally, there is no guarentee a zpool.cache file exists so
    only install it conditionally upon its existance.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 68a2e016c8314caaf149c78f76dfb2ae139ab377[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 19 19:25:01 2013 -0700

    Add missing dependencies
    
    The spl, zfs-test, and zfs-dracut packages should be pulled in
    by the core zfs package.  This allows all the required zfs packages
    to be installed from a yum repository by running:
    
      yum install zfs
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit c0c3d83ccb3ff89c6183a3f160c05adad5805148[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 19 15:55:44 2013 -0700

    Add spl-dkms dependency to zfs-dkms
    
    Adding the 'spl-dkms = VERSION' dependency to the zfs-dkms
    package ensures the spl will be installed before zfs.  This
    cleanly handles the initial 'yum localinstall' case.
    
    However, this does not address the dkms rebuilds caused by
    a new kernel being installed.  For that we still rely on the
    clunky  --with-spl-timeout=<timeout> configure option which
    allows the zfs compilation to be briefly delayed while the
    spl components are built.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit ac826e16682114ee7a41b7a4ca3d8fdde59d29dc[m
Author: Darik Horn <dajhorn@vanadac.com>
Date:   Sat Mar 16 15:54:32 2013 -0500

    Create fsck.zfs and zhack man pages.
    
    The automake templates have been updated to install them,
    and the existing packaging will automatically include them.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Supplements #518

[33mcommit 5dc6af0eec29b119b731c793037fd77214fc9438[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 19 12:05:08 2013 -0700

    Add zio_ddt_free()+ddt_phys_decref() error handling
    
    The assumption in zio_ddt_free() is that ddt_phys_select() must
    always find a match.  However, if that fails due to a damaged
    DDT or some other reason the code will NULL dereference in
    ddt_phys_decref().
    
    While this should never happen it has been observed on various
    platforms.  The result is that unless your willing to patch the
    ZFS code the pool is inaccessible.  Therefore, we're choosing
    to more gracefully handle this case rather than leave it fatal.
    
    http://mail.opensolaris.org/pipermail/zfs-discuss/2012-February/050972.html
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1308

[33mcommit 30b92c1de68ced4bee235f879791ee316314a197[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Mar 18 13:03:09 2013 -0700

    Add metaslab_debug option
    
    Enabling metaslab debugging will prevent space maps from being
    automatically unloaded.  This can significantly increase the
    memory footprint but being able to dynamically control this is
    helpful for debugging and certain performance testing.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit f3757573a677e8662e268f0bb8e5ffe750013088[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sun Feb 17 12:10:17 2013 -0800

    Refresh RPM packaging
    
    Refresh the existing RPM packaging to conform to the 'Fedora
    Packaging Guidelines'.  This includes adopting the kmods2
    packaging standard which is used fod kmods distributed by
    rpmfusion for Fedora/RHEL.
    
      http://fedoraproject.org/wiki/Packaging:Guidelines
      http://rpmfusion.org/Packaging/KernelModules/Kmods2
    
    While the spec files have been entirely rewritten from a
    user perspective the only major changes are:
    
    * The Fedora packages now have a build dependency on the
      rpmfusion repositories.  The generic kmod packages also
      have a new dependency on kmodtool-1.22 but it is bundled
      with the source rpm so no additional packages are needed.
    
    * The kernel binary module packages have been renamed from
      zfs-modules-* to kmod-zfs-* as specificed by kmods2.
    
    * The is now a common kmod-zfs-devel-* package in addition
      to the per-kernel devel packages.  The common package
      contains the development headers while the per-kernel
      package contains kernel specific build products.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1341

[33mcommit 9b2af9a097c119b818bd584eb89ca51ba475c7f2[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 22 15:50:00 2013 -0800

    Configure --with-spl{-obj} auto-detect cleanup
    
    Because the install location for the spl/zfs-devel headers was
    changed we need to refresh the auto-detect code.  Note that
    for packaging which already explicitly calls --with-spl{-obj}
    nothing has changed.
    
    The updated code is now structured like that in ZFS_AC_KERNEL
    and should be cleaner and easier to maintain.  In addition,
    it's stricter about detecting a valid source and object
    directory.  It requires:
    
    * The source directory contains the file 'spl.release'
    * The object directory contains the file 'spl_config.h'
    * The following paths will be checked.  Notice the /var/lib/
      and /usr/src paths require that the spl and zfs version be
      matched.  This is done to prevent accidentally mixing releases.
    
            dnl # 1) /var/lib/dkms/spl/<version>/build
            dnl # 2) /usr/src/spl-<version>/<kernel-version>
            dnl # 3) /usr/src/spl-<version>
            dnl # 4) ../spl
            dnl # 5) /usr/src/kernels/<kernel-version>
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 775f2d34a3ccd5f866cfa04be76f83cb562f3881[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Feb 21 15:10:11 2013 -0800

    Change zfs-kmod-devel install path
    
    Install the common zfs kernel development headers under
    /usr/src/zfs-<version>/ rather than in a kernel specific
    directory.  The kernel specific build products such as
    zfs_config.h and Modules.symvers are left installed under
    /usr/src/zfs-<version>/<kernel>.
    
    This was done to be consistent with where dkms expects
    kernel module source to be packaged.  It also allows for
    a common zfs-kmod-devel package which includes the headers,
    and per-kernel zfs-kmod-devel-<kernel> packages.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit d69b2dee714f732300c6db12b7af48b4f86d67ee[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Mar 8 13:06:04 2013 -0800

    Remove COPYING
    
    There's no reason to keep this file around it's redundant with
    the COPYRIGHT and OPENSOLARIS.LICENSE files and causes lintian
    to emit an extra-license-file warning.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit cf2129e6dc567004fb5246ae67248de030d9520b[m
Author: Darik Horn <dajhorn@vanadac.com>
Date:   Tue Mar 12 14:40:55 2013 -0500

    Create mount.zfs, zinject, and zpios man pages.
    
    And update the automake templates to install them.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #518

[33mcommit 5cd0add2149e63cf962cc715338e41a611b8c0aa[m
Author: Michael Gebetsroither <michael@mgeb.org>
Date:   Tue Mar 12 15:26:50 2013 -0500

    Import ztest.1 man page.
    
    Create a nroff man page for ZoL from:
    
      http://grml.org/online-docs/ztest.1.html
    
    Which itself was derived from:
    
      http://opensolaris.org/os/community/zfs/ztest/
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #518

[33mcommit 1c24b699b0c7590e135f4701b50a4c933ebe0499[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Mon Mar 4 15:52:11 2013 -0500

    Linux 3.9 compat: Undefine GCC_VERSION
    
    The mainline kernel started defining GCC_VERSION with commit
    torvalds/linux@3f3f8d2f48acfd8ed3b8e6b7377935da57b27b16.
    Unfortunately, LZ4 also defines this macro, but the two
    defintions are incompatible. We undefine GCC_VERSION in lz4.c
    to handle this.
    
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1339

[33mcommit 7c72f8e391e3fc54a9c5be54083b541cb2951780[m
Merge: 0b4d1b5 2016ff9
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Mar 6 15:47:38 2013 -0800

    Merge branch 'build-system'

[33mcommit 2016ff96d1739b5ced1d37e7266720e7531b8212[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 22 11:28:28 2013 -0800

    Fix zdb.8 macro warning
    
    Detected by rpmlint the 'rpool/export/home' section was being
    interpretted by troff as an undefined macro.  This resulted
    in the 'rpool/export/home' output being omitted from 'man zdb'.
    
    This was caused by starting the line with a ' character.  By
    moving the 'in' down to the next line we're able to fix it.
    
      zfs.x86_64: W: manual-page-warning /usr/share/man/man8/zdb.8.gz
      450: warning: macro `rpool/export/home'' not defined
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 92db59ca3b42eb0aa3fbdcac689cc49878438177[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Sun Feb 17 11:31:20 2013 -0800

    Refresh links to web site
    
    A few files still refer to @behlendorf's private fork on
    github.  Use the primary web site URL instead.  Two typos
    are also corrected.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit e07b579b1b487eec772ec9394eefaad264c779fb[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sun Feb 17 11:16:22 2013 -0800

    Retire ZFS.RELEASE file
    
    The ZFS.RELEASE file was originally added to document which
    version of OpenSolaris the ZoL code was based on.  However,
    that's no longer particularly important or useful.  We'll
    likely never see a new onnv_* drop from Solaris, and even
    if we do the ZoL changes are now extensive enough they
    could not be easily applied.  We now treat Illumos as the
    official upstream and cherry pick the patches we need.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 0da31cd6ca0dedbf0ceb7118d2cede2e97e73c14[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sun Feb 17 11:11:41 2013 -0800

    Remove ARCH packaging
    
    The kernel modules are now available in the Arch User Repository
    (AUR) via zfs.  Since their packaging is maintained and superior
    to ours it is being removed from the tree.
    
      https://wiki.archlinux.org/index.php/ZFS
    
    Now that various distributions are picking up the packages we
    should eventually be able to remove most of this infrastructure.
    Packaging belongs with the distributions not upstream.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit ffb21118add1a2e6cec2ce401c333b4a4e76d9a3[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 22 10:16:16 2013 -0800

    Add --with-dracutdir configure option
    
    The standard dracut directory has moved from /usr/share/dracut to
    /usr/lib/dracut.  To ensure the dracut modules get installed in
    the correct location provide a --with-dracutdir configure option
    to set the path.
    
    The default install location has been updated to /usr/lib/dracut
    which is used by more current versions of Fedora.  However, this
    default is overriden by the RPM packaging for consistency.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit d09f98a9a688905a06a4bd2a92752bebe0f28e63[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sun Feb 17 11:05:11 2013 -0800

    Add KMODDIR to install target
    
    Provide a mechanism to control the directory name the modules
    are installed in.  The kernel privdes INSTALL_MOD_DIR for
    this but it was hardcoded to be 'addon/zfs'.
    
    Add a KMODDIR variable which can be passed to 'make install'
    to override the default directory name.  While we're here
    change the default from 'addon/zfs' to 'extra' which is the
    kernel.org default.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit fd2b4aa71a53f3565522675de97b872c104383f4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 8 13:51:27 2013 -0800

    Fix zfs_config.h install permissions
    
    The default permissions used by install are 755.  Since this
    file isn't executable 644 is more appropriate.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 48c028f5a5558894f8d94652050bc8e644760b9a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 8 10:01:41 2013 -0800

    Replace libexecdir with datadir
    
    According to the FHS.  Testing scripts and examples which are all
    architecture independent should be installed in a subdirectory
    under /usr/share.
    
      http://www.pathname.com/fhs/2.2/fhs-4.11.html
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 0b4d1b5853791e1e447d74f0b229800d65b53071[m
Author: Eric Dillmann <eric@jave.fr>
Date:   Thu Feb 14 00:11:59 2013 +0100

    Add snapdev=[hidden|visible] dataset property
    
    The new snapdev dataset property may be set to control the
    visibility of zvol snapshot devices.  By default this value
    is set to 'hidden' which will prevent zvol snapshots from
    appearing under /dev/zvol/ and /dev/<dataset>/.  When set to
    'visible' all zvol snapshots for the dataset will be visible.
    
    This functionality was largely added because when automatic
    snapshoting is enabled large numbers of read-only zvol snapshots
    will be created.  When creating these devices the kernel will
    attempt to read their partition tables, and blkid will attempt
    to identify any filesystems on those partitions.  This leads
    to a variety of issues:
    
    1) The zvol partition tables will be read in the context of
       the `modprobe zfs` for automatically imported pools.  This
       is undesirable and should be done asynchronously, but for
       now reducing the number of visible devices helps.
    
    2) Udev expects to be able to complete its work for a new
       block devices fairly quickly.  When many zvol devices are
       added at the same time this is no longer be true.  It can
       lead to udev timeouts and missing /dev/zvol links.
    
    3) Simply having lots of devices in /dev/ can be aukward from
       a management standpoint.  Hidding the devices your unlikely
       to ever use helps with this.  Any snapshot device which is
       needed can be made visible by changing the snapdev property.
    
    NOTE: This patch changes the default behavior for zvols which
          was effectively 'snapdev=visible'.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1235
    Closes #945
    Issue #956
    Issue #756

[33mcommit a4430fce691d492aec382de0dfa937c05ee16500[m
Author: George Wilson <George.Wilson@Sun.COM>
Date:   Sun Mar 3 00:57:39 2013 -0500

    Merge zvol.c changes from PSARC 2010/306 Read-only ZFS pools
    
    The changes to zvol.c were never merged from the last onnv_147
    bulk update.  This was because zvol.c was largely rewritten
    for Linux making it fairly easy to miss these sorts of changes.
    
    This causes a regression when importing a zpool with zvols
    read-only.  This does not impact pool which only contain
    filesystem datasets.
    
    References:
      illumos/illumos-gate@f9af39b
    
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1332
    Closes #1333

[33mcommit b01615d5ac86913da1e092d0378bfb8f0e72af30[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Thu Feb 14 23:37:43 2013 -0500

    Constify structures containing function pointers
    
    The PaX team modified the kernel's modpost to report writeable function
    pointers as section mismatches because they are potential exploit
    targets. We could ignore the warnings, but their presence can obscure
    actual issues. Proper const correctness can also catch programming
    mistakes.
    
    Building the kernel modules against a PaX/GrSecurity patched Linux 3.4.2
    kernel reports 133 section mismatches prior to this patch. This patch
    eliminates 130 of them. The quantity of writeable function pointers
    eliminated by constifying each structure is as follows:
    
    vdev_opts_t             52
    zil_replay_func_t       24
    zio_compress_info_t     24
    zio_checksum_info_t     9
    space_map_ops_t         7
    arc_byteswap_func_t     5
    
    The remaining 3 writeable function pointers cannot be addressed by this
    patch. 2 of them are in zpl_fs_type. The kernel's sget function requires
    that this be non-const. The final writeable function pointer is created
    by SPL_SHRINKER_DECLARE. The kernel's set_shrinker() and
    remove_shrinker() functions also require that this be non-const.
    
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1300

[33mcommit c38367c73f592ca9729ba0d5e70b5e3bc67e0745[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Thu Feb 14 18:54:04 2013 -0500

    Eliminate runtime function pointer mods in autotools checks
    
    PaX/GrSecurity patched kernels implement a dialect of C that relies on a
    GCC plugin for enforcement. A basic idea in this dialect is that
    function pointers in structures should not change during runtime.
    This causes code that modifies function pointers at runtime to fail to
    compile in many instances. The autotools checks rely on whether or
    not small test cases compile against a given kernel. Some
    autotools checks assume some default case if other cases fail. When one
    of these autotools checks tests a PaX/GrSecurity patched kernel by
    modifying a function pointer at runtime, the default case will be used.
    
    Early detection of such situations is possible by relying on compiler
    warnings, which are compiler errors when --enable-debug is used.
    Unfortunately, very few people build ZFS with --enable-debug. The more
    common situation is that these issues manifest themselves as runtime
    failures in the form of NULL pointer exceptions.
    
    Previous patches that addressed such issues with PaX/GrSecurity
    compatibility largely relied on rewriting autotools checks to avoid
    runtime function pointer modification or the addition of PaX/GrSecurity
    specific checks. This patch takes the previous work to its logical
    conclusion by eliminating the use of runtime function pointer
    modification. This permits the removal of PaX-specific autotools checks
    in favor of ones that work across all supported kernels.
    
    This should resolve issues that were reported to occur with
    PaX/GrSecurity-patched Linux 3.7.5 kernels on Gentoo Linux.
    
    https://bugs.gentoo.org/show_bug.cgi?id=457176
    
    We should be able to prevent future regressions in PaX/GrSecurity
    compatibility by ensuring that all changes to ZFSOnLinux avoid runtime
    function pointer modification. At the same time, this does not solve the
    issue of silent failures triggering default cases in the autotools
    check, which is what permitted these regressions to become runtime
    failures in the first place. This will need to be addressed in a future
    patch.
    
    Reported-by: Marcin Mirosław <bug@mejor.pl>
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1300

[33mcommit 8128bd89fb487d91a3335605b009ac2b7d5aecd3[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Feb 26 17:02:27 2013 -0800

    Fix hot spares
    
    The issue with hot spares in ZoL is because it opens all leaf
    vdevs exclusively (O_EXCL).  On Linux, exclusive opens cause
    subsequent exclusive opens to fail with EBUSY.
    
    This could be resolved by not opening any of the devices
    exclusively, which is what Illumos does, but the additional
    protection offered by exclusive opens is desirable.  It cleanly
    prevents you from accidentally adding an in-use non-ZFS device
    to your pool.
    
    To fix this we very slightly relaxed the usage of O_EXCL in
    the following ways.
    
    1) Functions which open the device but only read had the
       O_EXCL flag removed and were updated to use O_RDONLY.
    
    2) A common holder was added to the vdev disk code.  This
       allow the ZFS code to internally open the device multiple
       times but non-ZFS callers may not.
    
    3) An exception was added to make_disks() for hot spare when
       creating partition tables.  For hot spare devices which
       are already opened exclusively we skip creating the partition
       table because this must already have been done when the disk
       was originally added as a hot spare.
    
    Additional minor changes include fixing check_in_use() to use
    a partition instead of a slice suffix.  And is_spare() was moved
    above make_disks() to avoid adding a forward reference.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #250

[33mcommit bd99a7584a3d93cffd6c57ef7b9c80ffd953d913[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Feb 26 11:28:14 2013 -0800

    Remove wholedisk check from vdev_disk_open()
    
    As described by the comment and enforced the by assertion the
    v->vdev_wholedisk will never be -1.  The wholedisk handling
    is performed by the user space utilities.  To prevent confusion
    this dead code is being removed.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 0d8103d9561bd2314da320dd5d43f9d5e044b64d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Feb 26 11:25:55 2013 -0800

    Leaf vdevs should not be reopened
    
    When vdev_disk.c was implemented for Linux we failed to handle the
    reopen case.  According to the vdev_reopen() comment leaf vdevs should
    not be closed or opened when v->vdev_reopening is set.  Under Linux
    we would always close and open the device.
    
    This issue was only noticed when a 'zpool scrub' command was run while
    the leaf vdev device names in /dev/disk/by-vdev were missing.  The
    scrub command calls vdev_reopen() which caused the vdevs to be closed
    but they couldn't be reopened due to the missing links.  The result
    was that all the vdevs were marked unavailable and the pool was
    halted due to failmode=wait.
    
    This patch adds the missing functionality in a similiar fashion to
    to the Illumos code.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit c5b247f3354d5c9e24577af997c84d90625620a6[m
Author: Tim Connors <tconnors@rather.puzzling.org>
Date:   Tue Feb 26 08:00:45 2013 +1100

    -x shouldn't warn about old on-disk format or unavailable features
    
    `zpool status -x` should only flag errors or where the pool is
    unavailable.  If it imported fine but isn't using the latest features
    available in the code, that's not an error.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1319

[33mcommit d9b0ebbe824469d178a05b0fb9004e4afce86009[m
Author: Etienne Dechamps <etienne@edechamps.fr>
Date:   Sun Feb 24 11:22:07 2013 +0000

    Remove the bio_empty_barrier() check.
    
    To determine whether the kernel is capable of handling empty barrier
    BIOs, we check for the presence of the bio_empty_barrier() macro,
    which was introduced in 2.6.24. If this macro is defined, then we can
    flush disk vdevs; if it isn't, then flushing is disabled.
    
    Unfortunately, the bio_empty_barrier() macro was removed in 2.6.37,
    even though the kernel is still capable of handling empty barrier BIOs.
    
    As a result, flushing is effectively disabled on kernels >= 2.6.37,
    meaning that starting from this kernel version, zfs doesn't use
    barriers to guarantee on-disk data consistency. This is quite bad and
    can lead to potential data corruption on power failures.
    
    This patch fixes the issue by removing the configure check for
    bio_empty_barrier(), as we don't support kernels <= 2.6.24 anymore.
    
    Thanks to Richard Kojedzinszky for catching this nasty bug.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1318

[33mcommit d75af3c0ebb4e31ece087aeecfeff282cb6f1361[m
Author: Etienne Dechamps <etienne@edechamps.fr>
Date:   Sun Feb 24 12:42:28 2013 +0000

    Use -Werror for all kernel configure tests.
    
    As a matter of fact, we're already using -Werror for most tests because
    of a bug in kernel-bio-empty-barrier.m4 which sets -Werror without
    reverting it afterwards. This meant that all tests which ran after this
    one was using -Werror.
    
    This patch simply makes it clear that we're using -Werror and makes
    the code more readable and more predictable.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1317

[33mcommit 546c978bbd3f132a88609cab15ec0e954eaa62b8[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Feb 21 12:14:44 2013 -0800

    Enable zfs_arc_memory_throttle_disable by default
    
    The zfs_arc_memory_throttle_disable module option was introduced
    by commit 0c5493d47059f25ce9dbf20c9fe87655f55102a1 to resolve a
    memory miscalculation which could result in the txg_sync thread
    spinning.
    
    When this was first introduced the default behavior was left
    unchanged until enough real world usage confirmed there were no
    unexpected issues.  We've now reached that point.  Linux's
    direct reclaim is working as expected so we're enabling this
    behavior by default.
    
    This helps pave the way to retire the spl_kmem_availrmem()
    functionality in the SPL layer.  This was the only caller.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #938

[33mcommit 73a046cc8c863fd2ae5bcff3461005c4ecdcaec7[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Feb 7 16:33:06 2013 -0800

    Fix broken RPATH in spec file
    
    Rather then setting _prefix=/ and having to override all the
    default install locations.  It's cleaner, and more understandable,
    to leave prefix=/usr and only override _sbindir and _libdir.  This
    fixes three issues:
    
    * The commands no longer get built with an incorrect rpath for
      the libraries.   This is good because fixing this sort of
      thing is required by the Fedora packaging guidelines.
    
        http://fedoraproject.org/wiki/Packaging:Guidelines#Beware_of_Rpath
    
    * The various AUTHORS, COPYRIGHT, etc files are now correctly
      installed under /usr/share/doc instead of /share/doc.
    
    * _libexecdir is now handled properly for each distribution.
      Fedora/RHEL=/usr/libexec, OpenSUSE/SLES=/usr/lib, Debian=/usr/lib/rpm
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1058

[33mcommit 8dca0a9a386a7e435889e7d621e5029a15dad612[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Sat Feb 9 19:25:55 2013 -0500

    Make spa.c assertions catch unsupported pre-feature flag pool versions
    
    A couple of assertions in spa.c were designed to prevent the use of
    invalid pool versions. They were written under the assumption
    that all valid pools are less than SPA_VERSION. Since feature flags
    jumped from 28 to 5000, any numbers in the range 28 to 5000
    non-inclusive will fail to trigger them.  We switch to the new
    SPA_VERSION_IS_SUPPORTED macro to correct this.
    
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1282

[33mcommit 9878a89d7ab05ffcdcdbf80233d02e30eea511be[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Feb 11 12:55:24 2013 -0800

    Add explicit MAXNAMELEN check
    
    It turns out that the Linux VFS doesn't strictly handle all cases
    where a component path name exceeds MAXNAMELEN.  It does however
    appear to correctly handle MAXPATHLEN for us.
    
    The right way to handle this appears to be to add an explicit
    check to the zpl_lookup() function.  Several in-tree filesystems
    handle this case the same way.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1279

[33mcommit 52768784e66a7b3ca493d907e86ee674ca50193c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Feb 7 14:15:53 2013 -0800

    Update the zfs.8 "ZFS Volumes as Swap" section
    
    As of 0.6.0-rc11 using ZFS volumes as Linux swap devices is
    supported.  Swapping to files in ZFS filesystems is not.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1189

[33mcommit ed2e157605ba0bbce954174e49c6a76682d564b9[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Wed Feb 6 10:15:13 2013 -0800

    Switch KM_SLEEP to KM_PUSHPAGE
    
    Two more locations where KM_SLEEP was used in a call which must
    use KM_PUSHPAGE were found while using the zpool upgrade command.
    See commit b8d06fc for additional details.
    
    Also make a small correction to the comment block above
    dsl_dir_open_spa().
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1268

[33mcommit 02a946ce10671478e3394180b84f3af4de48c59d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Feb 5 15:07:09 2013 -0800

    Remove unused machelf.h header
    
    The machelf.h header is never included by anything in the zfs
    build process.  It is all effectively dead code which can be
    safely removed.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1265

[33mcommit 399f60c8b47f7513d078a7c181ff132e2cafdd15[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Tue Feb 5 18:14:30 2013 -0500

    Fix function relocations in libzpool
    
    binutils 2.23.1 fails in situations that generate function relocations
    on PowerPC and possibly other architectures. This causes linking of
    libzpool to fail because it depends on libnvpair. We add a dependency on
    libnvpair to lib/libzpool/Makefile.am to correct that.
    
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1267

[33mcommit dd26aa535b395735ca61ea2a3e618aded45eb05e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Feb 4 16:35:54 2013 -0800

    Cast 'zfs bad bloc' to ULL for x86
    
    Explicitly case this value to an unsigned long long for 32-bit
    systems to inform the compiler that a long type should not be
    used.  Otherwise we get the following compiler error:
    
      dmu_send.c:376: error: integer constant is too large for
      ‘long’ type
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit a31770283a682384f477e864628d5a1a975c60ff[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Feb 4 12:35:25 2013 -0800

    Fix 1M references in zpool-features.5
    
    The zpool-features(5) man page should reference the Linux zfs(8)
    and zpool(8) man pages.  The 1M convention isn't used on Linux.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1184

[33mcommit 3795ae5ed7a82aef8a1f2b19f871503fe8cfe3d8[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Feb 4 12:08:25 2013 -0800

    Add zpool-features(5) man page
    
    The zpool-features(5) man page was accidentally omitted from the
    build target when feature flags was merged.  As a result it doesn't
    get installed as part of 'make install' so none of the packages
    include this man page.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1262

[33mcommit a997dfbaf0c7b95700dedbfe0e704c8cab9f2a34[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 1 11:26:55 2013 -0800

    ZFS 0.6.0-rc14

[33mcommit 0c5493d47059f25ce9dbf20c9fe87655f55102a1[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 1 09:33:04 2013 -0800

    Add zfs_arc_memory_throttle_disable module option
    
    The way in which virtual box ab(uses) memory can throw off the
    free memory calculation in arc_memory_throttle().  The result is
    the txg_sync thread will effectively spin waiting for memory to
    be released even though there's lots of memory on the system.
    
    To handle this case I'm adding a zfs_arc_memory_throttle_disable
    module option largely for virtual box users.  Setting this option
    disables free memory checks which allows the txg_sync thread to
    make progress.
    
    By default this option is disabled to preserve the current
    behavior.  However, because Linux supports direct memory reclaim
    it's doubtful throttling due to perceived memory pressure is ever
    a good idea.  We should enable this option by default once we've
    done enough real world testing to convince ourselve there aren't
    any unexpected side effects.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #938

[33mcommit 1f7c30df8fe2ca778a83a83ba7f98de883881d42[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 1 09:18:45 2013 -0800

    Add zfs_disable_dup_eviction module option
    
    Commit 1eb5bfa introduced a new zfs_disable_dup_eviction tunable.
    It should have been made available as a module option in the
    original patch but was overlooked.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit f52b31eaf0301feeb308fbc46f696eb44d0ae523[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jan 31 11:02:21 2013 -0800

    Honor 80 character limit in 'zpool status'
    
    This is a minor nit, but the second line of the 'action' message
    when you need to upgrade your pool to support feature flags exceeds
    the standard 80 character limit.  Fix it by moving the word
    'feature' on to the third line.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 36f86f73f68548f46eb3229c8adf583d59fa9988[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Wed Jan 30 09:48:57 2013 -0800

    Fix mismatch between SA header size and layout
    
    When a system attribute layout is created an inconsistency may occur
    between the system attribute header (sa_hdr_phys_t) size and the
    variable-sized attribute count stored in the layout.  The inconsistency
    results in the following failed assertion when SA_HDR_SIZE_MATCH_LAYOUT
    returns false:
    
    SPLError: 11315:0:(sa.c:1541:sa_find_idx_tab())
    ASSERTION((IS_SA_BONUSTYPE(bonustype) && SA_HDR_SIZE_MATCH_LAYOUT(hdr,
    tb)) || !IS_SA_BONUSTYPE(bonustype) || (IS_SA_BONUSTYPE(bonustype) &&
    hdr->sa_layout_info == 0)) failed
    
    The bug originates in this snippet from sa_find_sizes().
    
        if (is_var_sz && var_size > 1) {
                if (P2ROUNDUP(hdrsize + sizeof (uint16_t),
                    *total < full_space) {
                        hdrsize += sizeof (uint16_t);
    
    This assumes that the current variable-sized attribute will be stored in
    the current buffer and accounts for the space needed to store its size
    in the sa_hdr_phys_t. However if the next attribute spills over we need
    to store a blkptr_t at the end of the bonus buffer to point to the spill
    block. If the current attribute is in the way of the blkptr_t then it
    too will be relocated into the spill block. But since we've already
    accounted for it in the header size we get the inconsistency described
    above.
    
    To avoid this, record the index of the last variable-sized attribute
    that prompted a hdrsize increase, and reverse the increase if we later
    determine that that attribute will be relocated to the spill block.
    
    Signed-off-by: Matthew Ahrens <mahrens@delphix.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1250

[33mcommit 67629d0f082b1267fdddb23065813814ab55f57b[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Tue Jan 29 15:49:15 2013 -0800

    Fix rounding discrepancy in sa_find_sizes()
    
    A rounding discrepancy exists between how sa_build_layouts() and
    sa_find_sizes() calculate when the spill block needs to be kicked in.
    This results in a narrow size range where sa_build_layouts() believes
    there must be a spill block allocated but due to the discrepancy there
    isn't.  A panic then occurs when the hdl->sa_spill NULL pointer is
    dereferenced.
    
    The following reproducer for this bug was isolated:
    
        truncate -s 128m /tmp/tank
        zpool create tank /tmp/tank
        zfs create -o xattr=sa tank/fish
        ln -s `perl -e 'print "z" x 41'` /tank/fish/z
        setfattr -hn trusted.foo -v`perl -e 'print "z"x45'` /tank/fish/z
    
    This test results in roughly the following system attribute (SA)
    layout:
    
      176 bytes - "standard" SA's
       41 bytes - name of symbolic link target
      100 bytes - XDR encoded nvlist for xattr
      ---
      317 bytes - total
    
    Because 317 is less than DN_MAX_BONUSLEN (320), sa_find_sizes()
    decides no spill block is needed. But sa_build_layouts() rounds 41 up
    to 48 when computing the space requirements so it tries to switch to
    the spill block.
    
    Note that we were only able to reproduce this bug using a combination
    of symbolic links and the Linux-specific xattr=sa dataset property.
    So while this issue is not technically Linux-specific, it may be
    difficult or impossible to hit the narrow size range needed to
    reproduce it on other platforms.
    
    To fix the discrepancy, round the running total in sa_find_sizes() up
    to an 8-byte boundary before accounting for each SA, since this is how
    they will be stored in the bonus and (possibly) spill buffers.
    
    To make the intent of the code more clear, explicitly assert key
    assumptions about expected alignment of data and whether spill-over
    will occur.
    
    Signed-off-by: Matthew Ahrens <mahrens@delphix.com
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1240

[33mcommit 89103a264343b0fed763a4ed0cc331b7233bef0d[m
Author: Adam H. Leventhal <ahl@delphix.com>
Date:   Wed Jan 30 08:54:17 2013 -0800

    Illumos #3447 improve the comment in txg.c
    
    3447 improve the comment in txg.c
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Richard Lowe <richlowe@richlowe.net>
    Reviewed by: Garrett D'Amore <garrett@damore.org>
    Reviewed by: Richard Elling <richard.elling@dey-sys.com>
    Approved by: Dan McDonald <danmcd@nexenta.com>
    
    References:
      illumos/illumos-gate@adbbcfface63b3a71922d5a25d34a2018c0435de
      https://www.illumos.org/issues/3447
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit dbf763b39b232996f0d6bb0022e4446643c18e05[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jan 29 10:53:19 2013 -0800

    Retire zpool_id infrastructure
    
    In the interest of maintaining only one udev helper to give vdevs
    user friendly names, the zpool_id and zpool_layout infrastructure
    is being retired.  They are superseded by vdev_id which incorporates
    all the previous functionality.
    
    Documentation for the new vdev_id(8) helper and its configuration
    file, vdev_id.conf(5), can be found in their respective man pages.
    Several useful example files are installed under /etc/zfs/.
    
      /etc/zfs/vdev_id.conf.alias.example
      /etc/zfs/vdev_id.conf.multipath.example
      /etc/zfs/vdev_id.conf.sas_direct.example
      /etc/zfs/vdev_id.conf.sas_switch.example
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #981

[33mcommit 79c6e4c44538414340a43c065f850d11cb0203af[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jan 29 10:35:02 2013 -0800

    Remove NPTL_GUARD_WITHIN_STACK
    
    Commit 4b2f65b253952c5103311cc8bb4b8cdc6836fd7e increased the user
    space stack by 4x to resolve certain stack overflows.  As such it
    no longer makes sense to worry about a single extra page which
    might or might not be part of the process stack.  There is now
    ample headroom for normal usage.
    
    By eliminating this configure check we are also resolving the
    following segfault which intentionally occurs at configure time
    and may be logged in dmesg.
    
      conftest[22156]: segfault at 7fbf18a47e48 ip 00000000004007fe
      sp 00007fbf18a4be50 error 6 in conftest[400000+1000]
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 9759c60f1a1503e48dc5c45a209c3edd5758319f[m
Author: Eric Dillmann <eric@jave.fr>
Date:   Wed Jan 23 10:54:30 2013 +0100

    Illumos #3035 LZ4 compression support in ZFS and GRUB
    
    3035 LZ4 compression support in ZFS and GRUB
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Christopher Siden <christopher.siden@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Christopher Siden <csiden@delphix.com>
    
    References:
      illumos/illumos-gate@a6f561b4aee75d0d028e7b36b151c8ed8a86bc76
      https://www.illumos.org/issues/3035
      http://wiki.illumos.org/display/illumos/LZ4+Compression+In+ZFS
    
    This patch has been slightly modified from the upstream Illumos
    version to be compatible with Linux.  Due to the very limited
    stack space in the kernel a lz4 workspace kmem cache is used.
    Since we are using gcc we are also able to take advantage of the
    gcc optimized __builtin_ctz functions.
    
    Support for GRUB has been dropped from this patch.  That code
    is available but those changes will need to made to the upstream
    GRUB package.
    
    Lastly, several hunks of dead code were dropped for clarity.  They
    include the functions real_LZ4_uncompress(), LZ4_compressBound()
    and the Visual Studio specific hunks wrapped in _MSC_VER.
    
    Ported-by: Eric Dillmann <eric@jave.fr>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1217

[33mcommit ff5b1c8065c8a43add534892172f0aa5aba90f3d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jan 28 14:49:12 2013 -0800

    Quiet mkfs.ext2 output
    
    The -q option should quiet the mkfs.ext2 output but certain
    versions of e2fsprogs appear to ignore it.  This can result in
    an extra 'done' message in the test output.  To keep this noise
    from distracting just direct stdout to /dev/null.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 2b7ab9d4d9b307c354795e2805ff313ddd01985d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jan 28 14:15:39 2013 -0800

    Linux 2.6.26 compat, lookup_bdev()
    
    It's doubtful many people were impacted by this but commit 6c28567
    accidentally broke ZFS builds for 2.6.26 and earlier kernels.  This
    commit depends on the lookup_bdev() function which exists in 2.6.26
    but wasn't exported until 2.6.27.
    
    The availability of the function isn't critical so a wrapper is
    introduced which returns ERR_PTR(-ENOTSUP) when the function isn't
    defined.  This will have the effect of causing zvol_is_zvol() to
    always fail for 2.6.26 kernels.  This in turn means vdevs will
    always get opened concurrently which is good for normal usage.
    This will only become an issue if your using a zvol as a vdev in
    another pool.  In which case you really should be using a newer
    kernel anyway.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1205

[33mcommit 930b6fec210d828cb3755f8756dbbbf3001cccae[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jan 28 13:39:40 2013 -0800

    Stop using /bin/ as a source in zconfig.sh
    
    Test 5, 6, 7, and 7 in zconfig.sh use /bin/ as a source of random
    directories and files for their test.  This has lead to unexpected
    tests failures because the total size of /bin/ on the test system
    isn't checked and it is entirely possible for it to be larger than
    the target filesystem.
    
    To resolve this issue we create a somewhat random collection of
    files and directories in /var/tmp to use.  On average we expect
    about 5MB of data with the worst case being 20MB.  This is large
    enough to be interesting and small enough to always fit in the
    default test datasets.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1113

[33mcommit 14ee71efbc28086406bb255f2292b9535d845625[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jan 28 09:53:51 2013 -0800

    Use strerror() not strerror_r()
    
    The differ() function used strerror_r() instead of strerror() because
    it allowed the error message to be directly copied in to a buffer.
    This causes two issues under Linux.
    
    * There are two versions of strerror_r() available an XSI-compliant
      version which returns an 'int' error code.  And a GNU-specific
      version which return a 'char *' to the resulting error string.
    
        int strerror_r(int errnum, char *buf, size_t buflen);   /* XSI */
        char *strerror_r(int errnum, char *buf, size_t buflen); /* GNU */
    
    * The most recent versions of strerror_r() are annotated with the
      warn_unused_result attribute.  This causes the following warning
      since the upstream implementation casts the result to void.
    
        warning: ignoring return value of 'strerror_r', declared with
        attribute warn_unused_result [-Wunused-result]
    
    The cleanest way to resolve both of these problems is just to use
    strerror() and make a copy of the result in to the buffer.  This
    resolves both issues and this is the only instance of strerror_r()
    in the code base.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1231

[33mcommit ddc07fa57a2e002822ae30f2e18c5427f4e3eb74[m
Author: Chris Wedgwood <cw@f00f.org>
Date:   Fri Jan 25 18:19:45 2013 -0800

    Avoid gcc -Werror=maybe-uninitialized warnings
    
    Explicitly set acl details to zero to silence gcc (zfs_acl_node_read
    can't be sure zfs_acl_znode_info will set acl_count and aclsize).
    Normally suppressing these warnings by setting this to zero at
    declaration time is a bad idea but in this instance it's hard to
    avoid and should be fairly safe.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1244

[33mcommit 6772fb679a4205427a385d174359b2a5826da613[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jan 25 14:57:53 2013 -0800

    Use dsl_dataset_snap_lookup()
    
    Retire the dmu_snapshot_id() function which was introduced in the
    initial .zfs control directory implementation.  There is already
    an existing dsl_dataset_snap_lookup() which does exactly what we
    need, and the dmu_snapshot_id() function as implemented is racy.
    
    https://github.com/zfsonlinux/zfs/issues/1215#issuecomment-12579879
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1238

[33mcommit ba43f4565aa151065dd2b64c1aab8f1051ce1295[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Thu Jan 24 14:19:03 2013 -0800

    vdev_id: improve keyword parsing flexibility
    
    The vdev_id udev helper strictly requires configuration file keywords
    to always be anchored at the beginning of the line and to be followed
    by a space character.  However, users may prefer to use indentation or
    tab delimitation.  Improve flexibility by simply requiring a keyword
    to be the first field on the line.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1239

[33mcommit e528c9b461df83eddc89c65d707d8674b4940314[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jan 24 13:54:58 2013 -0800

    Fix zconfig.sh partitioning error
    
    Parted version 3.0 doesn't allow us to specify the start and end
    percentages as 50% and 100% respectively.  This results in:
    
      Error: The location 100% is outside the device /dev/zd0
    
    Therefore we change the syntax to 51% and -1 for end of device.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 563103decdca7c06850ca0909e5c8f8b4b0c0fe5[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jan 24 13:49:17 2013 -0800

    Fix test script error codes
    
    The 'exit $?' command in the INT TERM EXIT trap was overwritting
    the expected error code with the error code from mv.  Fix the
    issue by removing the 'exit $?'.  It's important the we preserve
    the original error code so failures are easily noticed.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit bf01b5e6161b4aa94c69792e50de4102a033be09[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jan 22 16:14:43 2013 -0800

    Add d_clear_d_op() compatibility
    
    Added d_clear_d_op() helper function which clears some flags and the
    registered dentry->d_op table.  This is required because d_set_d_op()
    issues a warning when the dentry operations table is already set.
    For the .zfs control directory to work properly we must be able to
    override the default operations table and register custom .d_automount
    and .d_revalidate callbacks.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Closes #1230

[33mcommit 1305d33a4b0f8b10cea61989330cc5d059cfa7cb[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Tue Jan 22 14:33:01 2013 -0800

    fzap_cursor_move_to_key() should drop l_rwlock
    
    Callers of zap_deref_leaf() must be careful to drop leaf->l_rwlock
    since that function returns with the lock held on success.  All other
    callers drop the lock correctly but it seems fzap_cursor_move_to_key()
    does not.  This may block writers or cause VERIFY failures when the
    lock is freed.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1215
    Closes zfsonlinux/spl#143
    Closes zfsonlinux/spl#97

[33mcommit 09a661e960df49f1256ba4c5ae15f6956d27df84[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jan 22 09:05:49 2013 -0800

    Fix zpl_revalidate() NULL deref
    
    In zpl_revalidate() it's possible for the nameidata to be NULL
    for kernels which still accept the parameter.  In particular,
    lookup_one_len() calls d_revalidate() with a NULL nameidata.
    
    Resolve the issue by checking for a NULL nameidata in which case
    just set the flags to 0.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1226

[33mcommit ee93035378ff1f0769bb4216dc35057a2f14f9b9[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jan 18 14:11:40 2013 -0800

    Use sb->s_d_op default dentry operations
    
    As of Linux 2.6.37 the right way to register custom dentry
    operations is to use the super block's ->s_d_op field.
    For older kernels they should be registered as part of the
    lookup operation.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1223

[33mcommit babf3f9b6d9294b0a88457941d60af5d9d7b744d[m
Author: Massimo Maggi <massimo@mmmm.it>
Date:   Fri Jan 18 09:44:09 2013 -0800

    Fix zpool on zvol deadlock
    
    Commit 65d56083b4617a4cade0cff68cbbaf68114169d6 fixes the lock
    inversion between spa_namespace_lock and bdev->bd_mutex but only
    for the first user of spa_namespace_lock: dmu_objset_own().
    Later spa_namespace_lock gets acquired by dsl_prop_get_integer()
    though dsl_prop_get()->dsl_dataset_hold()->dsl_dir_open_spa()->
    spa_open()->spa_open_common() without this "protection".  By
    moving the mutex release after this second use, even this
    acquisition of the lock is "protected" by the ERESTARTSYS trick.
    
    Signed-off-by: Massimo Maggi <me@massimo-maggi.eu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1220

[33mcommit 7973e464de4f93b6e669f7f04a316e013767224e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jan 17 10:05:42 2013 -0800

    Revert "Revert "Fix unlink/xattr deadlock""
    
    This reverts commit 53c7411919a64d6f0889aa0d6974610f6cd35744
    effectively reinstating the asynchronous xattr cleanup code.
    
    These Linux changes were reverted because after testing
    and careful contemplation I was convinced that due to the
    89260a1c8851ce05ea04b23606ba438b271d890 commit they were no
    longer required.
    
    Unfortunately, the deadlock described in #1176  was a case
    which wasn't considered.  At mount zfs_unlinked_drain() can
    occur which will unlink a list of znodes in effectively a
    random order which isn't safe.  The only reason it was safe
    to originally revert this change was the we could guarantee
    that the VFS would always prune the xattr leaves before the
    parents.
    
    Therefore, until we can cleanly resolve this deadlock for
    all cases we need to keep this change in spite of the xattr
    unlink performance penalty associated with it.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1176
    Issue #457

[33mcommit 7b3e34ba5a7ee8d0fda44d214f6f11eb16cdb26f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jan 15 16:41:09 2013 -0800

    Fix 'zfs rollback' on mounted file systems
    
    Rolling back a mounted filesystem with open file handles and
    cached dentries+inodes never worked properly in ZoL.  The
    major issue was that Linux provides no easy mechanism for
    modules to invalidate the inode cache for a file system.
    
    Because of this it was possible that an inode from the previous
    filesystem would not get properly dropped from the cache during
    rolling back.  Then a new inode with the same inode number would
    be create and collide with the existing cached inode.  Ideally
    this would trigger an VERIFY() but in practice the error wasn't
    handled and it would just NULL reference.
    
    Luckily, this issue can be resolved by sprucing up the existing
    Solaris zfs_rezget() functionality for the Linux VFS.
    
    The way it works now is that when a file system is rolled back
    all the cached inodes will be traversed and refetched from disk.
    If a version of the cached inode exists on disk the in-core
    copy will be updated accordingly.  If there is no match for that
    object on disk it will be unhashed from the inode cache and
    marked as stale.
    
    This will effectively make the inode unfindable for lookups
    allowing the inode number to be immediately recycled.  The inode
    will then only be accessible from the cached dentries.  Subsequent
    dentry lookups which reference a stale inode will result in the
    dentry being invalidated.  Once invalidated the dentry will drop
    its reference on the inode allowing it to be safely pruned from
    the cache.
    
    Special care is taken for negative dentries since they do not
    reference any inode.  These dentires will be invalidate based
    on when they were added to the dentry cache.  Entries added
    before the last rollback will be invalidate to prevent them
    from masking real files in the dataset.
    
    Two nice side effects of this fix are:
    
    * Removes the dependency on spl_invalidate_inodes(), it can now
      be safely removed from the SPL when we choose to do so.
    
    * zfs_znode_alloc() no longer requires a dentry to be passed.
      This effectively reverts this portition of the code to its
      upstream counterpart.  The dentry is not instantiated more
      correctly in the Linux ZPL layer.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Closes #795

[33mcommit f1a05fa11484d67161606fd1ecf50bf2abc25ced[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Mon Jan 14 13:59:14 2013 -0800

    Fix false ENOENT on snapshot control dentries
    
    Lookups in the snapshot control directory for an existing snapshot
    fail with ENOENT if an earlier lookup failed before the snapshot was
    created.  This is because the earlier lookup causes a negative dentry
    to be cached which is never invalidated.
    
    The bug can be reproduced as follows (the second ls should succeed):
    
     $ ls /tank/.zfs/snapshot/s
     ls: cannot access /tank/.zfs/snapshot/s: No such file or directory
     $ zfs snap tank@s
     $ ls /tank/.zfs/snapshot/s
     ls: cannot access /tank/.zfs/snapshot/s: No such file or directory
    
    To remedy this, always invalidate cached dentries in the snapshot
    control directory.  Since these entries never exist on disk there is
    no significant performance penalty for the extra lookups.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1192

[33mcommit 94a9bb4709111f5fadb434cce1af6ccb6534e241[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Wed Jan 16 12:44:25 2013 -0800

    Fix quoting error in unmount command
    
    A misplaced single quote caused the umount command to fail with a
    syntax error when unmounting snapshots under the .zfs/snapshot
    control directory.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1210

[33mcommit 38145d612963d0a5b80017d5d1d49c1d4f9637c2[m
Author: Darik Horn <dajhorn@vanadac.com>
Date:   Mon Jan 14 19:27:39 2013 -0600

    Ensure that zfs diff prints unicode safely.
    
    In the stream_bytes() library function used by `zfs diff`, explicitly
    cast each byte in the input string to an unsigned character so that the
    Linux fprintf() correctly escapes to octal and does not mangle the output.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1172

[33mcommit b077fd4c4e16d372ef81035199e132687dbcf0e3[m
Author: Christopher Siden <chris.siden@delphix.com>
Date:   Mon Jan 14 10:29:55 2013 -0800

    Illumos #3189 kernel panic in test hotspare_onoffline_004_neg
    
    3189 kernel panic in ZFS test suite during hotspare_onoffline_004_neg
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Arne Jansen <sensille@gmx.net>
    Approved by: Dan McDonald <danmcd@nexenta.com>
    
    References:
      illumos/illumos-gate@8f0b538d1dc99df23a6a89cfd9ffddc1b9804a00
      changeset: 13818:e9ad0a945d45
      https://www.illumos.org/issues/3189
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit ff80d9b142826c15fa84e3c4b9ef1795fd6e9485[m
Author: Arne Jansen <sensille@gmx.net>
Date:   Mon Jan 14 10:26:31 2013 -0800

    Illumos #1862 incremental zfs receive fails for sparse file > 8PB
    
    1862 incremental zfs receive fails for sparse file > 8PB
    
    Reviewed by: Matt Ahrens <matthew.ahrens@delphix.com>
    Reviewed by: Simon Klinkert <klinkert@webgods.de>
    Approved by: Eric Schrock <eric.schrock@delphix.com>
    
    References:
      illumos/illumos-gate@31495a1e56860f4575614774a592fe33fc9c71f2
      illumos changeset: 13789:f0c17d471b7a
      https://www.illumos.org/issues/1862
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit a94addd9749e8272664a2476460e75829626a465[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Mon Jan 14 09:31:53 2013 -0800

    Illumos #3208 cross-endian incorrect user/group accounting
    
    3208 moving zpool cross-endian results in incorrect user/group
    accounting
    
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Christopher Siden <chris.siden@delphix.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      illumos/illumos-gate@e828a46d29ad418487f50d56b5c19e2a1f9033a7
      illumos changeset: 13835:eea81edc4f14
      https://www.illumos.org/issues/3208
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #627
    Closes #1136

[33mcommit e6f7d015028a21d81d9f119928221c69d03c95be[m
Author: Christopher Siden <chris.siden@delphix.com>
Date:   Fri Jan 11 16:42:50 2013 -0800

    Illumos #3397, #3398
    
    3397 zdb <pool> <objnum> output is too verbose
    3398 zdb can't dump feature flags zap objects
    
    Reviewed by: Matt Ahrens <matthew.ahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Dan Kimmel <dan.kimmel@delphix.com>
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Reviewed by: Richard Lowe <richlowe@richlowe.net>
    Approved by: Dan McDonald <danmcd@nexenta.com>
    
    References:
      illumos/illumos-gate@e690fb27a7d1483f052505e1ff373d205f9dee99
      https://www.illumos.org/issues/3397
      https://www.illumos.org/issues/3398
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 5990da81a798c087d323ba9104a6696bef2d275f[m
Author: Yuri Pankov <yuri.pankov@nexenta.com>
Date:   Thu Jan 10 14:25:47 2013 -0800

    Illumos #1884, #3028, #3048, #3049, #3060, #3061, #3093
    
    1884 Empty "used" field for zfs *space commands
    3028 zfs {group,user}space -n prints (null) instead of numeric GID/UID
    3048 zfs {user,group}space [-s|-S] is broken
    3049 zfs {user,group}space -t doesn't really filter the results
    3060 zfs {user,group}space -H output isn't tab-delimited
    3061 zfs {user,group}space -o doesn't use specified fields order
    3093 zfs {user,group}space's -i is noop
    
    Reviewed by: Garry Mills <gary_mills@fastmail.fm>
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      illumos/illumos-gate@89f5d17b06fc4132c983112b24836a779a0ed736
      illumos changeset: 13803:b5e49d71ff0e
      https://www.illumos.org/issues/1884
      https://www.illumos.org/issues/3028
      https://www.illumos.org/issues/3048
      https://www.illumos.org/issues/3049
      https://www.illumos.org/issues/3060
      https://www.illumos.org/issues/3061
      https://www.illumos.org/issues/3093
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1194

[33mcommit 240245896aad46d0d41b0f9f257ff2abd09cb29b[m
Author: Yuri Pankov <yuri.pankov@nexenta.com>
Date:   Fri Jan 11 09:11:09 2013 -0800

    Illumos #1377 `zpool status -D' should tell if there are no DDT entries
    
    1337 `zpool status -D' should tell if there are no DDT entries
    
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Reviewed by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Reviewed by: George Wilson <gwilson@zfsmail.com>
    Approved by: Albert Lee <trisk@nexenta.com>
    
    References:
      illumos/illumos-gate@ce72e614c133351311e87bbbe4eba8fea9e77768
      illumos changeset: 13432:d1ad8d106d64
      https://www.illumos.org/issues/1337
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 844793c3cc6ebf8e850057e41497089131569be0[m
Author: Garrett D'Amore <garrett@damore.org>
Date:   Fri Jan 11 09:04:23 2013 -0800

    Illumos #1557 assertion failed in userland taskq_destroy()
    
    1557 assertion failed in userland taskq_destroy()
    
    Reviewed by: Richard Lowe <richlowe@richlowe.net>
    Reviewed by: George Wilson <gwilson@zfsmail.com>
    Approved by: Eric Schrock <eric.schrock@delphix.com>
    
    References:
      illumos/illumos-gate@aa846ad9bc4785806bb6263657698d5890afbc08
      illumos changeset: 13597:3eac1e8e0f4c
      https://www.illumos.org/issues/1557
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 5c839890712c216aa657d8e3f5a25dca1469157d[m
Author: Bart Coddens <bart.coddens@gmail.com>
Date:   Fri Jan 11 08:54:18 2013 -0800

    Illumos #2618 arc.c mistypes in the comments
    
    2618 arc.c mistypes in the comments
    
    Reviewed by: Jason King <jason.brian.king@gmail.com>
    Reviewed by: Josef Sipek <jeffpc@josefsipek.net>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      illumos/illumos-gate@fc98fea58e89224f6f13d7fae246d6cb5dfa35ea
      illumos changeset: 13721:5b51a16a186f
      https://www.illumos.org/issues/2618
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit e191b54ecfbd2af619d5cb4b3a0f298305c2145a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jan 10 16:09:31 2013 -0800

    Only use gcc -Wunused-but-set-variable when available
    
    Certain versions of gcc generate an 'unrecognized command
    line option' error message when -Wunused-but-set-variable
    is used unconditionally.  This in turn can cause several
    of the autoconf tests to misdetect an interface.
    
    Now, the use of -Wunused-but-set-variable in the autoconf
    tests was introduced by commit b9c59ec8 to address a gcc
    4.6 compatibility problem.  So we really only need to pass
    this option for version of gcc which are known to support it.
    
    Therefore, the tests have been updated to use the result of
    the existing ZFS_AC_CONFIG_ALWAYS_NO_UNUSED_BUT_SET_VARIABLE
    which determines if gcc supports this option.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1004

[33mcommit 9566fb1a7b360c44e66475f933ebde106d9a0f0d[m
Author: Steven Burgess <sburgess@dattobackup.com>
Date:   Fri Dec 28 16:53:18 2012 -0500

    'zfs send' man page sync'ed with Illumos
    
    * Move -R option up one position in the list to match
      the Illumos documentation.
    
    * Move -D option up one position and refreshed it to
      match the Illumos documentation.
    
    * Move -p option up one position and refreshed it to
      match the Illumos documentation.
    
    * Add the -n, -P  documentation found in zfs receive
      in to zfs send where to belongs.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1187

[33mcommit 17836f0956b83a2850b5cf86af909abf4036758f[m
Author: Steven Burgess <sburgess@dattobackup.com>
Date:   Fri Dec 28 16:36:10 2012 -0500

    'zfs receive' man page sync'ed with Illumos
    
    The only valid options are -vnFu, these other ones seem to be
    misplaced zfs send options.
    
    Remove: -D -r -p -n -P
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1186

[33mcommit a1e147eef8f61f3fcac742952d56b1f9d6c2703b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jan 9 12:51:29 2013 -0800

    Add /sbin/fsck.zfs helper
    
    A fsck helper to accomidate distributions that expect to be able
    to execute a fsck on all filesystem types.  Currently this script
    does nothing but it could be extended to act as a compatibility
    wrapper for 'zpool scrub'.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #964

[33mcommit 87bdc45ccbf6f1d57a278c2026e60fc5f3af7598[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jan 9 11:56:37 2013 -0800

    Report realpath() canonicalization error
    
    Rather than just reporting the failure include the passed
    mount point and error number.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1153

[33mcommit 761394b3af152895ac68a970a91a4f8a917c547b[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Wed Jan 9 15:46:31 2013 -0800

    call_usermodehelper() should wait for process
    
    As of Linux 3.4 the UMH_WAIT_* constants were renumbered.  In
    particular, the meaning of "1" changed from UMH_WAIT_PROC (wait for
    process to complete), to UMH_WAIT_EXEC (wait for the exec, but not the
    process).  A number of call sites used the number 1 instead of the
    constant name, so the behavior was not as expected on kernels with this
    change.
    
    One visible consequence of this change was that processes accessing
    automounted snapshots received an ELOOP error because they failed to
    wait for zfs.mount to complete.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #816

[33mcommit 1c50c992bafd96773dc3950d382a89806df8cc9c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jan 9 11:09:06 2013 -0800

    Revert "Avoid ELOOP on auto-mounted snapshots"
    
    This reverts commit 7afcf5b1da83549bfba70a61fae7a00eaa63c2b0 which
    accidentally introduced a regression with the .zfs snapshot directory.
    While the updated code still does correctly mount the requested
    snapshot.  It updates the vfsmount such that it references the
    original dataset vfsmount.  The result is that the snapshot itself
    isn't visible.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #816

[33mcommit 4cec9b2dc79c8132ef9093921a0c14529cde775f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jan 8 16:16:46 2013 -0800

    Only reduce __zio_execute() stack usage in kernel space
    
    Related to 91579709fccd3e55a21970742b66c388fb1403db we need to
    be very careful about not overrunning the stack in kernel space.
    However, in user space we're already allowing slightly larger
    stacks so this stack usage optimization is not required there.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit c1cdd9900b7b676fd1d1952125a5acd3435db5d7[m
Merge: 15313c5 1eb5bfa
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jan 8 10:59:05 2013 -0800

    Merge branch 'feature-flags'
    
    Feature flags support for ZFS ported from Illumos.  Only minimal
    compatibility changes were made where required to accomidate Linux.
    For a detailed description of feature flags see original proposal
    on zfs-discuss.  They are conceptually very similar to Linux's
    ext[234] style of feature flags.
    
    http://lists.freebsd.org/pipermail/freebsd-fs/2011-May/011568.html
    
    NOTE: This branch updates the default pool version for new pools
    from 28 to 5000.  Version 28 pools may still be created for
    compatibility with Solaris by using the '-o version=28' option.
    
    $ zpool create -o version=28 ...
    
    Existing pools must be manually upgraded using 'zpool upgrade'.
    
    $ zpool upgrade ...
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #778

[33mcommit 1eb5bfa3dcdaecb19543d9df13131374a7a42947[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Fri Dec 21 14:57:09 2012 -0800

    Illumos #3145, #3212
    
    3145 single-copy arc
    3212 ztest: race condition between vdev_online() and spa_vdev_remove()
    
    Reviewed by: Matt Ahrens <matthew.ahrens@delphix.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Reviewed by: Justin T. Gibbs <gibbs@scsiguy.com>
    Approved by: Eric Schrock <eric.schrock@delphix.com>
    
    References:
      illumos-gate/commit/9253d63df408bb48584e0b1abfcc24ef2472382e
      illumos changeset: 13840:97fd5cdf328a
      https://www.illumos.org/issues/3145
      https://www.illumos.org/issues/3212
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #989
    Closes #1137

[33mcommit 753c38392ddff9d3cf140bb4d28f3bfba52c92d2[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Sun Dec 23 15:57:14 2012 -0800

    Illumos #3104: eliminate empty bpobjs
    
    3104 eliminate empty bpobjs
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Christopher Siden <chris.siden@delphix.com>
    Reviewed by: Garrett D'Amore <garrett@damore.org>
    Approved by: Eric Schrock <eric.schrock@delphix.com>
    
    References:
      illumos/illumos-gate@f17457368189aa911f774c38c1f21875a568bdca
      illumos changeset: 13782:8f78aae28a63
      https://www.illumos.org/issues/3104
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 91579709fccd3e55a21970742b66c388fb1403db[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Dec 17 16:23:27 2012 -0800

    Fix __zio_execute() asynchronous dispatch
    
    To save valuable stack all zio's were made asynchronous when in the
    tgx_sync_thread context or during pool initialization.  See commit
    2fac4c2 for the original patch and motivation.
    
    Unfortuantely, the changes to dsl_pool_sync_context() made by the
    feature flags broke this logic causing in __zio_execute() to dispatch
    itself infinitely when called during pool initialization.  This
    commit refines the existing logic to specificly target only the two
    cases we care about.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit ea0b2538cd5967fcdf26b7b7c01859a060fef3e3[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Fri Dec 14 16:28:49 2012 -0800

    Illumos #3349: zpool upgrade -V bumps the on disk version number
    
    3349 zpool upgrade -V bumps the on disk version number, but leaves
    the in core version
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Christopher Siden <chris.siden@delphix.com>
    Reviewed by: Matt Ahrens <matthew.ahrens@delphix.com>
    Reviewed by: Richard Lowe <richlowe@richlowe.net>
    Approved by: Dan McDonald <danmcd@nexenta.com>
    
    References:
      illumos/illumos-gate@25345e466695fbe736faa53b8f3413d8e8f81981
      https://www.illumos.org/issues/3349
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 29809a6cbae9869ca6ee026337981b2c9771650a[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Fri Dec 14 16:13:40 2012 -0800

    Illumos #3086: unnecessarily setting DS_FLAG_INCONSISTENT on async
    
    3086 unnecessarily setting DS_FLAG_INCONSISTENT on async
    destroyed datasets
    Reviewed by: Christopher Siden <chris.siden@delphix.com>
    Approved by: Eric Schrock <Eric.Schrock@delphix.com>
    
    References:
      illumos/illumos-gate@ce636f8b38e8c9ff484e880d9abb27251a882860
      illumos changeset: 13776:cd512c80fd75
      https://www.illumos.org/issues/3086
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit b9b24bb4ca45f2d903efadba44d10dfd182f62ac[m
Author: Christopher Siden <chris.siden@delphix.com>
Date:   Fri Dec 14 15:00:45 2012 -0800

    Illumos #2762: zpool command should have better support for feature flags
    
    2762 zpool command should have better support for feature flags
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Eric Schrock <Eric.Schrock@delphix.com>
    
    References:
      illumos/illumos-gate@57221772c3fc05faba04bf48ddff45abf2bbf2bd
      https://www.illumos.org/issues/2762
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 3bc7e0fb0f3904eaf41e0b9768ebe2d042ae98aa[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Fri Dec 14 12:38:04 2012 -0800

    Illumos #3090 and #3102
    
    3090 vdev_reopen() during reguid causes vdev to be treated as corrupt
    3102 vdev_uberblock_load() and vdev_validate() may read the wrong label
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Christopher Siden <chris.siden@delphix.com>
    Reviewed by: Garrett D'Amore <garrett@damore.org>
    Approved by: Eric Schrock <Eric.Schrock@delphix.com>
    
    References:
      illumos/illumos-gate@dfbb943217bf8ab22a1a9d2e9dca01d4da95ee0b
      illumos changeset: 13777:b1e53580146d
      https://www.illumos.org/issues/3090
      https://www.illumos.org/issues/3102
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #939

[33mcommit 5ac0c30a94a0804080f0a89c9b7a31f8d4ab5708[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Dec 14 12:24:04 2012 -0800

    Revert "Temporarily disable the reguid test."
    
    This reverts commit d13524579162b35189804c357a63993be758b84c.
    Since feature flags have now been merged we can apply the real
    upstream fix from Illumos.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #997

[33mcommit 9ae529ec5dbdc828ff8326beae58062971d74b2e[m
Author: Christopher Siden <chris.siden@delphix.com>
Date:   Thu Dec 13 15:24:15 2012 -0800

    Illumos #2619 and #2747
    
    2619 asynchronous destruction of ZFS file systems
    2747 SPA versioning with zfs feature flags
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <gwilson@delphix.com>
    Reviewed by: Richard Lowe <richlowe@richlowe.net>
    Reviewed by: Dan Kruchinin <dan.kruchinin@gmail.com>
    Approved by: Eric Schrock <Eric.Schrock@delphix.com>
    
    References:
      illumos/illumos-gate@53089ab7c84db6fb76c16ca50076c147cda11757
      illumos/illumos-gate@ad135b5d644628e791c3188a6ecbd9c257961ef8
      illumos changeset: 13700:2889e2596bd6
      https://www.illumos.org/issues/2619
      https://www.illumos.org/issues/2747
    
    NOTE: The grub specific changes were not ported.  This change
    must be made to the Linux grub packages.
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 15313c5e1866e81e2f4a30d2c50b43b5435e547a[m
Author: Dominik Honnef <dominikh@fork-bomb.org>
Date:   Fri Jan 4 20:09:20 2013 +0100

    Fix duplicate words in zpool.8
    
    Remove the duplicate words 'cannot be' from the zpool.8 man page.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1177

[33mcommit 462ee8e3f3f1e48c857d070fa5abaf4a72246344[m
Author: Will Rouesnel <w.rouesnel@gmail.com>
Date:   Fri Dec 28 01:44:16 2012 +1100

    Allow fake mounts to succeed on non-legacy filesystems.
    
    mountall in Debian depends on being able to pass the -f parameter to
    mount, which specifies a fake mount and just updates the mtab. Currently
    mount.zfs will fail such a request if it is not passed with -o zfsutil.
    
    This patch allows a fake mount on a non-legacy filesystem to succeed in
    the same manner as a -o remount does, thus enabling mountall to work
    correctly.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1167

[33mcommit 37f000c5aa76613e644cf3e5b1ec7bd2df6f7451[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Wed Dec 26 14:56:41 2012 -0800

    Fix gcc array subscript above bounds warning
    
    In a debug build, certain GCC versions flag an array bounds warning in
    the below code from dnode_sync.c
    
        } else {
                int i;
                ASSERT(dn->dn_next_nblkptr[txgoff] < dnp->dn_nblkptr);
                /* the blkptrs we are losing better be unallocated */
                for (i = dn->dn_next_nblkptr[txgoff];
                    i < dnp->dn_nblkptr; i++)
                        ASSERT(BP_IS_HOLE(&dnp->dn_blkptr[i]));
    
    This usage is in fact safe, since the ASSERT ensures the index does
    not exceed to maximum possible number of block pointers. However gcc
    can't determine that the assignment 'i = dn->dn_next_nblkptr[txgoff];'
    falls within the array bounds so it issues a warning.  To avoid this,
    initialize i to zero to make gcc happy but skip the elements before
    dn->dn_next_nblkptr[txgoff] in the loop body.  Since a dnode contains
    at most 3 block pointers this overhead should be negligible.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #950

[33mcommit e44056fcb644496b4dee4847164afe0bb2e04e5b[m
Merge: 15f9d4e 72938d6
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jan 7 10:54:56 2013 -0800

    Merge branch 'io_schedule'
    
    Currently ZFS doesn't show any I/O time in eg "top" wait% or in
    /proc/$pid/stat's blkio_ticks.  Using io_schedule() instead of
    schedule() in zio_wait()'s cv_wait() is the correct way to fix
    this.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1158
    Closes #1175

[33mcommit 72938d6905d9dcd60f7a5ff68ae469e74c248228[m
Author: Matt Johnston <matt@fugro-fsi.com.au>
Date:   Fri Dec 21 10:40:20 2012 +0800

    Use cv_wait_io() which will will account for iowait
    
    Update zio_wait() to use cv_wait_io() to ensure the iowait time
    is properly accounted for.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 72f53c5694bfd57b56e79fc3b7c4390bce4072d2[m
Author: Matt Johnston <matt@fugro-fsi.com.au>
Date:   Fri Dec 21 10:15:34 2012 +0800

    Revert part of "Log I/Os longer than zio_delay_max (30s default)"
    
    This reverts commit 9dcb97198338ba2d8764dd5604b278118612f74
    which was originally introduced to debug occasional slow I/Os.
    These I/Os would complete eventually but were observed to take
    several 100 seconds.
    
    The root cause of this issue was the CFQ scheduler which can,
    under certain conditions, excessively delay an I/O from being
    issued to the device.  This issue was mitigated somewhat by
    commit 84daaddedbfc9cf4bd1490d8a6f4b2967051e308 which ensures
    the I/O elevator gets changed even for DM style devices.
    
    This change isn't in any way harmful but it does conflict with
    a required change to properly account from I/O wait time.
    Because Linux does not export the io_schedule_timeout() function
    we must instead rely  on io_schedule() via cv_wait_io().
    
    The additional debugging information which was added to the
    delay event has been intentionally left in place.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 15f9d4e1c2b0ee26546e79d599df1b2adc2e5026[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 20 11:02:24 2012 -0800

    ZFS 0.6.0-rc13

[33mcommit 65d56083b4617a4cade0cff68cbbaf68114169d6[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Dec 19 13:51:44 2012 -0800

    Fix zpool on zvol lock inversion deadlock
    
    In all but one case the spa_namespace_lock is taken before the
    bdev->bd_mutex lock.  But Linux __blkdev_get() function calls
    fops->open() with the bdev->bd_mutex lock held and we must
    somehow still safely acquire the spa_namespace_lock.
    
    To avoid a potential lock inversion deadlock we preemptively
    try to take the spa_namespace_lock().  Normally it will not
    be contended and this is safe because spa_open_common() handles
    the case where the caller already holds the spa_namespace_lock.
    
    When it is contended we risk a lock inversion if we were to
    block waiting for the lock.  Luckily, the __blkdev_get()
    function allows us to return -ERESTARTSYS which will result in
    bdev->bd_mutex being dropped, reacquired, and fops->open() being
    called again.  This process can be repeated safely until both
    locks are acquired.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Jorgen Lundman <lundman@lundman.net>
    Closes #612

[33mcommit d5446cfc528262ae3a41da31a8524c9d2e793f45[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 20 09:55:47 2012 -0800

    Revert "Remove TSD zfs_fsyncer_key"
    
    This reverts commit 31f2b5abdf95d8426d8bfd66ca7f62ec70215e3c back
    to the original code until the fsync(2) performance regression
    can be addressed.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 23e3c743f6e36768b97234c3de18f4682111e6c3[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Dec 19 09:47:25 2012 -0800

    Refresh AUTHORS
    
    The AUTHORS file was getting stale.  Refresh its contents
    using the authors listed in the git commit logs.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 840222eb0bb519a55c6aa2bfe550ff9d213b272c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Dec 19 09:22:07 2012 -0800

    Remove the ChangeLog
    
    The ChangeLog was retired long ago, the git commit logs are
    authoritative.  To avoid any confusion remove the ChangeLog.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 31f2b5abdf95d8426d8bfd66ca7f62ec70215e3c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 13 12:21:11 2012 -0800

    Remove TSD zfs_fsyncer_key
    
    It's my understanding that the zfs_fsyncer_key TSD was added as
    a performance omtimization to reduce contention on the zl_lock
    from zil_commit().  This issue manifested itself as very long
    (100+ms) fsync() system call times for fsync() heavy workloads.
    
    However, under Linux I'm not seeing the same contention that
    was originally described.  Therefore, I'm removing this code
    in order to ween ourselves off any dependence on TSD.  If the
    original performance issue reappears on Linux we can revisit
    fixing it without resorting to TSD.
    
    This just leaves one small ZFS TSD consumer.  If it can be
    cleanly removed from the code we'll be able to shed the SPL
    TSD implementation entirely.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes zfsonlinux/spl#174

[33mcommit 84daaddedbfc9cf4bd1490d8a6f4b2967051e308[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Fri Dec 14 16:16:35 2012 -0800

    Set elevator for DM devices despite vdev_wholedisk
    
    The current state of udev and devicer-mapper devices makes it difficult
    to construct a mapping of DM partitions and their underlying DM device.
    For example, with a /dev directory with the following contents:
    
        $ ls -d /dev/dm-*
        /dev/dm-0
        /dev/dm-1
        /dev/dm-2
        /dev/dm-3
    
    it is not immediately apparent if these are completely separate devices,
    or partitions and real devices intermixed. In contrast, SCSI devices
    would appear as so:
    
        $ ls -d /dev/sd*
        /dev/sda
        /dev/sda1
        /dev/sdb
        /dev/sdb1
    
    Here, one can immediately determine that there are two devices (sda and
    sdb), each containing a single partition. The lack of a predictable and
    consistent mapping from DM devices to DM device partitions makes it
    difficult for user space to process these devices the same way it does
    SCSI devices.
    
    As a result, the ZFS utilities do not partition DM devices, and instead
    set the "vdev_wholedisk" label to 0 and treat them as partitions. This
    has the side effect that, even if ZFS has sole ownership of the device,
    the IO scheduler will not be modified because it is treated as a
    partition.
    
    This change adds an exception for DM devices in vdev_elevator_switch,
    allowing the elevator to be modified even though the "vdev_wholedisk"
    property is not set.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1149

[33mcommit 6c2856726fbae681649930d9620d9087080e58fc[m
Author: Jorgen Lundman <lundman@lundman.net>
Date:   Mon Dec 17 10:33:57 2012 +0900

    Fix using zvol as slog device
    
    During the original ZoL port the vdev_uses_zvols() function was
    disabled until it could be properly implemented.  This prevented
    a zpool from use a zvol for its slog device.
    
    This patch implements that missing functionality by adding a
    zvol_is_zvol() function to zvol.c.  Given the full path to a
    device it will lookup the device and verify its major number
    against the registered zvol major number for the system.  If
    they match we know the device is a zvol.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1131

[33mcommit 5e6320cd1262de6eada39751807c31c059517d01[m
Author: Massimo Maggi <massimo@mmmm.it>
Date:   Sun Dec 16 14:33:51 2012 +0100

    Fix get/set users/groups in quota props via numeric id
    
    Fix setting/getting users/groups in quota properties through
    numeric identifier.  This support was accidentally disabled
    in the original port by applying the HAVE_IDMAP wrapper macro
    too broadly.
    
    Fix obtained by moving #ifdef HAVE_IDMAP to exclude only
    the part of code that really needs IDMAP.  Now zfs (get|set)
    (user|group)quota@1000 works as expected.
    
    Signed-off-by: Massimo Maggi <massimo@mmmm.it>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1147

[33mcommit fd7fd5ebcf6cceb107dd27592a9bd7d60f93738f[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Sun Dec 16 00:35:16 2012 -0500

    Do not use KERNEL_DIR env var in Makefile.am
    
    A Gentoo user reported an issue where the build system would
    attempt to recurse into the kernel source tree if KERNEL_DIR
    is set in the environment. KERNEL_DIR is an environment variable
    that is used when the kernel sources are in a non-standard
    location, so it is necessary to stop relying on it to prevent
    this issue.
    
    https://bugs.gentoo.org/show_bug.cgi?id=433946
    
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 8780c53961e668211682d40ad36946294c3145d8[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Dec 11 16:58:44 2012 -0800

    Update SAs when an inode is dirtied
    
    Revert the portion of commit d3aa3ea which always resulted in the
    SAs being update when an mmap()'ed file was closed.  That change
    accidentally resulted in unexpected ctime updates which upset tools
    like git.  That was always a horrible hack and I'm happy it will
    never make it in to a tagged release.
    
    The right fix is something I initially resisted doing because I
    was worried about the additional overhead.  However, in hindsight
    the overhead isn't as bad as I feared.
    
    This patch implemented the sops->dirty_inode() callback which is
    unsurprisingly called when an inode is dirtied.  We leverage this
    callback to keep the znode SAs strictly in sync with the inode.
    
    However, for now we're going to go slowly to avoid introducing
    any new unexpected issues by only updating the atime, mtime, and
    ctime.  This will cover the callpath of most concern to us.
    
      ->filemap_page_mkwrite->file_update_time->update_time->
          mark_inode_dirty_sync->__mark_inode_dirty->dirty_inode
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #764
    Closes #1140

[33mcommit bd192c4f4831fae78f9dc3264b8c1a9b6dc85307[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Dec 14 11:45:41 2012 -0800

    Update 69-vdev.rules .gitignore
    
    Commit 2957f38 renamed 60-vdev.rules to 69-vdev.rules but failed
    to update the .gitignore file to reflect this change.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 7afcf5b1da83549bfba70a61fae7a00eaa63c2b0[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Wed Dec 12 15:55:51 2012 -0800

    Avoid ELOOP on auto-mounted snapshots
    
    Ensure that the path member pointers are associated with the
    newly-mounted snapshot when zpl_snapdir_automount() returns.  Otherwise
    the follow_automount() function may be called repeatedly, leading to an
    incorrect ELOOP error return. This problem was observed as a 'Too many
    levels of symbolic links' error from user-space commands accessing an
    unmounted snapshot in the .zfs/snapshot directory.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #816

[33mcommit 2ae10319624869eef0954cdfcdb6f5e33cba2e09[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Dec 10 10:15:12 2012 -0800

    Linux 3.7 compat, schedule_delayed_work()
    
    Linux kernel commit d8e794d accidentally broke the delayed work
    APIs for non-GPL callers.   While the APIs to schedule a delayed
    work item are still available to all callers, it is no longer
    possible to initialize the delayed work item.
    
    I'm cautiously optimistic we could get the delayed_work_timer_fn
    exported for all callers in the upstream kernel.  But frankly
    the compatibility code to use this kernel interface has always
    been problematic.
    
    Therefore, this patch abandons direct use the of the Linux
    kernel interface in favor of the new delayed taskq interface.
    It provides roughly the same functionality as delayed work queues
    but it's a stable interface under our control.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1053

[33mcommit e4d89e9cfc605dc59df57d89818868e033e59cfb[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Sat Dec 8 08:38:13 2012 -0500

    Switch KM_SLEEP to KM_PUSHPAGE
    
    When writes to zvols invoke ZIL, zfs_range_new_proxy() is called,
    which allocates memory using KM_SLEEP, triggering a warning.
    Switch to KM_PUSHPAGE to silence that warning.  See commit
    b8d06fca089fae4680c3a552fc55c512bfb02202 for additional details.
    
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1138

[33mcommit 53c7411919a64d6f0889aa0d6974610f6cd35744[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Dec 5 13:00:49 2012 -0800

    Revert "Fix unlink/xattr deadlock"
    
    This reverts commit b00131d43ca344d4b205a03ab3eb771a060e5087 which
    is no longer needed due to e89260a1c8851ce05ea04b23606ba438b271d890.
    
    This change forces all xattr znodes to hold a reference on their
    parent which ensures prune_icache() will never attempt to evict
    both the parent and child concurrently.  This effectively prevents
    the deadlock condition from ever occuring.
    
    Therefore we can safely revert back to the upstream synchronous
    cleanup code.  This is nice because it keeps our code base closer
    to upstream and resolves the performance issues introduced by the
    original deadlock fix.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #457

[33mcommit d3aa3ea96e02547166563bbd60bc8581567a140a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Dec 4 12:11:02 2012 -0800

    Preserve inode mtime/ctime in .writepage()
    
    When updating a file via mmap()'ed I/O preserve the mtime/ctime
    which were updated when the page was made writable by the generic
    callback filemap_page_mkwrite().
    
    But more importantly than preserving the exact time add the missing
    call to sa_bulk_update().  This ensures that the znode modifications
    are written to disk as part of the transaction.  Without this the
    inode may mistaken rollback to the previous on-disk znode state.
    
    Additionally, for mmap()'ed znodes explicitly set the atime, mtime,
    and ctime on close using the up to date values in the inode.  This
    is critical because writepage() may occur after close and on close
    we need to ensure the values are correct.
    
    Original-patch-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #764

[33mcommit 53c2ec1d1b3ffdc90c1c6516558e6b4da77c2446[m
Author: Jorgen Lundman <lundman@lundman.net>
Date:   Thu Nov 29 14:56:07 2012 +0900

    Fix 'zpool create' segfault due to bad syntax
    
    Incorrect syntax should never cause a segfault.  In this case
    listing multiple comma delimited options after '-o' triggered
    the problem.  For example:
    
      zpool create -o ashift=12,listsnaps=on
    
    This patch resolves the issue by wrapping the calls which use
    hdr with a NULL test.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1118

[33mcommit 2957f38d78d376431ab18d2f576099d682d7a711[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Thu Nov 29 11:08:37 2012 -0800

    vdev_id support for device link aliases
    
    Add a vdev_id feature to map device names based on already defined
    udev device links.  To increase the odds that vdev_id will run after
    the rules it depends on, increase the vdev.rules rule number from 60
    to 69.  With this change, vdev_id now provides functionality analogous
    to zpool_id and zpool_layout, paving the way to retire those tools.
    
    A defined alias takes precedence over a topology-derived name, but the
    two naming methods can otherwise coexist. For example, one might name
    drives in a JBOD with the sas_direct topology while naming an internal
    L2ARC device with an alias.
    
    For example, the following lines in vdev_id.conf will result in the
    creation of links /dev/disk/by-vdev/{d1,d2}, each pointing to the same
    target as the device link specified in the third field.
    
      #     by-vdev
      #     name     fully qualified or base name of device link
      alias d1       /dev/disk/by-id/wwn-0x5000c5002de3b9ca
      alias d2       wwn-0x5000c5002def789e
    
    Also perform some minor vdev_id cleanup, such as removal of the unused
    -s command line option.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #981

[33mcommit e89260a1c8851ce05ea04b23606ba438b271d890[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Nov 29 16:10:03 2012 -0800

    Directory xattr znodes hold a reference on their parent
    
    Unlike normal file or directory znodes, an xattr znode is
    guaranteed to only have a single parent.  Therefore, we can
    take a refernce on that parent if it is provided at create
    time and cache it.  Additionally, we take care to cache it
    on any subsequent zfs_zaccess() where the parent is provided
    as an optimization.
    
    This allows us to avoid needing to do a zfs_zget() when
    setting up the SELinux security xattr in the create path.
    This is critical because a hash lookup on the directory
    will deadlock since it is locked.
    
    The zpl_xattr_security_init() call has also been moved up
    to the zpl layer to ensure TXs to create the required
    xattrs are performed after the create TX.  Otherwise we
    run the risk of deadlocking on the open create TX.
    
    Ideally the security xattr should be fully constructed
    before the new inode is unlocked.  However, doing so would
    require far more extensive changes to ZFS.
    
    This change may also have the benefitial side effect of
    ensuring xattr directory znodes are evicted from the cache
    before normal file or directory znodes due to the extra
    reference.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #671

[33mcommit 645fb9cc214c79c77378dd1e1fd2e3ef668bc848[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Sat Feb 4 21:08:53 2012 +0100

    Implemented sharing datasets via SMB using libshare
    
    Add the initial support for the 'smbshare' option using the
    existing libshare infrastructure.  Because this implementation
    relies on usershares samba version 3.0.23 is required.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #493

[33mcommit 4588bf57017f5d2693cd7b3f763640fe8cfe5909[m
Author: Cyril Plisko <cyril.plisko@mountall.com>
Date:   Fri Nov 30 23:13:28 2012 +0200

    Make zpool attach -o ashift=... actually work
    
    Commit df83110856950c8e7b16a7e94cdf42b8531b9cc8 missed update to
    getopt() call, while delivering all the rest. This commit adds
    "o" to getopt().
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #566

[33mcommit c3275b56a1470ed255441df6ff105d0c3c095d8b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Nov 30 11:23:38 2012 -0800

    Add load_nvlist() error handling
    
    Add the missing error handling to load_nvlist().  There's no good
    reason this needs to be fatal.  All callers of load_nvlist() do
    correctly handle an error condition and it is preferable that an
    error be returned.  This will allow 'zpool import -FX' to safely
    attempt to rollback through previous txgs looking for a good one.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1120

[33mcommit c372b36e3eba18d1a8747b8375e3e7c049d40c89[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Nov 6 11:33:24 2012 -0800

    Allow GPT+EFI vdevs for root pools
    
    Commit 57a4edd allows the bootfs property to be set on any pool.
    However, many of the zpool commands still prevent you from using
    EFI labeled devices for the root pool.  For example:
    
        # zpool attach rpool /dev/sda /dev/sdb
        cannot label 'sdb': EFI labeled devices are not supported on
        root pools. on root devices.
    
    For non-Solaris builds such as Linux disable this error.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1077

[33mcommit 004324ecc646ae909e721dc9eda8b1f57e9db71b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Nov 30 10:31:54 2012 -0800

    Disable page allocation warnings for super block
    
    Due to the slightly increased size of the ZFS super block
    caused by 30315d2 there are now allocation warnings.  The
    allocation size is still small (just over 8k) and super
    blocks are rarely allocated so we suppress the warning.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1101

[33mcommit 56a517ae3ab9b2d848a5e671d276396970ed4718[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Nov 29 20:19:25 2012 -0800

    Verify --with-linux source directory exists
    
    Previously this check was only performed when ./configure was
    attempting to autodetect your kernel source directory.  But we
    should also handle the case where --with-linux was provided
    and is obviously wrong.  This way we catch the error before
    invoking make and compiling the source with an incorrect
    autoconf results.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes zfsonlinux/spl#162

[33mcommit 38b344d22a80a173e50ab992f81b57b872e6da7c[m
Author: Cyril Plisko <cyril.plisko@mountall.com>
Date:   Thu Nov 29 15:40:26 2012 +0200

    vdev_id fails to handle complex device topologies
    
    While expanding positional parameters shell requires non-single
    digits to be enclosed in braces. When the SAS topology is
    non-trivial the number of positional parameters generated internally
    by vdev_id script (using set -- ...) easily crosses single digit limit
    and vdev_id fails to generate links.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1119

[33mcommit a6ef9522eae9be2c2cb40731a8afb0a90f05d7ae[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Wed Sep 19 11:44:12 2012 -0700

    Make vdev_id POSIX sh compatible
    
    Full bash may not be available in all environments where udev helpers
    run, such as in an initial ramdisk.  To avoid breakage in this case,
    remove use of bash-specific features such as variable arrays and the
    `declare' keyword from the vdev_id script.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #870

[33mcommit f74a147c022f79916e8525c2c16b1603f91202aa[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Nov 27 14:02:49 2012 -0800

    Fix NULL deref when zvol_alloc() fails
    
    If zvol_alloc() fails zv will be set to NULL and dereferenced
    in out_dmu_objset_disown.  To avoid this entirely the zv->objset
    line is moved up in to the success block.
    
    Original-patch-by: Jorgen Lundman <lundman@lundman.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1109

[33mcommit 30315d237bb23226476b348bc591589c80597351[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Nov 27 13:32:57 2012 -0800

    Increase ZFS_OBJ_MTX_SZ to 256
    
    Increasing this limit costs us 6144 bytes of memory per mounted
    filesystem, but this is small price to pay for accomplishing
    the following:
    
    * Allows for up to 256-way concurreny when performing lookups
      which helps performance when there are a large number of
      processes.
    
    * Minimizes the likelyhood of encountering the deadlock
      described in issue #1101.  Because vmalloc() won't strictly
      honor __GFP_FS there is still a very remote chance of a
      deadlock.  See the zfsonlinux/spl@043f9b57 commit.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1101

[33mcommit 0e20a31b4bb7f9745fe6d5cafe513c9c1df3e933[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Nov 19 13:48:06 2012 -0800

    Recreate minors when renaming zvols
    
    When a zvol with snapshots is renamed the device files under
    /dev/zvol/ are not renamed.  This patch resolves the problem
    by destroying and recreating the minors with the new name so
    the links can be recreated bu udev.
    
    Original-patch-by: Suman Chakravartula <schakrava@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #408

[33mcommit 33364b15d302abfb2945129994b9cf42e61dc302[m
Author: nordaux <nordaux@gmail.com>
Date:   Mon Feb 13 05:44:20 2012 +0200

    mount.zfs: canonicalize mount point for mtab
    
    Canonicalize the mount point passed to the mount.zfs helper.
    This way a clean path is always added to mtab which ensures
    the umount can properly locate and remove the entry.
    
    Test case:
    $ mkdir /mnt/foo
    $ mount -t zfs zpool/foo /mnt/../mnt/foo////
    $ umount /mnt/foo
    $ cat /etc/mtab | grep zpool/foo
    zpool/foo /mnt/../mnt/foo//// zfs rw 0 0
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #573

[33mcommit 54602c37718eca0dbeb668321edf5dfc41dcbe93[m
Merge: 3997bc7 df83110
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Nov 15 11:43:54 2012 -0800

    Merge branch 'ashift'
    
    This branch adds some overdue ashift improvements.
    
      * Add '-o ashift' to 'zpool add' and 'zpool attach'
      * Improve AF hard disk detection
      * Allow 'zpool import' to handle increases in ashift
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit df83110856950c8e7b16a7e94cdf42b8531b9cc8[m
Author: Cyril Plisko <cyril.plisko@mountall.com>
Date:   Tue Nov 6 14:39:00 2012 +0200

    Add "-o ashift" to zpool add and zpool attach
    
    When adding devices to an existing pool "ashift" property is
    auto-detected.  However, if this property was overridden at
    the pool creation time (i.e. zpool create -o ashift=12 tank ...)
    this may not be what the user wants.  This commit lets the user
    specify the value of "ashift" property to be used with newly
    added drives. For example,
    
        zpool add -o ashift=12 tank disk1
        zpool attach -o ashift=12 tank disk1 disk2
    
    Signed-off-by: Cyril Plisko <cyril.plisko@mountall.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #566

[33mcommit 2404b01499019f6a8589cec79201b8871ec48081[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sun Sep 2 16:34:12 2012 -0700

    Improve AF hard disk detection
    
    Use the bdev_physical_block_size() interface to determine the
    minimize write size which can be issued without incurring a
    read-modify-write operation.  This is used to set the ashift
    correctly to prevent a performance penalty when using AF hard
    disks.
    
    Unfortunately, this interface isn't entirely reliable because
    it's not uncommon for disks to misreport this value.  For this
    reason you may still need to manually set your ashift with:
    
      zpool create -o ashift=12 ...
    
    The solution to this in the upstream Illumos source was to add
    a white list of known offending drives.  Maintaining such a list
    will be a burden, but it still may be worth doing if we can
    detect a large number of these drives.  This should be considered
    as future work.
    
    Reported-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #916

[33mcommit 32a9872bbae90a7cd9793c371f558701ec268976[m
Author: George Wilson <gwilson@delphix.com>
Date:   Thu May 3 05:49:19 2012 -0700

    Illumos #2671: zpool import should not fail if vdev ashift has increased
    
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Reviewed by: Richard Elling <richard.elling@richardelling.com>
    Reviewed by: Gordon Ross <gwr@nexenta.com>
    Reviewed by: Garrett D'Amore <garrett@damore.org>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    Refererces to Illumos issue:
          https://www.illumos.org/issues/2671
    
    This patch has been slightly modified from the upstream Illumos
    version.  In the upstream implementation a warning message is
    logged to the console.  To prevent pointless console noise this
    notification is now posted as a "ereport.fs.zfs.vdev.bad_ashift"
    event.
    
    The event indicates a non-optimial (but entirely safe) ashift
    value was used to create the pool.  Depending on your workload
    this may impact pool performance.  Unfortunately, the only way
    to correct the issue is to recreate the pool with a new ashift.
    
    NOTE: The unrelated fix to the comment in zpool_main.c appears
    in the upstream commit and was preserved for consistnecy.
    
    Ported-by: Cyril Plisko <cyril.plisko@mountall.com>
    Reworked-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #955

[33mcommit 3997bc74351d608e1a09f8ba8d58fb1c12fff331[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Nov 13 14:35:44 2012 -0800

    zfs-0.6.0-rc12

[33mcommit 2af96a5df53cfc281dc5c5f72eac5bb2b1739733[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Mon Nov 12 12:34:45 2012 -0500

    Fix hard coded path in 60-vdev.rules.in
    
    The udev data directory was hard coded in 60-vdev.rules.in. That causes
    a problem when a distribution changes the location of the directory.
    This was not an issue in the past because virtually all distributions
    used the same path, but that is beginning to change following a decision
    by the systemd developers to change the directory location to reflect
    their take-over of udev maintainership. The testing branch of Gentoo
    Linux adopted this change, which enabled the hardcoded directory
    location to trigger a regression.
    
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1085

[33mcommit 4c837f0d931546e656b832caf11b8d4c2063d905[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Oct 31 10:06:34 2012 -0700

    Fix "allocating allocated segment" panic
    
    Gunnar Beutner did all the hard work on this one by correctly
    identifying that this issue is a race between dmu_sync() and
    dbuf_dirty().
    
    Now in all cases the caller is responsible for preventing this
    race by making sure the zfs_range_lock() is held when dirtying
    a buffer which may be referenced in a log record.  The mmap
    case which relies on zfs_putpage() was not taking the range
    lock.  This code was accidentally dropped when the function
    was rewritten for the Linux VFS.
    
    This patch adds the required range locking to zfs_putpage().
    
    It also adds the missing ZFS_ENTER()/ZFS_EXIT() macros which
    aren't strictly required due to the VFS holding a reference.
    However, this makes the code more consistent with the upsteam
    code and there's no harm in being extra careful here.
    
    Original-patch-by: Gunnar Beutner <gunnar@beutner.name>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #541

[33mcommit e26ade5101ba1d8e8350ff1270bfca4258e1ffe3[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Nov 8 14:18:22 2012 -0800

    Fix zvol+btrfs hang
    
    When using a zvol to back a btrfs filesystem the btrfs mount
    would hang.  This was due to the bio completion callback used
    in btrfs assuming that lower level drivers would never modify
    the bio->bi_io_vecs after they were submitted via bio_submit().
    If they are modified btrfs will miscalculate which pages need
    to be unlocked resulting in a hang.
    
    It's worth mentioning that other file systems such as ext[234]
    and xfs work fine because they do not make the same assumption
    in the bio completion callback.
    
    The most straight forward way to fix the issue is to present
    the semantics expected by btrfs.  This is done by cloning the
    bios attached to each request and then using the clones bvecs
    to perform the required accounting.  The clones are freed after
    each read/write and the original unmodified bios are linked back
    in to the request.
    
    Signed-off-by: Chris Wedgwood <cw@f00f.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #469

[33mcommit bbf8c748051294b104678f101ba1162632099b07[m
Merge: e8fd45a 9dcb971
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Nov 6 14:44:07 2012 -0800

    Merge remote branch 'eris/stats'
    
    Bring in support for the new KSTAT_TYPE_TXG type.  This allows for
    additional visibility in to the txg handling.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 9dcb97198338ba2d8764dd5604b278118612f74d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Oct 25 13:02:31 2012 -0700

    Log I/Os longer than zio_delay_max (30s default)
    
    There have been reports of ZFS deadlocking due to what appears to
    be a lost IO.  This patch addes some debugging to determine the
    exact state of the IO which neither 1) completed, 2) failed, or
    3) timed out after zio_delay_max (30) seconds.
    
    This information will be logged using the ZFS FMA infrastructure
    as a 'delay' event and posted to the internal zevent log.  By
    default the last 64 events will be kept in the log but the limit
    is configurable via the zfs_zevent_len_max module option.
    
    To dump the contents of the log use the 'zpool events -v' command
    and look for the resource.fs.zfs.delay event.  It will include
    various information about the pool, vdev, and zio which may shed
    some light on the issue.
    
    In the context of this change the 120 second kernel blocked thread
    watchdog has been disabled for synchronous IOs.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #930

[33mcommit e95853a331529a6cb96fdf10476c53441e59f4e1[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Oct 23 13:48:22 2012 -0700

    Add txgs-<pool> kstat file
    
    Create a kstat file which contains useful statistics about the
    last N txgs processed.  This can be helpful when analyzing pool
    performance.  The new KSTAT_TYPE_TXG type was added for this
    purpose and it tracks the following statistics per-txg.
    
      txg          - Unique txg number
      state        - State (O)pen/(Q)uiescing/(S)yncing/(C)ommitted
      birth;       - Creation time
      nread        - Bytes read
      nwritten;    - Bytes written
      reads        - IOPs read
      writes       - IOPs write
      open_time;   - Length in nanoseconds the txg was open
      quiesce_time - Length in nanoseconds the txg was quiescing
      sync_time;   - Length in nanoseconds the txg was syncing
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit e8fd45a0f975c6b8ae8cd644714fc21f14fac2bf[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Oct 26 10:01:49 2012 -0700

    Add ddt_object_count() error handling
    
    The interface for the ddt_zap_count() function assumes it can
    never fail.  However, internally ddt_zap_count() is implemented
    with zap_count() which can potentially fail.  Now because there
    was no way to return the error to the caller a VERIFY was used
    to ensure this case never happens.
    
    Unfortunately, it has been observed that pools can be damaged in
    such a way that zap_count() fails.  The result is that the pool can
    not be imported without hitting the VERIFY and crashing the system.
    
    This patch reworks ddt_object_count() so the error can be safely
    caught and returned to the caller.  This allows a pool which has
    be damaged in this way to be safely rewound for import.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #910

[33mcommit 178e73b376297be44253f7655cd8cba3cf082171[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Oct 24 15:22:31 2012 -0700

    Revert "Don't ashift-align vdev read requests."
    
    This reverts commit a5c20e2a0a9046c06d86615fbf51dc04f12bba14 which
    accidentally introduced a regression for real 4k sector devices.
    See issue #1065 for details.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1065

[33mcommit f21e5c6a17ee7c1a27fdcb93d29d8b7b5a158053[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Oct 22 10:07:24 2012 -0700

    Remove 'Resized bio's/dio' warning
    
    The following warning was originally added to provide visibility
    in to how often a dio gets heavily fragmented in to over 16 bios.
    This can happen due to constraints imposed by the block device
    and may have a negitive impact on performance but is otherwise
    harmless.  To prevent needless confusion and worry the message
    has been removed.
    
      kernel: WARNING: Resized bio's/dio to 32
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 30b937ee15589126b4e4576d09d664b93897fc25[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Oct 18 21:36:07 2012 -0700

    Update spare and cache device names on import
    
    During 'zpool import' all ZPOOL_CONFIG_PATH names are supposed
    to be updated by fix_paths().  This was not happening for spare
    and cache devices because the proper names were getting filtered
    out of the pool_list_t->names.  Interestingly, the names were
    being filtered because the spare and cache devices do not
    contain the pool name in their vdev label.
    
    The fix is to exclude the device path from the list only if:
    
      1) has a valid ZPOOL_CONFIG_POOL_NAME key in the label, and
      2) that pool name does not match the specified pool name.
    
    Since the label is valid and because it does properly store the
    vdev guid it will be correctly assembled without the pool name.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #725

[33mcommit eac4720465e54c86ae814667985c8a013ec45b85[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Oct 17 16:58:54 2012 -0700

    Allow 'zpool replace' to use short device names
    
    The 'zpool replace' command would fail when given a short name
    because unlike on other platforms the short name cannot be
    deterministically expanded to a single path.  Multiple path
    prefixes must be checked and in addition the partition suffix
    for whole disks is determined by the prefix.
    
    To handle this complexity a zfs_strcmp_pathname() function was
    added which takes either a short or fully qualified device name.
    Short names will be expanded using the prefixes in the default
    import search path, or the ZPOOL_IMPORT_PATH environment variable
    if it's defined.  All posible expansions are then compared against
    the comparison path.  Care is taken to strip redundant slashes to
    ensure legitimate matches are not missed.
    
    In the context of this work the existing zfs_resolve_shortname()
    function was extended to consider the ZPOOL_IMPORT_PATH when set.
    The zfs_append_partition() interface was also simplified to take
    only a single buffer.
    
    The vast majority of these changes rework existing Linux specific
    code which was originally written to accomidate udev.  However,
    there is some minimal cleanup which removes Illumos specific code.
    This was done to improve readability but the basic flow and intent
    of the upstream code was maintained.
    
    These changes are the logical conclusion of the previos work to
    adjust the 'zpool import' search behavior, see commit 44867b6a.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #544
    Closes #976

[33mcommit c7dfc086297b6e7768e94d1eef3afaa58beeb5ec[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Oct 17 13:23:09 2012 -0700

    Quote snapshot and mountpoint for .zfs automount
    
    When automounting a snapshot in the .zfs/snapshot directory
    make sure to quote both the dataset name and the mount point.
    This ensures that if either component contains spaces, which
    are allowed, they get handled correctly.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1027

[33mcommit 658a0140f3d27f04fb789f5a0fe8ea00773a210a[m
Merge: 82f4673 5d7a86d
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Oct 17 08:57:14 2012 -0700

    Merge branch 'zil-performance'
    
    This brnach brings some ZIL performance optimizations, with
    significant increases in synchronous write performance for
    some workloads and pool configurations.
    
    See the individual commit messages for details.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1013

[33mcommit 5d7a86d114c2706a8d14d94b71f81ad5cdf066c5[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Thu Jun 28 12:30:07 2012 +0200

    Use the slog even with logbias=throughput.
    
    In the current code, logbias=throughput implies the following:
     1) All synchronous writes are logged in indirect mode.
     2) The slog is not used.
    
    (1) makes sense because it avoids writing the data twice, which is
    obviously a good thing when the user wants maximum pool throughput.
    
    (2), however, is a surprising decision. Considering all writes are
    indirect, the log record doesn't contain the actual data, only pointers
    to DMU blocks. As a result, log records written in logbias=throughput
    mode are quite small, and as such, it doesn't make any sense to write
    them to the main pool since slogs are usually optimized for small
    synchronous writes.
    
    In fact, the current behavior is actually harmful for performance,
    because log blocks and data blocks from dmu_sync() seldom have the same
    allocation size and as a result are usually allocated from different
    metaslabs. This means that if a spindle has to write both log blocks and
    DMU blocks (which is likely to happen under heavy load), it will have to
    seek between the two. Allocating the log blocks from the slog pool
    instead of the main pool avoids these unnecessary seeks.
    
    This commit makes ZFS use the slog on datasets with logbias=throughput.
    Real-life performance testing shows a 50% synchronous write performance
    increase with some large commit sizes, and no negative effect in other
    cases.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1013

[33mcommit 920dd524fb2997225d4b1ac180bcbc14b045fda6[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Wed Jun 27 15:20:20 2012 +0200

    Add FASTWRITE algorithm for synchronous writes.
    
    Currently, ZIL blocks are spread over vdevs using hint block pointers
    managed by the ZIL commit code and passed to metaslab_alloc(). Spreading
    log blocks accross vdevs is important for performance: indeed, using
    mutliple disks in parallel decreases the ZIL commit latency, which is
    the main performance metric for synchronous writes. However, the current
    implementation suffers from the following issues:
    
    1) It would be best if the ZIL module was not aware of such low-level
    details. They should be handled by the ZIO and metaslab modules;
    
    2) Because the hint block pointer is managed per log, simultaneous
    commits from multiple logs might use the same vdevs at the same time,
    which is inefficient;
    
    3) Because dmu_write() does not honor the block pointer hint, indirect
    writes are not spread.
    
    The naive solution of rotating the metaslab rotor each time a block is
    allocated for the ZIL or dmu_sync() doesn't work in practice because the
    first ZIL block to be written is actually allocated during the previous
    commit. Consequently, when metaslab_alloc() decides the vdev for this
    block, it will do so while a bunch of other allocations are happening at
    the same time (from dmu_sync() and other ZILs). This means the vdev for
    this block is chosen more or less at random. When the next commit
    happens, there is a high chance (especially when the number of blocks
    per commit is slightly less than the number of the disks) that one disk
    will have to write two blocks (with a potential seek) while other disks
    are sitting idle, which defeats spreading and increases the commit
    latency.
    
    This commit introduces a new concept in the metaslab allocator:
    fastwrites. Basically, each top-level vdev maintains a counter
    indicating the number of synchronous writes (from dmu_sync() and the
    ZIL) which have been allocated but not yet completed. When the metaslab
    is called with the FASTWRITE flag, it will choose the vdev with the
    least amount of pending synchronous writes. If there are multiple vdevs
    with the same value, the first matching vdev (starting from the rotor)
    is used. Once metaslab_alloc() has decided which vdev the block is
    allocated to, it updates the fastwrite counter for this vdev.
    
    The rationale goes like this: when an allocation is done with
    FASTWRITE, it "reserves" the vdev until the data is written. Until then,
    all future allocations will naturally avoid this vdev, even after a full
    rotation of the rotor. As a result, pending synchronous writes at a
    given point in time will be nicely spread over all vdevs. This contrasts
    with the previous algorithm, which is based on the implicit assumption
    that blocks are written instantaneously after they're allocated.
    
    metaslab_fastwrite_mark() and metaslab_fastwrite_unmark() are used to
    manually increase or decrease fastwrite counters, respectively. They
    should be used with caution, as there is no per-BP tracking of fastwrite
    information, so leaks and "double-unmarks" are possible. There is,
    however, an assert in the vdev teardown code which will fire if the
    fastwrite counters are not zero when the pool is exported or the vdev
    removed. Note that as stated above, marking is also done implictly by
    metaslab_alloc().
    
    ZIO also got a new FASTWRITE flag; when it is used, ZIO will pass it to
    the metaslab when allocating (assuming ZIO does the allocation, which is
    only true in the case of dmu_sync). This flag will also trigger an
    unmark when zio_done() fires.
    
    A side-effect of the new algorithm is that when a ZIL stops being used,
    its last block can stay in the pending state (allocated but not yet
    written) for a long time, polluting the fastwrite counters. To avoid
    that, I've implemented a somewhat crude but working solution which
    unmarks these pending blocks in zil_sync(), thus guaranteeing that
    linguering fastwrites will get pruned at each sync event.
    
    The best performance improvements are observed with pools using a large
    number of top-level vdevs and heavy synchronous write workflows
    (especially indirect writes and concurrent writes from multiple ZILs).
    Real-life testing shows a 200% to 300% performance increase with
    indirect writes and various commit sizes.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1013

[33mcommit 142e6dd100eb70ef06f39015a2e54cbd74172f8b[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Wed Jun 27 10:26:49 2012 +0200

    Add atomic_sub_* functions to libspl.
    
    Both the SPL and the ZFS libspl export most of the atomic_* functions,
    except atomic_sub_* functions which are only exported by the SPL, not by
    libspl. This patch remedies that by implementing atomic_sub_* functions
    in libspl.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1013

[33mcommit 82f46731fd5a9eef4f87530e94922664b58a6138[m
Merge: 6cb7ab0 a298dbd
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Oct 17 08:47:07 2012 -0700

    Merge branch 'condvar'
    
    Auditing the code to verify that all instances of cv_signal() and
    cv_broadcast() are called under the proper associated mutex turned
    up several races. None of these have been conclusively seen in the
    wild but the following patch set resolves them.
    
    For reference, from the cv_signal(9F) man page:
    
      cv_signal() signals the condition and wakes one blocked thread.
      All blocked threads can be unblocked by calling cv_broadcast().
      You must acquire the mutex passed into cv_wait() before calling
      cv_signal() or cv_broadcast()
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1048

[33mcommit a298dbde92c68022a06ef51f2bb559b0975e4920[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Oct 15 13:41:44 2012 -0700

    Condition variable usage, zp->r_{rd,wr}_cv
    
    The following incorrect usage of cv_broadcast() was caught by
    code inspection.  The cv_broadcast() function must be called
    under the associated mutex to preventing racing with cv_wait().
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 8c0712fd88d3cf60dc9db5392b005583d540dc69[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Oct 15 13:40:07 2012 -0700

    Condition variable usage, zilog->zl_cv_batch
    
    The following incorrect usage of cv_signal and cv_broadcast()
    was caught by code inspection.  The cv_signal and cv_broadcast()
    functions must be called under the associated mutex to preventing
    racing with cv_wait().
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 99db9bfde70440475a37c0e1b985efbec4850a8c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Oct 15 13:36:26 2012 -0700

    Condition variable usage, zevent_cv
    
    The following incorrect usage of cv_broadcast() was caught by
    code inspection.  The cv_broadcast() function must be called
    under the associated mutex to preventing racing with cv_wait().
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 6cb7ab069d9079a5b4b955da883d5ab804c91319[m
Author: Andrew Reid <ColdCanuck@nailedtotheperch.com>
Date:   Sat Oct 13 12:03:59 2012 -0300

    Do not return /dev/loop-control in unused_loop_device
    
    The function unused_loop_device in /usr/libexec/zfs/common.sh
    returns /dev/loop-control on the first call. This device is NOT
    a loop device (https://github.com/torvalds/linux/commit/770fe30)
    it is a control device. This in turn causes the script zconfig.sh
    to fail with:
    
      zpool-create.sh: Error 1 creating /tmp/zpool-vdev0 ->
      /dev/loop-control loopback
    
    The patch makes the function return /dev/loop[0-9]* which are
    loop devices.
    
    Signed-off-by: Andrew Reid <ColdCanuck@nailedtotheperch.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #797

[33mcommit 6f53a6a2299688b092f8183354a4cc159e3eed20[m
Author: Massimo Maggi <massimo@mmmm.it>
Date:   Fri Oct 12 00:55:42 2012 +0200

    Switch KM_SLEEP to KM_PUSHPAGE
    
    In this particular instance the allocation occurred in the context
    of sys_msync()->...->zpl_putpage() where we must be careful not to
    initiate additional I/O.
    
    Signed-off-by: Massimo Maggi <massimo@mmmm.it>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1038

[33mcommit c418410393325eb01be5b6cc5ff0e6e8aa24af93[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Oct 15 09:27:48 2012 -0700

    Limit zfs_vdev_aggregation_limit to SPA_MAXBLOCKSIZE
    
    Prevent users from setting the zfs_vdev_aggregation_limit tuning
    larger than SPA_MAXBLOCKSIZE.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #520

[33mcommit 45ca2d91cb14bcbe7a06eea6e6d24ae71f1c54bf[m
Author: Yuxuan Shui <yshuiv7@gmail.com>
Date:   Sun Oct 14 17:01:26 2012 +0800

    Return positive error number in zfsctl_shares_lookup.
    
    Otherwise it will cause zpl_shares_lookup() to return a invalid
    pointer when an error occurs.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Yuxuan Shui <yshuiv7@gmail.com>
    Closes #626 #885 #947 #977

[33mcommit 26099167e6b39d719ade3be2b5e087e29f1121cd[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sun Oct 14 19:21:49 2012 -0700

    Disable ztest deadman timer
    
    The ztest deadman timer has been causing false positives in the
    testing VMs.  To make it easier to spot possible regressions
    I'm disabling this timer.  The buildbot test infrastructure
    will still mark ztest instances which take to long to complete
    as failures.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #1018

[33mcommit ee7913b644a2c812a249046f56eed39d1977d706[m
Merge: a5c20e2 95f5c63
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sun Oct 14 16:27:22 2012 -0700

    Merge branch 'linux-3.6'
    
    This branch adds the required compatibility code to support the
    Linux 3.6 kernel.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #873

[33mcommit 95f5c63b47d8f8294b38843f9ba710e97b749b63[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Thu Aug 16 19:31:54 2012 -0400

    Linux 3.6 compat, iops->mkdir()
    
    Use .mkdir instead of .create in 3.3 compatibility check.  Linux 3.6
    modifies inode_operations->create's function prototype. This causes
    an autotools Linux 3.3. compatibility check for a function prototype
    change in create, mkdir and mknode to fail. Since mkdir and mknode
    are unchanged, we modify the check to examine it instead.
    
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #873

[33mcommit 558ef6d0805457654938dbe56c9a19b0121a712d[m
Author: Yuxuan Shui <yshuiv7@gmail.com>
Date:   Fri Oct 12 23:20:58 2012 +0800

    Linux 3.6 compat, iops->create()
    
    As of Linux commit ebfc3b49a7ac25920cb5be5445f602e51d2ea559 the
    struct nameidata is no longer passed to iops->create.  Instead
    only the result of (inamedata->flags & LOOKUP_EXCL) is passed.
    
    ZFS like almost all Linux fileystems never made use of this so
    only the prototype needs to be wrapped for compatibility.
    
    Signed-off-by: Yuxuan Shui <yshuiv7@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #873

[33mcommit 8f195a908ffaa8faf8f4c8a0e701e44ae3859e33[m
Author: Yuxuan Shui <yshuiv7@gmail.com>
Date:   Fri Oct 12 22:41:06 2012 +0800

    Linux 3.6 compat, iops->lookup()
    
    As of Linux commit 00cd8dd3bf95f2cc8435b4cac01d9995635c6d0b the
    struct nameidata is no longer passed to iops->lookup.  Instead
    only the inamedata->flags are passed.
    
    ZFS like almost all Linux fileystems never made use of this so
    only the prototype needs to be wrapped for compatibility.
    
    Signed-off-by: Yuxuan Shui <yshuiv7@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #873

[33mcommit 3c203610756f98f275c7c9f731d67a38b1111509[m
Author: Yuxuan Shui <yshuiv7@gmail.com>
Date:   Fri Oct 12 21:40:53 2012 +0800

    Linux 3.6 compat, sget()
    
    As of Linux commit 9249e17fe094d853d1ef7475dd559a2cc7e23d42 the
    mount flags are now passed to sget() so they can be used when
    initializing a new superblock.
    
    ZFS never uses sget() in this fashion so we can simply pass a
    zero and add a zpl_sget() compatibility wrapper.
    
    Signed-off-by: Yuxuan Shui <yshuiv7@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #873

[33mcommit af26c4d4ab545767456d8c21ed48e9e01ce6a3e7[m
Author: Yuxuan Shui <yshuiv7@gmail.com>
Date:   Sat Oct 13 18:44:15 2012 -0700

    Linux 3.6 compat, sops->write_super() removed
    
    The .write_super callback was removed the the super_operations
    structure by Linux commit f0cd2dbb6cf387c11f87265462e370bb5469299e.
    All file systems are now expected to self manage writing any dirty
    state assoicated with their super block.
    
    ZFS never made use of this callback so it can simply be removed
    from the super_operations structure.
    
    Signed-off-by: Yuxuan Shui <yshuiv7@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #873

[33mcommit a5c20e2a0a9046c06d86615fbf51dc04f12bba14[m
Author: Etienne Dechamps <e-t172@akegroup.org>
Date:   Sun Oct 7 21:30:23 2012 +0200

    Don't ashift-align vdev read requests.
    
    Currently, the size of read and write requests on vdevs is aligned
    according to the vdev's ashift, allocating a new ZIO buffer and padding
    if need be.
    
    This makes sense for write requests to prevent read/modify/write if the
    write happens to be smaller than the device's internal block size.
    
    For reads however, the rationale is less clear. It seems that the
    original code aligns reads because, on Solaris, device drivers will
    outright refuse unaligned requests.
    
    We don't have that issue on Linux. Indeed, Linux block devices are able
    to accept requests of any size, and take care of alignment issues
    themselves.
    
    As a result, there's no point in enforcing alignment for read requests
    on Linux. This is a nice optimization opportunity for two reasons:
    - We remove a memory allocation in a heavily-used code path;
    - The request gets aligned in the lowest layer possible, which shrinks
      the path that the additional, useless padding data has to travel.
      For example, when using 4k-sector drives that lie about their sector
      size, using 512b read requests instead of 4k means that there will
      be less data traveling down the ATA/SCSI interface, even though the
      drive actually reads 4k from the platter.
    
    The only exception is raidz, because raidz needs to read the whole
    allocated block for parity.
    
    This patch removes alignment enforcement for read requests, except on
    raidz. Note that we also remove an assertion that checks that we're
    aligning a top-level vdev I/O, because that's not the case anymore for
    repair writes that results from failed reads.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1022

[33mcommit b68503fb30dfed0823b1fe7d547d82c3df04d187[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Thu Oct 11 15:51:25 2012 -0700

    Remove vmem_size() consumers
    
    There are currently three vmem_size() consumers all of which are
    part of the ARC implemention.  However, since the expected behavior
    of the Linux and Solaris virtual memory subsystems are so different
    the behavior in each of these instances needs to be reevaluated.
    
    * arc_evict_needed() - This is actually dead code.  Arena support
    was never added to the SPL and zio_arena is always NULL.  This
    support isn't needed so we simply remove this dead code.
    
    * arc_memory_throttle() - On Solaris where virtual memory constitutes
    almost all of the address space we can reasonably expect there to be
    a fairly large amount free.  However, on Linux by default we only
    have about 100MB total and that's heavily used by the ARC.  So the
    expectation on Linux is that this will usually be a small value.
    Therefore we remove the vmem_size() check for i386 systems because
    the expectation is that it will be less than the zfs_write_limit_max.
    
    * arc_init() - Here vmem_size() is used to initially size the ARC.
    Since the ARC is currently backed by the virtual address space it
    makes sense to use this as a limit on the ARC for 32-bit systems.
    This code can be removed when the ARC is backed by the page cache.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #831

[33mcommit 87d98efe9ea7dd1e464f38fc5e39f0d08191d3be[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Oct 11 13:56:32 2012 -0700

    Fix zfs_txg_timeout module parameter
    
    Allow the zfs_txg_timeout variable to be dynamically tuned at run
    time.  By pulling it down out of the variable declaration it will
    be evaluted each time through the loop.
    
    The zfs_txg_timeout variable is now declared extern in a the common
    sys/txg.h header rather than locally in dsl_scan.c.  This prevents
    potential type mismatches if the global variable needs to be used
    elsewhere.
    
    Move the module_param() code in to the same source file where
    zfs_txg_timeout is declared.  This is the most logical location.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 7df05a4266fe8549cedb9a2d71bb8bff6ab11112[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Wed Oct 10 23:57:45 2012 -0400

    Fix zfs_write_limit_max integer size mismatch on 32-bit systems
    
    Commit c409e4647f221ab724a0bd10c480ac95447203c3 introduced a
    number of module parameters.  This required several types to be
    changed to accomidate the required module parameters Linux macros.
    
    Unfortunately, arc.c contained its own extern definition of the
    zfs_write_limit_max variable and its type was not updated to be
    consistent with its dsl_pool.c counterpart.  If the variable had
    been properly marked extern in a common header, then gcc would
    have generated a warning and this would not have slipped through.
    
    The result of this was that the ARC unconditionally expected
    zfs_write_limit_max to be 64-bit. Unfortunately, the largest size
    integer module parameter that Linux supports is unsigned long, which
    varies in size depending on the host system's native word size. The
    effect was that on 32-bit systems, ARC incorrectly performed 64-bit
    operations on a 32-bit value by reading the neighboring 32 bits as
    the upper 32 bits of the 64-bit value.
    
    We correct that by changing the extern declaration to use the unsigned
    long type and move these extern definitions in to the common arc.h
    header. This should make ARC correctly treat zfs_write_limit_max as a
    32-bit value on 32-bit systems.
    
    Reported-by: Jorgen Lundman <lundman@lundman.net>
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #749

[33mcommit 15fd274973be58f2851bf9d8e8d913b4c10151a6[m
Author: Cyril Plisko <cyril.plisko@mountall.com>
Date:   Mon Oct 8 20:02:20 2012 +0200

    Make zfs_immediate_write_sz a module paramater
    
    zfs_immediate_write_sz variable is a tunable, but lacks proper
    module_param() instrumentation.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1032

[33mcommit 5b7e5b5ab980ecfce7381820a1b952dc1af5a7bb[m
Author: Cyril Plisko <cyril.plisko@mountall.com>
Date:   Tue Oct 9 05:58:35 2012 +0200

    txg is spelled as tgx in places
    
    Term 'transaction group' is commonly abbreviated as txg in ZFS sources.
    There are some places (Linux specific MODULE_PARAM_DESC() macros)
    where it is incorrectly spelled as 'tgx'.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1030

[33mcommit c8f259182d72f8ded5b9fbc4198f41782a7cbf77[m
Author: KORN Andras <korn@elan.rulez.org>
Date:   Tue Oct 9 10:26:38 2012 +0200

    zfs.8: add missing info about dedup, mlslabel
    
    These sections were missing from the `zfs.8` man page.  Add them.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1026

[33mcommit beb999445adaa6d794f0d706ca8a0c835cb1468c[m
Author: Massimo Maggi <massimo@mmmm.it>
Date:   Sun Oct 7 21:54:06 2012 +0200

    Switch KM_SLEEP to KM_PUSHPAGE
    
    Prevent snapshot_check to initiate I/O during memory allocation.
    
    Signed-off-by: Massimo Maggi <massimo@mmmm.it>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1023

[33mcommit 7bd04f2d7d99780f190d4027e6e81fc0df11ba95[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Oct 5 10:39:35 2012 -0700

    Set default zvol elevator to noop
    
    It doesn't make sense for a zvol to use the default system I/O
    scheduler because it is a virtual device.  Therefore, we change
    the default scheduler to 'noop' for zvols provided that the
    elevator_change() function is available.  This interface has
    been available since Linux 2.6.36 and appears in the RHEL 6.x
    kernels.
    
    We deliberately do not implement the method for older kernels
    because it was racy and could result in system crashes.  It's
    better to simply manually tune the scheduler for these kernels.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1017

[33mcommit 089fa91bc51dc10da5a75a6d9fff77f186fccb23[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Thu Oct 4 10:38:55 2012 +0200

    Align DISCARD requests on zvols.
    
    Currently, when processing DISCARD requests, zvol_discard() calls
    dmu_free_long_range() with the precise offset and size of the request.
    
    Unfortunately, this is not optimal for requests that are not aligned to
    the zvol block boundaries. Indeed, in the case of an unaligned range,
    dnode_free_range() will zero out the unaligned parts. Not only is this
    useless since we are not freeing any space by doing so, it is also slow
    because it translates to a read-modify-write operation.
    
    This patch fixes the issue by rounding up the discard start offset to
    the next volume block boundary, and rounding down the discard end
    offset to the previous volume block boundary.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1010

[33mcommit 31ab19429787d04d2291851b8178bcee817c15ca[m
Merge: d75d6f2 ae380cf
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Oct 4 14:37:53 2012 -0700

    Merge branch 'illumos-ztest'
    
    This branch is a port of the ztest backwards compatibility
    testing option.  It includes the original upstream Illumos
    patch plus several followup patches to address concerns in
    the original change.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit ae380cfa76e4d61bc6373b6b4e97bc3cac0a3a6e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Oct 4 12:54:47 2012 -0700

    Realpath arg 2 must be a minimum of PATH_MAX
    
    The realpath(3) function expects that when a buffer is passed
    for the 'resolved_path' that it be at least PATH_MAX in length.
    If it's not a buffer overflow may occur.
    
    Therefore the passed buffer size is changed from MAXNAMELEN to
    MAXPATHLEN.  We also take this opertunity to dynamically allocate
    the buffer to keep it off the stack.
    
      warning: call to '__realpath_chk_warn' declared with attribute
      warning: second argument of realpath must be either NULL or at
      least PATH_MAX bytes long buffer [enabled by default]
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 5be98cfe2fd81145c9c16ddbe3b4d7d52f687157[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Oct 4 12:30:16 2012 -0700

    Verify the return value for warn_unused_result functions
    
    Under Linux the following functions are flagged with the
    attribute warn_unused_result, this triggers a warning when
    ever they are used without checking the return value.
    
    To handle this case we check the result VERIFY().  It's
    better to detect this immediately on failure rather than
    segfault farther down in the function.
    
      ../../cmd/ztest/ztest.c:6033:2: warning:
      ignoring return value of 'asprintf', declared with
      attribute warn_unused_result [-Wunused-result]
      ../../cmd/ztest/ztest.c:739:3: warning:
      ignoring return value of 'realpath', declared with
      attribute warn_unused_result [-Wunused-result]
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit facbbe436670b4910475fb937a26468f7178b541[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Oct 4 11:36:52 2012 -0700

    Replace tempnam() with mkstemp()
    
    The use of tempnam() is racy and it should be avoided in favor of
    mkstemp().  According to the Linux tempnam(3) man page.
    
      "Although tempnam() generates names that are difficult to guess,
      it is nevertheless possible that between the time that tempnam()
      returns a pathname, and the time that the program opens it, another
      program might create that pathname using open(2), or create it as
      a symbolic link.  This can lead to security holes.  To avoid such
      possibilities, use the open(2) O_EXCL flag to open the  pathname.
      Or better yet, use mkstemp(3) or tmpfile(3)."
    
    This issue was flagged by gcc.
    
      ztest.o: In function `setup_data_fd': cmd/ztest/ztest.c:5822:
      warning: the use of `tempnam' is dangerous, better use `mkstemp'
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 483106eb71b1886c824951b3a35d89d47d41405e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Oct 4 11:14:04 2012 -0700

    Minimize ztest stack frame size
    
    To ensure ztest behaves as similarly as possible to the kernel
    implementation of ZFS we attempt to honor the kernel stack limits.
    This includes keeping the individual stack frame sizes under 1K
    in size.  We currently use gcc to detect and enforce this limit.
    
    Therefore to get this building cleanly with full debugging enabled
    the stack usage in the following functions has been reduced by
    moving the buffer to the heap.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 9d81146b015e8f4f611357c4cef17fbfb2f4bd54[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Thu Oct 4 16:09:12 2012 +0200

    Use dynamic file descriptor numbers in ztest.
    
    Currently, ztest expects to get 3 and 4 as the file descriptors for
    data and random files, respectively. This is quite fragile and breaks
    easily if ztest is run with these file descriptors already opened
    (e.g. in a complex shell script).
    
    This patch fixes the issue by removing the assumptions on the file
    descriptor numbers that open() returns.
    
    For the random file (/dev/urandom), the new code doesn't rely on a
    shared file descriptor; instead, it reopens the file in the child.
    
    For the data file, the new code writes the file descriptor number into
    a "ZTEST_FD_DATA" environment variable so that it can be recovered
    after the execv() call.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 22257dc0d5582035347320130e9ee03b33dffb6f[m
Author: Christopher Siden <chris.siden@delphix.com>
Date:   Mon May 21 12:11:39 2012 -0700

    Fix mmap() usage in ztest.
    
    illumos/illumos-gate@ad135b5d644628e791c3188a6ecbd9c257961ef8
    Illumos changeset: 13700:2889e2596bd6
    
    Note that this is only a partial port of the aforementioned Illumos
    changeset.
    
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <gwilson@delphix.com>
    Reviewed by: Richard Lowe <richlowe@richlowe.net>
    Reviewed by: Dan Kruchinin <dan.kruchinin@gmail.com>
    Approved by: Eric Schrock <Eric.Schrock@delphix.com>
    
    Ported to zfsonlinux by: Etienne Dechamps <etienne.dechamps@ovh.net>

[33mcommit c242c188fd7df8ecdb793a3d12ed584cbe3ff424[m
Author: Chris Siden <chris.siden@delphix.com>
Date:   Mon Jan 23 18:43:32 2012 -0800

    Illumos #1950: ztest backwards compatibility testing option.
    
    illumos/illumos-gate@420dfc9585ff67e83ee7800a7ad2ebe1a9145983
    Illumos changeset: 13571:a5771a96228c
    
    1950 ztest backwards compatibility testing option
    
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Matt Ahrens <matt@delphix.com>
    Reviewed by: Richard Lowe <richlowe@richlowe.net>
    Reviewed by: Robert Mustacchi <rm@joyent.com>
    Approved by: Eric Schrock <eric.schrock@delphix.com>
    
    Ported-by: Etienne Dechamps <etienne.dechamps@ovh.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit d75d6f294e0e011e53913803db70f8096f5fd630[m
Author: Chris Dunlop <chris@onthe.net.au>
Date:   Thu Oct 4 16:19:17 2012 +1000

    Switch KM_SLEEP to KM_PUSHPAGE
    
    This warning indicates the incorrect use of KM_SLEEP in a call
    path which must use KM_PUSHPAGE to avoid deadlocking in direct
    reclaim.  See commit b8d06fc for additional details.
    
      SPL: Fixing allocation for task txg_sync (6093) which
      used GFP flags 0x297bda7c with PF_NOFS set
    
    Signed-off-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #1002

[33mcommit 04434775b7f3aa55fbbcf2064cfb9f5f5c436e64[m
Author: Matthew Ahrens <mahrens@delphix.com>
Date:   Fri Aug 24 07:12:46 2012 -0700

    Illumos #3100: zvol rename fails with EBUSY when dirty.
    
    illumos/illumos-gate@2e2c135528b3edfe9aaf67d1f004dc0202fa1a54
    Illumos changeset: 13780:6da32a929222
    
    3100 zvol rename fails with EBUSY when dirty
    
    Reviewed by: Christopher Siden <chris.siden@delphix.com>
    Reviewed by: Adam H. Leventhal <ahl@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Garrett D'Amore <garrett@damore.org>
    Approved by: Eric Schrock <eric.schrock@delphix.com>
    
    Ported-by: Etienne Dechamps <etienne.dechamps@ovh.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #995

[33mcommit 0677cb6f52a1df13976fa144e46f07af2f48b6b9[m
Author: Richard Lowe <richlowe@richlowe.net>
Date:   Thu Aug 16 13:08:53 2012 -0400

    Illumos #2399: zfs manual page does not document use of "zfs diff".
    
    illumos/illumos-gate@3b8be6bf4fd2c744dfb8b5ce2a6c85ad0a2c8f75
    Illumos changeset: 13773:00c2a08cf1bb
    
    2399 zfs manual page does not document use of "zfs diff"
    
    Reviewed by: Joshua M. Clulow <josh@sysmgr.org>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Reviewed by: Yuri Pankov <yuri.pankov@nexenta.com>
    Reviewed by: Dan McDonald <danmcd@nexenta.com>
    Approved by: Robert Mustacchi <rm@joyent.com>
    
    Ported-by: Etienne Dechamps <etienne.dechamps@ovh.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #940

[33mcommit 65947351e71bec2ec5673bf0c3ad02f2c2b96b6c[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Sat Sep 1 16:44:00 2012 -0400

    Illumos #3129, #3130
    
    illumos/illumos-gate@d6afdce20f8481c95471dd821bc8ec0dbde66213
    Illumos changeset: 13794:7c5e0e746b2c
    
    3129 'zpool reopen' restarts resilvers
    3130 ztest failure: Assertion failed:
         0 == dmu_objset_destroy(name, B_FALSE) (0x0 == 0x10)
    
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Reviewed by: Matt Ahrens <matthew.ahrens@delphix.com>
    Reviewed by: Christopher Siden <chris.siden@delphix.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Approved by: Dan McDonald <danmcd@nexenta.com>
    
    References:
      https://www.illumos.org/issues/3129
      https://www.illumos.org/issues/3130
    
    Ported by: Etienne Dechamps <etienne.dechamps@ovh.net>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #994

[33mcommit d13524579162b35189804c357a63993be758b84c[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Fri Sep 28 15:55:03 2012 +0200

    Temporarily disable the reguid test.
    
    Currently, ztest fails with the following error:
    
        error: Pool 'ztest' has encountered an uncorrectable I/O failure
        and the failure mode property for this pool is set to panic.
    
    We know how to fix it (see issue #939), but it may take some time
    before we get around to merging the fix, which has some heavy
    dependencies.
    
    In the mean time, it is not ideal to be unable to use ztest just
    because of a small isolated issue, so this patch works around the
    problem by disabling the reguid test. This is just a temporary hack to
    keep ztest usable.
    
    The reguid test will be enabled again when the proper fix is merged.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #997

[33mcommit 6aec1cd5a674d7ee9917a75fee9a82fc97cfdf77[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Mon Oct 1 16:34:52 2012 +0200

    Fix ztest vdev file paths.
    
    Currently, in several instances (but not all), ztest generates vdev
    file paths using a statement similar to this:
    
        snprintf(path, sizeof (path), ztest_dev_template, ...);
    
    This worked fine until 40b84e7aec6392187722e61e5a4a853b530bf60f, which
    changed path to be a pointer to the heap instead of an array allocated
    on the stack. Before this change, sizeof(path) would return the size of
    the array; now, it returns the size of the pointer instead.
    
    As a result, the aforementioned sprintf statement uses the wrong size
    and truncates the vdev file path to the first 4 or 8 bytes (depending
    on the architecture). Typically, with default settings, the file path
    will become "/tmp/zt" instead of "/test/ztest.XXX".
    
    This issue only exists in ztest_vdev_attach_detach() and
    ztest_fault_inject(), which explains why ztest doesn't fail right away.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #989

[33mcommit 274091c07482773c7e81cbe70f0b46b4606048d0[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Thu Sep 27 16:05:15 2012 +0200

    Fix VOP_CLOSE() in userspace.
    
    Currently, for unknown reasons, VOP_CLOSE() is a no-op in userspace.
    This causes file descriptor leaks. This is especially problematic with
    long ztest runs, since zpool.cache is opened repeatedly and never
    closed, resulting in resource exhaustion (EMFILE errors).
    
    This patch fixes the issue by making VOP_CLOSE() do what it is supposed
    to do.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #989

[33mcommit 0aebd4f9e3223e8f1e09de7b29bba4f375db840c[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Thu Sep 27 13:31:46 2012 +0200

    Create threads in detached state in userspace.
    
    Currently, thread_create(), when called in userspace, creates a
    joinable (i.e. not detached thread). This is the pthread default.
    
    Unfortunately, this does not reproduce kthreads behavior (kthreads
    are always detached). In addition, this contradicts the original
    Solaris code which creates userspace threads in detached mode.
    
    These joinable threads are never joined, which leads to a leakage of
    pthread thread objects ("zombie threads"). This in turn results in
    excessive ressource consumption, and possible ressource exhaustion in
    extreme cases (e.g. long ztest runs).
    
    This patch fixes the issue by creating userspace threads in detached
    mode. The only exception is ztest worker threads which are meant to be
    joinable.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #989

[33mcommit 6d1d976b2c2c6b80de75a480c998466068066846[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Aug 27 03:38:06 2012 +0700

    Modify vdev_elevator_switch() to use elevator_change()
    
    As of Linux 2.6.36 an elevator_change() interface was added.
    This commit updates vdev_elevator_switch() to use this interface
    when available, otherwise it falls back to the usermodehelper
    method.
    
    Original-patch-by: foobarz <sysop@xeon.(none)>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #906

[33mcommit 2f342404c157f130129784f2592eaadf0930beab[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Thu Sep 20 12:00:50 2012 +0200

    Force 4K blocksize when testing ext2 on zvol.
    
    Currently, mkfs.ext2 on zconfig.sh zvols tries to use a 8K blocksize,
    probably because by default zvol exposes an optimal I/O size of 8K.
    
    Unfortunately, a ext2 blocksize of 8K is not supported by the kernel,
    so the resulting filesystem is unmountable.
    
    This patch fixes the issue by making sure the blocksize is 4K. We have
    to use -F to force it else mkfs.ext2 won't allow us to use a blocksize
    smaller than the optimal I/O size.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #979

[33mcommit 393b44c7112854fc11dc97885a87f666780cc9fe[m
Author: Cyril Plisko <cyril.plisko@mountall.com>
Date:   Sun Sep 16 09:03:04 2012 +0300

    Implement .commit_metadata hook for NFS export
    
    In order to implement synchronous NFS metadata semantics ZFS
    needs to provide the .commit_metadata hook.  All it takes there
    is to make sure changes are committed to ZIL.  Fortunately
    zfs_fsync() does just that, so simply calling it from
    zpl_commit_metadata() does the trick.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #969

[33mcommit 23a61ccc1b89fa5b89b5d8383d57cf5152406cfc[m
Author: Chris Wedgwood <cw@f00f.org>
Date:   Mon Sep 24 10:30:18 2012 -0700

    zvol_probe should return NULL when the device isn't found.
    
    Previously we returned ERR_PTR(-ENOENT) which the rest of the kernel
    doesn't expect and as such we can oops.
    
    Signed-off-by: Chris Wedgwood <cw@f00f.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #949
    Closes #931
    Closes #789
    Closes #743
    Closes #730

[33mcommit 37abac6d559a1da8ab8e5379442f491b73998f6a[m
Author: Bill Pijewski <wdp@joyent.com>
Date:   Wed May 9 15:05:14 2012 -0700

    Illumos #2703: add mechanism to report ZFS send progress
    
    Reviewed by: Matt Ahrens <matt@delphix.com>
    Reviewed by: Robert Mustacchi <rm@joyent.com>
    Reviewed by: Richard Lowe <richlowe@richlowe.net>
    Approved by: Eric Schrock <Eric.Schrock@delphix.com>
    
    References:
      https://www.illumos.org/issues/2703
    
    Ported by: Martin Matuska <martin@matuska.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 1bd201e70d57464fd26bf9089ea4b44fd49e4f2d[m
Author: Chris Siden <chris.siden@delphix.com>
Date:   Mon Jan 23 18:43:32 2012 -0800

    Illumos #1948: zpool list should show more detailed pool info
    
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Matt Ahrens <matt@delphix.com>
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Reviewed by: Richard Lowe <richlowe@richlowe.net>
    Reviewed by: Albert Lee <trisk@nexenta.com>
    Reviewed by: Dan McDonald <danmcd@nexenta.com>
    Reviewed by: Garrett D'Amore <garrett@damore.org>
    Approved by: Eric Schrock <eric.schrock@delphix.com>
    
    References:
      https://www.illumos.org/issues/1948
    
    Ported by:	Martin Matuska <martin@matuska.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #685

[33mcommit 95fd8c9a7f979e4c4941d329e6457cc84a81edfa[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Sep 19 11:50:22 2012 -0700

    Switch KM_SLEEP to KM_PUSHPAGE
    
    This warning indicates the incorrect use of KM_SLEEP in a call
    path which must use KM_PUSHPAGE to avoid deadlocking in direct
    reclaim.  See commit b8d06fca089fae4680c3a552fc55c512bfb02202
    for additional details.
    
      SPL: Fixing allocation for task txg_sync (6093) which
      used GFP flags 0x297bda7c with PF_NOFS set
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #973

[33mcommit 0a2f7b3662fd10e7ac56a4b2859248eb98e31d6d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Sep 18 12:33:00 2012 -0700

    Seg fault 'zpool import -d /dev/disk/by-id -a'
    
    Introduced by commit 44867b6d6effc1628dd00c36821ab044f89fb988.
    We should of course check to ensure best isn't NULL before
    attempting to dereference it.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #974

[33mcommit 211204bed39a9652c95269cfef13be57d1507b71[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Sep 18 11:30:24 2012 -0700

    zfs-0.6.0-rc11

[33mcommit dd4769adc05c7614c879f0a854e243d15eae6786[m
Author: Richard Lowe <richlowe@richlowe.net>
Date:   Sat Feb 4 05:44:53 2012 +0000

    Illumos #2088 zdb could use a reasonable manual page
    
    Reviewed by: Yuri Pankov <yuri.pankov@nexenta.com>
    Reviewed by: Garrett D'Amore <garrett@damore.org>
    Reviewed by: George Wilson <gwilson@zfsmail.com>
    Reviewed by: Steve Gonczi <gonczi@comcast.net>
    Reviewed by: Richard Elling <richard.elling@richardelling.com>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
          https://www.illumos.org/issues/2088
    
    Ported by: Cyril Plisko <cyril.plisko@mountall.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #682

[33mcommit 44867b6d6effc1628dd00c36821ab044f89fb988[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sat Sep 15 13:25:21 2012 -0700

    Improve `zpool import` search behavior
    
    The goal of this change is to make 'zpool import' prefer to use
    the peristent /dev/mapper or /dev/disk/by-* paths.  These are far
    preferable to the devices in /dev/ whos names are not persistent
    and are determined by the order in which a device is detected.
    
    This patch improves things by changing the default search path from
    just to the top level /dev/ directory to (in order):
    
      /dev/disk/by-vdev   - Custom rules, use first if they exist
      /dev/disk/zpool     - Custom rules, use first if they exist
      /dev/mapper         - Use multipath devices before components
      /dev/disk/by-uuid   - Single unique entry and persistent
      /dev/disk/by-id     - May be multiple entries and persistent
      /dev/disk/by-path   - Encodes physical location and persistent
      /dev/disk/by-label  - Custom persistent labels
      /dev                - UNSAFE device names will change
    
    The default search path can be overriden by setting the
    ZPOOL_IMPORT_PATH environment variable.  This must be a colon
    delimited list of paths which are searched for vdevs.  If the
    'zpool import -d' option is specified only those listed paths
    will be searched.
    
    Finally, when multiple paths to the same device are found.  If one
    of the paths is an exact match for the path used last time to import
    the pool it will be used.  When there are no exact matches the
    prefered path will be determined by the provided search order.
    
    This means you can still import a pool and force specific names by
    providing the -d <path> option.  And the prefered names will persist
    as long as those paths exist on your system.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #965

[33mcommit ba367276d84e126dc3a13677c286539d0019e3b8[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Sep 17 11:22:23 2012 -0700

    Switch KM_SLEEP to KM_PUSHPAGE
    
    This warning indicates the incorrect use of KM_SLEEP in a call
    path which must use KM_PUSHPAGE to avoid deadlocking in direct
    reclaim.  See commit b8d06fca089fae4680c3a552fc55c512bfb02202
    for additional details.
    
      SPL: Fixing allocation for task txg_sync (6093) which
      used GFP flags 0x297bda7c with PF_NOFS set
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #917

[33mcommit 49d39798f286cce2497a87fc06d78c051ca87570[m
Author: Cyril Plisko <cyril.plisko@mountall.com>
Date:   Thu Sep 13 23:25:15 2012 +0300

    ZFS replay transaction error 5
    
    When zfs_replay_write() replays TX_WRITE records from ZIL
    it calls zpl_write_common() to perform the actual write.
    zpl_write_common() returns the number of bytes written
    (similar to write() system call) or an (negative) error.
    However, the code expects the positive return value to be
    a residual counter. Thus when zpl_write_common() successfully
    completes it is mistakenly considered to be a partial write and
    the error code delivered further. At this point the ZIL processing
    is aborted with famous "ZFS replay transaction error 5" error
    message given to the message buffer.
    
    The fix is to compare the zpl_write_commmon() return value with
    the buffer size and flag error only when they disagree.
    
    Signed-off-by: Cyril Plisko <cyril.plisko@mountall.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #933

[33mcommit 8312c6df55c1fb2ad3536fc3bc7ae93c429b85aa[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Sep 14 09:36:40 2012 -0700

    Clear PG_writeback for sync I/O error case
    
    Commit 2b2861362f7dd09cc3167df8fddb6e2cb475018a accidentally
    introduced this issue by only conditionally registering the
    commit callback in the async case.
    
    The error handing code for the dmu_tx_assign() failure case
    relied on there always being a registered commit callback to
    clear the PG_writeback bit.  Since that is no longer strictly
    true for the synchronous case we must explicitly invoke the
    callback.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #961

[33mcommit 8e8e7f35b71e7aa88f5e45bf1594bcc75526227d[m
Author: Cyril Plisko <cyril.plisko@mountall.com>
Date:   Wed Sep 12 12:15:40 2012 +0300

    Fix zdb printf format string for ZIL data blocks
    
    Without this fix the zdb printouts of ZIL data blocks look full of FF
    due to printf() handling its arguments as int by default.
    
    Here is the output before the fix
    
                    TX_WRITE            len   4136, txg 1093817, seq 149231
                            foid 4242, offset 0, length f68
                            G FFFFFF8EFFFFFF87FFFFFF91FFFFFFCC 1c
    FFFFFFAFFFFFFFC9FFFFFFBAZ FFFFFFC3
    
    And the same after the fix
    
                    TX_WRITE            len   4136, txg 1093817, seq 149231
                            foid 4242, offset 0, length f68
                            G 8E8791CC 1cAFC9BAZ C3
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #962

[33mcommit 5915791096e6b5be0bad7d2e3f683b4e7908cf19[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Sep 12 11:16:08 2012 -0700

    Move iput() after zfs_inode_update()
    
    When replaying an unlink/remove operation via zfs_rmdir() the object
    being removed will be instantiated by a call to zfs_dirent_lock().
    This means that there is a single reference protecting the object.
    Right before the call to zfs_inode_update() this reference is dropped
    which may cause the object to be destroyed.  This will result in a
    NULL dereference as shown by the stack trace is issue #782.
    
    This likely isn't an issue during normal operation because there is
    always an additional reference held on the object by the VFS.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #782

[33mcommit cda4db408c28a29438ba702e2018bd0d5dd0cc03[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Sep 11 11:26:25 2012 -0700

    Revert "Improve AF hard disk detection"
    
    This reverts commit 395350c85d9903beba43bac7ae79092ae25f1526 which
    accidentally introduced issue #955.
    
    Pools using AF drives which were originally created with a sector
    size of 512 bytes will now be correctly detected to have physical
    sector size of 4096.  This is desirable for a new pool, however for
    an existing pool abruptly changing the sector size causes problems.
    
    For this reason, this change is being reverted until the additional
    logic can be added to detect the existing pool case.  Existing
    pools must use the ashift size stored in the label regardless of
    what the disk reports.  This is critical for compatibility.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #955

[33mcommit 27ccd4147bd29e9334c57a08d99481447a19c82f[m
Author: Cyril Plisko <cyril.plisko@mountall.com>
Date:   Wed Sep 5 19:44:53 2012 +0300

    Avoid running exportfs on each zfs/zpool command invocation
    
    Delay executing exportfs command until its results are actually
    required.
    
    Signed-off-by: Cyril Plisko <cyril.plisko@mountall.com>
    Signed-off-by: Gunnar Beutner <gunnar@beutner.name>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit af909a1089b35ae527a90c222453c977c4beff62[m
Author: Cyril Plisko <cyril.plisko@mountall.com>
Date:   Wed Aug 8 09:59:53 2012 +0300

    Illumos #3064: usr/src/cmd/zpool/zpool_main.c misspells "successful"
    
    Reviewed by: Andrew Stormont <Andrew.Stormont@nexenta.com>
    Reviewed by: Kartik Mistry <kartik.mistry@gmail.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    
    References:
          https://www.illumos.org/issues/3064
    
    Signed-off-by: Cyril Plisko <cyril.plisko@mountall.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit fff276419e329c72f5b4a33091e123bbf2215acb[m
Author: Chris Dunlop <chris@onthe.net.au>
Date:   Tue Sep 11 10:14:26 2012 -0700

    Remove autotools products
    
    spl_config.h.in is a generated file: remove and .gitignore it
    
    Signed-off-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit b815ff9a8f3ed0b87fc24517fd01a867ec07b424[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Mon Sep 10 16:23:21 2012 +0200

    Silence "setting dataset to sync always" message in ztest.
    
    ztest outputs a message when testing sync=always no matter what the
    verbosity level is. There is no point outputting this message for low
    verbosity levels.
    
    With this patch the message is only displayed at verbosity level 5 or
    above. The result is less output pollution.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #951

[33mcommit 4ca9a43644cf651ed3bb533d183cf33525a9fc4a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Sep 7 16:04:22 2012 -0700

    Remove zvol device node
    
    The 'zfs destroy' changes in 330d06f disrupted how zvol devices
    get removed on ZoL.  However, it basically boils down to the
    fact that we are no longer reliably calling zvol_remove_minor()
    via zfs_ioc_destroy_snaps().
    
    Therefore we add the missing call and handle things similarly
    to the existing zfs_unmount_snap() case.  Ideally we would check
    if this is of type DMU_OST_ZFS or DMU_OST_ZVOL and just do the
    right thing as in zfs_ioc_destroy().  However, it looks like
    it would be fairly expensive to get the type, and it's harmless
    to simply attempt the umount and minor removal.
    
    This is also an issue in the latest FreeBSD and Illumos code.
    It was being tracked under the following issue, and we may want
    to refresh our code when they settle on what they want to do
    about it upstream.
    
      https://www.illumos.org/issues/3170
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #903

[33mcommit 1ecc6d1265ccffe387780f13f33142fb0961cb0f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Sep 6 14:21:59 2012 -0700

    Add zstreamdump .gitignore
    
    When zstreamdump was merged in commit b79fc3f we failed to add
    the needed .gitignore file.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 04f9432d3bcb15ff8ed6ddc2dc377a4c0264340d[m
Author: Cyril Plisko <cyril.plisko@mountall.com>
Date:   Fri Aug 24 15:38:55 2012 +0300

    Make ZFS filesystem id persistent across different machines
    
    Use ZFS dataset fsid guid as a unique file system id, similar to what is
    done on Illumos/OpenSolaris.
    
    Signed-off-by: Cyril Plisko <cyril.plisko@mountall.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #888

[33mcommit 4b2f65b253952c5103311cc8bb4b8cdc6836fd7e[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Thu Sep 6 11:06:05 2012 +0200

    Increase the stack space in userspace.
    
    In 1e33ac1e2677c898a0b5ef6207048c692cb51bf4, the maximum stack size for
    userspace tools was set to 8k to mimic the available kernel stack size.
    
    Unfortunately, due to differences in how the stack is used in userspace
    vs kernel space, spurious stack overflows could occur in userspace
    tools due to the limited stack size. This is especially true in ztest
    when debugging is enabled.
    
    This patch multiplies the userspace stack size by 4, which fixes the
    stack overflow issues. This comes at the price of not being able to
    catch stack size issues in userspace, but the previous solution proved
    unreliable anyway.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Fixes #934.

[33mcommit ebcfc8a53450fd71443668191507770e17c409bd[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Sep 4 19:00:59 2012 -0700

    Disable page allocation warnings for ARC buffers
    
    Buffers for the ARC are normally backed by the SPL virtual slab.
    However, if memory is low, AND no slab objects are available,
    AND a new slab cannot be quickly constructed a new emergency
    object will be directly allocated.
    
    These objects can be as large as order 5 on a system with 4k
    pages.  And because they are allocated with KM_PUSHPAGE, to
    avoid a potential deadlock, they are not allowed to initiate I/O
    to satisfy the allocation.  This can result in the occasional
    allocation failure.
    
    However, since these allocations are allowed to block and
    perform operations such as memory compaction they will eventually
    succeed.  Since this is not unexpected (just unlikely) behavior
    this patch disables the warning for the allocation failure.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #465

[33mcommit fc24f7c887a040b6dc9f2a3dd3d5ae0c03a5d639[m
Author: Michael Martin <mgmartin.mgm@gmail.com>
Date:   Wed Sep 5 09:46:29 2012 -0700

    Fix missing vdev names in zpool status output
    
    Commit 858219c makes more sense down below in the 'if (verbose)'
    section of the code.  Initially, buf and path will never point
    to the same location.  Once 'path = buf' is set on a raidz vdev,
    the code may drop into the verbose section depending on the
    verbose flag.  In here, using a tmpbuf makes sense since now
    'buf == path'.
    
    This issue does not occur in the upstream Solaris code because
    their implementations of snprintf() allow for buf and path to
    be the same address.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #57

[33mcommit cafa9709f3271fe345b571c2feff8d2dc034ed49[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Sep 4 19:54:20 2012 -0700

    Switch KM_SLEEP to KM_PUSHPAGE
    
    This warning indicates the incorrect use of KM_SLEEP in a call
    path which must use KM_PUSHPAGE to avoid deadlocking in direct
    reclaim.  See commit b8d06fca089fae4680c3a552fc55c512bfb02202
    for additional details.
    
      SPL: Fixing allocation for task txg_sync (6093) which
      used GFP flags 0x297bda7c with PF_NOFS set
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #917

[33mcommit 0ef0ff546eeab2f85690d59ee23fe30fa634dd38[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Sep 4 15:52:36 2012 -0700

    Switch KM_SLEEP to KM_PUSHPAGE
    
    This warning indicates the incorrect use of KM_SLEEP in a call
    path which must use KM_PUSHPAGE to avoid deadlocking in direct
    reclaim.  See commit b8d06fca089fae4680c3a552fc55c512bfb02202
    for additional details.
    
      SPL: Fixing allocation for task txg_sync (6093) which
      used GFP flags 0x297bda7c with PF_NOFS set
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #917

[33mcommit 395350c85d9903beba43bac7ae79092ae25f1526[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sun Sep 2 16:34:12 2012 -0700

    Improve AF hard disk detection
    
    Use the bdev_physical_block_size() interface to determine the
    minimize write size which can be issued without incurring a
    read-modify-write operation.  This is used to set the ashift
    correctly to prevent a performance penalty when using AF hard
    disks.
    
    Unfortunately, this interface isn't entirely reliable because
    it's not uncommon for disks to misreport this value.  For this
    reason you may still need to manually set your ashift with:
    
      zpool create -o ashift=12 ...
    
    The solution to this in the upstream Illumos source was to add
    a while list of known offending drives.  Maintaining such a list
    will be a burden, but it still may be worth doing if we can
    detect a large number of these drives.  This should be considered
    as future work.
    
    Reported-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #916

[33mcommit 594b4dd82a6ba6b046b894a24986ce727f4d7391[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Sep 3 13:05:19 2012 -0700

    Switch KM_SLEEP to KM_PUSHPAGE
    
    This warning indicates the incorrect use of KM_SLEEP in a call
    path which must use KM_PUSHPAGE to avoid deadlocking in direct
    reclaim.  See commit b8d06fca089fae4680c3a552fc55c512bfb02202
    for additional details.
    
      SPL: Fixing allocation for task txg_sync (6093) which
      used GFP flags 0x297bda7c with PF_NOFS set
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #917

[33mcommit ba7dbeb22e4b0f2d4c2b805abfee8d663e0f779d[m
Author: Etienne Dechamps <e-t172@akegroup.org>
Date:   Sun Sep 2 22:09:01 2012 +0200

    Add libnvpair to mount_zfs dependencies
    
    Commit e6f290535c2fff8b940c4eacb1c90cbc2cfc7508 added libzpool to
    the mount_zfs dependencies.  This brought in the nvpair symbols
    which are used by libzpool.  To resolve this include the libnvpair
    library for mount_zfs even though mount_zfs doesn't directly
    require any of these symbols.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #926

[33mcommit b79fc3fea9e9f26e0e65665243d569d8907ac279[m
Author: Martin Matuska <martin@matuska.org>
Date:   Wed Aug 29 21:23:12 2012 +0200

    Add zstreamdump(8) command to examine ZFS send streams.
    
    Obtained from: illumos-gate revision 11935:538c866aaac6
    Source: ssh://anonhg@hg.illumos.org/illumos-gate
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #905

[33mcommit 20a083cbe29b5eb082c577e9c0194d036effaa59[m
Author: Chris Dunlop <chris@onthe.net.au>
Date:   Sat Sep 1 14:44:13 2012 +1000

    Switch KM_SLEEP to KM_PUSHPAGE
    
    This warning indicates the incorrect use of KM_SLEEP in a call
    path which must use KM_PUSHPAGE to avoid deadlocking in direct
    reclaim.  See commit b8d06fca089fae4680c3a552fc55c512bfb02202
    for additional details.
    
      SPL: Fixing allocation for task txg_sync (6093) which
      used GFP flags 0x297bda7c with PF_NOFS set
    
    Signed-off-by: Chris Dunlop <chris@onthe.net.au>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #917

[33mcommit b404a3f07f430710b92a380cd24dd2d48443d2f4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Aug 31 07:45:27 2012 -0700

    Switch KM_SLEEP to KM_PUSHPAGE
    
    This warning indicates the incorrect use of KM_SLEEP in a call
    path which must use KM_PUSHPAGE to avoid deadlocking in direct
    reclaim.  See commit b8d06fca089fae4680c3a552fc55c512bfb02202
    for additional details.
    
      SPL: Fixing allocation for task txg_sync (6093) which
      used GFP flags 0x297bda7c with PF_NOFS set
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #917

[33mcommit 2b2861362f7dd09cc3167df8fddb6e2cb475018a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Aug 29 11:52:47 2012 -0700

    Clear PG_writeback after zil_commit() for sync I/O
    
    When writing via ->writepage() the writeback bit was always cleared
    as part of the txg commit callback.  However, when the I/O is also
    being written synchronsously to the zil we can immediately clear this
    bit.  There is no need to wait for the subsequent TXG sync since the
    data is already safe on stable storage.
    
    This has been observed to reduce the msync(2) delay from up to 5
    seconds down 10s of miliseconds.  One workload which is expected
    to benefit from this are the intermittent samba hands described
    in issue #700.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #700
    Closes #907

[33mcommit e6f290535c2fff8b940c4eacb1c90cbc2cfc7508[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Thu Aug 30 12:15:10 2012 +0200

    Fix mount_zfs dependency on libzpool.
    
    mount_zfs depends on libzpool for zfs_prop_written since
    330d06f90d143b41b276796526a66a1c1fff046d. Unfortunately, the Makefile
    for mount_zfs has not been modified to reflect this. As a result,
    libtool doesn't know about the dependency, which may result in the wrong
    libzpool being used during the build (e.g. the libzpool from the system
    instead of the libzpool from the build directory).
    
    This patch adds the dependency to fix the issue.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Fixes #909.

[33mcommit b8d06fca089fae4680c3a552fc55c512bfb02202[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Mon May 7 13:49:51 2012 -0400

    Switch KM_SLEEP to KM_PUSHPAGE
    
    Differences between how paging is done on Solaris and Linux can cause
    deadlocks if KM_SLEEP is used in any the following contexts.
    
      * The txg_sync thread
      * The zvol write/discard threads
      * The zpl_putpage() VFS callback
    
    This is because KM_SLEEP will allow for direct reclaim which may result
    in the VM calling back in to the filesystem or block layer to write out
    pages.  If a lock is held over this operation the potential exists to
    deadlock the system.  To ensure forward progress all memory allocations
    in these contexts must us KM_PUSHPAGE which disables performing any I/O
    to accomplish the memory allocation.
    
    Previously, this behavior was acheived by setting PF_MEMALLOC on the
    thread.  However, that resulted in unexpected side effects such as the
    exhaustion of pages in ZONE_DMA.  This approach touchs more of the zfs
    code, but it is more consistent with the right way to handle these cases
    under Linux.
    
    This is patch lays the ground work for being able to safely revert the
    following commits which used PF_MEMALLOC:
    
      21ade34 Disable direct reclaim for z_wr_* threads
      cfc9a5c Fix zpl_writepage() deadlock
      eec8164 Fix ASSERTION(!dsl_pool_sync_context(tx->tx_pool))
    
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #726

[33mcommit 991fc1d7ae2589c01a939a9cbd0e866c90fdd03b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Aug 21 20:53:01 2012 -0700

    mzap_upgrade() must use kmem_alloc()
    
    These allocations in mzap_update() used to be kmem_alloc() but
    were changed to vmem_alloc() due to the size of the allocation.
    However, since it turns out this function may be called in the
    context of the txg_sync thread they must be changed back to use
    a kmem_alloc() to ensure the KM_PUSHPAGE flag is honored.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 8630650a8d9cfba379a5b73bd95e903d577e0d8d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sat Aug 18 11:17:23 2012 -0700

    Annotate KM_PUSHPAGE call paths with PF_NOFS
    
    The txg_sync(), zfs_putpage(), zvol_write(), and zvol_discard()
    call paths must only use KM_PUSHPAGE to avoid potential deadlocks
    during direct reclaim.
    
    This patch annotates these call paths so any accidental use of
    KM_SLEEP will be quickly detected.   In the interest of stability
    if debugging is disabled the offending allocation will have its
    GFP flags automatically corrected.  When debugging is enabled
    any misuse will be treated as a fatal error.
    
    This patch is entirely for debugging.  We should be careful to
    NOT become dependant on it fixing up the incorrect allocations.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 86dd0fd9222b6103c6533036c47b908ece944460[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sun Aug 19 17:17:02 2012 -0700

    Pre-allocate vdev I/O buffers
    
    The vdev queue layer may require a small number of buffers
    when attempting to create aggregate I/O requests.  Rather than
    attempting to allocate them from the global zio buffers, which
    is slow under memory pressure, it makes sense to pre-allocate
    them because...
    
    1) These buffers are short lived.  They are only required for
    the life of a single I/O at which point they can be used by
    the next I/O.
    
    2) The maximum number of concurrent buffers needed by a vdev is
    small.  It's roughly limited by the zfs_vdev_max_pending tunable
    which defaults to 10.
    
    By keeping a small list of these buffer per-vdev we can ensure
    one is always available when we need it.  This significantly
    reduces contention on the vq->vq_lock, because we no longer
    need to perform a slow allocation under this lock.  This is
    particularly important when memory is already low on the system.
    
    It would probably be wise to extend the use of these buffers beyond
    aggregate I/O and in to the raidz implementation.  The inability
    to quickly allocate buffer for the parity stripes could result in
    similiar problems.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 44f21da41c441bfceec7b825991b6e68321d78a2[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Wed May 16 18:16:02 2012 -0400

    Revert Disable direct reclaim for z_wr_* threads
    
    This commit used PF_MEMALLOC to prevent a memory reclaim deadlock.
    However, commit 49be0ccf1fdc2ce852271d4d2f8b7a9c2c4be6db eliminated
    the invocation of __cv_init(), which was the cause of the deadlock.
    PF_MEMALLOC has the side effect of permitting pages from ZONE_DMA
    to be allocated.  The use of PF_MEMALLOC was found to cause stability
    problems when doing swap on zvols. Since this technique is known to
    cause problems and no longer fixes anything, we revert it.
    
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #726

[33mcommit 62c4165a1bbfb7d68f8ebf93d32a6fc8ea4d4e33[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Mon May 7 14:14:45 2012 -0400

    Revert Fix zpl_writepage() deadlock
    
    The commit, cfc9a5c88f91f7b4d606fce89505e1f404691ea5, to fix deadlocks
    in zpl_writepage() relied on PF_MEMALLOC.   That had the effect of
    disabling the direct reclaim path on all allocations originating from
    calls to this function, but it failed to address the actual cause of
    those deadlocks.  This led to the same deadlocks being observed with
    swap on zvols, but not with swap on the loop device, which exercises
    this code.
    
    The use of PF_MEMALLOC also had the side effect of permitting
    allocations to be made from ZONE_DMA in instances that did not require
    it.  This contributes to the possibility of panics caused by depletion
    of pages from ZONE_DMA.
    
    As such, we revert this patch in favor of a proper fix for both issues.
    
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #726

[33mcommit b876dac776afc8ea2c598eac53b9903de01c6172[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Tue May 15 23:19:32 2012 -0400

    Revert Fix ASSERTION(!dsl_pool_sync_context(tx->tx_pool))
    
    Commit eec8164771bee067c3cd55ed0a16dadeeba276de worked around an issue
    involving direct reclaim through the use of PF_MEMALLOC.   Since we
    are reworking thing to use KM_PUSHPAGE so that swap works, we revert
    this patch in favor of the use of KM_PUSHPAGE in the affected areas.
    
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #726

[33mcommit f86373f5b2bac3e7cf17a766af5caa5bb7cf8c7a[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Fri Aug 24 11:37:44 2012 -0700

    Remove autoconf check for CONFIG_PREEMPT
    
    The autoconf macro which failed if CONFIG_PREEMPT was set in the kernel
    config was removed. With the inclusion of a few previous patches
    targeting support for preempt enabled kernels, it is now safe to run
    with this kernel config option enabled.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #83

[33mcommit ca8b5af89d2c5826af7385bf18f3b377b0efde11[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sun Aug 26 18:10:24 2012 -0700

    Remove autotools products
    
    Remove all of the generated autotools products from the repository
    and update the .gitignore files accordingly.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #718

[33mcommit cd38ac58a36e51cb3d627da57bfb5246e70f276d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sat Aug 25 15:01:39 2012 -0700

    rmdir(2) should return ENOTEMPTY
    
    Under Solaris the behavior for rmdir(2) is to return EEXIST when
    a directory still contains entries.  However, on Linux ENOTEMPTY
    is the expected return value with EEXIST being technically allowed.
    According to rmdir(2):
    
    ENOTEMPTY
       pathname contains entries other than . and .. ; or, pathname has
       ..  as its final component.  POSIX.1-2001 also allows EEXIST for
       this condition.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #895

[33mcommit c90ea65511b93027dcf7b370457fcbda14103e19[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Sat Aug 25 17:16:23 2012 -0400

    Consistent menuconfig name
    
    Make name in Linux menuconfig consistent with those of other filesystems
    
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #897

[33mcommit 074e72953cb3229e270e384f4dabd6d05c836060[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Sat Aug 25 18:32:54 2012 -0400

    Check kernel source directory for SPL
    
    ZFS fails to build when SPL is built into the kernel on unless
    --with-spl=/path/to/kernel/sources is specified. We fallback to the
    kernel sources directory when SPL is not found elsewhere to resolve
    that.
    
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closed #896

[33mcommit 9e11c7eee232b73600c2590c8c3326b2725daba5[m
Author: Christopher Siden <chris.siden@delphix.com>
Date:   Fri Aug 24 15:10:22 2012 +0200

    Illumos #3085: zfs diff panics, then panics in a loop on booting
    
    Reviewed by: Matt Ahrens <matthew.ahrens@delphix.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/3085
    
    Ported by: Martin Matuska <martin@matuska.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit c578f007ff9d8ee3d5070960f787fa48d46b7c3c[m
Author: Simon Klinkert <klinkert@webgods.de>
Date:   Fri Jun 22 10:17:50 2012 -0400

    Illumos #2901: zfs receive fails for exabyte sparse files
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Approved by: Dan McDonald <danmcd@nexenta.com>
    
    References:
      https://www.illumos.org/issues/2901
    
    Ported by: Martin Matuska <martin@matuska.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit a47587389e98820ea194fd16cd658491f8e4ee31[m
Author: Javen Wu <wu.javen@gmail.com>
Date:   Fri Aug 24 19:24:48 2012 -0700

    Drop spill buffer reference
    
    When calling sa_update() and friends it is possible that a spill
    buffer will be needed to accomidate the update.  When this happens
    a hold is taken on the new dbuf and that hold must be released
    before calling dmu_tx_commit().  Failing to release the hold will
    cause a copy of the dbuf to be made in dbuf_sync_leaf().  This is
    done to ensure further updates to the dbuf never sneak in to the
    syncing txg.
    
    This could be left to the sa_update() caller.  But then the caller
    would need to be aware of this internal SA implementation detail.
    It is therefore preferable to handle this all internally in the
    SA implementation.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #503
    Closes #513

[33mcommit f828e63a0d408160cff9403f1c8991609f17011d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 23 20:46:38 2012 -0700

    Revert "Use SA_HDL_PRIVATE for SA xattrs"
    
    This reverts commit ec2626ad3f695a2ced3946c4197ef64cbcac4959 which
    caused consistency problems between the shared and private handles.
    Reverting this change should resolve issues #709 and #727.  It
    will also reintroduce an arc_anon memory leak which is addressed
    by the next commit.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #709
    Closes #727

[33mcommit 15a9e03368d8f186751a432740a5a281f45d712d[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Thu Aug 23 17:45:31 2012 -0700

    Wrap smp_processor_id in kpreempt_[dis|en]able
    
    After surveying the code, the few places where smp_processor_id is used
    were deemed to be safe to use with a preempt enabled kernel. As such, no
    core logic had to be changed. These smp_processor_id call sites are simply
    are wrapped in kpreempt_disable and kpreempt_enabled to prevent the
    Linux kernel from emitting scary warnings.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Issue #83

[33mcommit 52cd92022eaf8f105510df708d234012cbe5078d[m
Author: Massimo Maggi <massimo@mmmm.it>
Date:   Thu Aug 23 14:52:45 2012 +0200

    Fix snapshot automounting with GrSecurity constify plugin.
    
    ./configure erroneously detects absence of dops->d_automount
    when built against a GrSecurity patched kernel.
    
    Summerized error message found in config.log:
    
      checking whether dops->d_automount() exists
      ...
      In function 'main': ... error: constified variable 'dops'
      cannot be local
    
    The "dops" variable cannot be a local variable, so it's
    moved to the global scope.
    
    This test also fails if the prototype of the dops->d_automount
    function pointer is changed.
    
    Signed-off-by: Massimo Maggi <massimo@mmmm.it>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Closes #884

[33mcommit 08b1b21d58b1ae8a67fec38ccda02489c4aa8115[m
Author: Garrett D'Amore <garrett@damore.org>
Date:   Wed Jun 6 10:01:43 2012 -0700

    Illumos #2803: zfs get guid pretty-prints the output
    
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Reviewed by: Richard Elling <richard.elling@gmail.com>
    Reviewed by: Alexander Eremin <alexander.eremin@nexenta.com>
    Approved by: Dan McDonald <danmcd@nexenta.com>
    
    References:
      https://www.illumos.org/issues/2803
    
    Ported by: Martin Matuska <martin@matuska.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit e956d6510699b0c1aa757b1fb0c1ee9feb7419f7[m
Author: Christopher Siden <chris.siden@delphix.com>
Date:   Thu Jul 12 05:32:45 2012 -0700

    Illumos #1796, #2871, #2903, #2957
    
    1796 "ZFS HOLD" should not be used when doing "ZFS SEND" from a read-only pool
    2871 support for __ZFS_POOL_RESTRICT used by ZFS test suite
    2903 zfs destroy -d does not work
    2957 zfs destroy -R/r sometimes fails when removing defer-destroyed snapshot
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Approved by: Eric Schrock <Eric.Schrock@delphix.com>
    
    References:
      https://www.illumos.org/issues/1796
      https://www.illumos.org/issues/2871
      https://www.illumos.org/issues/2903
      https://www.illumos.org/issues/2957
    
    Ported by: Martin Matuska <martin@matuska.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit db49968e5ca7814bf833477f27c148208a835a7d[m
Author: Eric Schrock <Eric.Schrock@delphix.com>
Date:   Fri Apr 27 11:14:46 2012 -0700

    Illumos #2635: 'zfs rename -f' to perform force unmount
    
    Reviewed by: Matt Ahrens <matt@delphix.com>
    Reviewed by: George Wilson <George.Wilson@delphix.com>
    Reviewed by: Bill Pijewski <wdp@joyent.com>
    Reviewed by: Richard Elling <richard.elling@richardelling.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/2635
    
    Ported by: Martin Matuska <martin@matuska.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #717

[33mcommit e346ec25af02c6a7820e7c2a0da71b451a4be70f[m
Author: Andrew Stormont <andrew.stormont@nexenta.com>
Date:   Thu Feb 16 22:14:36 2012 +0000

    Illumos #1936: add support for "-t <datatype>" argument to zfs get
    
    Reviewed by: Kartik Mistry <kartik@nexenta.com>
    Reviewed by: Dan McDonald <danmcd@nexenta.com>
    Reviewed by: Richard Elling <richard.elling@gmail.com>
    Reviewed by: Garrett D'Amore <garrett@damore.org>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/1936
    
    Ported by: Martin Matuska <martin@matuska.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #681

[33mcommit 684e8c06431df0f8cb67b98330ff89ff4f69d95e[m
Author: Alexander Eremin <a.eremin@nexenta.com>
Date:   Mon Nov 28 02:13:54 2011 -0800

    Illumos #1726: Removal of pyzfs broke delegation for volumes
    
    Reviewed by: Andrew Stormont <andyjstormont@googlemail.com>
    Reviewed by: Garrett D'Amore <garrett@nexenta.com>
    Reviewed by: Richard Lowe <richlowe@richlowe.net>
    Reviewed by: Albert Lee <trisk@nexenta.com>
    Approved by: Garrett D'Amore <garrett@nexenta.com>
    
    References:
      https://www.illumos.org/issues/1726
    
    Ported by: Martin Matuska <martin@matuska.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 79e722432f92df5db2db99ca113d6052937eb637[m
Author: Alexander Eremin <a.eremin@nexenta.com>
Date:   Mon Jan 16 17:07:04 2012 +0400

    Illumos #1977: zfs allow arguments not parsed correctly after pyzfs removal
    
    Reviewed by: Garrett D'Amore <garrett.damore@gmail.com>
    Reviewed by: Albert Lee <trisk@nexenta.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/1977
    
    Ported by: Martin Matuska <martin@matuska.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 56b45e698d454150d88368427fad97fc0a726014[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 23 09:49:54 2012 -0700

    Add copy-builtin to EXTRA_DIST
    
    The copy-builtin script was accidentally not being included in
    the tarballs.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #880

[33mcommit cf997d797b49384572c23b6b605bf72bd1415b35[m
Author: Martin Matuska <martin@matuska.org>
Date:   Tue Aug 21 23:42:00 2012 +0200

    Properly initialize and free destroydata
    
    This regression was accidentally introduced by commit
    330d06f90d143b41b276796526a66a1c1fff046d due to ZoL
    specific code.  The fix is to simply ensure the passed
    nvlist is initialized and freed.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #876

[33mcommit 4276c6f576d396b8c902da6cb168e64b2cff233e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Aug 13 10:20:51 2012 -0700

    ZFS 0.6.0-rc10

[33mcommit 4047414a6a340dff5fd52d48b163991bc9760ad2[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Aug 14 08:35:32 2012 -0700

    Export dmu_buf_rele() symbol
    
    While I'd like to remove the various pragmas in module/zfs/dbuf.c.
    There are consumers such as Lustre which still depend on dmu_buf_*
    versions of the symbols.  Until all consumers can be converted to
    use only the dbuf_* names leave this symbol exported.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 9ca431763e2db4c05858ed7dc578a8d6dbcc54d6[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Aug 13 15:47:18 2012 -0700

    Cleanly remove zfs-modules-devel headers
    
    Add the /usr/src/zfs-<version>-<release>/<kernel> directory to
    the zfs-modules-devel package.  This ensures that this directory
    will be removed when the package is removed.
    
    We do not include the higher level /usr/src/zfs-<version>-<release>
    directory since there may be builds for multiple kernels.  Instead,
    a %postun rmdir is added which attempts to remove this directory.
    It will only succeed when the last zfs-modules-devel-* package
    for this specific release is removed.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit bafc4e9e2ac3b4783a598afb1d2f048ab30c903c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Aug 10 16:39:39 2012 -0700

    Suppress 'zfs_sb_create' memory warning
    
    When mutex debugging is enabled in your kernel the increased
    size of the mutex structures can push the zfs_sb_t type beyond
    the 8k warning threshold.  This isn't harmful so we suppress
    the warning for this case.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #628

[33mcommit bb8b81ec6250086dd022d49c603104274ce08e09[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Aug 10 16:30:13 2012 -0700

    Illumos #1888:  zfs(8) should mention zfs recv -e
    
    Reviewed by: Garrett D'Amore <garrett@damore.org>
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Reviewed by: Gordon Ross <gordon.w.ross@gmail.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/1888
    
    Ported by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #683

[33mcommit 246b0f5a1658de4a8caf75c2e0712633e97b25dc[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Fri Aug 10 11:47:07 2012 -0700

    Fix man page installation path
    
    RPM versions 4.8 and 4.9 differ in the definition of macro %_mandir:
    
    $ rpm --version ; rpm --showrc | grep ^-14:._mandir
    RPM version 4.9.0
    -14: _mandir	%{_prefix}/share/man
    
    $ rpm --version ; rpm --showrc | grep ^-14:._mandir
    RPM version 4.8.0
    -14: _mandir	/usr/share/man
    
    zfs.spec.in defines %_prefix as /, so man pages end up getting
    installed in /share/man on RPM 4.9 systems.  To fix this, define
    %_mandir relative to %_datadir in the spec file.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #353

[33mcommit 8f576c232106b2278f03be06554044eed762641b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Aug 10 16:28:37 2012 -0700

    Export dbuf_* symbols
    
    Export these symbols so they may be used by other ZFS consumers
    besides the ZPL.
    
    Remove three stale prototype definites from dbuf.h.  The actual
    implementations of these functions were removed/renamed long ago.
    
    It would be good in the long term to remove the existing pragmas
    we inherited from Solaris and simply use the dbuf_* names.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 26e08952e6ad113b91ae7d31263b6a4fd3a5a09f[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Tue Aug 7 13:13:17 2012 -0700

    Support building a zfs-modules-dkms sub package
    
    This commit adds support for building a zfs-modules-dkms sub package
    built around Dynamic Kernel Module Support. This is to allow building
    packages using the DKMS infrastructure which is intended to ease the
    burden of kernel version changes, upgrades, etc.
    
    By default zfs-modules-dkms-* sub package will be built as part of
    the 'make rpm' target.  Alternately, you can build only the DKMS
    module package using the 'make rpm-dkms' target.
    
    Examples:
    
        # To build packaged binaries as well as a dkms packages
        $ ./configure && make rpm
    
        # To build only the packaged binary utilities and dkms packages
        $ ./configure && make rpm-utils rpm-dkms
    
    Note: Only the RHEL 5/6, CHAOS 5, and Fedora distributions are
          supported for building the dkms sub package.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #535

[33mcommit 5085d55817f67e2333366e517c6cc7a6fdda50f7[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Tue Aug 7 17:07:55 2012 -0700

    Add '--with-spl-timeout' option
    
    When checking for the SPL Module.symvers file, a timeout can now be
    passed in which will pause the configure step while it waits for this
    file to be generated. By default, the configure behavior is unchanged as
    a timeout of 0 is used. If a positive number of seconds is passed,
    configure will wait that number of seconds for the Module.symvers file
    before moving on.
    
    The main motivation for this change was to support parallel execution of
    './configure && make' for the SPL and ZFS packages in preparation of
    supporting DKMS based packages.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit d96eb2b1538db13ee7a716ec0e1162f5735edc12[m
Author: Dan McDonald <danmcd@nexenta.com>
Date:   Tue Nov 15 14:01:27 2011 -0500

    Illumos #1693: persistent 'comment' field for a zpool
    
    Reviewed by: George Wilson <gwilson@zfsmail.com>
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/1693
    
    Ported by: Martin Matuska <martin@matuska.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #678

[33mcommit ee5fd0bb80d68ef095f831784cbb17181b2ba898[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Wed Aug 1 10:29:59 2012 +0200

    Set zvol discard_granularity to the volblocksize.
    
    Currently, zvols have a discard granularity set to 0, which suggests to
    the upper layer that discard requests of arbirarily small size and
    alignment can be made efficiently.
    
    In practice however, ZFS does not handle unaligned discard requests
    efficiently: indeed, it is unable to free a part of a block. It will
    write zeros to the specified range instead, which is both useless and
    inefficient (see dnode_free_range).
    
    With this patch, zvol block devices expose volblocksize as their discard
    granularity, so the upper layer is aware that it's not supposed to send
    discard requests smaller than volblocksize.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #862

[33mcommit 9a512dca97fec1afa5068b53621ce1dd7dbef578[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Sun Jul 29 05:43:57 2012 -0400

    Add missing dependencies to ./copy-builtin
    
    ZFS depends on EFI_PARTITION, ZLIB_DEFLATE and ZLIB_INFLATE, but when
    ZFS is integrated with the kernel source tree, menuconfig does not
    enforce these dependencies. This can cause build failures in the case of
    ZLIB_DEFLATE and ZLIB_INFLATE where symbols are not found. This can also
    cause runtime failures in the case of EFI_PARTITION, where the kernel
    will not understand GPT partitions when creating pools from raw disks.
    We solve this by making menuconfig aware of these dependencies.
    
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #854

[33mcommit 7c0e570888532b3cecf66459e55688df18946be0[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Tue Jul 31 10:45:37 2012 +0200

    Limit the number of blocks to discard at once.
    
    The number of blocks that can be discarded in one BLKDISCARD ioctl on a
    zvol is currently unlimited. Some applications, such as mkfs, discard
    the whole volume at once and they use the maximum possible discard size
    to do that. As a result, several gigabytes discard requests are not
    uncommon.
    
    Unfortunately, if a large amount of data is allocated in the zvol, ZFS
    can be quite slow to process discard requests. This is especially true
    if the volblocksize is low (e.g. the 8K default). As a result, very
    large discard requests can take a very long time (seconds to minutes
    under heavy load) to complete. This can cause a number of problems, most
    notably if the zvol is accessed remotely (e.g. via iSCSI), in which case
    the client has a high probability of timing out on the request.
    
    This patch solves the issue by adding a new tunable module parameter:
    zvol_max_discard_blocks. This indicates the maximum possible range, in
    zvol blocks, of one discard operation. It is set by default to 16384
    blocks, which appears to be a good tradeoff. Using the default
    volblocksize of 8K this is equivalent to 128 MB. When using the maximum
    volblocksize of 128K this is equivalent to 2 GB.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #858

[33mcommit 330d06f90d143b41b276796526a66a1c1fff046d[m
Author: Matthew Ahrens <matt@delphix.com>
Date:   Thu Nov 17 10:14:36 2011 -0800

    Illumos #1644, #1645, #1646, #1647, #1708
    
    1644 add ZFS "clones" property
    1645 add ZFS "written" and "written@..." properties
    1646 "zfs send" should estimate size of stream
    1647 "zfs destroy" should determine space reclaimed by
         destroying multiple snapshots
    1708 adjust size of zpool history data
    
    References:
      https://www.illumos.org/issues/1644
      https://www.illumos.org/issues/1645
      https://www.illumos.org/issues/1646
      https://www.illumos.org/issues/1647
      https://www.illumos.org/issues/1708
    
    This commit modifies the user to kernel space ioctl ABI.  Extra
    care should be taken when updating to ensure both the kernel
    modules and utilities are updated.  This change has reordered
    all of the new ioctl()s to the end of the list.  This should
    help minimize this issue in the future.
    
    Reviewed by: Richard Lowe <richlowe@richlowe.net>
    Reviewed by: George Wilson <gwilson@zfsmail.com>
    Reviewed by: Albert Lee <trisk@opensolaris.org>
    Approved by: Garrett D'Amore <garret@nexenta.com>
    
    Ported by: Martin Matuska <martin@matuska.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #826
    Closes #664

[33mcommit 7eebaff409d969394dccb9b12e30aef466cc04b2[m
Author: Manuel Amador (Rudd-O) <rudd-o@rudd-o.com>
Date:   Mon Jul 23 12:26:17 2012 -0700

    Adding grub2 mkconfig support patch
    
    Added simply for convenience until this, or an equivilant, change
    is merged in the upstream grub2 source.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #847

[33mcommit c171ea71bbedde9c30c39ce96d555bfd585e49a2[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jul 30 15:38:02 2012 -0700

    Allow '-o remount' for non-legacy datasets
    
    This is done for compatibility with existing Linux infrastructure.
    
    In particular, when using zfs as a root filesystem there are init
    scripts which as part of shutdown remount root read-only.  Also,
    the new systemd infrastructure being used by Fedora expects to be
    able to remount a file system read-write.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #847

[33mcommit 4ab8a725ce8a2bcf26a9df6902f8ee893e62fe6e[m
Merge: 739a1a8 f09398c
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jul 26 15:37:13 2012 -0700

    Merge branch 'builtin-clean'
    
    Support in-tree builtin module building.
    
    These commits add support for compiling the ZFS module as a built-in
    kernel module by copying the module code into the kernel source tree.
    Here's the procedure:
    
      - Create your kernel configuration (`.config` file) as usual. This
        has to be done first so that ZFS's configure script is able to
        detect kernel features correctly.
      - Run `make prepare scripts` inside the kernel source tree.
      - Run `./configure --enable-linux-builtin --with-linux=/usr/src/linux-...`
        inside the ZFS directory.
      - Run `./copy-builtin /usr/src/linux-...` inside the ZFS directory.
      - In the kernel source tree, enable the `CONFIG_ZFS` option (e.g. using
        `make menuconfig`). Note that this option depends on `CONFIG_SPL`
        (see zfsonlinux/spl@744038069d3dc65e721b5b8cc5c37d8c7fcbd8c0).
      - Build the kernel as usual.
    
    ZFS module parameters can be set at boot time using the following syntax
    on the kernel command line: `zfs.parameter_name=parameter_value`.
    
    Note that you also need to rebuild the userspace tools (see
    zfsonlinux/zfs@f09398cec665259a4c2f96726680fbd3b0a3bac3).
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #851

[33mcommit f09398cec665259a4c2f96726680fbd3b0a3bac3[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Wed Jul 4 15:56:40 2012 +0200

    Use /sys/module instead of /proc/modules.
    
    When libzfs checks if the module is loaded or not, it currently reads
    /proc/modules and searches for a line matching the module name.
    
    Unfortunately, if the module is included in the kernel itself (built-in
    module), then /proc/modules won't list it, so libzfs will wrongly conclude
    that the module is not loaded, thus making all ZFS userspace tools unusable.
    
    Fortunately, all loaded modules appear as directories in /sys/module, even
    built-in ones. Thus we can use /sys/module in lieu of /proc/modules to fix
    the issue.
    
    As a bonus, the code for checking becomes much simpler.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #851

[33mcommit 2ee4a18b2ac9c155e099db06cec320bd8cee3150[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Mon Jul 9 11:23:00 2012 +0200

    Add script for builtin module building.
    
    This commit introduces a "copy-builtin" script designed to prepare a
    kernel source tree for building ZFS as a builtin module. The script
    makes a full copy of all needed files, thus making the kernel source
    tree fully independent of the zfs source package.
    
    To achieve that, some compilation flags (-include, -I) have been moved
    to module/Makefile. This Makefile is only used when compiling external
    modules; when compiling builtin modules, a Kbuild file generated by the
    configure-builtin script is used instead. This makes sure Makefiles
    inside the kernel source tree does not contain references to the zfs
    source package.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #851

[33mcommit 705741827ab55e7d92c3eb74f332a5ddd24971b5[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Wed Jul 25 14:38:58 2012 -0700

    When checking for symbol exports, try compiling.
    
    This patch adds a new autoconf function: ZFS_LINUX_TRY_COMPILE_SYMBOL.
    This new function does the following:
    
     - Call LINUX_TRY_COMPILE with the specified parameters.
     - If unsuccessful, return false.
     - If successful and we're configuring with --enable-linux-builtin,
       return true.
     - Else, call CHECK_SYMBOL_EXPORT with the specified parameters and
       return the result.
    
    All calls to CHECK_SYMBOL_EXPORT are converted to
    LINUX_TRY_COMPILE_SYMBOL so that the tests work even when configuring
    for builtin on a kernel which doesn't have loadable module support, or
    hasn't been built yet.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #851

[33mcommit fc88a6dda92a4fc00491a8afa24d144cc94063e4[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Mon Jul 16 09:37:38 2012 +0200

    Fake modpost stage for LINUX_COMPILE.
    
    Currently, when building a test case, we're compiling an entire Linux
    module from beginning to end. This includes the MODPOST stage, which
    generates a "conftest.mod.c" file with some boilerplate module
    declaration code.
    
    This poses a problem when configuring for built-in on kernels which have
    loadable module support disabled. In this case conftest.mod.c is
    referencing disabled code, resulting in a compilation failure, thus
    breaking the tests.
    
    This patch fixes the issue by faking the modpost stage when the
    --enable-linux-builtin option is provided.  It does so by forcing the
    modpost command to be /bin/true, and using an empty conftest.mod.c file.
    The test module still compiles fine, although the result isn't loadable,
    but we don't really care at this point.
    
    Note it is important to preserve the modpost stage when building out of
    tree.  The ZFS_AC_KERNEL_BLK_END_REQUEST, ZFS_AC_KERNEL_BLK_QUEUE_FLUSH,
    and ZFS_AC_KERNEL_BLK_RQ_BYTES configure checks all depend on it to
    identify GPL-only symbols.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #851

[33mcommit 319a99a3d440480fe9c37f637cb9cac8e0f20ded[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Tue Jul 17 10:36:43 2012 +0200

    Make configure builtin-aware.
    
    This patch adds a new option to configure: --enable-linux-builtin. When
    this option is used, the following happens:
    
     - Compilation of kernel modules is disabled.
    
     - A failure to find UTS_RELEASE is followed by a suggestion to run
       "make prepare" on the kernel source tree.
    
    This patch also adds a new test which tries to compile an empty module
    as a basic toolchain sanity test. If it fails and the option was
    specified, the error is followed by a suggestion to run "make scripts"
    on the kernel source tree.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #851

[33mcommit b2c5198b1996c9053c1bae38755f76125c8cb169[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Tue Jul 17 11:23:09 2012 +0200

    Don't build packages that haven't been selected.
    
    Currently, when configure --with-config is used, selective compilation
    is only effective for the simple "make" case. Package builders (e.g.
    make rpm) still build everything (utils and modules). This patch fixes
    that.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #851

[33mcommit 739a1a82e0f366923e8d9bc8f9ad4b1c680a780b[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Mon Jul 23 11:39:25 2012 -0700

    Linux 3.5 compat, end_writeback() changed to clear_inode()
    
    The end_writeback() function was changed by moving the call to
    inode_sync_wait() earlier in to evict().   This effecitvely changes
    the ordering of the sync but it does not impact the details of
    the zfs implementation.
    
    However, as part of this change end_writeback() was renamed to
    clear_inode() to reflect the new semantics.  This change does
    impact us and clear_inode() now maps to end_writeback() for
    kernels prior to 3.5.
    
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #784

[33mcommit ea1fdf46e2d37e9eb048f9add0fb06e77e9ee6e2[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Mon Jul 23 11:11:25 2012 -0700

    Linux 3.5 compat, iops->truncate_range() removed
    
    The vmtruncate_range() support has been removed from the kernel in
    favor of using the fallocate method in the file_operations table.
    
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #784

[33mcommit 756c3e5a9ce36461939a8dc421918e1c3a379fa6[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Mon Jul 23 10:55:48 2012 -0700

    Linux 3.5 compat, eops->encode_fh() takes inodes
    
    The export_operations member ->encode_fh() has been updated to
    take both the child and parent inodes.  This interface used to
    take the child dentry and a bool describing if the parent is needed.
    
    NOTE: While updating this code I noticed that we do not currently
    cleanly handle the case where we're passed a connectable parent.
    This code should be audited to make sure we're doing the right thing.
    
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #784

[33mcommit ed3fc80048f1d11f0b77382f5c378bb4c11787fd[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Thu Jul 19 18:37:56 2012 -0400

    Fix NULL pointer dereference on PaX/GRSecurity patched Linux 3.3 and later kernels
    
    Support for PaX/GRSecurity patched kernels was developed against Linux
    3.2.  Unfortunately, an autotools check introduced for a Linux 3.3 API
    fails on PaX/GRSecurity patched kernels. This causes the module to be
    built against the Linux 3.2 ABI, which results in a NULL pointer
    dereference at runtime.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Closes #794
    Closes #809

[33mcommit fc173c85892841c283aac4e5174d6d8762463062[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jul 19 14:50:25 2012 -0700

    Disable .zfs directory on 32-bit systems
    
    The .zfs control directory implementation currently relies on
    the fact that there is a direct 1:1 mapping from an object id
    to its inode number.  This works well as long as the system
    uses a 64-bit value to store the inode number.
    
    Unfortunately, the Linux kernel defines the inode number as
    an 'unsigned long' type.  This means that for 32-bit systems
    will only have 32-bit inode numbers but we still have 64-bit
    object ids.
    
    This problem is particularly acute for the .zfs directories
    which leverage those upper 32-bits.  This is done to avoid
    conflicting with object ids which are allocated monotonically
    starting from 0.  This is likely to also be a problem for
    datasets on 32-bit systems with more than ~2 billion files.
    
    The right long term fix must remove the simple 1:1 mapping.
    Until that's done the only safe thing to do is to disable the
    .zfs directory on 32-bit systems.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 2a4a9dc2f09d7672268af4a4f70e1a26b481b5e9[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jul 19 14:50:25 2012 -0700

    Add ddt_object_load() error handling
    
    Add the missing error handling to ddt_object_load().  There's no
    good reason this needs to be fatal.  It is preferable that an
    error be returned.  This will allow 'zpool import -FX' to safely
    attempt to rollback through previous txgs looking for a good one.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 10be533e3344f523e1b8d6ab4f0658897a95ac02[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jul 18 16:56:24 2012 -0700

    Add 'inline' keyword
    
    The '__attribute__((always_inline))' does not strictly imply
    'inline'.  Newer versions of gcc detect this misuse and issue
    the following warning.  Including the missing 'inline' resolves
    the build warning.
    
        ./module/zfs/dsl_scan.c:758:1:error: always_inline function
        might not be inlinable [-Werror=attributes]
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 0a6b03d3b87cf17ac6159395df93ba3fcfdddc45[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Wed May 30 23:25:31 2012 -0400

    Fix build failures on PaX/GRSecurity patched kernels
    
    Gentoo Hardened kernels include the PaX/GRSecurity patches. They use a
    dialect of C that relies on a GCC plugin. In particular, struct
    file_operations has been marked do_const in the PaX/GRSecurity dialect,
    which causes GCC to consider all instances of it as const. This caused
    failures in the autotools checks and the ZFS source code.
    
    To address this, we modify the autotools checks to take into account
    differences between the PaX C dialect and the regular C dialect. We also
    modify struct zfs_acl's z_ops member to be a pointer to a function
    pointer table. Lastly, we modify zpl_put_link() to address a PaX change
    to the function prototype of nd_get_link().  This avoids compiler errors
    in the PaX/GRSecurity dialect.
    
    Note that the change in zpl_put_link() causes a warning that becomes a
    build failure when debugging is enabled. Fixing that warning requires
    ryao/spl@5ca50ef459c59bc74b7a7cd3af7311da2b1cd2c3.
    
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #484

[33mcommit b5a28807cdec3c05aa69cbe4689cd914dc94783a[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Wed Jul 11 15:06:32 2012 +0200

    Move partition scanning from userspace to module.
    
    Currently, zpool online -e (dynamic vdev expansion) doesn't work on
    whole disks because we're invoking ioctl(BLKRRPART) from userspace
    while ZFS still has a partition open on the disk, which results in
    EBUSY.
    
    This patch moves the BLKRRPART invocation from the zpool utility to the
    module. Specifically, this is done just before opening the device in
    vdev_disk_open() which is called inside vdev_reopen(). This requires
    jumping through some hoops to get to the disk device from the partition
    device, and to make sure we can still open the partition after the
    BLKRRPART call.
    
    Note that this new code path is triggered on dynamic vdev expansion
    only; other actions, like creating a new pool, are unchanged and still
    call BLKRRPART from userspace.
    
    This change also depends on API changes which are available in 2.6.37
    and latter kernels.  The build system has been updated to detect this,
    but there is no compatibility mode for older kernels.  This means that
    online expansion will NOT be available in older kernels.  However, it
    will still be possible to expand the vdev offline.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #808

[33mcommit fb7eb3e3e9f8e611a34192ceb5c2d2e849ca6de8[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jul 12 12:21:25 2012 -0700

    Move zfs.release generation to configure step
    
    Previously, the zfs.release file was created at 'make install' time.
    This is slightly problematic when the file is needed without running
    'make install'. Because of this, the step creating the file was removed
    from 'make install' and replaced with a more appropriate zfs.release.in
    file.
    
    As a result, the zfs.release file will now be created earlier as part
    of the 'configure' step as opposed to the 'make install' step.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 7535251dcf39cc648ea303ee52e128ad967fad85[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jul 12 11:34:43 2012 -0700

    Add PowerPC to supported VTOCs
    
    This code was was inherited from Solaris which was careful to define
    the expected VTOC for various supported architectures.  While this
    check may have made sense there it's something we should be able to
    safely drop under Linux.
    
    However, I'm not quite ready to do that yet.  So for the moment I'm
    just doing the very safe thing of adding PowerPC as a supported type.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit cee43a7477501669920445f29990443679142336[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Wed Jul 11 17:47:10 2012 +0200

    Fix efi_use_whole_disk() when efi_nparts == 128.
    
    Commit e5dc681a changed EFI_NUMPAR from 9 to 128. This means that the
    on-disk EFI label has efi_nparts = 128 instead of 9. The index of the
    reserved partition, however, is still 8. This breaks
    efi_use_whole_disk(), which uses efi_nparts-1 as the index of the
    reserved partition.
    
    This commit fixes efi_use_whole_disk() when the index of the reserved
    partition is not efi_nparts-1. It rewrites the algorithm and makes it
    more robust by using the order of the partitions instead of their
    numbering. It assumes that the last non-empty partition is the reserved
    partition, and that the non-empty partition before that is the data
    partition.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #808

[33mcommit 7608bd0dd01829a130cd8a4d244e197ce8fa590a[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Fri Jul 6 16:22:03 2012 +0200

    Use the right device path when relabeling.
    
    Currently, zpool_vdev_online() calls zpool_relabel_disk() with a short
    partition device name, which is obviously wrong because (1)
    zpool_relabel_disk() expects a full, absolute path to use with open()
    and (2) efi_write() must be called on an opened disk device, not a
    partition device.
    
    With this patch, zpool_relabel_disk() gets called with a full disk
    device path. The path is determined using the same algorithm as
    zpool_find_vdev().
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #808

[33mcommit 8adf48642253c2ef9571ece5b233e0bf1f0217a8[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Fri Jul 6 15:44:14 2012 +0200

    Fix error handling for "zpool online -e".
    
    The error handling code around zpool_relabel_disk() is either inexistent
    or wrong. The function call itself is not checked, and
    zpool_relabel_disk() is generating error messages from an unitialized
    buffer.
    
    Before:
    
        # zpool online -e homez sdb; echo $?
        `: cannot relabel 'sdb1': unable to open device: 2
        0
    
    After:
    
        # zpool online -e homez sdb; echo $?
        cannot expand sdb: cannot relabel 'sdb1': unable to open device: 2
        1
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #808

[33mcommit c7f2d69de397b02cc803f541dd2d405e0c284e76[m
Author: George Wilson <george.wilson@delphix.com>
Date:   Wed Jul 11 13:02:44 2012 -0700

    Illumos #1949, #1953
    
    1949 crash during reguid causes stale config
    1953 allow and unallow missing from zpool history since removal of pyzfs
    
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Matt Ahrens <matt@delphix.com>
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Reviewed by: Bill Pijewski <wdp@joyent.com>
    Reviewed by: Richard Lowe <richlowe@richlowe.net>
    Reviewed by: Garrett D'Amore <garrett.damore@gmail.com>
    Reviewed by: Dan McDonald <danmcd@nexenta.com>
    Reviewed by: Steve Gonczi <gonczi@comcast.net>
    Approved by: Eric Schrock <eric.schrock@delphix.com>
    
    References:
      https://www.illumos.org/issues/1949
      https://www.illumos.org/issues/1953
    
    Ported by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #665

[33mcommit 3541dc6d02592bd0939ea2d35b50c2bbdcc4cd0e[m
Author: Garrett D'Amore <garrett@nexenta.com>
Date:   Fri Nov 11 14:07:54 2011 -0800

    Illumos #1748: desire support for reguid in zfs
    
    Reviewed by: George Wilson <gwilson@zfsmail.com>
    Reviewed by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Reviewed by: Alexander Eremin <alexander.eremin@nexenta.com>
    Reviewed by: Alexander Stetsenko <ams@nexenta.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    References:
      https://www.illumos.org/issues/1748
    
    This commit modifies the user to kernel space ioctl ABI.  Extra
    care should be taken when updating to ensure both the kernel
    modules and utilities are updated.  If only the user space
    component is updated both the 'zpool events' command and the
    'zpool reguid' command will not work until the kernel modules
    are updated.
    
    Ported by:     Martin Matuska <martin@matuska.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #665

[33mcommit ba9b5428fd1d7bab68138a1442cd918d0f90200c[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Tue Jul 10 09:27:09 2012 -0400

    Relicense zfs.gentoo.in from GPLv2 to 2-clause BSD
    
    As the Gentoo sys-fs/zfs maintainer, I receive license compatibility
    questions and at times, those questions can be harassing. I feel that
    the presence of the GPL in Gentoo's package metadata promotes such
    questions.  zfs.gentoo.in is the only GPLv2 licensed file in ZFS, so I
    have taken the liberty of contacting all contributors to this file to
    request permission to relicense it.
    
    All of the contributors to this file have agreed to relicense it under
    the 2-clause BSD license. I have added their Signed-offs to this commit,
    in order of first contribution. Thank you everyone for being so
    understanding.
    
    Signed-off-by: devsk <devsku@gmail.com>
    Signed-off-by: Alexey Shvetsov <alexxy@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Andrew Tselischev <andrewtselischev@gmail.com>
    Signed-off-by: Zachary Bedell <zac@thebedells.org>
    Signed-off-by: Gunnar Beutner <gunnar@beutner.name>
    Signed-off-by: Kyle Fuller <inbox@kylefuller.co.uk>
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Closes #819

[33mcommit a3873583c2128c6a41e640fe35f544f8c54848d8[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Mon Jul 9 19:41:28 2012 -0400

    Use ULL suffix in constants
    
    The lack of the ULL suffix causes warnings such as the following on
    32-bit systems:
    
      In function 'zfsctl_is_snapdir':
      zfs-0.6.0//module/zfs/zfs_ctldir.c:151: warning: integer constant
      is too large for 'long' type
    
    We add the ULL suffix to fix that.
    
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #813

[33mcommit 42d3b990cfba9906e25bbf6b60e96389244f8082[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jul 3 14:47:57 2012 -0700

    Update incorrect ddt_zap_lookup() assertion
    
    When the ddt_zap_lookup() function was updated to dynamically
    allocate memory for the cbuf variable, to save stack space, the
    'csize <= sizeof (cbuf)' assertion was not updated.  The result
    of this was that the size of the pointer was being used in the
    comparison rather than the buffer size.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Prakash Surya <surya1@llnl.gov>

[33mcommit fa881d4addb7baa44c69350b91bdf0503221d7af[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jul 2 15:16:05 2012 -0700

    Remove Chaos 4.x RPM support
    
    The Chaos 4.x distribution is based on RHEL 5.x which is no longer
    supported by ZoL since it uses a 2.6.18 kernel.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 1a3a73d5d3910bc5b1231c1c3c6b813cec5089a6[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Fri May 11 12:12:08 2012 -0700

    Support debug and debug-devel sub packages
    
    This commit adds support for building debug and debug-devel sub packages
    of the zfs-modules main package. This is to allow building packages
    which are built against a debug kernel. By default, only packages are
    built against a regular non-debug kernel. This can be toggled by passing
    the '--with kernel-debug' parameter to rpmbuild.
    
    Examples:
    
        # To build packages against only the non-debug kernel
        $ rpmbuild --rebuild --with kernel --without kernel-debug $SRPM
    
        # To build packages against only the debug kernel
        $ rpmbuild --rebuild --without kernel --with kernel-debug $SRPM
    
        # To build packages against debug and non-debug kernel
        $ rpmbuild --rebuild --with kernel --with kernel-debug $SRPM
    
    Note: Only the RHEL 5/6, CHAOS 5, and Fedora distributions are supported
          for building the debug and debug-devel packages.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit b6ad9671acdd245385744bcc1fe6c0f21f252570[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Fri Jun 15 16:22:14 2012 +0200

    Add ZIL statistics.
    
    The performance of the ZIL is usually the main bottleneck when dealing with
    synchronous, write-heavy workloads (e.g. databases). Understanding the
    behavior of the ZIL is required to diagnose performance issues for these
    workloads, and to tune ZIL parameters (like zil_slog_limit) accordingly.
    
    This commit adds a new kstat page dedicated to the ZIL with some counters
    which, hopefully, scheds some light into what the ZIL is doing, and how it is
    doing it.
    
    Currently, these statistics are available in /proc/spl/kstat/zfs/zil.
    A description of the fields can be found in zil.h.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #786

[33mcommit 7164d092210f122a4564ab37fb4fce476ec4485f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jun 14 11:46:40 2012 -0700

    ZFS 0.6.0-rc9

[33mcommit 0cee24064a79f9c01fc4521543c37acea538405f[m
Author: Pawel Jakub Dawidek <pawel@dawidek.net>
Date:   Tue May 29 10:50:50 2012 -0700

    Speed up 'zfs list -t snapshot -o name -s name'
    
    FreeBSD #xxx:  Dramatically optimize listing snapshots when user
    requests only snapshot names and wants to sort them by name, ie.
    when executes:
    
      # zfs list -t snapshot -o name -s name
    
    Because only name is needed we don't have to read all snapshot
    properties.
    
    Below you can find how long does it take to list 34509 snapshots
    from a single disk pool before and after this change with cold and
    warm cache:
    
        before:
    
            # time zfs list -t snapshot -o name -s name > /dev/null
            cold cache: 525s
            warm cache: 218s
    
        after:
    
            # time zfs list -t snapshot -o name -s name > /dev/null
            cold cache: 1.7s
            warm cache: 1.1s
    
    NOTE: This patch only appears in FreeBSD.  If/when Illumos picks up
    the change we may want to drop this patch and adopt their version.
    However, for now this addresses a real issue.
    
    Ported-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #450

[33mcommit 74497b7ab6af69434453e03c755d3f6e6e655aee[m
Author: Darik Horn <dajhorn@vanadac.com>
Date:   Fri Jun 1 20:49:10 2012 -0500

    Add zvol_inhibit_dev module option.
    
    ZoL can create more zvols at runtime than can be configured during
    system start, which hangs the init stack at reboot.
    
    When a slow system has more than a few hundred zvols, udev will
    fork bomb during system start and spend too much time in device
    detection routines, so upstart kills it.
    
    The zfs_inhibit_dev option allows an affected system to be rescued
    by skipping /dev/zd* creation and thereby avoiding the udev
    overload. All zvols are made inaccessible if this option is set, but
    the `zfs destroy` and `zfs send` commands still work, and ZFS
    filesystems can be mounted.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit bc98d6c80944dcd920d1147e6bff2192e886a2f5[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Tue Apr 24 15:13:47 2012 -0400

    Make zvol_remove_link() print a more useful error message
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit d53574e568d70fc8c3d77cc711c306f91fd6abe8[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jun 13 12:58:27 2012 -0700

    Mark zdev.conf as a config file
    
    Prevent 'rpm -Uvh *.rpm" from automatically replacing your vdev.conf
    file by flagging it as a non replacable config file.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #486

[33mcommit fe2fc8f6d383f1621446f98bb277c12f6b457b8f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jun 13 11:21:16 2012 -0700

    Workaround for failing zvol_id
    
    This is not a proper fix.  It is just a workaround for the stack
    smashing detected by gcc in zvol_id.  We simply disable the gcc
    stack protector for now when building the zvol_id udev helper.
    Once the root cause is resolved this patch should be reverted.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issues #569

[33mcommit ee191e802c515ae509aec382cac33c9d89235dc5[m
Author: Etienne Dechamps <e-t172@akegroup.org>
Date:   Tue Jun 12 11:40:36 2012 +0200

    Make zil_slog_limit a tunable module parameter.
    
    zil_slog_limit specifies the maximum commit size to be written to the separate
    log device. Larger commits bypass the separate log device and go directly to
    the data devices.
    
    The optimal value for zil_slog_limit directly depends on the latency and
    throughput characteristics of both the separate log device and the data disks.
    Small synchronous writes are faster on low-latency separate log devices (e.g.
    SSDs) whereas large synchronous writes are faster on high-latency data disks
    (e.g. spindles) because of higher throughput, especially with a large array.
    The point is, the line between "small" and "large" synchronous writes in this
    scenario is heavily dependent on the hardware used. That's why it should be
    made configurable.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #783

[33mcommit c6327b63e6d3a11bb333829a8341d572e2fa7d9f[m
Author: Daniel Verite <daniel@verite.pro>
Date:   Sat Jun 9 04:16:11 2012 +0200

    Retry removal of busy minors
    
    When failing to remove a zvol device link because it's busy, wait
    a bit and retry in a loop instead of giving up immediately.  This
    technique is similar to the loop in zpool_label_disk_wait(), with
    the same goal: waiting for the asynchronous udev processes to finish
    their work.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #692

[33mcommit 92e91da20839ee50536223bedf2ba4fb7d2fae71[m
Author: Daniel Verite <daniel@verite.pro>
Date:   Fri Jun 8 22:30:39 2012 +0200

    Include <locale.h> to avoid error: 'LC_ALL' undeclared.
    
    When compiling ZFS with CFLAGS=-O0 it will trigger the following error.
    Resolve the issue by properly including locale.h.
    
      ../../cmd/mount_zfs/mount_zfs.c: In function 'main':
      ../../cmd/mount_zfs/mount_zfs.c:318:2: warning: implicit declaration
          of function 'setlocale' [-Wimplicit-function-declaration]
      ../../cmd/mount_zfs/mount_zfs.c:318:19: error: 'LC_ALL' undeclared
          (first use in this function)
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #724

[33mcommit 6a0936babc14a44986265a12f206c41999bd48c3[m
Author: Richard Yao <ryao@gentoo.org>
Date:   Wed Jun 6 17:08:00 2012 +0000

    Linux 3.4 compat, d_make_root() replaces d_alloc_root()
    
    torvalds/linux@adc0e91ab142abe93f5b0d7980ada8a7676231fe introduced
    introduced d_make_root() as a replacement for d_alloc_root(). Further
    commits appear to have removed d_alloc_root() from the Linux source
    tree. This causes the following failure:
    
      error: implicit declaration of function 'd_alloc_root'
      [-Werror=implicit-function-declaration]
    
    To correct this we update the code to use the current d_make_root()
    interface for readability.  Then we introduce an autotools check
    to determine if d_make_root() is available.  If it isn't then we
    define some compatibility logic which used the older d_alloc_root()
    interface.
    
    Signed-off-by: Richard Yao <ryao@gentoo.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #776

[33mcommit ab85f8455b995741c479f1cdcf21304de87fdaa8[m
Author: Etienne Dechamps <e-t172@akegroup.org>
Date:   Wed Jun 6 11:30:24 2012 +0200

    Honor logbias when writing to ZVOLs.
    
    The logbias option is not taken into account when writing to ZVOLs. We fix
    that by using the same logic as in the zfs filesystem write code
    (see zfs_log.c).
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #774

[33mcommit cac1f230e0537ceddead464dbd140e23a0556be6[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Tue Jun 5 12:45:37 2012 -0700

    Improve CONFIG_DEBUG_LOCK_ALLOC error message
    
    The configure script error message for kernels built with
    CONFIG_DEBUG_LOCK_ALLOC may give the impression that the issue is
    strictly with license compliance.  To avoid confusion add some words
    indicating that the linking stage will fail if the build continues.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #773

[33mcommit abe5b8fb669dfb30134e09d797665bb43b60fc2a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu May 31 12:42:51 2012 -0700

    Improve 'zpool import' EBUSY error message
    
    When a device is already open O_EXCL by another process the
    `zpool import` will correctly fail.  However, the default failure
    message isn't very helpful.  It may in fact be harmful if you
    take its advise and destroy your pool.
    
        cannot import 'tank': pool is busy
                Destroy and re-create the pool from
                a backup source.
    
    Improve the error message in the EBUSY case to simply print a
    message indicating that the devices are current in use.  The user
    will need to manually identify which process has the device open
    exclusively and why.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit b04c9fc009ca0a0cabb7550625ff273b9edd9729[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri May 25 14:52:56 2012 -0700

    Add /dev/mapper/ to search path
    
    When creating pools short device names may be used when those
    devices appear in certain well known locations under /dev/.
    This change adds /dev/mapper/ to that list.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 821b683436423593a1f3ee597f40a61bd4569bdd[m
Author: Ned A. Bass <bass6@zeno1.(none)>
Date:   Fri Apr 20 17:32:30 2012 -0700

    Add vdev_id for JBOD-friendly udev aliases
    
    vdev_id parses the file /etc/zfs/vdev_id.conf to map a physical path
    in a storage topology to a channel name.  The channel name is combined
    with a disk enclosure slot number to create an alias that reflects the
    physical location of the drive.  This is particularly helpful when it
    comes to tasks like replacing failed drives.  Slot numbers may also be
    re-mapped in case the default numbering is unsatisfactory.  The drive
    aliases will be created as symbolic links in /dev/disk/by-vdev.
    
    The only currently supported topologies are sas_direct and sas_switch:
    
    o  sas_direct - a channel is uniquely identified by a PCI slot and a
       HBA port
    
    o  sas_switch - a channel is uniquely identified by a SAS switch port
    
    A multipath mode is supported in which dm-mpath devices are handled by
    examining the first running component disk, as reported by 'multipath
    -l'.  In multipath mode the configuration file should contain a
    channel definition with the same name for each path to a given
    enclosure.
    
    vdev_id can replace the existing zpool_id script on systems where the
    storage topology conforms to sas_direct or sas_switch.  The script
    could be extended to support other topologies as well.  The advantage
    of vdev_id is that it is driven by a single static input file that can
    be shared across multiple nodes having a common storage toplogy.
    zpool_id, on the other hand, requires a unique /etc/zfs/zdev.conf per
    node and a separate slot-mapping file.  However, zpool_id provides the
    flexibility of using any device names that show up in
    /dev/disk/by-path, so it may still be needed on some systems.
    
    vdev_id's functionality subsumes that of the sas_switch_id script, and
    it is unlikely that anyone is using it, so sas_switch_id is removed.
    
    Finally, /dev/disk/by-vdev is added to the list of directories that
    'zpool import' will scan.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #713

[33mcommit e5b85622771090b7529cffdd38c0402a544609ef[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon May 21 12:59:58 2012 -0700

    Extend CONFIG_DEBUG_LOCK_ALLOC check
    
    The CONFIG_DEBUG_LOCK_ALLOC check at configure time was added to
    detect when mutex_lock() is defined as a GPL-only symbol.  However,
    the check as written only inferred this from this configuration
    setting, it never actually checked.  This change introduces that
    missing check to prevent false positives.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit c421831192e4015c300239d862c5b9d47088ecd1[m
Author: Jorgen Lundman <lundman@lundman.net>
Date:   Sat Apr 28 06:31:20 2012 +0000

    Define the needed ISA types for ARM
    
    Add the minimum required ISA types to support the ARM architecture.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 710114089fd7032125b6a2c24b24483c90a87907[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Apr 30 14:24:39 2012 -0700

    Revert "Disable direct reclaim on zvols"
    
    This reverts commit ce90208cf9e04df966429f115d8831371ea9afce.  This
    change was observed to cause problems when using a zvol to back a VM
    under 2.6.32.59 kernels.  This issue was filed as #710.
    
    Signed-off-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #342
    Issue #710

[33mcommit 3462fa279c7e821e3afdb02bf687a779a82a38ee[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Apr 30 13:31:05 2012 -0700

    Add mdadm and bc dependencies
    
    The zfs-test package additionally depends on mdadm and bc to
    run the zfault.sh tests.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #690

[33mcommit b39d3b9f7be925ba9314c336099f31f508e1d940[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Apr 30 12:01:49 2012 -0700

    Linux 3.3 compat, iops->create()/mkdir()/mknod()
    
    The mode argument of iops->create()/mkdir()/mknod() was changed from
    an 'int' to a 'umode_t'.  To prevent a compiler warning an autoconf
    check was added to detect the API change and then correctly set a
    zpl_umode_t typedef.  There is no functional change.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #701

[33mcommit ce90208cf9e04df966429f115d8831371ea9afce[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Mon Apr 16 06:56:20 2012 -0400

    Disable direct reclaim on zvols
    
    Previously, it was possible for the direct reclaim path to be invoked
    when a write to a zvol was made. When a zvol is used as a swap device,
    this often causes swap requests to depend on additional swap requests,
    which deadlocks. We address this by disabling the direct reclaim path
    on zvols.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #342

[33mcommit 518b4876022eee58b14903da09b99c01b8caa754[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Thu Apr 12 17:22:08 2012 -0400

    Update ARC memory limits to account for SLUB internal fragmentation
    
    23bdb07d4e4c435205d25d3efdb5fef2d089ce5e updated the ARC memory limits
    to be 1/2 of memory or all but 4GB. Unfortunately, these values assume
    zero internal fragmentation in the SLUB allocator, when in reality, the
    internal fragmentation could be as high as 50%, effectively doubling
    memory usage. This poses clear safety issues, because it permits the
    size of ARC to exceed system memory.
    
    This patch changes this so that the default value of arc_c_max is always
    1/2 of system memory. This effectively limits the ARC to the memory that
    the system has physically installed.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #660

[33mcommit 302f753f1657c05a4287226eeda1f53ae431b8a7[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 13 14:29:16 2012 -0700

    Integrate ARC more tightly with Linux
    
    Under Solaris the ARC was designed to stay one step ahead of the
    VM subsystem.  It would attempt to recognize low memory situtions
    before they occured and evict data from the cache.  It would also
    make assessments about if there was enough free memory to perform
    a specific operation.
    
    This was all possible because Solaris exposes a fairly decent
    view of the memory state of the system to other kernel threads.
    Linux on the other hand does not make this information easily
    available.  To avoid extensive modifications to the ARC the SPL
    attempts to provide these same interfaces.  While this works it
    is not ideal and problems can arise when the ARC and Linux have
    different ideas about when your out of memory.  This has manifested
    itself in the past as a spinning arc_reclaim_thread.
    
    This patch abandons the emulated Solaris interfaces in favor of
    the prefered Linux interface.  That means moving the bulk of the
    memory reclaim logic out of the arc_reclaim_thread and in to the
    evict driven shrinker callback.  The Linux VM will call this
    function when it needs memory.  The ARC is then responsible for
    attempting to free the requested amount of memory if possible.
    
    Several interfaces have been modified to accomidate this approach,
    however the basic user space implementation remains the same.
    The following changes almost exclusively just apply to the kernel
    implementation.
    
    * Removed the hdr_recl() reclaim callback which is redundant
      with the broader arc_shrinker_func().
    
    * Reduced arc_grow_retry to 5 seconds from 60.  This is now used
      internally in the ARC with arc_no_grow to indicate that direct
      reclaim was recently performed.  This typically indicates a
      rapid change in memory demands which the kswapd threads were
      unable to keep ahead of.  As long as direct reclaim is happening
      once every 5 seconds arc growth will be paused to avoid further
      contributing to the existing memory pressure.  The more common
      indirect reclaim paths will not set arc_no_grow.
    
    * arc_shrink() has been extended to take the number of bytes by
      which arc_c should be reduced.  This allows for a more granual
      reduction of the arc target.  Since the kernel provides a
      reclaim value to the arc_shrinker_func() this value is used
      instead of 1<<arc_shrink_shift.
    
    * arc_reclaim_needed() has been removed.  It was used to determine
      if the system was under memory pressure and relied extensively
      on Solaris specific VM interfaces.  In most case the new code
      just checks arc_no_grow which indicates that within the last
      arc_grow_retry seconds direct memory reclaim occurred.
    
    * arc_memory_throttle() has been updated to always include the
      amount of evictable memory (arc and page cache) in its free
      space calculations.  This space is largely available in most
      call paths due to direct memory reclaim.
    
    * The Solaris pageout code was also removed to avoid confusion.
      It has always been disabled due to proc_pageout being defined
      as NULL in the Linux port.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit afec56b43fd84edd69cb7f32030578bb35e5e1ea[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Apr 27 16:20:31 2012 -0700

    Add zfs_mdcomp_disable module option
    
    Expose the zfs_mdcomp_disable variable as a module option.  This
    can be used to disable compression of zfs meta data which is
    enabled by default.  This shouldn't need to be tuned but for
    most workloads, however there may be very specific instances
    where it makes sense to trade disk capacity for extra cpu cycles.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit ad60af8e1bfe7ccdbc41f754023e06fa4e2699bc[m
Author: Richard Lowe <richlowe@richlowe.net>
Date:   Tue Apr 24 06:51:02 2012 -0400

    Illumos #2067: uninitialized variables in zfs(1M) may make snapshots undestroyable
    
    Reviewed by: Joshua M. Clulow <josh@sysmgr.org>
    Reviewed by: Milan Jurik <milan.jurik@xylab.cz>
    Reviewed by: Igor Kozhukhov <ikozhukhov@gmail.com>
    Reviewed by: Garrett D'Amore <garrett@damore.org>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Reviewed by: Steve Gonczi <gonczi@comcast.net>
    Approved by: Garrett D'Amore <garrett@damore.org>
    
    References:
    	https://www.illumos.org/issues/2067
    
    Ported by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 95bcd51ecc3685111e03f407fa7ce40970f99aee[m
Author: Frederik Wessels <wessels147@gmail.com>
Date:   Tue Apr 24 07:59:56 2012 -0400

    Illumos #1946: incorrect formatting when listing output of multiple pools with zpool iostat -v
    
    Reviewed by: Richard Elling <richard.elling@richardelling.com>
    Reviewed by: Joshua M. Clulow <josh@sysmgr.org>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    Reference to Illumos issue:
      https://www.illumos.org/issues/1946
    
    Ported by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 187632dcef255acfbeff203d96b00904eb1e1c0a[m
Author: Mike Harsch <mike@harschsystems.com>
Date:   Mon Apr 23 17:52:50 2012 -0400

    Illumos #952: separate intent logs should be obvious in 'zpool iostat' output
    
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Matt Ahrens <mahrens@delphix.com>
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Reviewed by: Dan McDonald <danmcd@nexenta.com>
    Reviewed by: Garrett D'Amore <garrett@nexenta.com>
    Approved by: Eric Schrock <eric.schrock@delphix.com>
    
    Refererce to Illumos issue:
      https://www.illumos.org/issues/952
    
    Ported-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #607

[33mcommit ebf8e3a237d4720e3a85fb3a168917ead4ba25d1[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Apr 19 15:55:28 2012 -0700

    Illumos #1909: disk sync write perf regression when slog is used post oi_148
    
    Reviewed by: Matt Ahrens <matt@delphix.com>
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Reviewed by: Robert Mustacchi <rm@joyent.com>
    Reviewed by: Bill Pijewski <wdp@joyent.com>
    Reviewed by: Richard Elling <richard.elling@richardelling.com>
    Reviewed by: Steve Gonczi <gonczi@comcast.net>
    Reviewed by: Garrett D'Amore <garrett.damore@gmail.com>
    Reviewed by: Dan McDonald <danmcd@nexenta.com>
    Reviewed by: Albert Lee <trisk@nexenta.com>
    Approved by: Eric Schrock <eric.schrock@delphix.com>
    
    Refererces to Illumos issue:
      https://www.illumos.org/issues/1909
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #680

[33mcommit 409dc1a570a836737b2a5bb43658cdde703c935e[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Tue Apr 10 10:55:17 2012 -0700

    Use KM_PUSHPAGE in l2arc_write_buffers
    
    There is potential for deadlock in the l2arc_feed thread if KM_PUSHPAGE
    is not used for the allocations made in l2arc_write_buffers.
    Specifically, if KM_PUSHPAGE is not used for these allocations, it is
    possible for reclaim to be triggered which can cause the l2arc_feed
    thread to deadlock itself on the ARC_mru mutex. An example of this is
    demonstrated in the following backtrace of the l2arc_feed thread:
    
        crash> bt 4123
        PID: 4123   TASK: ffff88062f8c1500  CPU: 6   COMMAND: "l2arc_feed"
          0 [ffff88062511d610] schedule at ffffffff814eeee0
          1 [ffff88062511d6d8] __mutex_lock_slowpath at ffffffff814f057e
          2 [ffff88062511d748] mutex_lock at ffffffff814f041b
          3 [ffff88062511d768] arc_evict at ffffffffa05130ca [zfs]
          4 [ffff88062511d858] arc_adjust at ffffffffa05139a9 [zfs]
          5 [ffff88062511d878] arc_shrink at ffffffffa0513a95 [zfs]
          6 [ffff88062511d898] arc_kmem_reap_now at ffffffffa0513be8 [zfs]
          7 [ffff88062511d8c8] arc_shrinker_func at ffffffffa0513ccc [zfs]
          8 [ffff88062511d8f8] shrink_slab at ffffffff8112a17a
          9 [ffff88062511d958] do_try_to_free_pages at ffffffff8112bfdf
         10 [ffff88062511d9e8] try_to_free_pages at ffffffff8112c3ed
         11 [ffff88062511da98] __alloc_pages_nodemask at ffffffff8112431d
         12 [ffff88062511dbb8] kmem_getpages at ffffffff8115e632
         13 [ffff88062511dbe8] fallback_alloc at ffffffff8115f24a
         14 [ffff88062511dc68] ____cache_alloc_node at ffffffff8115efc9
         15 [ffff88062511dcc8] __kmalloc at ffffffff8115fbf9
         16 [ffff88062511dd18] kmem_alloc_debug at ffffffffa047b8cb [spl]
         17 [ffff88062511dda8] l2arc_feed_thread at ffffffffa0511e71 [zfs]
         18 [ffff88062511dea8] thread_generic_wrapper at ffffffffa047d1a1 [spl]
         19 [ffff88062511dee8] kthread at ffffffff81090a86
         20 [ffff88062511df48] kernel_thread at ffffffff8100c14a
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit cf81b00a73fe47fdb21586ac1cc179b734540973[m
Author: P.SCH <p88@yahoo.com>
Date:   Mon Apr 9 09:05:54 2012 +0300

    ZFS list snapshot property alias
    
    Add support for the `zfs list -t snap` alias which is available under
    Oracle Solaris 11.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #640

[33mcommit 10b75496bb0cb7a7b8146c263164adc37f1d176a[m
Author: P.SCH <p88@yahoo.com>
Date:   Thu Apr 5 16:03:21 2012 +0300

    ZFS snapshot alias
    
    For consistency, and because it's handy, add the 'zfs snap' alias which
    was introduced by Oracle Solaris 11.  This includes an update to the
    man page to reflect all the available alias (snap, umount, and recv).
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #640

[33mcommit 7d5cd71da6987565d19701b1d102f882f659b815[m
Author: Martin Matuska <mm@FreeBSD.org>
Date:   Sun Apr 8 13:16:46 2012 -0400

    Illumos #1346: zfs incremental receive may leave behind temporary clones
    
    1356 zfs dataset prefetch code not working
    Reviewed by: Matthew Ahrens <matt@delphix.com>
    Reviewed by: Dan McDonald <danmcd@nexenta.com>
    Approved by: Gordon Ross <gwr@nexenta.com>
    
    References to Illumos issue:
      https://www.illumos.org/issues/1346
      https://www.illumos.org/issues/1356
    
    Ported-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #647

[33mcommit 22cd4a465349618a415802f28146653a93bb4594[m
Author: Albert Lee <trisk@nexenta.com>
Date:   Sun Apr 8 13:10:49 2012 -0400

    Illumos #1475: zfs spill block hold can access invalid spill blkptr
    
    Reviewed by: Dan McDonald <danmcd@nexenta.com>
    Reviewed by: Gordon Ross <gwr@nexenta.com>
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: George Wilson <gwilson@zfsmail.com>
    Approved by: Garrett D'Amore <garrett@nexenta.com>
    
    References to Illumos issue:
      https://www.illumos.org/issues/1475
    
    Ported-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #648

[33mcommit 5ffb9d1d05d7c512b987dff51f587466d537770f[m
Author: George Wilson <gwilson@zfsmail.com>
Date:   Sun Apr 8 13:23:08 2012 -0400

    Illumos #1951: leaking a vdev when removing an l2cache device
    
    1952 memory leak when adding a file-based l2arc device
    1954 leak in ZFS from metaslab_group_create and zfs_ereport_checksum
    
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Reviewed by: Matt Ahrens <matt@delphix.com>
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Reviewed by: Bill Pijewski <wdp@joyent.com>
    Reviewed by: Dan McDonald <danmcd@nexenta.com>
    Approved by: Eric Schrock <eric.schrock@delphix.com>
    
    References to Illumos issues:
      https://www.illumos.org/issues/1951
      https://www.illumos.org/issues/1952
      https://www.illumos.org/issues/1954
    
    Ported-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #650

[33mcommit b129c6590e07edcc95f3b64ec210d94cf885c192[m
Author: Martin Matuska <mm@FreeBSD.org>
Date:   Sun Apr 8 13:18:48 2012 -0400

    OS-926: zfs panic in zfs_fill_zplprops_impl()
    
    This change appears to be exclusive to SmartOS. It is not present in
    illumos-gate but it just adds some needed error handling.  This is
    clearly preferable to simply ASSERTING which is what would occur
    prior to the patch.
    
    Reviewed by: Jerry Jelinek <jerry.jelinek@joyent.com>
    Reviewed by: Matt Ahrens <matt@delphix.com>
    Ported-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #652

[33mcommit 3adfc400f5f6c8b24b825cbe91c14b7d58f3c7fc[m
Author: Andriy Gapon <avg@FreeBSD.org>
Date:   Mon Apr 9 13:01:46 2012 -0400

    Illumos #1680: zfs vdev_file_io_start: validate vdev before using vdev_tsd
    
    vdev_tsd can be NULL for certain vdev states.
    At least in userland testing with ztest.
    
    References to Illumos issue:
      https://www.illumos.org/issues/1680
    
    Ported-by: Richard Yao <ryao@cs.stonybrook.edu>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #655

[33mcommit 109491a8976ec6f3fef74ee16bc16f64c34332af[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Mon Apr 9 16:59:37 2012 -0500

    Improve error message consistency
    
    Signed-off-by: Richard Laager <rlaager@wiktel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit f4605f07a2901566c9d4ae84e7c17e3ba827ce8a[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Tue Apr 10 20:03:26 2012 -0500

    Document the zle compression algorithm
    
    Signed-off-by: Richard Laager <rlaager@wiktel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit f0fd83be65152a218c7daa1d006b53fb4b79bdce[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Apr 4 13:46:55 2012 -0700

    Export additional dsl symbols
    
    Principly these symbols were exported to get access to the
    dsl_prop_register/dsl_prop_unregister functions.  They allow
    us to cleanly register a callback which is called when a
    dataset property is modified.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 1f0d8a566f0251ff9404b98233ae8d5406c6d308[m
Author: Gunnar Beutner <gunnar@beutner.name>
Date:   Thu Apr 5 10:30:10 2012 +0200

    Fixed a NULL pointer dereference bug in zfs_preumount
    
    When zpl_fill_super -> zfs_domount fails (e.g. because the dataset
    was destroyed before it could be successfully mounted) the subsequent
    call to zpl_kill_sb -> zfs_preumount would derefence a NULL pointer.
    
    This bug can be reproduced using this shell script:
    
     #!/bin/sh
     (
     while true; do
     	zfs create -o mountpoint=legacz tank/bar
     	zfs destroy tank/bar
     done
     ) &
    
     (
     while true; do
     	mount -t zfs tank/bar /mnt
     	umount /mnt
     done
     ) &
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #639

[33mcommit 2ce9d0ec61706e56abd4c56fe78bfe11365ad130[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Tue Apr 3 00:21:22 2012 -0400

    Make Gentoo initscript use modinfo
    
    The -l parameter to modprobe has been removed from the latest upstream
    code and this change has entered Gentoo. Using modinfo as a substitute
    addresses this.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #636

[33mcommit 847de12271af349bba07027dbcbc83aaa53b4b1a[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Mon Apr 2 20:44:42 2012 -0400

    Print human readable error message for ENOENT
    
    A cryptic error code is printed when mounting a legacy dataset to a
    non-existent mountpoint. This patch changes this behavior to print
    "mount point '%s' does not exist", which is similar to the error
    message printed when mounting procfs.
    
    The single quotes were added to be consistent with the existing EBUSY
    error message, which is the only difference between this error message
    and the one that is printed when the same condition occurs when mounting
    procfs.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #633

[33mcommit fc41c6402b46d928dcc0a07435da1716b3a33c7c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 27 10:10:26 2012 -0700

    Properly expose the mfu ghost list kstats
    
    Due to a typo the mru ghost lists stats were accidentally being
    exposed as the mfu ghost list stats.  This was harmless but
    confusing since memory usage could be over reported.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 9fc60702c6679803c77939db732c294b6b6952d2[m
Author: Craig Sanders <github@taz.net.au>
Date:   Tue Mar 27 21:37:41 2012 +1100

    Remove hard-coded 80 column output
    
    When stdout is detected to be a tty use the number of columns
    specified by the terminal.  If that fails fall back to a default
    80 column width.  In the non-tty case allow for 999 column lines.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 2008ab88dd19ae3947b30b4e933fbf2273300aa2[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Mar 26 11:55:16 2012 -0700

    ZFS 0.6.0-rc8

[33mcommit f47e1351db9f2e8bb769dd683801710cff988011[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Mar 26 10:34:55 2012 -0700

    Fix executable permissions
    
    Caught by lint, this permission change was accidentally introduced
    by commit 42cb3819f1a1f536105faac81ffc150f3da90a80.  Restore the
    correct permissions and while I'm at it add a missing whack-bang
    to config/ltmain.sh.
    
      lint: executable-not-elf-or-script: zpool_main.c zfs_main.c
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #620

[33mcommit 1c5de20ae2511124613926e4f780572634818218[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 20 16:00:17 2012 -0700

    Add --enable-debug-dmu-tx configure option
    
    Allow rigorous (and expensive) tx validation to be enabled/disabled
    indepentantly from the standard zfs debugging.  When enabled these
    checks ensure that all txs are constructed properly and that a dbuf
    is never dirtied without taking the correct tx hold.
    
    This checking is particularly helpful when adding new dmu consumers
    like Lustre.  However, for established consumers such as the zpl
    with no known outstanding tx construction problems this is just
    overhead.
    
    --enable-debug-dmu-tx  - Enable/disable validation of each tx as
    --disable-debug-dmu-tx   it is constructed.  By default validation
                             is disabled due to performance concerns.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 99ea23c583b272470a21e0ac7caa1f485f6b1125[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Mar 12 12:38:00 2012 -0700

    Enhance a dmu_tx_dirty_buf() assertion
    
    The following assertion is good to validate the correctness of
    new DMU consumers, but it doesn't quite provide enough information.
    Slightly rework the assertion so that when it is hit the actual
    offending values will be included in the output.
    
      SPLError: 4787:0:(dmu_tx.c:828:dmu_tx_dirty_buf())
      ASSERTION(dn == NULL || dn->dn_assigned_txg == tx->tx_txg) failed
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 4b5d425f14673bfb228699cbafca7609cf30a7da[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Mar 23 11:59:47 2012 -0700

    Add ZFS_META_RELEASE to module load/unload messages
    
    Include the ZFS_META_RELEASE in the module load/unload messages
    to more clearly indidcate exactly what version of ZFS has been
    loaded.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 9ed86e7cc7d0880c35f675efc2177012f01f5678[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Mar 22 14:47:29 2012 -0700

    Account for .zfs ctldir inodes
    
    Because the .zfs ctldir inodes are not backed by physical storage
    they use a different create path which was not properly accounting
    for them as used.  This could result in ->nr_cached_objects()
    returning 0 and cause a divide by zero error in prune_super().
    
    In my option there's a kernel bug here too which allows this to
    happen.  They should either be checking for 0 or adding +1 like
    they correctly do earlier in the function.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #617

[33mcommit ebe7e575eae1e03b1faa545a424f008faeac589d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Nov 11 12:45:53 2011 +0530

    Add .zfs control directory
    
    Add support for the .zfs control directory.  This was accomplished
    by leveraging as much of the existing ZFS infrastructure as posible
    and updating it for Linux as required.  The bulk of the core
    functionality is now all there with the following limitations.
    
    *) The .zfs/snapshot directory automount support requires a 2.6.37
       or newer kernel.  The exception is RHEL6.2 which has backported
       the d_automount patches.
    
    *) Creating/destroying/renaming snapshots with mkdir/rmdir/mv
       in the .zfs/snapshot directory works as expected.  However,
       this functionality is only available to root until zfs
       delegations are finished.
    
          * mkdir - create a snapshot
          * rmdir - destroy a snapshot
          * mv    - rename a snapshot
    
    The following issues are known defeciences, but we expect them to
    be addressed by future commits.
    
    *) Add automount support for kernels older the 2.6.37.  This should
       be possible using follow_link() which is what Linux did before.
    
    *) Accessing the .zfs/snapshot directory via NFS is not yet possible.
       The majority of the ground work for this is complete.  However,
       finishing this work will require resolving some lingering
       integration issues with the Linux NFS kernel server.
    
    *) The .zfs/shares directory exists but no futher smb functionality
       has yet been implemented.
    
    Contributions-by: Rohan Puri <rohan.puri15@gmail.com>
    Contributiobs-by: Andrew Barnes <barnes333@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #173

[33mcommit 49be0ccf1fdc2ce852271d4d2f8b7a9c2c4be6db[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Feb 23 15:32:51 2012 -0800

    Add zio constructor/destructor
    
    Add a standard zio constructor and destructor.  Normally, this is
    done to reduce to cost of allocating a new structure by reducing
    expensive operations such as memory allocations.  However, in this
    case none of the operations moved out of zio_create() were really
    very expensive.
    
    This change was principly made as a debug patch (and workaround)
    for a zio_destroy() race.  The is good evidence that zio_create()
    is reinitializing a mutex which is really still in use by another
    thread.  This would completely explain the observed symptoms in
    the issue report.
    
    This patch doesn't fix the root cause of the race, but it should
    make it less likely by only initializing the mutex once in the
    constructor.  Also, this particular flaw might have gone unnoticed
    in other zfs implementations due to the specific implementation
    details of Linux ticket spinlocks.
    
    Once the real root cause is determined and resolved this change
    can be safely reverted.  Until then this should help workaround
    the issue.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #496

[33mcommit c8df41538db3723edf3536379a78fbaf68f037d0[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Mar 21 11:51:27 2012 -0700

    Revert "Add zio constructor/destructor"
    
    This patch was slightly flawed and allowed for zio->io_logical
    to potentially not be reinitialized for a new zio.  This could
    lead to assertion failures in specific cases when debugging is
    enabled (--enable-debug) and I/O errors are encountered.  It
    may also have caused problems when issues logical I/Os.
    
    Since we want to make sure this workaround can be easily removed
    in the future (when we have the real fix).  I'm reverting this
    change and applying a new version of the patch which includes
    the zio->io_logical fix.
    
    This reverts commit 2c6d0b1e07b0265f0661ed7851d3aa8d3e75e7a9.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #602
    Issue #604

[33mcommit 43c8454724e0ba70b13e40cd2f63ad0d68942776[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Mar 16 11:11:40 2012 -0700

    ZFS 0.6.0-rc7

[33mcommit 77a405ae52e4a902f7cc3790e2a73d044c66d962[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Mar 14 12:36:49 2012 -0700

    Add missing NULL in zpl_xattr_handlers
    
    The xattr_resolve_name() helper function expects the registered
    list of xattr handlers to be NULL terminated.  This NULL was
    accidentally missing which could result in a NULL dereference.
    
    Interestingly this issue only manifested itself on certain 32-bit
    systems.  Presumably on 64-bit kernels we just always happen to
    get lucky and the memory following the structure is zeroed.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #594

[33mcommit 42cb3819f1a1f536105faac81ffc150f3da90a80[m
Author: Gregor Kopka <mailfrom-github.com@kopka.net>
Date:   Wed Mar 14 14:34:00 2012 +0100

    Use stderr for 'no pools/datasets available' error
    
    The 'zfs list' and 'zpool list' commands output the message
    'no datasets/pools available' to stdout.  This should go to
    stderr and only the available datasets/pools should go to
    stdout.  Returning nothing to stdout is expected behavior
    when there is nothing to list.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #581

[33mcommit 0ece356db51e225c3d4a26dff7cf67c99b6b9c55[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Mar 5 15:14:15 2012 -0800

    Add sa_spill_rele() interface
    
    Add a SA interface which allows us to release the spill block
    from a SA handle without destroying the handle.  This is useful
    because we can then ensure that a copy of the dirty spill block
    is not made at sync time due to the extra hold.  Susequent calls
    to sa_update() or sa_lookup() with transparently refetch the
    spill block dbuf from the ARC hash.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 2c6d0b1e07b0265f0661ed7851d3aa8d3e75e7a9[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Feb 23 15:32:51 2012 -0800

    Add zio constructor/destructor
    
    Add a standard zio constructor and destructor.  Normally, this is
    done to reduce to cost of allocating a new structure by reducing
    expensive operations such as memory allocations.  However, in this
    case none of the operations moved out of zio_create() were really
    very expensive.
    
    This change was principly made as a debug patch (and workaround)
    for a zio_destroy() race.  The is good evidence that zio_create()
    is reinitializing a mutex which is really still in use by another
    thread.  This would completely explain the observed symptoms in
    the issue report.
    
    This patch doesn't fix the root cause of the race, but it should
    make it less likely by only initializing the mutex once in the
    constructor.  Also, this particular flaw might have gone unnoticed
    in other zfs implementations due to the specific implementation
    details of Linux ticket spinlocks.
    
    Once the real root cause is determined and resolved this change
    can be safely reverted.  Until then this should help workaround
    the issue.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #496

[33mcommit 76c2b24c613ddac896ee67250b467fd40d6a5689[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Tue Feb 28 16:23:16 2012 -0500

    Fix distribution detection
    
    Improve the distribution detection by moving the tests for
    distribution specific files first.  The Ubuntu and Debian
    checks are left for last because they are the least likely
    to be unique.  This is particularly true in the case of Debian
    since so many distributions are based on Debian.
    
    Since this is currently only used to identify the correct
    packaging method for this system the result in many instances
    is simply cosmetic.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 613d88eda89945bb0011ddc05d3bd064bf1a8e1b[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Wed Feb 29 10:08:20 2012 -0800

    Align parition end on 1 MiB boundary
    
    Some devices have exhibited sensitivity to the ending alignment of
    partitions.  In particular, even if the first partition begins at 1
    MiB, we have seen many sd driver task abort errors with certain SSDs
    if the first partition doesn't end on a 1 MiB boundary.  This occurs
    when the vdev label is read during pool creation or importation and
    causes a delay of about 30 seconds per device.  It can also be
    simulated with dd when the pool isn't imported:
    
      dd if=/dev/sda1 of=/dev/null bs=262144 count=1
    
    For the record, this problem was observed with SMARTMOD
    SG9XCA2E200GE01 200GB SSDs.  Unfortunately I don't have a good
    explanation for this behavior. It seems to have something to do with
    highly fragmented single-sector requests being issued to the device,
    which it may not support.  With end-aligned partitions at least
    page-sized requests were queued and issued to the driver according
    to blktrace. In any case, aligning the partition end is a fairly
    innocuous work-around, wasting at most 1 MiB of space.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #574

[33mcommit ec2626ad3f695a2ced3946c4197ef64cbcac4959[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Mar 2 10:35:50 2012 -0800

    Use SA_HDL_PRIVATE for SA xattrs
    
    A private SA handle must be used to ensure we can drop the dbuf
    hold on the spill block prior to calling dmu_tx_commit().  If we
    call dmu_tx_commit() before sa_handle_destroy(), then our hold
    will trigger a copy of the dbuf to be made.  This is done to
    prevent data from leaking in to the syncing txg.  As a result
    the original dirty spill block will remain cached.
    
    Additionally, relying on the shared zp->z_sa_hdl is unsafe in
    the xattr context because the znode may be asynchronously dropped
    from the cache.  It's far safer and simpler just to use a private
    handle for xattrs.  Plus any additional overhead is offset by
    the avoidance of the previously mentioned memory copy.
    
    These forever dirty buffers can be noticed in the arcstats under
    the anon_size.  On a quiescent system the value should be zero.
    Without this fix and a SA xattr write workload you will see
    anon_size increase.  Eventually, if enough dirty data builds up
    your system it will appear to hang.  This occurs because the dmu
    won't allow new txs to be assigned until that dirty data is
    flushed, and it won't be because it's not part of an assigned tx.
    
    As an aside, I typically see anon_size lurk around 16k so I think
    there is another place in the code which needs a similar fix.
    However, this value doesn't grow over time so it isn't critical.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #503
    Issue #513

[33mcommit 4b787d75c869a7f633607ecb17f3a7c482a553d2[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Feb 27 10:12:40 2012 -0800

    Cleanly support debug packages
    
    Allow a source rpm to be rebuilt with debugging enabled.  This
    avoids the need to have to manually modify the spec file.  By
    default debugging is still largely disabled.  To enable specific
    debugging features use the following options with rpmbuild.
    
      '--with debug'               - Enables ASSERTs
    
      # For example:
      $ rpmbuild --rebuild --with debug zfs-modules-0.6.0-rc6.src.rpm
    
    Additionally, ZFS_CONFIG has been added to zfs_config.h for
    packages which build against these headers.  This is critical
    to ensure both zfs and the dependant package are using the same
    prototype and structure definitions.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 570827e129ed81e066e894530bbe24642f473154[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jan 20 10:58:57 2012 -0800

    Add 'dmu_tx' kstats entry
    
    Keep counters for the various reasons that a thread may end up
    in txg_wait_open() waiting on a new txg.  This can be useful
    when attempting to determine why a particular workload is
    under performing.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 13be560d89e9de63bdf63e8187af2ceb90cf094d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jan 30 13:28:40 2012 -0800

    Add arc_state_t stats to arcstats
    
    To ensure the arc is behaving properly we need greater visibility
    in to exactly how it's managing the systems memory.  This patch
    takes one step in that direction be adding the current arc_state_t
    for the anon, mru, mru_ghost, mfu, and mfs_ghost lists.  The l2
    arc_state_t is already well represented in the arcstats.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 3a4f6caf08c095397f87f8e6fc5d734a56fff9c9[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Fri Feb 24 16:37:41 2012 -0800

    Return success from check_slice() if device doesn't exist
    
    When creating a new pool, make_root_vdev() calls check_in_use() to
    ensure that none of the consituent disks are in use.  If the disk
    contains a valid vdev label it is read to retrieve the list of its
    child vdevs and these are checked recursively.  However, the
    partitions stored in the vdev label my no longer exist, for example
    if the partition table has since been altered.  In any such case we
    would want the pool creation to proceed, so this change removes the
    check from check_slice() that returns an error if the device doesn't
    exist.  As an added assurance, the Solaris implementation also
    returns sucess on ENOENT.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit a473d90ceeb57a7e63b35fdc82486251b162df0e[m
Author: Alex Zhuravlev <bzzz@whamcloud.com>
Date:   Fri Feb 17 12:09:21 2012 -0800

    Export symbols for zero-copy
    
    Export additional symbols to make use of the DMU's zero-copy
    API.  This allows external modules to move data in to and out of
    the ARC without incurring the cost of a memory copy.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit b41c9906dcc0d75099cba8374420a513a253beff[m
Author: Richard Yao <ryao@cs.stonybrook.edu>
Date:   Mon Feb 13 10:38:58 2012 -0500

    Support ashift=13 for 8KB SSD block sizes
    
    New SSDs are now available which use an internal 8k block size.
    To make sure ZFS can get the maximum performance out of these
    devices we're increasing the maximum ashift to 13 (8KB).
    
    This value is still small enough that we can fit 16 uberblocks
    in the vdev ring label.  However, I don't want to increase this
    any futher or it will limit the ability the safely roll back a
    pool to recover it.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #565

[33mcommit d2e032ca9cd62fd0e80cdce30c6d1c40421bf754[m
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Mon Feb 13 10:27:01 2012 +0100

    Add 'fsid' mount option to allowed options.
    
    Resolves nfs-utils-1.0.x compatibility issue which requires
    that the fsid be set in the export options.
    
      exportfs: Warning: /tank/dir requires fsid= for NFS export
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #570

[33mcommit b10c77f70acc188f979ef85e922e854822ac0705[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 10 11:53:09 2012 -0800

    Export symbols for zero-copy
    
    Exported the required symbols to make use of the DMU's zero-copy
    API.  This allows external modules to move data in to and out of
    the ARC without incurring the cost of a memory copy.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit a31acb462d70aea9bbd5f0c96f7df109e2dde5aa[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Feb 9 16:33:55 2012 -0800

    Use spl_debug_* helpers
    
    When configuring the spl debug log support use the provided wrapper
    functions.  This ensures that if --disable-debug-log was used when
    buiding the spl the functions will have no effect.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 30930fba219642cb1dadf1c8ef60ff799e3dc424[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Fri Sep 2 15:23:12 2011 +0200

    Add support for DISCARD to ZVOLs.
    
    DISCARD (REQ_DISCARD, BLKDISCARD) is useful for thin provisioning.
    It allows ZVOL clients to discard (unmap, trim) block ranges from
    a ZVOL, thus optimizing disk space usage by allowing a ZVOL to
    shrink instead of just grow.
    
    We can't use zfs_space() or zfs_freesp() here, since these functions
    only work on regular files, not volumes. Fortunately we can use the
    low-level function dmu_free_long_range() which does exactly what we
    want.
    
    Currently the discard operation is not added to the log. That's not
    a big deal since losing discard requests cannot result in data
    corruption. It would however result in disk space usage higher than
    it should be. Thus adding log support to zvol_discard() is probably
    a good idea for a future improvement.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit cb2d19010d8fbcf6c22585cd8763fad3ba7db724[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Fri Sep 2 09:42:07 2011 +0200

    Support the fallocate() file operation.
    
    Currently only the (FALLOC_FL_PUNCH_HOLE) flag combination is
    supported, since it's the only one that matches the behavior of
    zfs_space(). This makes it pretty much useless in its current
    form, but it's a start.
    
    To support other flag combinations we would need to modify
    zfs_space() to make it more flexible, or emulate the desired
    functionality in zpl_fallocate().
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #334

[33mcommit aec69371a6a2e94534809c5e9ba22e7b0e276937[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Fri Sep 2 09:37:53 2011 +0200

    Check permissions in zfs_space().
    
    This isn't done on Solaris because on this OS zfs_space() can
    only be called with an opened file handle. Since the addition of
    zpl_truncate_range() this isn't the case anymore, so we need to
    enforce access rights.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #334

[33mcommit 5cb63a57f8d2d1a94e65b4710bfbb221b1a71700[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Thu Sep 1 13:59:41 2011 +0200

    Implement the truncate_range() inode operation.
    
    This operation allows "hole punching" in ZFS files. On Solaris this
    is done via the vop_space() system call, which maps to the zfs_space()
    function. So we just need to write zpl_truncate_range() as a wrapper
    around zfs_space().
    
    Note that this only works for regular files, not ZVOLs.
    
    This is currently an insecure implementation without permission
    checking, although this isn't that big of a deal since truncate_range()
    isn't even callable from userspace.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #334

[33mcommit 93648f314c258897a0fa72b0d0b164e1937a5b63[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Feb 9 10:38:03 2012 -0800

    Fix zconfig.sh non-optimal alignment
    
    The recent zvol improvements have changed default suggested alignment
    for zvols from 512b (default) to 8k (zvol blocksize).  Because of this
    the zconfig.sh tests which create paritions are now generating a
    warning about non-optimal alignments.
    
    This change updates the need zconfig.sh tests such that a partition
    will be properly aligned.  In the process, it shifts from using the
    sfdisk utility to the parted utility to create partitions.  It also
    moves the creation of labels, partitions, and filesystems in to
    generic functions in common.sh.in.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit dde9380a1bf9084d0c8a3e073cdd65bb81db1a23[m
Author: Etienne Dechamps <e-t172@akegroup.org>
Date:   Wed Feb 8 22:41:41 2012 +0100

    Use 32 as the default number of zvol threads.
    
    Currently, the `zvol_threads` variable, which controls the number of worker
    threads which process items from the ZVOL queues, is set to the number of
    available CPUs.
    
    This choice seems to be based on the assumption that ZVOL threads are
    CPU-bound. This is not necessarily true, especially for synchronous writes.
    Consider the situation described in the comments for `zil_commit()`, which is
    called inside `zvol_write()` for synchronous writes:
    
    > itxs are committed in batches. In a heavily stressed zil there will be a
    > commit writer thread who is writing out a bunch of itxs to the log for a
    > set of committing threads (cthreads) in the same batch as the writer.
    > Those cthreads are all waiting on the same cv for that batch.
    >
    > There will also be a different and growing batch of threads that are
    > waiting to commit (qthreads). When the committing batch completes a
    > transition occurs such that the cthreads exit and the qthreads become
    > cthreads. One of the new cthreads becomes he writer thread for the batch.
    > Any new threads arriving become new qthreads.
    
    We can easily deduce that, in the case of ZVOLs, there can be a maximum of
    `zvol_threads` cthreads and qthreads. The default value for `zvol_threads` is
    typically between 1 and 8, which is way too low in this case. This means
    there will be a lot of small commits to the ZIL, which is very inefficient
    compared to a few big commits, especially since we have to wait for the data
    to be on stable storage. Increasing the number of threads will increase the
    amount of data waiting to be commited and thus the size of the individual
    commits.
    
    On my system, in the context of VM disk image storage (lots of small
    synchronous writes), increasing `zvol_threads` from 8 to 32 results in a 50%
    increase in sequential synchronous write performance.
    
    We should choose a more sensible default for `zvol_threads`. Unfortunately
    the optimal value is difficult to determine automatically, since it depends
    on the synchronous write latency of the underlying storage devices. In any
    case, a hardcoded value of 32 would probably be better than the current
    situation. Having a lot of ZVOL threads doesn't seem to have any real
    downside anyway.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Fixes #392

[33mcommit 34037afe24e0bff97cf5262f8f1a76f5e0815dc1[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Mon Sep 5 15:15:45 2011 +0200

    Improve ZVOL queue behavior.
    
    The Linux block device queue subsystem exposes a number of configurable
    settings described in Linux block/blk-settings.c. The defaults for these
    settings are tuned for hard drives, and are not optimized for ZVOLs. Proper
    configuration of these options would allow upper layers (I/O scheduler) to
    take better decisions about write merging and ordering.
    
    Detailed rationale:
    
     - max_hw_sectors is set to unlimited (UINT_MAX). zvol_write() is able to
       handle writes of any size, so there's no reason to impose a limit. Let the
       upper layer decide.
    
     - max_segments and max_segment_size are set to unlimited. zvol_write() will
       copy the requests' contents into a dbuf anyway, so the number and size of
       the segments are irrelevant. Let the upper layer decide.
    
     - physical_block_size and io_opt are set to the ZVOL's block size. This
       has the potential to somewhat alleviate issue #361 for ZVOLs, by warning
       the upper layers that writes smaller than the volume's block size will be
       slow.
    
     - The NONROT flag is set to indicate this isn't a rotational device.
       Although the backing zpool might be composed of rotational devices, the
       resulting ZVOL often doesn't exhibit the same behavior due to the COW
       mechanisms used by ZFS. Setting this flag will prevent upper layers from
       making useless decisions (such as reordering writes) based on incorrect
       assumptions about the behavior of the ZVOL.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit b18019d2d810585185493c62e9567fa85e51692c[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Mon Sep 5 11:11:38 2011 +0200

    Fix synchronicity for ZVOLs.
    
    zvol_write() assumes that the write request must be written to stable storage
    if rq_is_sync() is true. Unfortunately, this assumption is incorrect. Indeed,
    "sync" does *not* mean what we think it means in the context of the Linux
    block layer. This is well explained in linux/fs.h:
    
        WRITE:       A normal async write. Device will be plugged.
        WRITE_SYNC:  Synchronous write. Identical to WRITE, but passes down
                     the hint that someone will be waiting on this IO
                     shortly.
        WRITE_FLUSH: Like WRITE_SYNC but with preceding cache flush.
        WRITE_FUA:   Like WRITE_SYNC but data is guaranteed to be on
                     non-volatile media on completion.
    
    In other words, SYNC does not *mean* that the write must be on stable storage
    on completion. It just means that someone is waiting on us to complete the
    write request. Thus triggering a ZIL commit for each SYNC write request on a
    ZVOL is unnecessary and harmful for performance. To make matters worse, ZVOL
    users have no way to express that they actually want data to be written to
    stable storage, which means the ZIL is broken for ZVOLs.
    
    The request for stable storage is expressed by the FUA flag, so we must
    commit the ZIL after the write if the FUA flag is set. In addition, we must
    commit the ZIL before the write if the FLUSH flag is set.
    
    Also, we must inform the block layer that we actually support FLUSH and FUA.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 56c34bac44d47898809c46db3e5444511bbe0ef6[m
Author: Etienne Dechamps <etienne.dechamps@ovh.net>
Date:   Fri Sep 2 09:57:35 2011 +0200

    Support "sync=always" for ZVOLs.
    
    Currently the "sync=always" property works for regular ZFS datasets, but not
    for ZVOLs. This patch remedies that.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Fixes #374.

[33mcommit e67329d8e0befe79016bd3e4d52435552c554a52[m
Author: Darik Horn <dajhorn@vanadac.com>
Date:   Sat Feb 4 20:54:43 2012 -0600

    Let libnvpair be linked independently of libzfs.
    
    Autoconf will fail to detect the ZoL libnvpair on systems that do not
    implicitly link library runtime dependencies, which is anything that
    has the GCC 4.5 DCO update.
    
    Build libuutil before libnvpair, and put it on the the LDADD line of
    the libnvpair automake template.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes: #560

[33mcommit 47621f3d76abf63e178b95a446134565cc553b1a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Feb 2 11:55:48 2012 -0800

    Linux 3.3 compat, sops->show_options()
    
    The second argument of sops->show_options() was changed from a
    'struct vfsmount *' to a 'struct dentry *'.  Add an autoconf check
    to detect the API change and then conditionally define the expected
    interface.  In either case we are only interested in the zfs_sb_t.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #549

[33mcommit d7e398ce1a3e6f9c705af43955a684685a798c32[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jan 20 15:02:57 2012 -0800

    Cleanup ZFS debug infrastructure
    
    Historically the internal zfs debug infrastructure has been
    scattered throughout the code.  Since we expect to start making
    more use of this code this patch performs some cleanup.
    
    * Consolidate the zfs debug infrastructure in the zfs_debug.[ch]
      files.  This includes moving the zfs_flags and zfs_recover
      variables, plus moving the zfs_panic_recover() function.
    
    * Remove the existing unused functionality in zfs_debug.c and
      replace it with code which correctly utilized the spl logging
      infrastructure.
    
    * Remove the __dprintf() function from zfs_ioctl.c.  This is
      dead code, the dprintf() functionality in the kernel relies
      on the spl log support.
    
    * Remove dprintf() from hdr_recl().  This wasn't particularly
      useful and was missing the required format specifier anyway.
    
    * Subsequent patches should unify the dprintf() and zfs_dbgmsg()
      functions.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 0c5dde492ff4fadcc9c43477c81b3d3824ac41db[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jan 27 13:43:23 2012 -0800

    Allow multiple values per directory entry
    
    When using zfs to back a Lustre filesystem it's advantageous to
    to store a fid with the object id in the directory zap.  The only
    technical impediment to doing this is that the zpl code expects
    a single value in the zap per directory entry.
    
    This change relaxes that requirement such that multiple entries
    are allowed provided the first one is the object id.  The zpl
    code will just ignore additional entries.  This allows the ZoL
    count to mount datasets which are being used as Lustre server
    backends.
    
    Once the upstream feature flags support is merged in this change
    should be updated to a read-only feature.  Until this occurs
    other zfs implementations will not be able to read the zfs
    filesystems created by Lustre.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit e29be02e46ba2470795c9ab12e6da12d58ff2e5a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jan 27 09:15:42 2012 -0800

    Export symbol zfs_attr_table
    
    Export the zfs_attr_table symbol so it may be used by non-zpl
    consumers which are still interested in writing a zpl compatible
    dataset (e.g. Lustre).
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit ff998d804ff2fec3adc91fd0e78d25998094aca9[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Wed Jan 18 15:31:52 2012 -0800

    Ignore dataset if the dds_type is DMU_OST_OTHER
    
    Since the zpios and potentially other ZFS tests use the
    DMU_OST_OTHER type to label their datasets, the zpool and
    zfs commands should gracefully handle this type when it is
    encountered.  This patch modifies the commands' behavior
    to ignore any datasets with a dds_type of DMU_OST_OTHER.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #536

[33mcommit b4b599d2508296a9dac0abe29532fc0884f299b7[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jan 17 16:20:43 2012 -0800

    Fix rpm dependencies
    
    This change updates the rpm spec files to have strictly correct
    package dependencies.  That means a few things:
    
    * The zfs-modules package is now tied to a specific build of
      the spl-modules packages based on the kernel version.  This
      ensures that the correct spl-modules packages will always get
      installed and not just the newest.
    
    * The zfs package now requires both the zfs-modules and spl
      packages.  Thus a 'yum install zfs' will pull in the minimal
      set of packages required for a functional system.
    
    * The zfs-devel packages now require the zfs package to be
      installed which is normal behavior for -devel packages.
    
    * Remove the redundant distribution release extension.  This
      is already added once because it is part of the kernel package
      release name.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit b40a77aefca3d0832396edd35f597100d152f163[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jan 17 16:19:43 2012 -0800

    Add the release component to headers
    
    When the original build system code was added the release
    component was accidentally omited from the development header
    install path.  This patch adds the missing path component so
    it's always clear exactly what release your compiling against.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit f783130a1f11616632a7a6f519140f97389688a6[m
Author: Darik Horn <dajhorn@vanadac.com>
Date:   Wed Jan 18 12:28:11 2012 -0600

    Allow GPT+EFI vdev replacement in boot pools.
    
    Commit zfsonlinux/zfs@57a4eddc4d5e1e6c10d8d7dcf87a9fc27398adcd
    allows the bootfs property to be set on any pool, but does not
    accommodate subsequent vdev changes. For example:
    
    	# zpool replace rpool /dev/sda /dev/sdb
    	operation not supported on this type of pool
    	property 'bootfs' is not supported on EFI labeled devices
    
    For non-Solaris builds, disable the check that emits this error.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 750562833f5009e1602e3b7d8f10497ee683f611[m
Author: Darik Horn <dajhorn@vanadac.com>
Date:   Sat Dec 31 17:30:52 2011 -0600

    Combine libraries: spl, avl, efi, share, unicode.
    
    These libraries, which are an artifact of the ZoL development
    process, conflict with packages that are already in distribution:
    
      * libspl: SPL Programming Language
      * libavl: AVL for Linux
      * libefi: GRUB
    
    And these libraries are potential conflicts:
    
      * libshare: the Linux Mount Manager
      * libunicode: Perl and Python
    
    Recompose these five ZoL components into the four libraries that are
    conventionally provided by Solaris and FreeBSD systems:
    
      + libnvpair
      + libuutil
      + libzpool
      + libzfs
    
    This change resolves the name conflict, makes ZoL more compatible
    with existing software that uses autotools to detect ZFS, and allows
    pkg-zfs to better reflect the official Debian kFreeBSD packaging.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes: #430

[33mcommit 57a4eddc4d5e1e6c10d8d7dcf87a9fc27398adcd[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Fri Jan 13 16:24:15 2012 -0600

    Allow setting bootfs on any pool
    
    The vdev_is_bootable() restrictions are no longer necessary
    with recent GRUB2 code.  FreeBSD has implemented the same
    change, except that I moved the Solaris comment to be inside
    the #ifdef __sun__ block.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #317

[33mcommit 08d08ebba2247ad404001785a890de4281d0a362[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Fri Jan 13 13:51:39 2012 -0800

    Reduce number of zio free threads
    
    As described in Issue #458 and #258, unlinking large amounts of data
    can cause the threads in the zio free wait queue to start spinning.
    Reducing the number of z_fr_iss threads from a fixed value of 100 to 1
    per cpu signficantly reduces contention on the taskq spinlock and
    improves throughput.
    
    Instrumenting the taskq code showed that __taskq_dispatch() can spend
    a long time holding tq->tq_lock if there are a large number of threads
    in the queue.  It turns out the time spent in wake_up() scales
    linearly with the number of threads in the queue.  When a large number
    of short work items are dispatched, as seems to be the case with
    unlink, the worker threads drain the queue faster than the dispatcher
    can fill it.  They then all pile into the work wait queue to wait for
    new work items.  So if 100 threads are in the queue, wake_up() takes
    about 100 times as long, and the woken threads have to spin until the
    dispatcher releases the lock.
    
    Reducing the number of threads helps with the symptoms, but doesn't
    get to the root of the problem.  It would seem that wake_up()
    shouldn't scale linearly in time with queue depth, particularly if we
    are only trying to wake up one thread.  In that vein, I tried making
    all of the waiting processes exclusive to prevent the scheduler from
    iterating over the entire list, but I still saw the linear time
    scaling.  So further investigation is needed, but in the meantime
    reducing the thread count is an easy workaround.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #258
    Issue #458

[33mcommit a8783adf24a8c40dcae0fbfa90eb231212f26884[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jan 13 11:35:05 2012 -0800

    Increase link count limit to 2^31-1
    
    Originally, the per-file link limit was set to 65536 because the
    exact Linux VFS limit was unclear.  Internally ZFS is able to
    support 64-bit link counts.  After a more careful investigation
    the limit can be safely raised to 2^31-1.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #514

[33mcommit 58d956b085c31bde695d03dbf415e118cd350e0f[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Thu Jan 12 17:24:05 2012 -0800

    Run ZFS_AC_PACMAN only if $VENDOR is "arch"
    
    Unfortunately, Arch's package manager `pacman` shares it's name with a
    popular arcade video game. Thus, in order to refrain from executing the
    video game when we mean to execute the package manager, ZFS_AC_PACMAN is
    now only run when $VENDOR is determined to be "arch".
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #517

[33mcommit e18be9a637088911d2b618788cd45982986e63cb[m
Author: Suman Chakravartula <suman@gogrid.com>
Date:   Wed Jan 11 16:48:02 2012 -0800

    Add overlay(-O) mount option support
    
    Linux supports mounting over non-empty directories by default.
    In Solaris this is not the case and -O option is required for
    zfs mount to mount a zfs filesystem over a non-empty directory.
    
    For compatibility, I've added support for -O option to mount
    zfs filesystems over non-empty directories if the user wants
    to, just like in Solaris.
    
    I've defined MS_OVERLAY to record it in the flags variable if
    the -O option is supplied.  The flags variable passes through
    a few functions and its checked before performing the empty
    directory check in zfs_mount function.  If -O is given, the
    check is not performed.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #473

[33mcommit 96b91ef0d6b289037c4d54357901e4b694e08f02[m
Author: Darik Horn <dajhorn@vanadac.com>
Date:   Thu Jan 5 14:27:36 2012 -0600

    Apply the ZoL coding standard to zpl_xattr.c
    
    Make the indenting in the zpl_xattr.c file consistent with the Sun
    coding standard by removing soft tabs.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 166dd49de0272e6f179e5fd6a41eebb4880a1154[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jan 12 13:59:44 2012 -0800

    Linux 3.2 compat, security_inode_init_security()
    
    The security_inode_init_security() API has been changed to include
    a filesystem specific callback to write security extended attributes.
    This was done to support the initialization of multiple LSM xattrs
    and the EVM xattr.
    
    This change updates the code to use the new API when it's available.
    Otherwise it falls back to the previous implementation.
    
    In addition, the ZFS_AC_KERNEL_6ARGS_SECURITY_INODE_INIT_SECURITY
    autoconf test has been made more rigerous by passing the expected
    types.  This is done to ensure we always properly the detect the
    correct form for the security_inode_init_security() API.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #516

[33mcommit 2932b6a8004df8417036894d7d2e7e151cc95434[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Mon Jan 9 16:50:26 2012 -0600

    Treat /dev/vd* as whole disks
    
    Correctly detect /dev/vd devices as whole disks and attempt to
    create an EFI partition table.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit b97f368d047943607b5b263331d7e2075ab3ffe8[m
Author: Darik Horn <dajhorn@vanadac.com>
Date:   Fri Dec 30 14:18:58 2011 -0600

    Avoid using awk in the zpool_id script.
    
    Some implementations of `awk` incorrectly parse the \< and \> regex
    symbols, so use a `while read` loop and regular globbing instead.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes: #259

[33mcommit ab26409db753bb087842ab6f1af943f3386c764f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 22 12:20:43 2011 -0800

    Linux 3.1 compat, super_block->s_shrink
    
    The Linux 3.1 kernel has introduced the concept of per-filesystem
    shrinkers which are directly assoicated with a super block.  Prior
    to this change there was one shared global shrinker.
    
    The zfs code relied on being able to call the global shrinker when
    the arc_meta_limit was exceeded.  This would cause the VFS to drop
    references on a fraction of the dentries in the dcache.  The ARC
    could then safely reclaim the memory used by these entries and
    honor the arc_meta_limit.  Unfortunately, when per-filesystem
    shrinkers were added the old interfaces were made unavailable.
    
    This change adds support to use the new per-filesystem shrinker
    interface so we can continue to honor the arc_meta_limit.  The
    major benefit of the new interface is that we can now target
    only the zfs filesystem for dentry and inode pruning.  Thus we
    can minimize any impact on the caching of other filesystems.
    
    In the context of making this change several other important
    issues related to managing the ARC were addressed, they include:
    
    * The dnlc_reduce_cache() function which was called by the ARC
    to drop dentries for the Posix layer was replaced with a generic
    zfs_prune_t callback.  The ZPL layer now registers a callback to
    drop these dentries removing a layering violation which dates
    back to the Solaris code.  This callback can also be used by
    other ARC consumers such as Lustre.
    
      arc_add_prune_callback()
      arc_remove_prune_callback()
    
    * The arc_reduce_dnlc_percent module option has been changed to
    arc_meta_prune for clarity.  The dnlc functions are specific to
    Solaris's VFS and have already been largely eliminated already.
    The replacement tunable now represents the number of bytes the
    prune callback will request when invoked.
    
    * Less aggressively invoke the prune callback.  We used to call
    this whenever we exceeded the arc_meta_limit however that's not
    strictly correct since it results in over zeleous reclaim of
    dentries and inodes.  It is now only called once the arc_meta_limit
    is exceeded and every effort has been made to evict other data from
    the ARC cache.
    
    * More promptly manage exceeding the arc_meta_limit.  When reading
    meta data in to the cache if a buffer was unable to be recycled
    notify the arc_reclaim thread to invoke the required prune.
    
    * Added arcstat_prune kstat which is incremented when the ARC
    is forced to request that a consumer prune its cache.  Remember
    this will only occur when the ARC has no other choice.  If it
    can evict buffers safely without invoking the prune callback
    it will.
    
    * This change is also expected to resolve the unexpect collapses
    of the ARC cache.  This would occur because when exceeded just the
    arc_meta_limit reclaim presure would be excerted on the arc_c
    value via arc_shrink().  This effectively shrunk the entire cache
    when really we just needed to reclaim meta data.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #466
    Closes #292

[33mcommit 8eaa020b46e80b09cc5f924b90809e219ce08e75[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Fri Dec 16 22:32:54 2011 -0800

    Move Arch Linux's VENDOR check above Ubuntu's
    
    If the lsb-release package is installed on an Arch Linux distribution,
    the configure step will incorrectly detect the running distribution as
    Ubuntu. This is a result of both distributions providing an
    /etc/lsb-release file, and the Ubuntu VENDOR check being performed
    first.
    
    Since the Arch Linux test check's for a file more specific to the Arch
    Linux distribution, moving Arch Linux's VENDOR check above Unbuntu's
    check provides a quick and easy solution.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit afd7da0ce72c3b3554079644d73e90fe6d2bf955[m
Author: Darik Horn <dajhorn@vanadac.com>
Date:   Fri Dec 16 19:02:41 2011 -0600

    Add LIBSELINUX to mount_zfs_LDFLAGS.
    
    Regenerating the autotools configuration on Debian and Ubuntu systems
    causes compilation to fail with this error message:
    
      cmd/mount_zfs/../../cmd/mount_zfs/mount_zfs.c:403:
        undefined reference to `is_selinux_enabled'
    
    In the automake template, set "mount_zfs_LDFLAGS = ... $(LIBSELINUX)"
    so that the /sbin/mount.zfs utility is linked to libselinux.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 28eb9213d89cb25438fcecb86e735cc3edc26ea4[m
Author: Darik Horn <dajhorn@vanadac.com>
Date:   Fri Dec 16 15:15:12 2011 -0600

    Linux 3.2 compat: set_nlink()
    
    Directly changing inode->i_nlink is deprecated in Linux 3.2 by commit
    
      SHA: bfe8684869601dacfcb2cd69ef8cfd9045f62170
    
    Use the new set_nlink() kernel function instead.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes: #462

[33mcommit e6101ea87f5127c549d520aad124290857218fa5[m
Author: Darik Horn <dajhorn@vanadac.com>
Date:   Fri Dec 16 14:17:00 2011 -0600

    Update the character class in the zpool man page.
    
    ZoL and all Solaris derivatives allow pool names to contain the colon
    and space characters. Update the man page to reflect current behavior.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes: #438

[33mcommit 6ba3b44614fa6482bd2d7363964b65f0289b0f4f[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Wed Dec 7 17:02:42 2011 -0800

    Add make rule for building Arch Linux packages
    
    Added the necessary build infrastructure for building packages
    compatible with the Arch Linux distribution. As such, one can now run:
    
        $ ./configure
        $ make pkg     # Alternatively, one can run 'make arch' as well
    
    on the Arch Linux machine to create two binary packages compatible with
    the pacman package manager, one for the zfs userland utilities and
    another for the zfs kernel modules. The new packages can then be
    installed by running:
    
        # pacman -U $package.pkg.tar.xz
    
    In addition, source-only packages suitable for an Arch Linux chroot
    environment or remote builder can also be build using the 'sarch' make
    rule.
    
    NOTE: Since the source dist tarball is created on the fly from the head
    of the build tree, it's MD5 hash signature will be continually influx.
    As a result, the md5sum variable was intentionally omitted from the
    PKGBUILD files, and the '--skipinteg' makepkg option is used. This may
    or may not have any serious security implications, as the source tarball
    is not being downloaded from an outside source.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #491

[33mcommit a38718a63d79116d6cb614dd2821e2a3955e5c8c[m
Author: Garrett D'Amore <garrett@nexenta.com>
Date:   Mon Nov 7 16:26:52 2011 -0800

    Illumos #734: Use taskq_dispatch_ent() interface
    
    It has been observed that some of the hottest locks are those
    of the zio taskqs.  Contention on these locks can limit the
    rate at which zios are dispatched which limits performance.
    
    This upstream change from Illumos uses new interface to the
    taskqs which allow them to utilize a prealloc'ed taskq_ent_t.
    This removes the need to perform an allocation at dispatch
    time while holding the contended lock.  This has the effect
    of improving system performance.
    
    Reviewed by: Albert Lee <trisk@nexenta.com>
    Reviewed by: Richard Lowe <richlowe@richlowe.net>
    Reviewed by: Alexey Zaytsev <alexey.zaytsev@nexenta.com>
    Reviewed by: Jason Brian King <jason.brian.king@gmail.com>
    Reviewed by: George Wilson <gwilson@zfsmail.com>
    Reviewed by: Adam Leventhal <ahl@delphix.com>
    Approved by: Gordon Ross <gwr@nexenta.com>
    
    References to Illumos issue:
      https://www.illumos.org/issues/734
    
    Ported-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #482

[33mcommit 30a9524e45f76d4c7860bcbf5567aeaa8aeb7a82[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Dec 7 09:23:44 2011 -0800

    Set zvol_major/zvol_threads permissions
    
    The zvol_major and zvol_threads module options were being created
    with 0 permission bits.  This prevented them from being listed in
    the /sys/module/zfs/parameters/ directory, although they were
    visible in `modinfo zfs`.  This patch fixes the issue by updating
    the permission bits to 0444.  For the moment these options must
    be read-only because they are used during module initialization.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #392

[33mcommit 23bdb07d4e4c435205d25d3efdb5fef2d089ce5e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Dec 5 10:08:29 2011 -0800

    Update default ARC memory limits
    
    In the upstream OpenSolaris ZFS code the maximum ARC usage is
    limited to 3/4 of memory or all but 1GB, whichever is larger.
    Because of how Linux's VM subsystem is organized these defaults
    have proven to be too large which can lead to stability issues.
    
    To avoid making everyone manually tune the ARC the defaults are
    being changed to 1/2 of memory or all but 4GB.  The rational for
    this is as follows:
    
    * Desktop Systems (less than 8GB of memory)
    
      Limiting the ARC to 1/2 of memory is desirable for desktop
      systems which have highly dynamic memory requirements.  For
      example, launching your web browser can suddenly result in a
      demand for several gigabytes of memory.  This memory must be
      reclaimed from the ARC cache which can take some time.  The
      user will experience this reclaim time as a sluggish system
      with poor interactive performance.  Thus in this case it is
      preferable to leave the memory as free and available for
      immediate use.
    
    * Server Systems (more than 8GB of memory)
    
      Using all but 4GB of memory for the ARC is preferable for
      server systems.  These systems often run with minimal user
      interaction and have long running daemons with relatively
      stable memory demands.  These systems will benefit most by
      having as much data cached in memory as possible.
    
    These values should work well for most configurations.  However,
    if you have a desktop system with more than 8GB of memory you may
    wish to further restrict the ARC.  This can still be accomplished
    by setting the 'zfs_arc_max' module option.
    
    Additionally, keep in mind these aren't currently hard limits.
    The ARC is based on a slab implementation which can suffer from
    memory fragmentation.  Because this fragmentation is not visible
    from the ARC it may believe it is within the specified limits while
    actually consuming slightly more memory.  How much more memory get's
    consumed will be determined by how badly fragmented the slabs are.
    
    In the long term this can be mitigated by slab defragmentation code
    which was OpenSolaris solution.  Or preferably, using the page cache
    to back the ARC under Linux would be even better.  See issue #75
    for the benefits of more tightly integrating with the page cache.
    
    This change also fixes a issue where the default ARC max was being
    set incorrectly for machines with less than 2GB of memory.  The
    constant in the arc_c_max comparison must be explicitly cast to
    a uint64_t type to prevent overflow and the wrong conditional
    branch being taken.  This failure was typically observed in VMs
    which are commonly created with less than 2GB of memory.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #75

[33mcommit 660cbada0fca3b5504562adcf21a35f9195f46a0[m
Author: Darik Horn <dajhorn@vanadac.com>
Date:   Sun Dec 4 15:32:18 2011 -0600

    Quote variables in the zfs.lsb script.
    
    For consistency and safety, quote all variables in the zfs.lsb script.
    This protects in the unlikely case that any of the file names contain
    whitespace.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #439

[33mcommit c2d9c41d5084db354d80c03fea4fb0bb97327c0a[m
Author: Darik Horn <dajhorn@vanadac.com>
Date:   Sun Dec 4 14:18:28 2011 -0600

    Source /etc/default/zfs after setting defaults.
    
    Let the administrator override all script variables by sourcing the
    /etc/default/zfs file after the default values are set.
    
    The spelling mistake in the old path name makes it unlikely that this
    bug affected any users.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes: #371

[33mcommit db7c1771da2634af4e2a4323759656c7f0afe689[m
Author: Darik Horn <dajhorn@vanadac.com>
Date:   Sun Dec 4 14:01:58 2011 -0600

    Demote the whackbang in the zpool_id script.
    
    The zpool_id script is posixly correct and does not use bash
    features, so change its whackbang from /bin/bash to /bin/sh.
    
    Debian policy also stipulates that system scripts be dash compatible.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 87193e2b6111d6080df90c2c8e03ce49b14e031a[m
Author: Darik Horn <dajhorn@vanadac.com>
Date:   Sun Dec 4 13:58:53 2011 -0600

    Demote egrep to grep in the zpool_id script.
    
    Direct invocation of GNU egrep is deprecated by its man page, and the
    its argument in the zpool_id script is not an extended expression.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 04bf5ecc1f04ed5955ab9951c833d6b08db57356[m
Author: Darik Horn <dajhorn@vanadac.com>
Date:   Sun Dec 4 13:50:27 2011 -0600

    Quote variables in the zpool_id script.
    
    For consistency and safety, quote all variables in the zpool_id
    script. This accomodates a `-c CONFIG` parameter value with
    whitespace in the path name.
    
    Also fix a typo in the usage synopsis for `-h`.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #439

[33mcommit 9c8254f6f95b2b08e2031b2682a632e0df45cefb[m
Author: Darik Horn <dajhorn@vanadac.com>
Date:   Sun Dec 4 13:10:46 2011 -0600

    Support path_id changes in udev 174.
    
    The /lib/udev/path_id helper became a builtin command in the udev 174
    release, so test whether path_id is external in the zpool_id script.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes: #429

[33mcommit 590338f63ee0db6f1fc7e6b5b23744d3944777b2[m
Author: Gunnar Beutner <gunnar@beutner.name>
Date:   Sat Dec 3 23:01:06 2011 +0100

    Added comments for libshare's NFS functions.
    
    Some of the functions' purpose wasn't immediately obvious without
    additional explanations. This commit adds these missing comments.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit b9c59ec83ab50e1cd097f067461e34a5750694c8[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Tue Nov 29 14:31:20 2011 -0800

    Fix configure tests to play nice with GCC 4.6
    
    As of GCC 4.6, specific kernel 2.6.32 header files do not compile
    cleanly without warnings. One specific example of this is the
    arch/x86/include/asm/percpu.h file. Thus, a few of the configure tests
    were getting hung up on this and the '-Wno-unsued-but-set-variables'
    compile option had to be introduced.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #459

[33mcommit f31b3ebe6e6c9de4db30bf752c09a8300b305258[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Nov 29 09:05:04 2011 -0800

    Allow xattrs on symlinks
    
    The Solaris version of ZFS does not allow xattrs to be set on
    symlinks due to the way they implemented the attropen() system
    call.  Linux however implements xattrs through the lgetxattr()
    and lsetxattr() system calls which do not have this limitation.
    
    The only reason this hasn't always worked under ZFS on Linux
    is that the xattr handlers were not registered for symlink type
    inodes.  This was done simply to be consistent with the Solaris
    behavior.
    
    Upon futher reflection I believe this should be allowed under
    Linux.  The only ill effect would be that the xattrs on symlinks
    will not be visible when the pool is imported on a Solaris
    system.  This also has the benefit that it allows for SELinux
    style security xattr labeling which expects to be able to set
    xattrs on all inode types.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #272

[33mcommit 82a37189aac955c81a59a5ecc3400475adb56355[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Oct 24 16:55:20 2011 -0700

    Implement SA based xattrs
    
    The current ZFS implementation stores xattrs on disk using a hidden
    directory.  In this directory a file name represents the xattr name
    and the file contexts are the xattr binary data.  This approach is
    very flexible and allows for arbitrarily large xattrs.  However,
    it also suffers from a significant performance penalty.  Accessing
    a single xattr can requires up to three disk seeks.
    
      1) Lookup the dnode object.
      2) Lookup the dnodes's xattr directory object.
      3) Lookup the xattr object in the directory.
    
    To avoid this performance penalty Linux filesystems such as ext3
    and xfs try to store the xattr as part of the inode on disk.  When
    the xattr is to large to store in the inode then a single external
    block is allocated for them.  In practice most xattrs are small
    and this approach works well.
    
    The addition of System Attributes (SA) to zfs provides us a clean
    way to make this optimization.  When the dataset property 'xattr=sa'
    is set then xattrs will be preferentially stored as System Attributes.
    This allows tiny xattrs (~100 bytes) to be stored with the dnode and
    up to 64k of xattrs to be stored in the spill block.  If additional
    xattr space is required, which is unlikely under Linux, they will be
    stored using the traditional directory approach.
    
    This optimization results in roughly a 3x performance improvement
    when accessing xattrs which brings zfs roughly to parity with ext4
    and xfs (see table below).  When multiple xattrs are stored per-file
    the performance improvements are even greater because all of the
    xattrs stored in the spill block will be cached.
    
    However, by default SA based xattrs are disabled in the Linux port
    to maximize compatibility with other implementations.  If you do
    enable SA based xattrs then they will not be visible on platforms
    which do not support this feature.
    
    ----------------------------------------------------------------------
       Time in seconds to get/set one xattr of N bytes on 100,000 files
    ------+--------------------------------+------------------------------
          |            setxattr            |            getxattr
    bytes |  ext4     xfs zfs-dir  zfs-sa  |  ext4     xfs zfs-dir  zfs-sa
    ------+--------------------------------+------------------------------
    1     |  2.33   31.88   21.50    4.57  |  2.35    2.64    6.29    2.43
    32    |  2.79   30.68   21.98    4.60  |  2.44    2.59    6.78    2.48
    256   |  3.25   31.99   21.36    5.92  |  2.32    2.71    6.22    3.14
    1024  |  3.30   32.61   22.83    8.45  |  2.40    2.79    6.24    3.27
    4096  |  3.57  317.46   22.52   10.73  |  2.78   28.62    6.90    3.94
    16384 |   n/a 2342.39   34.30   19.20  |   n/a   45.44  145.90    7.55
    65536 |   n/a 2941.39  128.15  131.32* |   n/a  141.92  256.85  262.12*
    
    Legend:
    * ext4      - Stock RHEL6.1 ext4 mounted with '-o user_xattr'.
    * xfs       - Stock RHEL6.1 xfs mounted with default options.
    * zfs-dir   - Directory based xattrs only.
    * zfs-sa    - Prefer SAs but spill in to directories as needed, a
                  trailing * indicates overflow in to directories occured.
    
    NOTE: Ext4 supports 4096 bytes of xattr name/value pairs per file.
    NOTE: XFS and ZFS have no limit on xattr name/value pairs per file.
    NOTE: Linux limits individual name/value pairs to 65536 bytes.
    NOTE: All setattr/getattr's were done after dropping the cache.
    NOTE: All tests were run against a single hard drive.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #443

[33mcommit e89236fd28cbe8585146b8b5d0ced1f8d4aa8431[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Thu Nov 24 16:37:27 2011 -0800

    In autoconf v2.68, AC_LANG_PROGRAM must be quoted
    
    This change updates the AC_LANG_PROGRAM autoconf macro invocations to be
    wrapped in quotes. As of autoconf version 2.68, the quotes are necessary
    to prevent warnings from appearing. Specifically, the autoconf v2.68
    Forward Porting Notes specifies:
    
        It is important to note that you need to ensure that the call to
        AC_LANG_SOURCE is quoted and not expanded, otherwise that will
        cause the warning to appear nonetheless.
    
    Finally, because of the additional quoting we can drop the extra
    quotas used by the ZFS_AC_CONFIG_USER_STACK_GUARD autoconf check.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #464

[33mcommit ada8ec1ec5b0bfdab74bafda49e2f7a67dc7101d[m
Author: Suman Chakravartula <schakrava@gmail.com>
Date:   Sat Nov 19 11:53:12 2011 -0800

    Allow leading digits in userquota/groupquota names
    
    While setting/getting userquota and groupquota properties, the input
    was not treated as a possible username or groupname if it had a
    leading digit. While useradd in linux recommends the regexp
    [a-z_][a-z0-9_-]*[$]? , it is not enforced. This causes problem for
    usernames with leading digits in them. We need to be able to support
    getting and setting properties for this unconventional but possible
    input category
    
    I've updated the code to validate the username or groupname directly
    via the API. Also, note that I moved this validation to the beginning
    before the check for SID names with @. This also supports usernames
    with @ character in them which are valid. Only when input with @ is
    not a valid username, it is interpreted as a potential SID name.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #428

[33mcommit ca5fd24984624146ebd1460d7554f42b0572e45f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Nov 11 14:50:15 2011 -0800

    Limit maximum ashift value to 12
    
    While we initially allowed you to set your ashift as large as 17
    (SPA_MAXBLOCKSIZE) that is actually unsafe.  What wasn't considered
    at the time is that each uberblock written to the vdev label ring
    buffer will be of this size.  Now the buffer is statically sized
    to 128k and we need to be able to fit several uberblocks in it.
    With a large ashift that becomes a problem.
    
    Therefore I'm reducing the maximum configurable ashift value to 12.
    This is large enough for the 4k sector drives and small enough that
    we can still keep the most recent 32 uberblock in the vdev label
    ring buffer.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #425

[33mcommit 09559cdd150fa0b610dd4f816292fd90f50fd0cb[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Nov 10 10:22:39 2011 -0800

    Fix depmod warning
    
    The depmod utility from module-init-tools 3.12-pre3 generates a
    warning when the -e option is used without -E or -F.  This was
    observed under OpenSuse 11.4.  To resolve the issue when the
    exact System.map-* for your kernel cannot be found fallback to
    a generic safe '/sbin/depmod -a'.
    
      WARNING: -e needs -E or -F
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit adcd70bd1af405464d6dbc6b2057594cddda7a24[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Nov 9 20:47:59 2011 -0800

    Linux 3.1 compat, fops->fsync()
    
    The Linux 3.1 kernel updated the fops->fsync() callback yet again.
    They now pass the requested range and delegate the responsibility
    for calling filemap_write_and_wait_range() to the callback.  In
    addition imutex is no longer held by the caller and the callback
    is responsible for taking the lock if required.
    
    This commit updates the code to provide a zpl_fsync() function
    for the updated API.  Implementations for the previous two APIs
    are also maintained for compatibility.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #445

[33mcommit 8c19f5b407132b7ee1d6b7dc7c763f2ae80be976[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Nov 8 11:07:02 2011 -0800

    Suppress packaging warning
    
    Only under Ubuntu Lucid the rpm packaging step mistakenly adds
    the following files twice to the package because of the /lib
    naming convention.  This is harmless but results in a warning
    which the buildot flags as a failure.  Suppress this warning.
    
      warning: File listed twice: /lib/udev/rules.d
      warning: File listed twice: /lib/udev/rules.d/60-zpool.rules
      warning: File listed twice: /lib/udev/rules.d/60-zvol.rules
      warning: File listed twice: /lib/udev/rules.d/90-zfs.rules
      warning: File listed twice: /lib/udev/sas_switch_id
      warning: File listed twice: /lib/udev/zpool_id
      warning: File listed twice: /lib/udev/zvol_id
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 5547c2f1bf49802835fd6c52f15115ba344a2a8b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Nov 7 16:39:03 2011 -0800

    Simplify BDI integration
    
    Update the code to use the bdi_setup_and_register() helper to
    simplify the bdi integration code.  The updated code now just
    registers the bdi during mount and destroys it during unmount.
    
    The only complication is that for 2.6.32 - 2.6.33 kernels the
    helper wasn't available so in these cases the zfs code must
    provide it.  Luckily the bdi_setup_and_register() function
    is trivial.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #367

[33mcommit 591fb62f19ee2431983a4cbeb0d200b1b8e7daf5[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Nov 7 16:25:49 2011 -0800

    Disown dataset in zfs_sb_create()
    
    Fix an unlikely failure cause in zfs_sb_create() which could
    leave the dataset owned on error and thus unavailable until
    after a reboot.  Disown the dataset if SA are expected but
    are in fact missing.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit ae6ba3dbe618bb7dbc46f2a3fb54c58243835d6b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Nov 1 16:56:48 2011 -0700

    Improve meta data performance
    
    Profiling the system during meta data intensive workloads such
    as creating/removing millions of files, revealed that the system
    was cpu bound.  A large fraction of that cpu time was being spent
    waiting on the virtual address space spin lock.
    
    It turns out this was caused by certain heavily used kmem_caches
    being backed by virtual memory.  By default a kmem_cache will
    dynamically determine the type of memory used based on the object
    size.  For large objects virtual memory is usually preferable
    and for small object physical memory is a better choice.  See
    the spl_slab_alloc() function for a longer discussion on this.
    
    However, there is a certain amount of gray area when defining a
    'large' object.  For the following caches it turns out they were
    just over the line:
    
      * dnode_cache
      * zio_cache
      * zio_link_cache
      * zio_buf_512_cache
      * zfs_data_buf_512_cache
    
    Now because we know there will be a lot of churn in these caches,
    and because we know the slabs will still be reasonably sized.
    We can safely request with the KMC_KMEM flag that the caches be
    backed with physical memory addresses.  This entirely avoids the
    need to serialize on the virtual address space lock.
    
    As a bonus this also reduces our vmalloc usage which will be good
    for 32-bit kernels which have a very small virtual address space.
    It will also probably be good for interactive performance since
    unrelated processes could also block of this same global lock.
    Finally, we may see less cpu time being burned in the arc_reclaim
    and txg_sync_threads.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #258

[33mcommit 6a95d0b74c2951f0dc82361ea279f64a7349f060[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Nov 1 13:07:41 2011 -0700

    Fix NULL deref in balance_pgdat()
    
    Be careful not to unconditionally clear the PF_MEMALLOC bit in
    the task structure.  It may have already been set when entering
    zpl_putpage() in which case it must remain set on exit.  In
    particular the kswapd thread will have PF_MEMALLOC set in
    order to prevent it from entering direct reclaim.  By clearing
    it we allow the following NULL deref to potentially occur.
    
      BUG: unable to handle kernel NULL pointer dereference at (null)
      IP: [<ffffffff8109c7ab>] balance_pgdat+0x25b/0x4ff
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #287

[33mcommit a7b125e9a577cbf66ddbd7cf9701028ff150ee8e[m
Author: Gunnar Beutner <gunnar@beutner.name>
Date:   Thu Nov 3 06:48:13 2011 +0100

    Fix a race condition in zfs_getattr_fast()
    
    zfs_getattr_fast() was missing a lock on the ZFS superblock which
    could result in zfs_znode_dmu_fini() clearing the zp->z_sa_hdl member
    while zfs_getattr_fast() was accessing the znode. The result of this
    would usually be a panic.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Fixes #431

[33mcommit c47516762758c989a443c0a6a9e38ae8fb46e6f1[m
Author: Xin Li <delphij@FreeBSD.org>
Date:   Fri Oct 21 16:39:53 2011 -0700

    Illumos #1661: Fix flaw in sa_find_sizes() calculation
    
    When calculating space needed for SA_BONUS buffers, hdrsize is
    always rounded up to next 8-aligned boundary. However, in two places
    the round up was done against sum of 'total' plus hdrsize. On the
    other hand, hdrsize increments by 4 each time, which means in certain
    conditions, we would end up returning with will_spill == 0 and
    (total + hdrsize) larger than full_space, leading to a failed
    assertion because it's invalid for dmu_set_bonus.
    
    Reviewed by: Matthew Ahrens <matt@delphix.com>
    Reviewed by: Dan McDonald <danmcd@nexenta.com>
    Approved by: Gordon Ross <gwr@nexenta.com>
    
    References to Illumos issue:
      https://www.illumos.org/issues/1661
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #426

[33mcommit 3cee2262a6efd06031a2ff511f66e6a51f743e6a[m
Author: Darik Horn <dajhorn@vanadac.com>
Date:   Sat Oct 22 10:44:03 2011 -0500

    Change sun.com URLs to zfsonlinux.org
    
    ZFS contains error messages that point to the defunct www.sun.com
    domain, which is currently offline.  Change these error messages
    to use the zfsonlinux.org mirror instead.
    
    This commit depends on:
    
      zfsonlinux/zfsonlinux.github.com@8e10ead3dc66e2204ae893d81528371405f107e7
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 3bb1ac69942b7c1a89d741733b4a55b2facba420[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Oct 19 11:43:11 2011 -0700

    Include distribution in release
    
    Common practice is to include the distribution in the package release.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 6f2255ba8ac93a86ec217775e8f9fc145bc52b39[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Oct 18 14:51:03 2011 -0700

    Set mtime on symbolic links
    
    Register the setattr/getattr callbacks for symlinks.  Without these
    the generic inode_setattr() and generic_fillattr() functions will
    be used.  In the setattr case this will only result in the inode being
    updated in memory, the dirty_inode callback would also normally run
    but none is registered for zfs.
    
    The straight forward fix is to set the setattr/getattr callbacks
    for symlinks so they are handled just like files and directories.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #412

[33mcommit 8d35c1499de42a1910ac1bb3a9c537ddc43c7d4d[m
Author: Alexander Stetsenko <ams@nexenta.com>
Date:   Sun Oct 16 08:41:05 2011 +0200

    Illumos #755: dmu_recv_stream builds incomplete guid_to_ds_map
    
    An incomplete guid_to_ds_map would cause restore_write_byref() to fail
    while receiving a de-duplicated backup stream.
    
    Reviewed by: Matthew Ahrens <mahrens@delphix.com>
    Reviewed by: Garrett D`Amore <garrett@nexenta.com>
    Reviewed by: Gordon Ross <gwr@nexenta.com>
    Approved by: Gordon Ross <gwr@nexenta.com>
    
    References to Illumos issue and patch:
    - https://www.illumos.org/issues/755
    - https://github.com/illumos/illumos-gate/commit/ec5cf9d53a
    
    Signed-off-by: Gunnar Beutner <gunnar@beutner.name>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #372

[33mcommit b385d7da6e3d21f0c0c23bf85212fe48758758c9[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Mon Oct 17 11:43:55 2011 -0700

    Use @ZFS_META LICENSE@ in spec.in files
    
    zfs.spec.in and zfs-modules.spec.in had the License field incorrectly
    set to @LICENSE@, causing generated rpm packages to report an invalid
    license string.  Fix this by using @ZFS_META_LICENSE@.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #422
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 5cbf6db937a304c4d2b60878a2405a1e2900abdf[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Oct 11 14:36:42 2011 -0700

    Disable 90-zfs.rules for test suite
    
    When running the zconfig.sh, zpios-sanity.sh, and zfault.sh
    from the installed packages the 90-zfs.rules can cause failures.
    These will occur because the test suite assumes it has full
    control over loading/unloading the module stack.  If the stack
    gets asynchronously loaded by the udev rule the test suite
    will treat it as a failure.  Resolve the issue by disabling
    the offending rule during the tests and enabling it on exit.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 86f35f34f419f6eaff53b25f463c13f72186b103[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Oct 10 10:42:59 2011 -0700

    Export symbols for the VFS API
    
    Export all symbols already marked extern in the zfs_vfsops.h
    header.  Several non-static symbols have also been added to
    the header and exportewd.  This allows external modules to
    more easily create and manipulate properly created ZFS
    filesystem type datasets.
    
    Rename zfsvfs_teardown() to zfs_sb_teardown and export it.
    This is done simply for consistency with the rest of the code
    base.  All other zfsvfs_* functions have already been renamed.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 3646c3f2b5c2c54b3aef448aa136e04f85c6c656[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Oct 7 09:14:12 2011 -0700

    Add provides lustre-backend-fs to rpm
    
    The Lustre packages satify their backend fs requirement by
    checking that lustre-backend-fs is provided.  Update the zfs
    packaging accordingly.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 620c7598e4df6756238c56aec79601408822e44d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Oct 6 14:10:45 2011 -0700

    Prep zfs-0.6.0-rc6 tag
    
    Create the sixth 0.6.0 release candidate tag (rc6).

[33mcommit e45aa452988f721e458fa3abe54669bdf9377352[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Sep 30 10:33:26 2011 -0700

    Export symbols for the full SA API
    
    Export all the symbols for the system attribute (SA) API.  This
    allows external module to cleanly manipulate the SAs associated
    with a dnode.  Documention for the SA API can be found in the
    module/zfs/sa.c source.
    
    This change also removes the zfs_sa_uprade_pre, and
    zfs_sa_uprade_post prototypes.  The functions themselves were
    dropped some time ago.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit e8753fb4f03aaa371028aaec145449f2610229cf[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Sep 30 10:33:26 2011 -0700

    Synchronize initramfs and system hostid
    
    Relying on an /etc/hostid file which is installed in the system
    image breaks diskless systems which share an image.  Certain
    cluster infrastructure such as MPI relies on all nodes having
    a unique hostid.  However, we still must be careful to ensure
    the hostid is syncronized between the initramfs and system
    images when using zfs root filesystems.
    
    To accompish this the automatically created /etc/hostid file has
    been removed from the spl rpm packaging.  The /etc/hostid file
    is now dynamically created for your initramfs as part of the
    dracut install process.  This avoids the need to install it in
    the actual system images.
    
    This change also resolves the spl_hostid parameter handling
    for dracut.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #398
    Closes #399
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 6ebd8ef103c3ed4739987f36d77874f6953af89f[m
Author: Oleg Stepura <oleg@stepura.com>
Date:   Thu Sep 29 23:59:07 2011 +0300

    Fix 'unexpected operator' bashism
    
    The == operator is specific to bash, replace it with the more
    correct = operator for sh.  This bug can prevent correct booting
    when using a zfs root pool.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #416

[33mcommit baab0630167f7539483af0f277aa6eeff39490d6[m
Author: Andreas Dilger <adilger@whamcloud.com>
Date:   Fri Sep 16 03:22:00 2011 -0600

    zpl: Fix "df -i" to have better free inodes value
    
    Due to the confusion in Linux statfs between f_frsize and f_bsize
    the blocks counts were changed to be in units of z_max_blksize
    instead of SPA_MINBLOCKSIZE as it is on other platforms.
    
    However, the free files calculation in zfs_statvfs() is limited by
    the free blocks count, since each dnode consumes one block/sector.
    This provided a reasonable estimate of free inodes, but on Linux
    this meant that the free inodes count was underestimated by a large
    amount, since 256 512-byte dnodes can fit into a 128kB block, and
    more if the max blocksize is increased to 1MB or larger.
    
    Also, the use of SPA_MINBLOCKSIZE is semantically incorrect since
    DNODE_SIZE may change to a value other than SPA_MINBLOCKSIZE and
    may even change per dataset, and devices with large sectors setting
    ashift will also use a larger blocksize.
    
    Correct the f_ffree calculation to use (availbytes >> DNODE_SHIFT)
    to more accurately compute the maximum number of dnodes that can
    be created.
    
    Signed-off-by: Andreas Dilger <adilger@whamcloud.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #413
    Closes #400

[33mcommit c70602f1eada6ae9d2c3442e3d469c7227d019ab[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Sep 27 16:32:53 2011 -0700

    Fix uninitialized varible in zfs_do_userspace()
    
    When compiling under Debian Lenny with gcc version 4.3.2
    (Debian 4.3.2-1.1) the following warning occurs.  To quiet
    the warning initialize 'error' to zero.  Newer versions of
    gcc correctly determine that this uninitialized varible is
    impossible because ZFS_NUM_USERQUOTA_PROPS is known to be
    greater than zero.
    
      cmd/zfs/zfs_main.c:2377: warning: "error" may be
      used uninitialized in this function
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit dee28b070057224dec67b779e80be14493a4ffb7[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Sep 27 16:07:35 2011 -0700

    Export symbols for the full ZAP API
    
    Export all the symbols for the ZAP API.  This allows external modules
    to cleanly interface with ZAP type objects.  Previously only a subset
    of the functionality was exposed.  Documention for the ZAP API can be
    found in the sys/zap.h header.
    
    This change also removes a duplicate zap_increment_int() prototype.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 7a0232735d7527b08e02196762727994aa6065f9[m
Author: Zachary Bedell <zac@thebedells.org>
Date:   Sun Sep 18 21:35:42 2011 -0400

    Make libefi-created GPT compatible with gptfdisk
    
    GPT's created by libefi set the HeaderSize attribute in the GPT
    header to 512 -- size of the GPT header INCLUDING the 420 padding
    bytes at the end.  Most other tools set the size to 92 -- size of
    the actual header itself excluding the padding.  Most tools check
    the recorded HeaderSize when verifying CRC, but gptfdisk hardcodes
    92 and thus reports CRC verification problems for full-disk vdevs
    created IE with `zpool create pool sdc`.
    
    This commit changes libefi's behavior for GPT creation and also
    fixes several edge cases where libefi's behavior was similar
    (though in an incompatible manner) to gptfdisk.  Libefi assumed
    HeaderSize was always 512 even if the GPT recorded a different
    value.  Sanity checks of the GPT headersize read from disk were
    added before applying checksum calculation -- this will prevent
    segfault in cases of bogus on-disk values.
    
    Zpools created with the resuling libefi are verified as correct
    both by parted and gptfdisk.  Also pool have been tested to
    import correctly on ZFS on Linux as well as Solaris Express 11
    livecd.
    
    Signed-off-by: Zachary Bedell <zac@thebedells.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #344

[33mcommit c39b2786ac98ab87d6dda00aa83b399ed175055a[m
Author: Zachary Bedell <zac@thebedells.org>
Date:   Sat Sep 17 23:42:43 2011 -0400

    Fix boot failure in Dracut scripts.
    
    mount-zfs.sh script incorrectly parsed results from zpool list.  Correct
    bootfs attribute was only found on systems with a single pool or where
    the bootable pool's name alphabetized to before all other pool names.
    Boot failed when the bootable pool's name came after other pools
    (IE 'rpool' and 'mypool' would fail to find bootfs on rpool.)
    
    Patch correctly discards pools whose bootfs attribute is blank ('-').
    
    Signed-off-by: Zachary Bedell <zac@thebedells.org>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #402

[33mcommit f021fe194fec75ba1196638ca00301ba3b54ae85[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Thu Sep 22 15:36:42 2011 -0700

    Use automatic variable in Makefile
    
    As written, the $(init_SCRIPTS) rule in etc/init.d/Makefule.am
    would not work as expected if the init_SCRIPTS variable were
    to contain any elements other than zfs.  Fix this by replacing
    the hard-coded 'zfs' reference with $@.
    
    Signed-off-by: Ned Bass <bass6@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #410

[33mcommit fa6e5ced2fba92555019c7bc09b4c4b98c1a5323[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Sep 15 20:23:50 2011 -0700

    Suppress kmem_alloc() warning in zfs_prop_set_special()
    
    Suppress the warning for this large kmem_alloc() because it is not
    that far over the warning threshhold (8k) and it is short lived.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit a65666f63856653faa9e4a7f35690b73512641ce[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Sep 12 11:42:33 2011 -0700

    Install zfs-devel headers in /usr/include
    
    The zfs-devel header files for linking with the libspl/libzfs
    libraries should be installed under /usr/include not /include.
    Ensure the correct install location is used when building an
    rpm package.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 2708f716c0f009bad754b8b94063526fab2048e9[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Sep 9 10:24:55 2011 -0700

    Fix usage of zsb after free
    
    Caught by code inspection, the variable zsb was referenced after
    being freed.  Move the kmem_free() to the end of the function.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 185853d9f202b306d9c316b66b774c498ed6577c[m
Author: Jeremy Gill <jgill@parallax-innovations.com>
Date:   Fri Aug 26 13:55:26 2011 -0400

    Ensure FC15 boots when zfs isn't used for boot partition
    
    It seems that dracut version 009 through 013 won't boot correctly when
    the zfs-dracut rpm package has been installed, but 'root=zfs' isn't
    used on the boot commandline, for example when the package has been
    installed on a system that _doesn't_ boot from a zfs filesystem.
    
    Signed-off-by: Jeremy Gill <jgill@parallax-innovations.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #377

[33mcommit 7cdac8b8533c662155248eb2ea672a1e803ab634[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Thu Aug 25 15:20:25 2011 -0700

    Fix zfs.spec.in to use @LICENSE@ variable
    
    The zfs.spec.in file had the license field hard coded to specify the
    CDDL. This was changed to use the @LICENSE@ variable, maintaining
    consistency with the zfs-modules.spec.in file.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 2e79a04a58bf85dbc18d420cc614100df0d1555a[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Thu Aug 25 15:09:24 2011 -0700

    Fix package URLs to use the github repository
    
    The URL field in the zfs-modules and zfs package spec files were
    updated to point to the ZFS on Linux repository hosted by github.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 8366cd6a83ab76885c89f57285e13428e4644ac0[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Wed Aug 24 09:52:16 2011 -0700

    Convert 'if' statements to AS_IF in kernel.m4
    
    The 'if' statements found in kernel.m4 were converted to use the
    portable alternative provided by autoconf, the AS_IF macro.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 2984e0bb0c1dd3b96166b4c3ab99771e8712f686[m
Author: Prakash Surya <surya1@llnl.gov>
Date:   Wed Aug 24 09:23:44 2011 -0700

    Fix minor autoconf error message inconsistencies
    
    A few of the autoconf error messages were inconsistent with the rest of
    the build system. To be specific, the inconsistencies addressed by this
    commit are the following:
    
     * The second line of the error message for the CONFIG_PREEMPT check
       was missing it's third asterisk.
    
     * A few of the error messages were prefixed by two tabs, whereas the
       majority of error messages are only prefixed by a single tab.
    
    Signed-off-by: Prakash Surya <surya1@llnl.gov>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 1a2e6a635f9ca259c687d062a133fb972c5d84c5[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Aug 22 15:58:54 2011 -0700

    Fix incorrect zpool_cache substitution
    
    This regression was accidentally introduced by commit aa2b489.
    I was attempting to simplify the init scripts and accidentally
    confused the /etc/init.d and /etc/zfs paths.  This change reverts
    the init script modifications.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #370

[33mcommit fd1cd4888a197256d18a877c7fcf259e50ccd65f[m
Merge: 9c4f40b aa2b489
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Aug 22 09:25:30 2011 -0700

    Merge branch 'udev'
    
    Merge the remaining udev restructuring changes and cleanup.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Kyle Fuller <inbox@kylefuller.co.uk>
    Signed-off-by: Zachary Bedell <zac@thebedells.org>
    Closes #356

[33mcommit aa2b4896c93bbb2652ddc5e10e66175e54ff56c8[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Aug 9 16:49:18 2011 -0700

    Fix autoconf variable substitution in init scripts.
    
    Change the variable substitution in the init script templates
    according to the method described in the Autoconf manual;
    Chapter 4.7.2: Installation Directory Variables.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit f0102d6e75d51b8d92624ba054a3fa54c807fb7f[m
Author: Kyle Fuller <inbox@kylefuller.co.uk>
Date:   Tue Aug 9 22:39:47 2011 +0100

    Make dracut module-setup.sh an autoconf config file
    
    This ensures that module-setup.sh script will always be able to
    install the required dracut components regardless of how the zfs
    package was configured.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 146cde8f4acd52d258ba80817dd1134702a91954[m
Author: Kyle Fuller <inbox@kylefuller.co.uk>
Date:   Sat Aug 6 18:28:16 2011 +0100

    Move 90-zfs udev rule from dracut to udev/rules.d
    
    This rule does not need to be dracut specific.  Automatically loading
    the zfs module stack when a zfs device is detected is usually desirable.
    My only concern is that this might cause trouble for large pools where
    we don't want to automatically import the pool until all the disks are
    available.  However, we'll cross that bridge when we come to it.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 9c4f40b894dd5b5c2ef18546d23d7e91095ac509[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Aug 2 13:20:00 2011 -0700

    Buildbot suppression rules
    
    The warnings listed in the suppression file will be suppressed
    and not flagged during regular buildbot builds.  These warnings
    are expected, harmless, and can obscure real issues unless they
    are suppressed.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 4c069d349440cbf1ebe234d65b53ab41eaea5569[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Aug 19 16:24:04 2011 -0700

    Fixed uninitialized variable
    
    This warning was accidentally introduced by commit
    b7936d5c2337bc976ac831c1c38de563844c36b.  The fix is to
    simply initialize the variable to ZFS_DELEG_WHO_UNKNOWN.
    
      cmd/zfs/zfs_main.c:4460:25: warning: 'who_type' may be
      used uninitialized in this function
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 29b35200a7b3b0b803b69bb18f8435f4b9e66151[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Aug 19 15:12:44 2011 -0700

    Fix missing format arguments
    
    These warnings were accidentally introduced by commit
    b7936d5c2337bc976ac831c1c38de563844c36b.  The fix is to
    simply add the missing format specifier.
    
      cmd/zfs/zfs_main.c:4565: warning: format not a string
      literal and no format arguments
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 95d9fd028b9a27294a1b807915de17877563bd6d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Aug 19 14:49:49 2011 -0700

    Fix incompatible pointer type warning
    
    This warning was accidentally introduced by commit
    f3ab88d6461dec46dea240763843f66300facfab which updated the
    .readpages() implementation.  The fix is to simply cast
    the helper function to the appropriate type when passed.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit b740d602bdeca757180a7098be28701a7cde7fbd[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jul 21 12:39:42 2011 -0700

    Disable zfs /etc/mtab updates
    
    Completely disable the zfs binary from attempting to directly update
    /etc/mtab.  The Linux port relies entirely on the mount.zfs helper
    to safely update /etc/mtab.  If we left the /etc/mtab updates to
    the zfs binary then they could race with concurrent non-zfs mounts.
    Routing everything through the system mount command ensures the
    /etc/mtab updates are locked properly.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #329

[33mcommit ddd052aa8311f846e3d3f7a9ddf1a21d317fb04a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Aug 5 16:55:04 2011 -0700

    Improve HAVE_EVICT_INODE check
    
    The hardened gentoo kernel defines all of the super block
    operation callbacks as const.  This prevents the autoconf test
    from assigning the callback and results in a false negative.
    By moving the assignment in to the declaration we can avoid
    this issue and get a correct result for this patched kernel.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #296

[33mcommit de0a1c099b7dc6722eb428838e893a4d9490a21e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Aug 8 14:50:36 2011 -0700

    Autogen refresh for udev changes
    
    Run autogen.sh using the same autotools versions as upstream:
    
     * autoconf-2.63
     * automake-1.11.1
     * libtool-2.2.6b

[33mcommit 12d06bac9b22b11d8a322dfea4bdb50b106c254f[m
Author: Kyle Fuller <inbox@kylefuller.co.uk>
Date:   Fri Aug 5 20:22:58 2011 +0100

    Move udev rules from /etc/udev to /lib/udev
    
    This change moves the default install location for the zfs udev
    rules from /etc/udev/ to /lib/udev/.  The correct convention is
    for rules provided by a package to be installed in /lib/udev/.
    The /etc/udev/ directory is reserved for custom rules or local
    overrides.
    
    Additionally, this patch cleans up some abuse of the bindir install
    location by adding a udevdir and udevruledir install directories.
    This allows us to revert to the default bin install location.  The
    udev install directories can be set with the following new options.
    
      --with-udevdir=DIR      install udev helpers [EPREFIX/lib/udev]
      --with-udevruledir=DIR  install udev rules [UDEVDIR/rules.d]
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #356

[33mcommit f3ab88d6461dec46dea240763843f66300facfab[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 4 16:25:43 2011 -0700

    Correctly lock pages for .readpages()
    
    Unlike the .readpage() callback which is passed a single locked page
    to be populated.  The .readpages() callback is passed a list of unlocked
    pages which are all marked for read-ahead (PG_readahead set).  It is
    the responsibly of .readpages() to ensure to pages are properly locked
    before being populated.
    
    Prior to this change the requested read-ahead pages would be updated
    outside of the page lock which is unsafe.  The unlocked pages would then
    be unlocked again which is harmless but should have been immediately
    detected as bug.  Unfortunately, newer kernels failed detect this issue
    because the check is done with a VM_BUG_ON which is disabled by default.
    Luckily, the old Debian Lenny 2.6.26 kernel caught this because it
    simply uses a BUG_ON.
    
    The straight forward fix for this is to update the .readpages() callback
    to use the read_cache_pages() helper function.  The helper function will
    ensure that each page in the list is properly locked before it is passed
    to the .readpage() callback.  In addition resolving the bug, this results
    in a nice simplification of the existing code.
    
    The downside to this change is that instead of passing one large read
    request to the dmu multiple smaller ones are submitted.  All of these
    requests however are marked for readahead so the lower layers should
    issue a large I/O regardless.  Thus most of the request should hit the
    ARC cache.
    
    Futher optimization of this code can be done in the future is a perform
    analysis determines it to be worthwhile.  But for the moment, it is
    preferable that code be correct and understandable.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #355

[33mcommit 76659dc110ef2ada13bcb8e4e2ec60d8216c6836[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Aug 1 18:24:40 2011 -0700

    Add backing_device_info per-filesystem
    
    For a long time now the kernel has been moving away from using the
    pdflush daemon to write 'old' dirty pages to disk.  The primary reason
    for this is because the pdflush daemon is single threaded and can be
    a limiting factor for performance.  Since pdflush sequentially walks
    the dirty inode list for each super block any delay in processing can
    slow down dirty page writeback for all filesystems.
    
    The replacement for pdflush is called bdi (backing device info).  The
    bdi system involves creating a per-filesystem control structure each
    with its own private sets of queues to manage writeback.  The advantage
    is greater parallelism which improves performance and prevents a single
    filesystem from slowing writeback to the others.
    
    For a long time both systems co-existed in the kernel so it wasn't
    strictly required to implement the bdi scheme.  However, as of
    Linux 2.6.36 kernels the pdflush functionality has been retired.
    
    Since ZFS already bypasses the page cache for most I/O this is only
    an issue for mmap(2) writes which must go through the page cache.
    Even then adding this missing support for newer kernels was overlooked
    because there are other mechanisms which can trigger writeback.
    
    However, there is one critical case where not implementing the bdi
    functionality can cause problems.  If an application handles a page
    fault it can enter the balance_dirty_pages() callpath.  This will
    result in the application hanging until the number of dirty pages in
    the system drops below the dirty ratio.
    
    Without a registered backing_device_info for the filesystem the
    dirty pages will not get written out.  Thus the application will hang.
    As mentioned above this was less of an issue with older kernels because
    pdflush would eventually write out the dirty pages.
    
    This change adds a backing_device_info structure to the zfs_sb_t
    which is already allocated per-super block.  It is then registered
    when the filesystem mounted and unregistered on unmount.  It will
    not be registered for mounted snapshots which are read-only.  This
    change will result in flush-<pool> thread being dynamically created
    and destroyed per-mounted filesystem for writeback.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #174

[33mcommit 3c0e5c0f455576d045fa443cbab74834d70ded55[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Aug 1 21:28:51 2011 -0700

    Cleanup mmap(2) writes
    
    While the existing implementation of .writepage()/zpl_putpage() was
    functional it was not entirely correct.  In particular, it would move
    dirty pages in to a clean state simply after copying them in to the
    ARC cache.  This would result in the pages being lost if the system
    were to crash enough though the Linux VFS believed them to be safe on
    stable storage.
    
    Since at the moment virtually all I/O, except mmap(2), bypasses the
    page cache this isn't as bad as it sounds.  However, as hopefully
    start using the page cache more getting this right becomes more
    important so it's good to improve this now.
    
    This patch takes a big step in that direction by updating the code
    to correctly move dirty pages through a writeback phase before they
    are marked clean.  When a dirty page is copied in to the ARC it will
    now be set in writeback and a completion callback is registered with
    the transaction.  The page will stay in writeback until the dmu runs
    the completion callback indicating the page is on stable storage.
    At this point the page can be safely marked clean.
    
    This process is normally entirely asynchronous and will be repeated
    for every dirty page.  This may initially sound inefficient but most
    of these pages will end up in a few txgs.  That means when they are
    eventually written to disk they should be nicely batched.  However,
    there is room for improvement.  It may still be desirable to batch
    up the pages in to larger writes for the dmu.  This would reduce
    the number of callbacks and small 4k buffer required by the ARC.
    
    Finally, if the caller requires that the I/O be done synchronously
    by setting WB_SYNC_ALL or if ZFS_SYNC_ALWAYS is set.  Then the I/O
    will trigger a zil_commit() to flush the data to stable storage.
    At which point the registered callbacks will be run leaving the
    date safe of disk and marked clean before returning from .writepage.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit ddd0fd9ef64648333b79b4cc8a13216399cefec9[m
Author: Gunnar Beutner <gunnar@beutner.name>
Date:   Fri Jul 29 10:17:50 2011 +0200

    Use libzfs_run_process() in libshare.
    
    This should simplify the code a bit by re-using existing code
    to fork and exec a process.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #190

[33mcommit 3132cb397ad1b60cac548b35ad8bbd4c7183fde4[m
Author: Gunnar Beutner <gunnar@beutner.name>
Date:   Fri Jul 29 10:17:46 2011 +0200

    Use /dev/null for stdout/stderr in libzfs_run_process().
    
    Simply closing the stdout and/or stderr file descriptors for
    the child process can have bad side effects if for example
    the child writes to stdout/stderr after open()ing a file.
    The open() call might have returned the same file descriptor
    one would usually expect for stdout/stderr (1 and 2), thereby
    causing mis-directed writes.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #190

[33mcommit 5333eb0b3b18d345052b8cfaf41b90a0c5781fb8[m
Author: James H <james@kagisoft.co.uk>
Date:   Tue Jul 26 11:47:20 2011 +0100

    Call exportfs -v once for NFS shares.
    
    At the moment we call exportfs -v every time we check whether an
    NFS share is active. This happens every time you run a zfs or
    zpool command, making them extremely slow when you have a lot of
    exports. The time taken is approx O(n2) of the number of shares.
    
    This commit stores the output from exportfs -v in a temporary file
    and use this to speed up subsequent accesses.
    
    This mechanism is still too slow - if you have tens of thousands
    of NFS shares it will still be painful running ANY zfs/zpool
    command.
    
    Signed-off-by: Gunnar Beutner <gunnar@beutner.name>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #341

[33mcommit 77999e804fff35782ab4b578d2cecf064c54a841[m
Merge: bfb73f9 cddafdc
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Aug 1 12:10:54 2011 -0700

    Merge branch 'illumos'
    
    Merge in ten upstream fixes which have already been made to both
    the Illumos and FreeBSD ZFS implementations.  This brings us up
    to date with the latest ZFS changes in Illumos.
    
    Credit goes to Martin Matuska of the FreeBSD project for posting
    an excellent summary of the upstream patches we were missing.
    
    Illumos #1313: Integer overflow in txg_delay()
    Illumos #278:  get rid zfs of python and pyzfs dependencies
    Illumos #1043: Recursive zfs snapshot destroy fails
    Illumos #883:  ZIL reuse during remount corruption
    Illumos #1092: zfs refratio property
    Illumos #1051: zfs should handle
    Illumos #510:  'zfs get' enhancement - mountpoint as an argument
    Illumos #175:  zfs vdev cache consumes excessive memory
    Illumos #764:  panic in zfs:dbuf_sync_list
    Illumos #xxx:  zdb -vvv broken after zfs diff integration
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #340

[33mcommit cddafdcbc55a38cdbdd3dc8c58f447b22bd847ee[m
Author: Martin Matuska <mm@FreeBSD.org>
Date:   Mon Aug 1 10:34:06 2011 -0700

    Illumos #1313: Integer overflow in txg_delay()
    
    The function txg_delay() is used to delay txg (transaction group)
    threads in ZFS.  The timeout value for this function is calculated
    using:
    
        int timeout = ddi_get_lbolt() + ticks;
    
    Later, the actual wait is performed:
    
        while (ddi_get_lbolt() < timeout &&
            tx->tx_syncing_txg < txg-1 && !txg_stalled(dp))
                (void) cv_timedwait(&tx->tx_quiesce_more_cv, &tx->tx_sync_lock,
                    timeout - ddi_get_lbolt());
    
    The ddi_get_lbolt() function returns current uptime in clock ticks
    and is typed as clock_t.  The clock_t type on 64-bit architectures
    is int64_t.
    
    The "timeout" variable will overflow depending on the tick frequency
    (e.g. for 1000 it will overflow in 28.855 days). This will make the
    expression "ddi_get_lbolt() < timeout" always false - txg threads will
    not be delayed anymore at all. This leads to a slowdown in ZFS writes.
    
    The attached patch initializes timeout as clock_t to match the return
    value of ddi_get_lbolt().
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #352

[33mcommit 0b7936d5c2337bc976ac831c1c38de563844c36b[m
Author: Alexander Stetsenko <ams@nexenta.com>
Date:   Tue Jul 26 15:44:36 2011 -0700

    Illumos #278: get rid zfs of python and pyzfs dependencies
    
    Remove all python and pyzfs dependencies for consistency and
    to ensure full functionality even in a mimimalist environment.
    
    Reviewed by: gordon.w.ross@gmail.com
    Reviewed by: trisk@opensolaris.org
    Reviewed by: alexander.r.eremin@gmail.com
    Reviewed by: jerry.jelinek@joyent.com
    Approved by: garrett@nexenta.com
    
    References to Illumos issue and patch:
    - https://www.illumos.org/issues/278
    - https://github.com/illumos/illumos-gate/commit/1af68beac3
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #340
    Issue #160
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit ca5252204aa25f81e9f19084917e0a46fdd470b0[m
Author: Martin Matuska <mm@FreeBSD.org>
Date:   Tue Jul 26 13:08:02 2011 -0700

    Illumos #1043: Recursive zfs snapshot destroy fails
    
    Prior to revision 11314 if a user was recursively destroying
    snapshots of a dataset the target dataset was not required to
    exist.  The zfs_secpolicy_destroy_snaps() function introduced
    the security check on the target dataset, so since then if the
    target dataset does not exist, the recursive destroy is not
    performed.  Before 11314, only a delete permission check on
    the snapshot's master dataset was performed.
    
    Steps to reproduce:
    zfs create pool/a
    zfs snapshot pool/a@s1
    zfs destroy -r pool@s1
    
    Therefore I suggest to fallback to the old security check, if
    the target snapshot does not exist and continue with the destroy.
    
    References to Illumos issue and patch:
    - https://www.illumos.org/issues/1043
    - https://www.illumos.org/attachments/217/recursive_dataset_destroy.patch
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #340

[33mcommit 3e31d2b080b4e6665a93691d171a13d7e29a768a[m
Author: Eric Schrock <Eric.Schrock@delphix.com>
Date:   Tue Jul 26 12:41:53 2011 -0700

    Illumos #883: ZIL reuse during remount corruption
    
    Moving the zil_free() cleanup to zil_close() prevents this
    problem from occurring in the first place.  There is a very
    good description of the issue and fix in Illumus #883.
    
    Reviewed by: Matt Ahrens <Matt.Ahrens@delphix.com>
    Reviewed by: Adam Leventhal <Adam.Leventhal@delphix.com>
    Reviewed by: Albert Lee <trisk@nexenta.com>
    Reviewed by: Gordon Ross <gwr@nexenta.com>
    Reviewed by: Garrett D'Amore <garrett@nexenta.com>
    Reivewed by: Dan McDonald <danmcd@nexenta.com>
    Approved by: Gordon Ross <gwr@nexenta.com>
    
    References to Illumos issue and patch:
    - https://www.illumos.org/issues/883
    - https://github.com/illumos/illumos-gate/commit/c9ba2a43cb
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #340

[33mcommit f5fc4acaa77e2c1782a9495bbf1a39884b4c3940[m
Author: Matt Ahrens <Matt.Ahrens@delphix.com>
Date:   Tue Jul 26 12:23:00 2011 -0700

    Illumos #1092: zfs refratio property
    
    Add a "REFRATIO" property, which is the compression ratio based on
    data referenced. For snapshots, this is the same as COMPRESSRATIO,
    but for filesystems/volumes, the COMPRESSRATIO is based on the
    data "USED" (ie, includes blocks in children, but not blocks
    shared with the origin).
    
    This is needed to figure out how much space a filesystem would
    use if it were not compressed (ignoring snapshots).
    
    Reviewed by: George Wilson <George.Wilson@delphix.com>
    Reviewed by: Adam Leventhal <Adam.Leventhal@delphix.com>
    Reviewed by: Dan McDonald <danmcd@nexenta.com>
    Reviewed by: Richard Elling <richard.elling@richardelling.com>
    Reviewed by: Mark Musante <Mark.Musante@oracle.com>
    Reviewed by: Garrett D'Amore <garrett@nexenta.com>
    Approved by: Garrett D'Amore <garrett@nexenta.com>
    
    References to Illumos issue and patch:
    - https://www.illumos.org/issues/1092
    - https://github.com/illumos/illumos-gate/commit/187d6ac08a
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #340

[33mcommit 6d974228ef05366c546bb04198dafcb38785c16d[m
Author: George Wilson <George.Wilson@delphix.com>
Date:   Tue Jul 26 12:08:52 2011 -0700

    Illumos #1051: zfs should handle imbalanced luns
    
    Today zfs tries to allocate blocks evenly across all devices.
    This means when devices are imbalanced zfs will use lots of
    CPU searching for space on devices which tend to be pretty
    full.  It should instead fail quickly on the full LUNs and
    move onto devices which have more availability.
    
    Reviewed by: Eric Schrock <Eric.Schrock@delphix.com>
    Reviewed by: Matt Ahrens <Matt.Ahrens@delphix.com>
    Reviewed by: Adam Leventhal <Adam.Leventhal@delphix.com>
    Reviewed by: Albert Lee <trisk@nexenta.com>
    Reviewed by: Gordon Ross <gwr@nexenta.com>
    Approved by: Garrett D'Amore <garrett@nexenta.com>
    
    References to Illumos issue and patch:
    - https://www.illumos.org/issues/510
    - https://github.com/illumos/illumos-gate/commit/5ead3ed965
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #340

[33mcommit bb939d10859e4f56bc793c4d5077e680a8c6c3aa[m
Author: Shampavman <sham.pavman@nexenta.com>
Date:   Tue Jul 26 11:53:09 2011 -0700

    Illumos #510: 'zfs get' enhancement - mountpoint as an argument
    
    The 'zfs get' command should be able to deal with mountpoint
    as an argument.  It already works with 'zfs list' command:
    
      # zfs list /export/home/estibi
      NAME                       USED  AVAIL  REFER  MOUNTPOINT
      rpool/export/home/estibi  1.14G  3.86G  1.14G  /export/home/estibi
    
    but it fails with 'zfs get':
    
      # zfs get all /export/home/estibi
      cannot open '/export/home/estibi': invalid dataset name
    
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Reviewed by: Deano <deano@rattie.demon.co.uk>
    Reviewed by: Garrett D'Amore <garrett@nexenta.com>
    Approved by: Garrett D'Amore <garrett@nexenta.com>
    
    References to Illumos issue and patch:
    - https://www.illumos.org/issues/510
    - https://github.com/illumos/illumos-gate/commit/5ead3ed965
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #340

[33mcommit 2cc6c8db12eaf8d1a1c17a13fbc6d25d8244486e[m
Author: Garrett D'Amore <garrett@nexenta.com>
Date:   Fri Apr 22 00:49:41 2011 -0700

    Illumos #175: zfs vdev cache consumes excessive memory
    
    Note that with the current ZFS code, it turns out that the vdev
    cache is not helpful, and in some cases actually harmful.  It
    is better if we disable this.  Once some time has passed, we
    should actually remove this to simplify the code.  For now we
    just disable it by setting the zfs_vdev_cache_size to zero.
    Note that Solaris 11 has made these same changes.
    
    References to Illumos issue and patch:
    - https://www.illumos.org/issues/175
    - https://github.com/illumos/illumos-gate/commit/b68a40a845
    
    Reviewed by: George Wilson <george.wilson@delphix.com>
    Reviewed by: Eric Schrock <eric.schrock@delphix.com>
    Approved by: Richard Lowe <richlowe@richlowe.net>
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #340

[33mcommit ef3c1dea7024b07b4ace6115de9f22a99c1394d8[m
Author: Gordon Ross <gwr@nexenta.com>
Date:   Tue Jul 26 11:37:06 2011 -0700

    Illumos #764: panic in zfs:dbuf_sync_list
    
    Hypothesis about what's going on here.
    
    At some time in the past, something, i.e. dnode_reallocate()
    calls one of:
    dbuf_rm_spill(dn, tx);
    
    These will do:
    dbuf_rm_spill(dnode_t *dn, dmu_tx_t *tx)
    dbuf_free_range(dn, DMU_SPILL_BLKID, DMU_SPILL_BLKID, tx)
    dbuf_undirty(db, tx)
    
    Currently dbuf_undirty can leave a spill block in dn_dirty_records[],
    (it having been put there previously by dbuf_dirty) and free it.
    Sometime later, dbuf_sync_list trips over this reference to free'd
    (and typically reused) memory.
    
    Also, dbuf_undirty can call dnode_clear_range with a bogus
    block ID. It needs to test for DMU_SPILL_BLKID, similar to
    how dnode_clear_range is called in dbuf_dirty().
    
    References to Illumos issue and patch:
    - https://www.illumos.org/issues/764
    - https://github.com/illumos/illumos-gate/commit/3f2366c2bb
    
    Reviewed by: George Wilson <gwilson@zfsmail.com>
    Reviewed by: Mark.Maybe@oracle.com
    Reviewed by: Albert Lee <trisk@nexenta.com
    Approved by: Garrett D'Amore <garrett@nexenta.com>
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #340

[33mcommit 7b8518cb8d39aa340fecf559143763b27b212b0d[m
Author: Tim Haley <Tim.Haley@Sun.COM>
Date:   Tue Jul 26 16:38:27 2011 -0700

    Illumos #xxx: zdb -vvv broken after zfs diff integration
    
    References to Illumos issue and patch:
    - https://github.com/illumos/illumos-gate/commit/163eb7ff
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #340

[33mcommit bfb73f92773dc3471e3a6274970c02e0700b6c7d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Aug 1 10:27:54 2011 -0700

    Add .gitignore for zfs.<distro> init scripts
    
    Treat the automatically generated zfs.<distro> init scripts
    as build products by adding them to a directory specific
    .gitignore file.

[33mcommit 5faa9c0367e8d6b1ee1c45f1ebeffd3e53ef35e8[m
Author: Kyle Fuller <inbox@kylefuller.co.uk>
Date:   Mon Jul 25 01:00:53 2011 +0100

    Turn the init.d scripts into autoconf config files
    
    This change ensures the paths used by the provided init scripts
    always reference the prefixes provided at configure time.  The
    @sbindir@ and @sysconfdir@ prefixes will be correctly replaced
    at build time.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #336

[33mcommit 7f4afd300b753ee7e0ce1f8d12c098119193001b[m
Author: Zachary Bedell <zac@thebedells.org>
Date:   Sun Jul 31 00:21:40 2011 -0400

    Wrap dracut scripts to 79 chars
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #347

[33mcommit 7304278d7f087846392d6efc8802da48811476f2[m
Author: Kyle Fuller <inbox@kylefuller.co.uk>
Date:   Mon Jul 25 01:36:37 2011 +0100

    Make autogen.sh executable
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit a4719e54e8628564ffda33cffee59812b61f273b[m
Author: Zachary Bedell <zac@thebedells.org>
Date:   Sun Jul 24 16:53:15 2011 -0400

    Catch return errors from zpool commands
    
    This fixes a bug that can effect first reboot after install
    using Dracut.  The Dracut module didn't check the return
    value from several calls to z* functions.  This resulted in
    "Using no pools available as root" on boot if the ZFS module
    didn't auto-import the pools.  It's most likely to happen on
    initial restart after a fresh install & requires juggling in
    the Dracut emergency holographic shell to fix.
    
    This patch checks return codes & output from zpool list and
    related functions and correctly falls into the explicit zpool
    import code branch if the module didn't import the pool at load.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 1ef5e8296a07a0d208d0663ae966c8b0206f7e6a[m
Author: Zachary Bedell <zac@thebedells.org>
Date:   Sun Jul 24 16:46:16 2011 -0400

    Soft to hard tabs
    
    For consistency with the upstream sources and the rest of the
    project use hard instead of soft tabs.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit beb982690293310b14a4835d3ffeb883ba03cc0a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jul 22 13:55:27 2011 -0700

    Fix txg_sync_thread deadlock
    
    Update two kmem_alloc()'s in dbuf_dirty() to use KM_PUSHPAGE.
    Because these functions are called from txg_sync_thread we
    must ensure they don't reenter the zfs filesystem code via
    the .writepage callback.  This would result in a deadlock.
    
    This deadlock is rare and has only been observed once under
    an abusive mmap() write workload.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit f7ef846ea19809b2f373c0542741ac04c65a07cb[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jul 22 13:56:03 2011 -0700

    Add missing <pool> option
    
    The bootfs example in the dracut documentation was sightly incorrect
    because it lacked the trailing required pool argument.  Add it.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 0da78696904f6e0e7cfedd2a0296879f47717f4f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jul 22 14:10:38 2011 -0700

    Fix the configure CONFIG_* option detection
    
    The latest kernels no longer define AUTOCONF_INCLUDED which was
    being used to detect the new style autoconf.h kernel configure
    options.  This results in the CONFIG_* checks always failing
    incorrectly for newer kernels.
    
    The fix for this is a simplification of the testing method.
    Rather than attempting to explicitly include to renamed config
    header.  It is simpler to unconditionally include <linux/module.h>
    which must pick up the correctly named header.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #320

[33mcommit 22872ff5da0d12fe393e40d3e4b3c5a58d93e360[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jul 20 16:50:22 2011 -0700

    Use zfs_mknode() to create dataset root
    
    Long, long, long ago when the effort to port ZFS was begun
    the zfs_create_fs() function was heavily modified to remove
    all of its VFS dependencies.  This allowed Lustre to use
    the dataset without us having to spend the time porting all
    the required VFS code.
    
    Fast-forward several years and we now have all the VFS code
    in place but are still relying on the modified zfs_create_fs().
    This isn't required anymore and we can now use zfs_mknode()
    to create the root znode for the filesystem.
    
    This commit reverts the contents of zfs_create_fs() to largely
    match the upstream OpenSolaris code.  There have been minor
    modifications to accomidate the Linux VFS but that is all.
    
    This code fixes issue #116 by bootstraping enough of the VFS
    data structures so we can rely on zfs_mknode() to create the
    root directory.  This ensures it is created properly with
    support for system attributes.  Previously it wasn't which
    is why it behaved differently that all other directories
    when modified.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #116

[33mcommit 9fd91daeef4df4e2bc66f54bb97c88225c6dd2c7[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jul 20 13:10:07 2011 -0700

    Honor setgit bit on directories
    
    Newly created files were always being created with the fsuid/fsgid
    in the current users credentials.  This is correct except in the
    case when the parent directory sets the 'setgit' bit.  In this
    case according to posix the newly created file/directory should
    inherit the gid of the parent directory.  Additionally, in the
    case of a subdirectory it should also inherit the 'setgit' bit.
    
    Finally, this commit performs a little cleanup of the vattr_t
    initialization by moving it to a common helper function.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #262

[33mcommit fe0ed8f910c1e4288dc190546cfe98ecf545b547[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jul 19 21:44:07 2011 -0700

    Fix 'make install' overly broad 'rm'
    
    When running 'make install' without DESTDIR set the module install
    rules would mistakenly destroy the 'modules.*' files for ALL of
    your installed kernels.  This could lead to a non-functional system
    for the alternate kernels because 'depmod -a' will only be run for
    the kernel which was compiled against.  This issue would not impact
    anyone using the 'make <deb|rpm|pkg>' build targets to build and
    install packages.
    
    The fix for this issue is to only remove extraneous build products
    when DESTDIR is set.  This almost exclusively indicates we are
    building packages and installed the build products in to a temporary
    staging location.  Additionally, limit the removal the unneeded
    build products to the target kernel version.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #328

[33mcommit cfc9a5c88f91f7b4d606fce89505e1f404691ea5[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jul 19 11:48:46 2011 -0700

    Fix zpl_writepage() deadlock
    
    Disable the normal reclaim path for zpl_putpage().  This ensures that
    all memory allocations under this call path will never enter direct
    reclaim.  If this were to happen the VM might try to write out
    additional pages by calling zpl_putpage() again resulting in a
    deadlock.
    
    This sitution is typically handled in Linux by marking each offending
    allocation GFP_NOFS.  However, since much of the code used is common
    it makes more sense to use PF_MEMALLOC to flag the entire call tree.
    Alternately, the code could be updated to pass the needed allocation
    flags but that's a more invasive change.
    
    The following example of the above described deadlock was triggered
    by test 074 in the xfstest suite.
    
    Call Trace:
     [<ffffffff814dcdb2>] down_write+0x32/0x40
     [<ffffffffa05af6e4>] dnode_new_blkid+0x94/0x2d0 [zfs]
     [<ffffffffa0597d66>] dbuf_dirty+0x556/0x750 [zfs]
     [<ffffffffa05987d1>] dmu_buf_will_dirty+0x81/0xd0 [zfs]
     [<ffffffffa059ee70>] dmu_write+0x90/0x170 [zfs]
     [<ffffffffa0611afe>] zfs_putpage+0x2ce/0x360 [zfs]
     [<ffffffffa062875e>] zpl_putpage+0x1e/0x60 [zfs]
     [<ffffffffa06287b2>] zpl_writepage+0x12/0x20 [zfs]
     [<ffffffff8115f907>] writeout+0xa7/0xd0
     [<ffffffff8115fa6b>] move_to_new_page+0x13b/0x170
     [<ffffffff8115fed4>] migrate_pages+0x434/0x4c0
     [<ffffffff811559ab>] compact_zone+0x4fb/0x780
     [<ffffffff81155ed1>] compact_zone_order+0xa1/0xe0
     [<ffffffff8115602c>] try_to_compact_pages+0x11c/0x190
     [<ffffffff811200bb>] __alloc_pages_nodemask+0x5eb/0x8b0
     [<ffffffff8115464a>] alloc_pages_current+0xaa/0x110
     [<ffffffff8111e36e>] __get_free_pages+0xe/0x50
     [<ffffffffa03f0e2f>] kv_alloc+0x3f/0xb0 [spl]
     [<ffffffffa03f11d9>] spl_kmem_cache_alloc+0x339/0x660 [spl]
     [<ffffffffa05950b3>] dbuf_create+0x43/0x370 [zfs]
     [<ffffffffa0596fb1>] __dbuf_hold_impl+0x241/0x480 [zfs]
     [<ffffffffa0597276>] dbuf_hold_impl+0x86/0xc0 [zfs]
     [<ffffffffa05977ff>] dbuf_hold_level+0x1f/0x30 [zfs]
     [<ffffffffa05a9dde>] dmu_tx_check_ioerr+0x4e/0x110 [zfs]
     [<ffffffffa05aa1f9>] dmu_tx_count_write+0x359/0x6f0 [zfs]
     [<ffffffffa05aa5df>] dmu_tx_hold_write+0x4f/0x70 [zfs]
     [<ffffffffa0611a6d>] zfs_putpage+0x23d/0x360 [zfs]
     [<ffffffffa062875e>] zpl_putpage+0x1e/0x60 [zfs]
     [<ffffffff811221f9>] write_cache_pages+0x1c9/0x4a0
     [<ffffffffa0628738>] zpl_writepages+0x18/0x20 [zfs]
     [<ffffffff81122521>] do_writepages+0x21/0x40
     [<ffffffff8119bbbd>] writeback_single_inode+0xdd/0x2c0
     [<ffffffff8119bfbe>] writeback_sb_inodes+0xce/0x180
     [<ffffffff8119c11b>] writeback_inodes_wb+0xab/0x1b0
     [<ffffffff8119c4bb>] wb_writeback+0x29b/0x3f0
     [<ffffffff8119c6cb>] wb_do_writeback+0xbb/0x240
     [<ffffffff811308ea>] bdi_forker_task+0x6a/0x310
     [<ffffffff8108ddf6>] kthread+0x96/0xa0
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #327

[33mcommit abd39a8289c3bc2766f281933689d5140445aa85[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jul 19 09:31:23 2011 -0700

    Fix zio_execute() deadlock
    
    To avoid deadlocking the system it is crucial that all memory
    allocations performed in the zio_execute() call path are marked
    KM_PUSHPAGE (GFP_NOFS).  This ensures that while a z_wr_iss
    thread is processing the syncing transaction group it does
    not re-enter the filesystem code and deadlock on itself.
    
    Call Trace:
     [<ffffffffa02580e8>] cv_wait_common+0x78/0xe0 [spl]
     [<ffffffffa0347bab>] txg_wait_open+0x7b/0xa0 [zfs]
     [<ffffffffa030e73d>] dmu_tx_wait+0xed/0xf0 [zfs]
     [<ffffffffa0376a49>] zfs_putpage+0x219/0x360 [zfs]
     [<ffffffffa038d75e>] zpl_putpage+0x1e/0x60 [zfs]
     [<ffffffffa038d7b2>] zpl_writepage+0x12/0x20 [zfs]
     [<ffffffff8115f907>] writeout+0xa7/0xd0
     [<ffffffff8115fa6b>] move_to_new_page+0x13b/0x170
     [<ffffffff8115fed4>] migrate_pages+0x434/0x4c0
     [<ffffffff811559ab>] compact_zone+0x4fb/0x780
     [<ffffffff81155ed1>] compact_zone_order+0xa1/0xe0
     [<ffffffff8115602c>] try_to_compact_pages+0x11c/0x190
     [<ffffffff811200bb>] __alloc_pages_nodemask+0x5eb/0x8b0
     [<ffffffff81159932>] kmem_getpages+0x62/0x170
     [<ffffffff8115a54a>] fallback_alloc+0x1ba/0x270
     [<ffffffff8115a2c9>] ____cache_alloc_node+0x99/0x160
     [<ffffffff8115b059>] __kmalloc+0x189/0x220
     [<ffffffffa02539fb>] kmem_alloc_debug+0xeb/0x130 [spl]
     [<ffffffffa031454a>] dnode_hold_impl+0x46a/0x550 [zfs]
     [<ffffffffa0314649>] dnode_hold+0x19/0x20 [zfs]
     [<ffffffffa03042e3>] dmu_read+0x33/0x180 [zfs]
     [<ffffffffa034729d>] space_map_load+0xfd/0x320 [zfs]
     [<ffffffffa03300bc>] metaslab_activate+0x10c/0x170 [zfs]
     [<ffffffffa0330ad9>] metaslab_alloc+0x469/0x800 [zfs]
     [<ffffffffa038963c>] zio_dva_allocate+0x6c/0x2f0 [zfs]
     [<ffffffffa038a249>] zio_execute+0x99/0xf0 [zfs]
     [<ffffffffa0254b1c>] taskq_thread+0x1cc/0x330 [spl]
     [<ffffffff8108ddf6>] kthread+0x96/0xa0
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #291

[33mcommit a140dc5469399eaf2347ee7db503275f38f5dc12[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jul 18 20:06:32 2011 -0700

    Fix mmap(2)/write(2)/read(2) deadlock
    
    When modifing overlapping regions of a file using mmap(2) and
    write(2)/read(2) it is possible to deadlock due to a lock inversion.
    The zfs_write() and zfs_read() hooks first take the zfs range lock
    and then lock the individual pages.  Conversely, when using mmap'ed
    I/O the zpl_writepage() hook is called with the individual page
    locks already taken and then zfs_putpage() takes the zfs range lock.
    
    The most straight forward fix is to simply not take the zfs range
    lock in the mmap(2) case.  The individual pages will still be locked
    thus serializing access.  Updating the same region of a file with
    write(2) and mmap(2) has always been a dodgy thing to do.  This change
    at a minimum ensures we don't deadlock and is consistent with the
    existing Linux semantics enforced by the VFS.
    
    This isn't an issue under Solaris because the only range locking
    performed will be with the zfs range locks.  It's up to each filesystem
    to perform its own file locking.  Under Linux the VFS provides many
    of these services.
    
    It may be possible/desirable at a latter date to entirely dump the
    existing zfs range locking and rely on the Linux VFS page locks.
    However, for now its safest to perform both layers of locking until
    zfs is more tightly integrated with the page cache.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Issue #302

[33mcommit 7f9d9946f88a37954ac208272bee0d4b3988da7f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jul 19 11:22:29 2011 -0700

    Update 'zpool import' man page
    
    The following supported options were missing from the zpool.8
    man page.  The OpenSolaris man pages originally used were simply
    out of date with the code.
    
    zpool import
      -F Recovery mode
      -m Allow missing log devices
      -N Import but don't mount
      -n Determine if recoverable but don't do it
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 61f218b0900194edfb2e67739221e49c46fc5ee0[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jul 15 16:15:27 2011 -0700

    Fix send/recv 'dataset is busy' errors
    
    This commit fixes a regression which was accidentally introduced by
    the Linux 2.6.39 compatibility chanages.  As part of these changes
    instead of holding an active reference on the namepsace (which is
    no longer posible) a reference is taken on the super block.  This
    reference ensures the super block remains valid while it is in use.
    
    To handle the unlikely race condition of the filesystem being
    unmounted concurrently with the start of a 'zfs send/recv' the
    code was updated to only take the super block reference when there
    was an existing reference.  This indicates that the filesystem is
    active and in use.
    
    Unfortunately, in the 'zfs recv' case this is not the case.  The
    newly created dataset will not have a super block without an
    active reference which results in the 'dataset is busy' error.
    
    The most straight forward fix for this is to simply update the
    code to always take the reference even when it's zero.  This
    may expose us to very very unlikely concurrent umount/send/recv
    case but the consequences of that are minor.
    
    Closes #319

[33mcommit 615ab66d18f74b3f4979c06192e1aa1082523dd3[m
Author: Kyle Fuller <inbox@kylefuller.co.uk>
Date:   Sun Jul 10 16:57:33 2011 +0100

    Provide a rc.d script for archlinux
    
    Unlike most other Linux distributions archlinux installs its
    init scripts in /etc/rc.d insead of /etc/init.d.  This commit
    provides an archlinux rc.d script for zfs and extends the
    build infrastructure to ensure it get's installed in the
    correct place.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #322

[33mcommit 057e8eee35d4cc06cc4edd6e8239d28a4122cf71[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sat Jul 9 15:44:16 2011 -0700

    Improve fstat(2) performance
    
    There is at most a factor of 3x performance improvement to be
    had by using the Linux generic_fillattr() helper.  However, to
    use it safely we need to ensure the values in a cached inode
    are kept rigerously up to date.  Unfortunately, this isn't
    the case for the blksize, blocks, and atime fields.  At the
    moment the authoritative values are still stored in the znode.
    
    This patch introduces an optimized zfs_getattr_fast() call.
    The idea is to use the up to date values from the inode and
    the blksize, block, and atime fields from the znode.  At some
    latter date we should be able to strictly use the inode values
    and further improve performance.
    
    The remaining overhead in the zfs_getattr_fast() call can be
    attributed to having to take the znode mutex.  This overhead is
    unavoidable until the inode is kept strictly up to date.  The
    the careful reader will notice the we do not use the customary
    ZFS_ENTER()/ZFS_EXIT() macros.  These macro's are designed to
    ensure the filesystem is not torn down in the middle of an
    operation.  However, in this case the VFS is holding a
    reference on the active inode so we know this is impossible.
    
    =================== Performance Tests ========================
    
    This test calls the fstat(2) system call 10,000,000 times on
    an open file description in a tight loop.  The test results
    show the zfs stat(2) performance is now only 22% slower than
    ext4.  This is a 2.5x improvement and there is a clear long
    term plan to get to parity with ext4.
    
    filesystem    | test-1  test-2  test-3  | average | times-ext4
    --------------+-------------------------+---------+-----------
    ext4          |  7.785s  7.899s  7.284s |  7.656s | 1.000x
    zfs-0.6.0-rc4 | 24.052s 22.531s 23.857s | 23.480s | 3.066x
    zfs-faststat  |  9.224s  9.398s  9.485s |  9.369s | 1.223x
    
    The second test is to run 'du' of a copy of the /usr tree
    which contains 110514 files.  The test is run multiple times
    both using both a cold cache (/proc/sys/vm/drop_caches) and
    a hot cache.  As expected this change signigicantly improved
    the zfs hot cache performance and doesn't quite bring zfs to
    parity with ext4.
    
    A little surprisingly the zfs cold cache performance is better
    than ext4.  This can probably be attributed to the zfs allocation
    policy of co-locating all the meta data on disk which minimizes
    seek times.  By default the ext4 allocator will spread the data
    over the entire disk only co-locating each directory.
    
    filesystem    | cold    | hot
    --------------+---------+--------
    ext4          | 13.318s | 1.040s
    zfs-0.6.0-rc4 |  4.982s | 1.762s
    zfs-faststat  |  4.933s | 1.345s

[33mcommit abd8610cd5ffd04f0fa07297f53852e744ea389e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jul 8 12:41:57 2011 -0700

    Add L2ARC tunables
    
    The performance of the L2ARC can be tweaked by a number of tunables, which
    may be necessary for different workloads:
    
         l2arc_write_max         max write bytes per interval
         l2arc_write_boost       extra write bytes during device warmup
         l2arc_noprefetch        skip caching prefetched buffers
         l2arc_headroom          number of max device writes to precache
         l2arc_feed_secs         seconds between L2ARC writing
         l2arc_feed_min_ms       min feed interval in milliseconds
         l2arc_feed_again        turbo L2ARC warmup
         l2arc_norw              no reads during writes
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #316

[33mcommit e0f86c98620bbc085a7edddd8f6dbf82e4783a46[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jul 8 12:16:09 2011 -0700

    Update 'zfs send' documentation
    
    The -D and -p options were missing from the manpage.  This commit
    adds documentation for these features.
    
    Closes #311

[33mcommit 1fa3bb750d0418dc4a5a3abd2bd8cce9c205c9e1[m
Author: Fajar A. Nugraha <github@fajar.net>
Date:   Thu Jul 7 14:25:53 2011 +0700

    Remove zfs service only on uninstall, not on upgrade
    
    This caused problems on upgrade using RPM:
    
    * The new version will run chkconfig --add, which has no effect
      since the service was already added.
    
    * The old version will run chkconfig --del, which caused zfs
      service removal.
    
    Only run "chkconfig --del" on complete uninstall, by checking
    the value of "$1" to %preun, which will be "0" on uninstall,
    and "1" on upgrade.
    
      http://www.rpm.org/max-rpm/s1-rpm-inside-scripts.html
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #314

[33mcommit 3af2ce4d6883ab96814fb1d0bc01368bb06c5343[m
Author: Fajar A. Nugraha <github@fajar.net>
Date:   Thu Jul 7 14:22:19 2011 +0700

    Check for "udevadm settle" vs "udevsettle"
    
    RHEL5 does not have udevadm, so fix initscript accordingly
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #315

[33mcommit 341b5f1d4c03c0f318218346154e2fb79a8acb92[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jul 6 11:36:54 2011 -0700

    Update ztest paths
    
    Unfortunately, ztest is hard coded to export the zdb utility to
    be installed in a certain location.  When the packaging was updated
    to install zdb in /sbin/ ztest was broken.  To fix this I'm updating
    ztest to check both common install paths.

[33mcommit b1c932d318ae604b6968ffef136952af4e80a407[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jul 5 12:12:08 2011 -0700

    Add proper library versioning
    
    The zfs libraries were never properly versioned.  Since the API has
    remained static for quite some time this we never an issue.  However,
    going forward they should be versioned.  This commit versions all
    of the libraries to 1.0.0.  From here on out this version must be
    updated to reflect changes to the library.

[33mcommit 8b0cf399ff9e764a08faea654bd30043a861cb09[m
Author: Gunnar Beutner <gunnar@beutner.name>
Date:   Sun Jul 3 02:43:25 2011 +0200

    Updated init scripts to enable automatic sharing of ZFS datasets.
    
    The relevant init scripts were updated so as to automatically share
    ZFS datasets using "zfs share -a" at boot time.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 3c9609b322db2925aff628217eca9297d6fb569b[m
Author: Gunnar Beutner <gunnar@beutner.name>
Date:   Sat Jul 2 21:34:12 2011 +0200

    Renamed HAVE_SHARE ifdefs to HAVE_SMB_SHARE.
    
    The remaining code that is guarded by HAVE_SHARE ifdefs is related to the
    .zfs/shares functionality which is currently not available on Linux.
    
    On Solaris the .zfs/shares directory can be used to set permissions for
    SMB shares.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 52e7c3a2e503f78a44fbe5fd9299b11c3aa98651[m
Author: Gunnar Beutner <gunnar@beutner.name>
Date:   Sat Jul 2 21:34:08 2011 +0200

    Link libshare directly to libzfs
    
    Drop usage of dlopen/dlsym for libshare.  There is no need to do
    this because the zfs packages provide libshare.  Unlike on Solaris
    we are guaranteed it will be available.
    
    This avoids possible problems with hardcoding the libshare path in
    the code (e.g. when users specify a different install path via
    configure options).  It additionally simplifies the code which is
    good for maintainability.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 46e18b3f0fc13aa0859d0fef7dc829db20491ab6[m
Author: Gunnar Beutner <gunnar@beutner.name>
Date:   Sat Jul 2 21:34:05 2011 +0200

    Implemented sharing datasets via NFS using libshare.
    
    The sharenfs and sharesmb properties depend on the libshare library
    to export datasets via NFS and SMB. This commit implements the base
    libshare functionality as well as support for managing NFS shares.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit dc2a4a9136ab5f6e56f9ca8581ec1535adce6c36[m
Author: Zachary Bedell <zac@thebedells.org>
Date:   Mon Jul 4 14:38:10 2011 -0400

    Document initramfs process
    
    Add documentation for Dracut and the initramfs process.  This includes
    detailing the basic boot process and options available.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit fde4ce992db516796df3a7d1c0e018c5f8c537f6[m
Author: Zachary Bedell <zac@thebedells.org>
Date:   Mon Jul 4 13:25:31 2011 -0400

    Update for Dracut-010
    
    Update Dracut module for Dracut-010 and fix race conditions that
    caused boot to fail on MP systems.  Add support for zfs_force flag
    and parsing of spl_hostid from kernel command line.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit e93ced48475b697734ae4fbc65c4e600b9752849[m
Author: Zachary Bedell <zac@thebedells.org>
Date:   Mon Jul 4 14:58:51 2011 -0700

    Update zfs.gentoo/zfs.lsb init script
    
    * Update paths to zpool/zfs tools,
    * Log less for non-error conditions,
    * Don't be fatal if umount fails at shutdown -- final init remount
      will take care of it if /usr or / are in use
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit c8082367cfe9954f0e932fb1513b518d8b84022d[m
Author: Gunnar Beutner <gunnar@beutner.name>
Date:   Sun Jul 3 02:38:50 2011 +0200

    Removed erroneous backticks in the zfs.lunar init script.
    
    The backticks would cause the output of the zfs commands
    to be evaluated as input for the if construct rather than
    their exit status.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 0f4524cca43b1718d54970fcaf0201541733903c[m
Author: Gunnar Beutner <gunnar@beutner.name>
Date:   Sun Jul 3 02:35:58 2011 +0200

    Fixed indentation in the zfs.lunar init script.
    
    One of the blocks in the init script wasn't indented properly.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 5a52105925e461e45f4948fc77695b25d3fa3009[m
Author: Prasad Joshi <pjoshi@stec-inc.com>
Date:   Mon Jul 4 23:45:35 2011 +0100

    Use consistent error message in zpool sub-command
    
    The zpool sub-commands like iostat, list, and status should
    display consistent message when a given pool is unavailable or
    no pool is present.  This change unifies the default behavior
    as follows:
    
      root@prasad:~# ./zpool list 1 2
      no pools available
      no pools available
    
      root@prasad:~# ./zpool iostat  1 2
      no pools available
      no pools available
    
      root@prasad:~# ./zpool status 1 2
      no pools available
      no pools available
    
      root@prasad:~# ./zpool list tan 1 2
      cannot open 'tan': no such pool
    
      root@prasad:~# ./zpool iostat tan 1 2
      cannot open 'tan': no such pool
    
      root@prasad:~# ./zpool status tan 1 2
      cannot open 'tan': no such pool
    
    Reported-by: Rajshree Thorat <rthorat@stec-inc.com>
    Signed-off-by: Prasad Joshi <pjoshi@stec-inc.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    
    Closes #306

[33mcommit b59322a0d8919cc0ed5982f5a869e9e022645515[m
Author: Andrew Tselischev <andrewtselischev@gmail.com>
Date:   Mon Jul 4 01:49:41 2011 -0700

    Fix 'rc_parallel="YES"' error
    
    If rc_parallel="YES" zfs starts before localmount, which leads
    to "No such file or directory" error on systems with /usr on a
    separate partition.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit b2f25e00ec993e0cefcc70f0ccf00cf746fc1739[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jul 1 15:24:34 2011 -0700

    Prep zfs-0.6.0-rc5 tag
    
    Create the fifth 0.6.0 release candidate tag (rc5).

[33mcommit 285226eff39b807c154748a75cef57ddff08a352[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jun 30 09:38:52 2011 -0700

    Always allow non-user xattrs
    
    Under Linux you may only disable USER xattrs.  The SECURITY,
    SYSTEM, and TRUSTED xattr namespaces must always be available
    if xattrs are supported by the filesystem.  The enforcement
    of USER xattrs is performed in the zpl_xattr_user_* handlers.
    
    Under Solaris there is only a single xattr namespace which
    is managed globally.

[33mcommit f2cfee80e3f94cd9d67c3f1abec97c9a5a5ecc17[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jun 29 15:03:36 2011 -0700

    Fix implicit declaration of 'mkdirp'
    
    The lib/libspl/include/libgen.h header file was being mistakenly
    left out of the 'make dist' tarball.  It just happens this doesn't
    cause a build failure when creating packages because the system
    libgen/h is included instead.  This simply results in the following
    warning due to the missing forward declaration of mkdirp().
    
      ../../lib/libzfs/libzfs_mount.c:417:3: warning: implicit declaration
      of function 'mkdirp' [-Wimplicit-function-declaration]

[33mcommit a89c3e0bd509267225b5699c65aaf39acf2fce18[m
Author: Rohan Puri <rohan.puri15@gmail.com>
Date:   Wed Jun 29 11:00:58 2011 -0700

    Support mandatory locks (nbmand)
    
    The Linux kernel already has support for mandatory locking.  This
    change just replaces the Solaris mandatory locking calls with the
    Linux equivilants.  In fact, it looks like this code could be
    removed entirely because this checking is already done generically
    in the Linux VFS.  However, for now we'll leave it in place even
    if it is redundant just in case we missed something.
    
    The original patch to update the code to support mandatory locking
    was done by Rohan Puri.  This patch is an updated version which is
    compatible with the previous mount option handling changes.
    
    Original-Patch-by: Rohan Puri <rohan.puri15@gmail.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #222
    Closes #253

[33mcommit 2cf7f52bc42f215d4ef27d0fd75fc1b1417cb841[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu May 19 11:44:07 2011 -0700

    Linux compat 2.6.39: mount_nodev()
    
    The .get_sb callback has been replaced by a .mount callback
    in the file_system_type structure.  When using the new
    interface the caller must now use the mount_nodev() helper.
    
    Unfortunately, the new interface no longer passes the vfsmount
    down to the zfs layers.  This poses a problem for the existing
    implementation because we currently save this pointer in the
    super block for latter use.  It provides our only entry point
    in to the namespace layer for manipulating certain mount options.
    
    This needed to be done originally to allow commands like
    'zfs set atime=off tank' to work properly.  It also allowed me
    to keep more of the original Solaris code unmodified.  Under
    Solaris there is a 1-to-1 mapping between a mount point and a
    file system so this is a fairly natural thing to do.  However,
    under Linux they many be multiple entries in the namespace
    which reference the same filesystem.  Thus keeping a back
    reference from the filesystem to the namespace is complicated.
    
    Rather than introduce some ugly hack to get the vfsmount and
    continue as before.  I'm leveraging this API change to update
    the ZFS code to do things in a more natural way for Linux.
    This has the upside that is resolves the compatibility issue
    for the long term and fixes several other minor bugs which
    have been reported.
    
    This commit updates the code to remove this vfsmount back
    reference entirely.  All modifications to filesystem mount
    options are now passed in to the kernel via a '-o remount'.
    This is the expected Linux mechanism and allows the namespace
    to properly handle any options which apply to it before passing
    them on to the file system itself.
    
    Aside from fixing the compatibility issue, removing the
    vfsmount has had the benefit of simplifying the code.  This
    change which fairly involved has turned out nicely.
    
    Closes #246
    Closes #217
    Closes #187
    Closes #248
    Closes #231

[33mcommit 5c03efc379693f992ebe39c6a00c7297c4a304ea[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu May 19 12:47:32 2011 -0700

    Linux compat 2.6.39: security_inode_init_security()
    
    The security_inode_init_security() function now takes an additional
    qstr argument which must be passed in from the dentry if available.
    Passing a NULL is safe when no qstr is available the relevant
    security checks will just be skipped.
    
    Closes #246
    Closes #217
    Closes #187

[33mcommit bd2f5ac97f4265523fb1397d845eabb8647c79e4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jun 16 12:14:33 2011 -0700

    Avoid 'rpm -q' bug for 'make pkg'
    
    RPM version 4.9.0 has been observed to generate extra debug
    messages in certain cases.  These debug messages prevent us
    from cleanly acquiring the architecture.  This is clearly
    an upstream RPM bug which will get fixed.  But until then
    a safe solution is to pipe the result through 'tail -1'
    to just grab the architecture bit we care about.
    
    Example 'rpm -qp spl-0.6.0-rc4.src.rpm --qf %{arch}' output:
    
    Freeing read locks for locker 0x166: 28031/47480843735008
    Freeing read locks for locker 0x168: 28031/47480843735008
    x86_64

[33mcommit e2e7aa2df88708cdcae87688a69ba3f5d1cc43ed[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jul 1 11:25:07 2011 -0700

    Add ZFS specific mmap() checks
    
    Under Linux the VFS handles virtually all of the mmap() access
    checks.  Filesystem specific checks are left to be handled in
    the .mmap() hook and normally there arn't any.
    
    However, ZFS provides a few attributes which can influence the
    mmap behavior and should be honored.  Note, currently the code
    to modify these attributes has not been implemented under Linux.
    
    * ZFS_IMMUTABLE | ZFS_READONLY | ZFS_APPENDONLY: when any of these
      attributes are set a file may not be mmaped with write access.
    
    * ZFS_AV_QUARANTINED: when set a file file may not be mmaped with
      read or exec access.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit f0b2486034f6a4d8cd1a139ff4604e6b9629a64e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jul 1 09:16:15 2011 -0700

    Remove unused MMAP functions
    
    The following functions were required for the OpenSolaris mmap
    implementation.  Because the Linux VFS does most the most heavy
    lifting for us they are not required and are being removed to
    keep the code clean and easy to understand.
    
      * zfs_null_putapage()
      * zfs_frlock()
      * zfs_no_putpage()
    
    Signed-off-by: Brian Behlendorf <behlendorf@llnl.gov>

[33mcommit dde471ef5a07bd569deeadd3e9a88655db3e10ab[m
Author: Prasad Joshi <pjoshi@stec-inc.com>
Date:   Sat May 28 02:53:07 2011 +0100

    MMAP Optimization
    
    Enable zfs_getpage, zfs_fillpage, zfs_putpage, zfs_putapage functions.
    The functions have been modified to make them Linux friendly.
    
    ZFS uses these functions to read/write the mmapped pages. Using them
    from readpage/writepage results in clear code. The patch also adds
    readpages and writepages interface functions to read/write list of
    pages in one function call.
    
    The code change handles the first mmap optimization mentioned on
    https://github.com/behlendorf/zfs/issues/225
    
    Signed-off-by: Prasad Joshi <pjoshi@stec-inc.com>
    Signed-off-by: Brian Behlendorf <behlendorf@llnl.gov>
    Issue #255

[33mcommit 2a005961a48e748632e96272915192dab6ce9401[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jun 30 14:45:33 2011 -0700

    Ensure all block devices are available
    
    These days most disk drivers will probe for devices asynchronously.
    This means it's possible that when you zfs init script runs all the
    required block devices may not yet have been discovered.  The result
    is the pool may fail to cleanly import at boot time.  This is
    particularly common when you have a large number of devices.
    
    The fix is for the init script to block until udev settles and we
    are no longer detecting new devices.  Once the system has settled
    the zfs modules can be loaded and the pool with be automatically
    imported.

[33mcommit 218b8eafbdcb9bc19fc5a252fdd411fde11bca48[m
Author: Prasad Joshi <pjoshi@stec-inc.com>
Date:   Sat Jun 25 15:06:37 2011 +0100

    Use truncate_setsize in zfs_setattr
    
    According to Linux kernel commit 2c27c65e, using truncate_setsize in
    setattr simplifies the code. Therefore, the patch replaces the call
    to vmtruncate() with truncate_setsize().
    
    zfs_setattr uses zfs_freesp to free the disk space belonging to the
    file.  As truncate_setsize may release the page cache and flushing
    the dirty data to disk, it must be called before the zfs_freesp.
    
    Suggested-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Signed-off-by: Prasad Joshi <pjoshi@stec-inc.com>
    Closes #255

[33mcommit b312979252c5b566d2f59febcda67f309637e18c[m
Author: Prasad Joshi <pjoshi@stec-inc.com>
Date:   Sat Jun 25 13:30:29 2011 +0100

    Tear down and flush the mmap region
    
    The inode eviction should unmap the pages associated with the inode.
    These pages should also be flushed to disk to avoid the data loss.
    Therefore, use truncate_setsize() in evict_inode() to release the
    pagecache.
    
    The API truncate_setsize() was added in 2.6.35 kernel. To ensure
    compatibility with the old kernel, the patch defines its own
    truncate_setsize function.
    
    Signed-off-by: Prasad Joshi <pjoshi@stec-inc.com>
    Closes #255

[33mcommit 560bcf9d14a63e2cef4dd49d61399c8a865c1348[m
Author: Ned A. Bass <bass6@llnl.gov>
Date:   Tue Jun 21 16:18:27 2011 -0700

    Multipath device manageability improvements
    
    Update udev helper scripts to deal with device-mapper devices created
    by multipathd.  These enhancements are targeted at a particular
    storage network topology under evaluation at LLNL consisting of two
    SAS switches providing redundant connectivity between multiple server
    nodes and disk enclosures.
    
    The key to making these systems manageable is to create shortnames for
    each disk that conveys its physical location in a drawer.  In a
    direct-attached topology we infer a disk's enclosure from the PCI bus
    number and HBA port number in the by-path name provided by udev.  In a
    switched topology, however, multiple drawers are accessed via a single
    HBA port.  We therefore resort to assigning drawer identifiers based
    on which switch port a drive's enclosure is connected to.  This
    information is available from sysfs.
    
    Add options to zpool_layout to generate an /etc/zfs/zdev.conf using
    symbolic links in /dev/disk/by-id of the form
    <label>-<UUID>-switch-port:<X>-slot:<Y>.  <label> is a string that
    depends on the subsystem that created the link and defaults to
    "dm-uuid-mpath" (this prefix is used by multipathd).  <UUID> is a
    unique identifier for the disk typically obtained from the scsi_id
    program, and <X> and <Y> denote the switch port and disk slot numbers,
    respectively.
    
    Add a callout script sas_switch_id for use by multipathd to help
    create symlinks of the form described above.  Update zpool_id and the
    udev zpool rules file to handle both multipath devices and
    conventional drives.

[33mcommit 7e7baecaa321ce4e96938a02b87ab22a7939e422[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jun 21 14:26:51 2011 -0700

    Linux 3.0 compat, shrinker compatibility
    
    To accomindate the updated Linux 3.0 shrinker API the spl
    shrinker compatibility code was updated.  Unfortunately, this
    couldn't be done cleanly without slightly adjusting the comapt
    API.  See spl commit a55bcaad181096d764e12d847e3091cd7b15509a.
    
    This commit updates the ZFS code to use the slightly modified
    API.  You must use the latest SPL if your building ZFS.

[33mcommit b00131d43ca344d4b205a03ab3eb771a060e5087[m
Author: Gunnar Beutner <gunnar@beutner.name>
Date:   Mon Jun 20 10:36:58 2011 -0700

    Fix unlink/xattr deadlock
    
    The problem here is that prune_icache() tries to evict/delete
    both the xattr directory inode as well as at least one xattr
    inode contained in that directory. Here's what happens:
    
    1. File is created.
    2. xattr is created for that file (behind the scenes a xattr
       directory and a file in that xattr directory are created)
    3. File is deleted.
    4. Both the xattr directory inode and at least one xattr
       inode from that directory are evicted by prune_icache();
       prune_icache() acquires a lock on both inodes before it
       calls ->evict() on the inodes
    
    When the xattr directory inode is evicted zfs_zinactive attempts
    to delete the xattr files contained in that directory. While
    enumerating these files zfs_zget() is called to obtain a reference
    to the xattr file znode - which tries to lock the xattr inode.
    However that very same xattr inode was already locked by
    prune_icache() further up the call stack, thus leading to a
    deadlock.
    
    This can be reliably reproduced like this:
    $ touch test
    $ attr -s a -V b test
    $ rm test
    $ echo 3 > /proc/sys/vm/drop_caches
    
    This patch fixes the deadlock by moving the zfs_purgedir() call to
    zfs_unlinked_drain().  Instead zfs_rmnode() now checks whether the
    xattr dir is empty and leaves the xattr dir in the unlinked set if
    it finds any xattrs.
    
    To ensure zfs_unlinked_drain() never accesses a stale super block
    zfsvfs_teardown() has been update to block until the iput taskq
    has been drained.  This avoids a potential race where a file with
    an xattr directory is removed and the file system is immediately
    unmounted.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #266

[33mcommit 6f0cf71e0d191abb850a45f6d216cb5af158a6dd[m
Author: Gunnar Beutner <gunnar@beutner.name>
Date:   Thu Jun 16 20:59:56 2011 +0200

    Removed erroneous zfs_inode_destroy() calls from zfs_rmnode().
    
    iput_final() already calls zpl_inode_destroy() -> zfs_inode_destroy()
    for us after zfs_zinactive(), thus making sure that the inode is
    properly cleaned up.
    
    The zfs_inode_destroy() calls in zfs_rmnode() would lead to a
    double-free.
    
    Fixes #282

[33mcommit df30f56639f96175ba71d83b4456ccf410c46542[m
Author: Christian Kohlschütter <christian@kohlschutter.com>
Date:   Thu Jun 16 21:56:38 2011 +0200

    Add "ashift" property to zpool create
    
    Some disks with internal sectors larger than 512 bytes (e.g., 4k) can
    suffer from bad write performance when ashift is not configured
    correctly.  This is caused by the disk not reporting its actual sector
    size, but a sector size of 512 bytes.  The drive may behave this way
    for compatibility reasons.  For example, the WDC WD20EARS disks are
    known to exhibit this behavior.
    
    When creating a zpool, ZFS takes that wrong sector size and sets the
    "ashift" property accordingly (to 9: 1<<9=512), whereas it should be
    set to 12 for 4k sectors (1<<12=4096).
    
    This patch allows an adminstrator to manual specify the known correct
    ashift size at 'zpool create' time.  This can significantly improve
    performance in certain cases.  However, it will have an impact on your
    total pool capacity.  See the updated ashift property description
    in the zpool.8 man page for additional details.
    
    Valid values for the ashift property range from 9 to 17 (512B-128KB).
    Additionally, you may set the ashift to 0 if you wish to auto-detect
    the sector size based on what the disk reports, this is the default
    behavior.  The most common ashift values are 9 and 12.
    
      Example:
      zpool create -o ashift=12 tank raidz2 sda sdb sdc sdd
    
    Closes #280
    
    Original-patch-by: Richard Laager <rlaager@wiktel.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 96801d290652812780cf6c070729154d4af8e1ce[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jun 16 20:20:22 2011 +0200

    Linux 2.6.37 compat, WRITE_FLUSH_FUA
    
    The WRITE_FLUSH, WRITE_FUA, and WRITE_FLUSH_FUA flags have been
    introduced as a replacement for WRITE_BARRIER.  This was done
    to allow richer semantics to be expressed to the block layer.
    It is the block layers responsibility to choose the correct way
    to implement these semantics.
    
    This change simply updates the bio's to use the new kernel API
    which should be absolutely safe.  However, since ZFS depends
    entirely on this working as designed for correctness we do
    want to be careful.
    
    Closes #281

[33mcommit db97f88646b0d59e8e3db9144006491fb2192854[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jun 17 11:47:45 2011 -0700

    Update rpm/deb packages to be FHS compliant
    
    This change is the first step towards updating the default
    rpm/deb packages to be FHS compliant.  It accomplishes this
    by passing the following options to ./configure to ensure the
    zfs build products are installed in FHS compliant locations.
    
      ./configure --prefix=/ --bindir=/lib/udev \
        --libexecdir=/usr/libexec --datadir=/usr/share
    
    The core zfs utilities (zfs, zpool, zdb) are now be installed
    in /sbin, the core libraries in /lib, and the udev helpers
    (zpool_id, zvol_id) are in /lib/udev with the other udev
    helpers.
    
    The remaining files in the zfs package remain in their
    previous locations under /usr.

[33mcommit b772aedeeca32d56ee1509128aa34b7209c01fb7[m
Author: Darik Horn <dajhorn@vanadac.com>
Date:   Fri Jun 17 10:12:25 2011 -0700

    Autogen refresh.
    
    Run autogen.sh using the same autotools versions as upstream:
    
     * autoconf-2.63
     * automake-1.11.1
     * libtool-2.2.6b

[33mcommit 47a2455fbc10254ef38622b838d2dd8575709726[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jun 17 12:23:21 2011 -0700

    Use datadir not datarootdir for dracut
    
    The zfs dracut modules should be installed under the --datadir
    not --datarootdir path.  This was just an oversight in the
    original Makefile.am.
    
    After this change %{_datadir} can now be set safely in the
    zfs.spec file.  The 'make install' location is now consistent
    with the location expected by the spec file.

[33mcommit b9f27ee76582fa7826ca930889f8c281430c6b7a[m
Author: Darik Horn <dajhorn@vanadac.com>
Date:   Fri Jun 17 10:02:36 2011 -0500

    Fix autoconf variable substitution in udev rules.
    
    Change the variable substitution in the udev rule templates
    according to the method described in the Autoconf manual;
    Chapter 4.7.2: Installation Directory Variables.
    
    The udev rules are improperly generated if the bindir parameter
    overrides the prefix parameter during configure. For example:
    
      # ./configure --prefix=/usr/local --bindir=/opt/zfs/bin
    
    The udev helper is installed as /opt/zfs/bin/zpool_id, but the
    corresponding udev rule has a different path:
    
      # /usr/local/etc/udev/rules.d/60-zpool.rules
      ENV{DEVTYPE}=="disk", IMPORT{program}="/usr/local/bin/zpool_id -d %p"
    
    The @bindir@ variable expands to "${exec_prefix}/bin", so it cannot
    be used instead of @prefix@ directly.
    
    This also applies to the zvol_id helper.
    
    Closes #283.

[33mcommit e130330a874f4dec6628c094455180d4113c6aa1[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jun 14 16:25:29 2011 -0700

    Handle /etc/mtab -> /proc/mounts symlink
    
    Under Fedora 15 /etc/mtab is now a symlink to /proc/mounts by
    default.  When /etc/mtab is a symlink the mount.zfs helper
    should not update it.   There was code in place to handle this
    case but it used stat() which traverses the link and then issues
    the stat on /proc/mounts.  We need to use lstat() to prevent the
    link traversal and instead stat /etc/mtab.
    
    Closes #270

[33mcommit 2e08aedba456dccddf6418908a55014e56cad226[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jun 14 15:09:05 2011 -0700

    Always check -Wno-unused-but-set-variable gcc support
    
    The previous commit 8a7e1ceefa430988c8f888ca708ab307333b4464 wasn't
    quite right.  This check applies to both the user and kernel space
    build and as such we must make sure it runs regardless of what
    the --with-config option is set too.
    
    For example, if --with-config=kernel then the autoconf test does
    not run and we generate build warnings when compiling the kernel
    packages.

[33mcommit 8a7e1ceefa430988c8f888ca708ab307333b4464[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jun 14 11:02:13 2011 -0700

    Check for -Wno-unused-but-set-variable gcc support
    
    Gcc versions 4.3.2 and earlier do not support the compiler flag
    -Wno-unused-but-set-variable.  This can lead to build failures
    on older Linux platforms such as Debian Lenny.  Since this is
    an optional build argument this changes add a new autoconf check
    for the option.  If it is supported by the installed version of
    gcc then it is used otherwise it is omited.
    
    See commit's 12c1acde76683108441827ae9affba1872f3afe5 and
    79713039a2b6e0ed223d141b4a8a8455f282d2f2 for the reason the
    -Wno-unused-but-set-variable options was originally added.

[33mcommit 10715a018760e1d862b8348e31dc505e832a0904[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sat Jun 11 22:48:49 2011 -0700

    Add default stack checking
    
    When your kernel is built with kernel stack tracing enabled and you
    have the debugfs filesystem mounted.  Then the zfs.sh script will clear
    the worst observed kernel stack depth on module load and check the worst
    case usage on module removal.  If the stack depth ever exceeds 7000
    bytes the full stack will be printed for debugging.  This is dangerously
    close to overrunning the default 8k stack.
    
    This additional advisory debugging is particularly valuable when running
    the regression tests on a kernel built with 16k stacks.  In this case,
    almost no matter how bad the stack overrun is you will see be able to
    get a clean stack trace for debugging.  Since the worst case stack usage
    can be highly variable it's helpful to always check the worst case usage.

[33mcommit da88a7fbe8876437c25f1006f91ca5595659b8d2[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jun 10 11:20:34 2011 -0700

    Pass -f option for import
    
    If a pool was not cleanly exported passing the -f flag may be required
    at 'zpool import' time.  Since this test is simply validating that the
    pool can be successfully imported in the absense of the cache file
    always pass the -f to ensure it succeeds.  This failure was observed
    under RHEL6.1.

[33mcommit 1b9d8c340f89ca00b0bc99bb0f8a532e2e7a3a1d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jun 9 13:41:55 2011 -0700

    Fix 'zfs send -D' segfault
    
    Sending pools with dedup results in a segfault due to a Solaris
    portability issue.  Under Solaris the pipe(2) library call
    creates a bidirectional data channel.  Unfortunately, on Linux
    pipe(2) call creates unidirection data channel.  The fix is to
    use the socketpair(2) function to create the expected
    bidirectional channel.
    
    Seth Heeren did the original leg work on this issue for zfs-fuse.
    We finally just rediscovered the same portability issue and
    dfurphy was able to point me at the original issue for the fix.
    
    Closes #268

[33mcommit cbc6fab65c201e44de9bda083cfaab209c6b4f7a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jun 3 15:08:49 2011 -0700

    Sanatize zpios-sanity.sh environment
    
    Just like zconfig.sh the zpios-sanity.sh tests should run in a
    sanatized environment.  This ensures they never conflict with an
    installed /etc/zfs/zpool.cache file.
    
    This commit additionally improves the -c cleanup option.  It now
    removes the modules stack if loaded and destroys relevant md devices.
    This behavior is now identical to zconfig.sh.

[33mcommit 608860b6d06aaaa647e03fc3f3fc1b49f025155e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jun 3 14:13:25 2011 -0700

    Delay before destroying loopback devices
    
    Generally I don't approve of just adding an arbitrary delay to
    avoid a problem but in this case I'm going to let it slide.  We
    may need to delay briefly after 'zpool destroy' returns to ensure
    the loopback devices are closed.  If they aren't closed than
    losetup -d will not be able to destroy them.  Unfortunately,
    there's no easy state the check so we'll have to make due with
    a simple delay.

[33mcommit 36391312afdfac5584ca40ef1af7721108ce4c20[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jun 2 10:25:35 2011 -0700

    Always unload zpios.ko on exit
    
    We should always unload zpios.ko on exit.  This ensures
    that subsequent calls to 'zfs.sh -u' from other utilities
    will be able to unload the module stack and properly
    cleanup.  This is important for the the --cleanup option
    which can be passed to zconfig.sh and zfault.sh.

[33mcommit 2ea9dc40f88ed84bc3e8022b91dd33cbce94653f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jun 2 10:13:15 2011 -0700

    Fix zpios-sanity.sh return code
    
    The zpios-sanity.sh script should return failure when any
    of the individual zpios.sh tests fail.  The previous code
    would always return success suppressing real failures.

[33mcommit e95b3bdcbbc64ea502349413234e7c71563e7115[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed May 25 13:56:40 2011 -0700

    Fix stack ddt_class_contains()
    
    Stack usage for ddt_class_contains() reduced from 524 bytes to 68
    bytes.  This large stack allocation significantly contributed to
    the likelyhood of a stack overflow when scrubbing/resilvering
    dedup pools.

[33mcommit 5b8c7bbcea7ad9ecd5f329d2d736cba8402ee781[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed May 25 14:13:18 2011 -0700

    Fix stack ddt_zap_lookup()
    
    Stack usage for ddt_zap_lookup() reduced from 368 bytes to 120
    bytes.  This large stack allocation significantly contributed to
    the likelyhood of a stack overflow when scrubbing/resilvering
    dedup pools.

[33mcommit c7f8f831a463e9d7d16e43323b71d9e9e187a4c7[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed May 25 16:09:57 2011 -0700

    Revert "Fix stack traverse_visitbp()"
    
    This abomination is no longer required because the zio's issued
    during this recursive call path will now be handled asynchronously
    by the taskq thread pool.
    
    This reverts commit 6656bf56216f36805731298ee0f4de87ae6b6b3d.

[33mcommit 2fac4c2a74f1abc54d82068e3ae9a62e9a0468b0[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed May 25 15:22:04 2011 -0700

    Make tgx_sync_thread zio's async
    
    The majority of the recursive operations performed by the dsl
    are done either in the context of the tgx_sync_thread or during
    pool import.  It is these recursive operations which contribute
    greatly to the stack depth.  When this recursion is coupled with
    a synchronous I/O in the same context overflow becomes possible.
    
    Previously to handle this case I have focused on keeping the
    individual stack frames as light as possible.  This is a good
    idea as long as it can be done in a way which doesn't overly
    complicate the code.  However, there is a better solution.
    
    If we treat all zio's issued by the tgx_sync_thread as async then
    we can use the tgx_sync_thread stack for the recursive parts, and
    the zio_* threads for the I/O parts.  This effectively doubles our
    available stack space with the only drawback being a small delay
    to schedule the I/O.  However, in practice the scheduling time
    is so much smaller than the actual I/O time this isn't an issue.
    Another benefit of making the zio async is that the zio pipeline
    is now parallel.  That should mean for CPU intensive pipelines
    such as compression or dedup performance may be improved.
    
    With this change in place the worst case stack usage observed so
    far is 6902 bytes.  This is still higher than I'd like but
    significantly improved.  Additional changes to specific functions
    should improve this further.  This change allows us to revent
    commit 6656bf5 which did some horrible things to the recursive
    traverse_visitbp() callpath in the name of saving stack.

[33mcommit f74fae8b305ce3b264489e71adb49c2e4e9e33db[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu May 26 16:48:16 2011 -0700

    Fix 4K sector support
    
    Yesterday I ran across a 3TB drive which exposed 4K sectors to
    Linux.  While I thought I had gotten this support correct it
    turns out there were 2 subtle bugs which prevented it from
    working.
    
      sudo ./cmd/zpool/zpool create -f large-sector /dev/sda
      cannot create 'large-sector': one or more devices is currently unavailable
    
    1) The first issue was that it was possible that bdev_capacity()
    would return the number of 512 byte sectors rather than the number
    of 4096 sectors.  Internally, certain Linux functions only operate
    with 512 byte sectors so you need to be careful.  To avoid any
    confusion in the future I've updated bdev_capacity() to simply
    return the device (or partition) capacity in bytes.  The higher
    levels of ZFS want the value in bytes anyway so this is cleaner.
    
    2) When creating a bio the ->bi_sector count must always be
    expressed in 512 byte sectors.  The existing code would scale
    the byte offset by the logical sector size.   Until now this was
    always 512 so it never caused problems.  Trying a 4K sector drive
    clearly exposed the issue.  The problem has been fixed by
    hard coding the 512 byte sector which is exactly what the bio
    code does internally.
    
    With these changes I'm now able to create ZFS pools using 4K
    sector drives.  No issues were observed during fairly extensive
    testing.  This is also a low risk change if your using 512b
    sectors devices because none of the logic changes.
    
    Closes #256

[33mcommit 2b8cad61590d38f70ebf8734484204d7da2da937[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri May 20 14:23:18 2011 -0700

    Use vmem_alloc() for zfs_ioc_userspace_many()
    
    The default buffer size when requesting multiple quota entries
    is 100 times the zfs_useracct_t size.  In practice this works out
    to exactly 27200 bytes.  Since this will be a short lived buffer
    in a non-performance critical path it is preferable to vmem_alloc()
    the needed memory.

[33mcommit 4804b739e1e851f21f8e98c99275af2570c44a15[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri May 20 10:25:41 2011 -0700

    Default to internal 'zfs userspace' implementation
    
    We will never bring over the pyzfs.py helper script from Solaris
    to Linux.  Instead the missing functionality will be directly
    integrated in to the zfs commands and libraries.  To avoid
    confusion remove the warning about the missing pyzfs.py utility
    and simply use the default internal support.
    
    The Illumous developers are of the same mind and have proposed an
    initial patch to do this which has been integrated in to the 'allow'
    development branch.  After some additional testing this code
    can be merged in to master as the right long term solution.

[33mcommit f01b360e67696fff002f5e2b9cf6eedf5ff84f4a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri May 20 10:12:25 2011 -0700

    Pass caller's credential in zfsdev_ioctl()
    
    Initially when zfsdev_ioctl() was ported to Linux we didn't have
    any credential support implemented.  So at the time we simply
    passed NULL which wasn't much of a problem since most of the
    secpolicy code was disabled.
    
    However, one exception is quota handling which does require the
    credential.  Now that proper credentials are supported we can
    safely start passing the callers credential.  This is also an
    initial step towards fully implemented the zfs secpolicy.

[33mcommit 3fd70ee6b0bc9fa74b7ef87657b9cc3b0304f689[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon May 9 12:18:46 2011 -0700

    Fix 'negative objects to delete' warning
    
    Normally when the arc_shrinker_func() function is called the return
    value should be:
    
       >=0 - To indicate the number of freeable objects in the cache, or
       -1  - To indicate this cache should be skipped
    
    However, when the shrinker callback is called with 'nr_to_scan' equal
    to zero.  The caller simply wants the number of freeable objects in
    the cache and we must never return -1.  This patch reorders the
    first two conditionals in arc_shrinker_func() to ensure this behavior.
    
    This patch also now explictly casts arc_size and arc_c_min to signed
    int64_t types so MAX(x, 0) works as expected.  As unsigned types
    we would never see an negative value which defeated the purpose of
    the MAX() lower bound and broke the shrinker logic.
    
    Finally, when nr_to_scan is non-zero we explictly prevent all reclaim
    below arc_c_min.  This is done to prevent the Linux page cache from
    completely crowding out the ARC.  This limit is tunable and some
    experimentation is likely going to be required to set it exactly right.
    For now we're sticking with the OpenSolaris defaults.
    
    Closes #218
    Closes #243

[33mcommit d9bfe0f57a82fd1a02e93309912008ed1aa83e04[m
Author: Alexey Shvetsov <alexxy@gentoo.org>
Date:   Sat May 14 18:25:37 2011 +0400

    Fix distribution detection for gentoo
    
    Also this may fix other distros because some of them also provide
    /etc/lsb-release not only ubuntu.
    
    Closes #244

[33mcommit e814770f2ed14808c7ea8cf8cea034aacb20564a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri May 13 08:16:10 2011 -0700

    Update synchronous open zfs_close() comment
    
    The comment in zfs_close() pertaining to decrementing the synchronous
    open count needs to be updated for Linux.  The code was already
    updated to be correct, but the comment was missed and is now misleading.
    Under Linux the zfs_close() hook is only called once when the final
    reference is dropped.  This differs from Solaris where zfs_close()
    is called for each close.
    
    Closes #237

[33mcommit 6f582dc708e713f1d5e1c6871657ac726873b4bf[m
Author: Alexey Shvetsov <alexxy@gentoo.org>
Date:   Thu May 12 14:54:03 2011 -0700

    Remove root 'ls' after mount workaround
    
    This workaround was introduced to workaround issue #164.  This
    issue was fixed by commit 5f35b19 so the workaround can be safely
    dropped from both the zfs.fedora and zfs.gentoo init scripts.

[33mcommit 06abcdd3f44999f694766b22a5fc42d125aa9bef[m
Author: Alexey Shvetsov <alexxy@gentoo.org>
Date:   Wed May 11 00:22:35 2011 +0400

    Fix zfs.gentoo init script logic
    
    * Fix zfs.ko module check
    * Check 'zfs umount -a' return value

[33mcommit 04c22478a7365622a8f3c7fd7d0046fe41813075[m
Author: Alexey Shvetsov <alexxy@gentoo.org>
Date:   Tue May 10 23:45:19 2011 +0400

    Make zfs.gentoo init script more gentoo style.
    
    * Improved compatibility with openrc
    * Removed LOCKFILE
    * Improved checksystem() function
    * Remove /etc/mtab check for /
    * General cleanup

[33mcommit c91d2298096cfe376000ee3e63b73b92bafae2e9[m
Merge: 21ade34 aa6d8c1
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon May 9 16:41:28 2011 -0700

    Merge pull request #235 from nedbass/rdev
    
    Don't store rdev in SA for FIFOs and sockets

[33mcommit aa6d8c10864dd532b1577a84a22da2eaee10fcfd[m
Author: Ned A. Bass <bass6@llnl.gov>
Date:   Mon May 9 12:31:56 2011 -0700

    Don't store rdev in SA for FIFOs and sockets
    
    Update the handling of named pipes and sockets to be consistent with
    other platforms with regard to the rdev attribute.  While all ZFS
    ipmlementations store the rdev for device files in a system attribute
    (SA), this is not the case for FIFOs and sockets.  Indeed, Linux always
    passes rdev=0 to mknod() for FIFOs and sockets, so the value is not
    needed.  Add an ASSERT that rdev==0 for FIFOs and sockets to detect if
    the expected behavior ever changes.
    
    Closes #216

[33mcommit 21ade34764d11498abece590b965ce766f31de88[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri May 6 15:12:15 2011 -0700

    Disable direct reclaim for z_wr_* threads
    
    The direct reclaim path in the z_wr_* threads must be disabled
    to ensure forward progress is always maintained for txg processing.
    This ensures that a txg will never get stuck waiting on itself
    because it entered the following memory reclaim callpath.
    
      ->prune_icache()->dispose_list()->zpl_clear_inode()->zfs_inactive()
      ->dmu_tx_assign()->dmu_tx_wait()->tgx_wait_open()
    
    It would be preferable to target this exact code path but the
    kernel offers no way to do this without custom patches.  To avoid
    this we are forced to disable all reclaim for these threads.  It
    should not be necessary to do this for other other z_* threads
    because they will not hold a txg open.
    
    Closes #232

[33mcommit 3117dd0b9005eb76e483b9772c493883b82998bb[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri May 6 12:23:34 2011 -0700

    Handle NULL in nfsd .fsync() hook
    
    How nfsd handles .fsync() has been changed a couple of times in the
    recent kernels.  But basically there are three cases we need to
    consider.
    
    Linux 2.6.12 - 2.6.33
    * The .fsync() hook takes 3 arguments
    * The nfsd will call .fsync() with a NULL file struct pointer.
    
    Linux 2.6.34
    * The .fsync() hook takes 3 arguments
    * The nfsd no longer calls .fsync() but instead used sync_inode()
    
    Linux 2.6.35 - 2.6.x
    * The .fsync() hook takes 2 arguments
    * The nfsd no longer calls .fsync() but instead used sync_inode()
    
    For once it looks like we've gotten lucky.  The first two cases can
    actually be collased in to one if we stop using the file struct
    pointer entirely.  Since the dentry is still passed in both cases
    this is possible.  The last case can then be safely handled by
    unconditionally using the dentry in the file struct pointer now
    that we know the nfsd caller has been removed.
    
    Closes #230

[33mcommit 6ee44e32be259706aed9b1439b71971a165b198c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri May 6 10:16:04 2011 -0700

    Fix awk usage
    
    The zpool_id and zpool_layout helper scripts have been updated to
    use the more common /usr/bin/awk symlink.  On Fedora/Redhat systems
    there are both /bin/awk and /usr/bin/awk symlinks to your installed
    version of awk.  On Debian/Ubuntu systems only the /usr/bin/awk
    symlink exists.
    
    Additionally, add the '\<' token to the beginning of the regex
    pattern to prevent partial matches.  This pattern only appears to
    work with gawk despite the mawk man page claiming to support this
    extended regex.  Thus you will need to have gawk installed to use
    these optional helper scripts.  A comment has been added to the
    script to reflect this reality.

[33mcommit 34b84cb831695b276788493048ea34f8af8d5bdf[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri May 6 09:59:52 2011 -0700

    Use vmem_alloc() for zfs_ioc_pool_get_history()
    
    The default buffer size when requesting history is 128k.  This
    is far to large for a kmem_alloc() so instead use the slower
    vmem_alloc().  This path has no performance concerns and the
    buffer is immediately free'd after its contents are copied to
    the user space buffer.

[33mcommit 3613204cd7e3ab1ae658e31dac875e58827a6655[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu May 5 09:40:57 2011 -0700

    Allow mounting of read-only snapshots
    
    With the addition of the mount helper we accidentally regressed
    the ability to manually mount snapshots.  This commit updates
    the mount helper to expect the possibility of a ZFS_TYPE_SNAPSHOT.
    All snapshot will be automatically treated as 'legacy' type mounts
    so they can be mounted manually.

[33mcommit c409e4647f221ab724a0bd10c480ac95447203c3[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue May 3 15:09:28 2011 -0700

    Add missing ZFS tunables
    
    This commit adds module options for all existing zfs tunables.
    Ideally the average user should never need to modify any of these
    values.  However, in practice sometimes you do need to tweak these
    values for one reason or another.  In those cases it's nice not to
    have to resort to rebuilding from source.  All tunables are visable
    to modinfo and the list is as follows:
    
    $ modinfo module/zfs/zfs.ko
    filename:       module/zfs/zfs.ko
    license:        CDDL
    author:         Sun Microsystems/Oracle, Lawrence Livermore National Laboratory
    description:    ZFS
    srcversion:     8EAB1D71DACE05B5AA61567
    depends:        spl,znvpair,zcommon,zunicode,zavl
    vermagic:       2.6.32-131.0.5.el6.x86_64 SMP mod_unload modversions
    parm:           zvol_major:Major number for zvol device (uint)
    parm:           zvol_threads:Number of threads for zvol device (uint)
    parm:           zio_injection_enabled:Enable fault injection (int)
    parm:           zio_bulk_flags:Additional flags to pass to bulk buffers (int)
    parm:           zio_delay_max:Max zio millisec delay before posting event (int)
    parm:           zio_requeue_io_start_cut_in_line:Prioritize requeued I/O (bool)
    parm:           zil_replay_disable:Disable intent logging replay (int)
    parm:           zfs_nocacheflush:Disable cache flushes (bool)
    parm:           zfs_read_chunk_size:Bytes to read per chunk (long)
    parm:           zfs_vdev_max_pending:Max pending per-vdev I/Os (int)
    parm:           zfs_vdev_min_pending:Min pending per-vdev I/Os (int)
    parm:           zfs_vdev_aggregation_limit:Max vdev I/O aggregation size (int)
    parm:           zfs_vdev_time_shift:Deadline time shift for vdev I/O (int)
    parm:           zfs_vdev_ramp_rate:Exponential I/O issue ramp-up rate (int)
    parm:           zfs_vdev_read_gap_limit:Aggregate read I/O over gap (int)
    parm:           zfs_vdev_write_gap_limit:Aggregate write I/O over gap (int)
    parm:           zfs_vdev_scheduler:I/O scheduler (charp)
    parm:           zfs_vdev_cache_max:Inflate reads small than max (int)
    parm:           zfs_vdev_cache_size:Total size of the per-disk cache (int)
    parm:           zfs_vdev_cache_bshift:Shift size to inflate reads too (int)
    parm:           zfs_scrub_limit:Max scrub/resilver I/O per leaf vdev (int)
    parm:           zfs_recover:Set to attempt to recover from fatal errors (int)
    parm:           spa_config_path:SPA config file (/etc/zfs/zpool.cache) (charp)
    parm:           zfs_zevent_len_max:Max event queue length (int)
    parm:           zfs_zevent_cols:Max event column width (int)
    parm:           zfs_zevent_console:Log events to the console (int)
    parm:           zfs_top_maxinflight:Max I/Os per top-level (int)
    parm:           zfs_resilver_delay:Number of ticks to delay resilver (int)
    parm:           zfs_scrub_delay:Number of ticks to delay scrub (int)
    parm:           zfs_scan_idle:Idle window in clock ticks (int)
    parm:           zfs_scan_min_time_ms:Min millisecs to scrub per txg (int)
    parm:           zfs_free_min_time_ms:Min millisecs to free per txg (int)
    parm:           zfs_resilver_min_time_ms:Min millisecs to resilver per txg (int)
    parm:           zfs_no_scrub_io:Set to disable scrub I/O (bool)
    parm:           zfs_no_scrub_prefetch:Set to disable scrub prefetching (bool)
    parm:           zfs_txg_timeout:Max seconds worth of delta per txg (int)
    parm:           zfs_no_write_throttle:Disable write throttling (int)
    parm:           zfs_write_limit_shift:log2(fraction of memory) per txg (int)
    parm:           zfs_txg_synctime_ms:Target milliseconds between tgx sync (int)
    parm:           zfs_write_limit_min:Min tgx write limit (ulong)
    parm:           zfs_write_limit_max:Max tgx write limit (ulong)
    parm:           zfs_write_limit_inflated:Inflated tgx write limit (ulong)
    parm:           zfs_write_limit_override:Override tgx write limit (ulong)
    parm:           zfs_prefetch_disable:Disable all ZFS prefetching (int)
    parm:           zfetch_max_streams:Max number of streams per zfetch (uint)
    parm:           zfetch_min_sec_reap:Min time before stream reclaim (uint)
    parm:           zfetch_block_cap:Max number of blocks to fetch at a time (uint)
    parm:           zfetch_array_rd_sz:Number of bytes in a array_read (ulong)
    parm:           zfs_pd_blks_max:Max number of blocks to prefetch (int)
    parm:           zfs_dedup_prefetch:Enable prefetching dedup-ed blks (int)
    parm:           zfs_arc_min:Min arc size (ulong)
    parm:           zfs_arc_max:Max arc size (ulong)
    parm:           zfs_arc_meta_limit:Meta limit for arc size (ulong)
    parm:           zfs_arc_reduce_dnlc_percent:Meta reclaim percentage (int)
    parm:           zfs_arc_grow_retry:Seconds before growing arc size (int)
    parm:           zfs_arc_shrink_shift:log2(fraction of arc to reclaim) (int)
    parm:           zfs_arc_p_min_shift:arc_c shift to calc min/max arc_p (int)

[33mcommit 8db77dd7edb5ac98812d3f8632da44018c1c8330[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue May 3 10:29:05 2011 -0700

    Prep zfs-0.6.0-rc4 tag
    
    Create the fourth 0.6.0 release candidate tag (rc4).

[33mcommit 712f8bd87b2d3799107e102652875996fa59647b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon May 2 15:39:59 2011 -0700

    Add Gentoo/Lunar/Redhat Init Scripts
    
    Every distribution has slightly different requirements for their
    init scripts.  Because of this the zfs package contains several
    init scripts for various distributions.  These scripts have been
    contributed by, and are supported by, the larger zfs community.
    Init scripts for Gentoo/Lunar/Redhat have been contributed by:
    
      Gentoo - devsk <devsku@gmail.com>
      Lunar  - Jean-Michel Bruenn <jean.bruenn@ip-minds.de>
      Redhat - Fajar A. Nugraha <list@fajar.net>

[33mcommit 5f35b190071048f25d66db81ce9763ecd0c1760e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon May 2 14:04:19 2011 -0700

    Fully update inode when created
    
    When a new znode/inode pair is created both the znode and the inode
    should be immediately updated to the correct values.  This was done
    for the znode and for most of the values in the inode, but not all
    of them.  This normally wasn't a problem because most subsequent
    operations would cause the inode to be immediately updated.  This
    change ensures the inode is now fully updated before it is inserted
    in to the inode hash.
    
    Closes #116
    Closes #146
    Closes #164

[33mcommit df554c148ecfdfb7e597f8ab7eee71388b24a19d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 25 14:36:01 2011 +0700

    Fix 'zfs set volsize=N pool/dataset'
    
    This change fixes a kernel panic which would occur when resizing
    a dataset which was not open.  The objset_t stored in the
    zvol_state_t will be set to NULL when the block device is closed.
    To avoid this issue we pass the correct objset_t as the third arg.
    
    The code has also been updated to correctly notify the kernel
    when the block device capacity changes.  For 2.6.28 and newer
    kernels the capacity change will be immediately detected.  For
    earlier kernels the capacity change will be detected when the
    device is next opened.  This is a known limitation of older
    kernels.
    
    Online ext3 resize test case passes on 2.6.28+ kernels:
    $ dd if=/dev/zero of=/tmp/zvol bs=1M count=1 seek=1023
    $ zpool create tank /tmp/zvol
    $ zfs create -V 500M tank/zd0
    $ mkfs.ext3 /dev/zd0
    $ mkdir /mnt/zd0
    $ mount /dev/zd0 /mnt/zd0
    $ df -h /mnt/zd0
    $ zfs set volsize=800M tank/zd0
    $ resize2fs /dev/zd0
    $ df -h /mnt/zd0
    
    Original-patch-by: Fajar A. Nugraha <github@fajar.net>
    Closes #68
    Closes #84

[33mcommit e90a3de3e8b52061aeb0717b031a956cc1e705d5[m
Author: Alejandro R. Sedeño <asedeno@mit.edu>
Date:   Fri Apr 29 22:13:23 2011 -0400

    Add zpl_export.c to the list of targets.

[33mcommit 94e954257acadca5d858741457282c63bb18c442[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Apr 29 14:03:12 2011 -0700

    Correct MAXUID
    
    The uid_t on most systems is in fact and unsigned 32-bit value.
    This is almost always correct, however you could compile your
    kernel to use an unsigned 16-bit value for uid_t.  In practice
    I've never encountered a distribution which does this so I'm
    willing to overlook this corner case for now.
    
    Closes #165

[33mcommit 055656d4f4dfc1a85646a2c0cc10b9dce86da72b[m
Author: Gunnar Beutner <gunnar@beutner.name>
Date:   Thu Apr 28 18:35:50 2011 +0200

    Implemented NFS export_operations.
    
    Implemented the required NFS operations for exporting ZFS datasets
    using the in-kernel NFS daemon.

[33mcommit 5476e6952c1ecbd2debe977eb5c3ec88dfdfea5b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Apr 27 09:32:51 2011 -0700

    Suppress 'vdev_metaslab_init' memory warning
    
    The vdev_metaslab_init() function has been observed to allocate
    larger than 8k chunks.  However, they are not much larger than 8k
    and it does this infrequently so it is allowed and the warning is
    supressed.

[33mcommit 40a39e1103bbbd6908bc1b5cf4af953c7e4706ad[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Apr 26 14:56:04 2011 -0700

    Conserve stack in dsl_scan_visit()
    
    The dsl_scan_visit() function is a little heavy weight taking 464
    bytes on the stack.  This can be easily reduced for little cost by
    moving zap_cursor_t and zap_attribute_t off the stack and on to the
    heap.  After this change dsl_scan_visit() has been reduced in size
    by 320 bytes.
    
    This change was made to reduce stack usage in the dsl_scan_sync()
    callpath which is recursive and has been observed to overflow the
    stack.
    
    Issue #174

[33mcommit b81c4ac9af4f9e8b8c27d8011e3ce608cd04737b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Apr 26 15:43:07 2011 -0700

    Conserve stack in dsl_scan_visitbp()
    
    This function is called recursively so everything possible must be
    done to limit its stack consumption.  The dprintf_bp() debugging
    function adds 30 bytes of local variables to the function we cannot
    afford.  By commenting out this debugging we save 30 bytes per
    recursion and depths of 13 are not uncommon.  This yeilds a total
    stack saving of 390 bytes on our 8k stack.
    
    Issue #174

[33mcommit 7a060636b05655cccd87ce74d70e5957bb234e5e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Apr 22 10:12:49 2011 -0700

    Conserve stack in dsl_scan_visitbp()
    
    The recursive call chain dsl_scan_visitbp() -> dsl_scan_recurse() ->
    dsl_scan_visitdnode() -> dsl_scan_visitbp has been observed to consume
    considerable stack resulting in a stack overflow (>8k).  The cleanest
    way I see to fix this with minimal impact to the existing flow of
    code, and with the fewest performance concerns, is to always inline
    dsl_scan_recurse() and dsl_scan_visitdnode().  While this will increase
    the function size of dsl_scan_visitbp(), by 4660 bytes, it also reduces
    the stack requirements by removing the function call overhead.
    
    Issue #174

[33mcommit 44e9e3479388ee16f39253e8c3f8f6625324dfc6[m
Merge: 701b1f8 492b8e9
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Apr 26 13:30:27 2011 -0700

    Merged pull request #212 from dajhorn/hostid.
    
    Use gethostid in the Linux convention.

[33mcommit 701b1f8168ebb0ad6b6958b9593488c17adebb44[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Apr 26 12:56:35 2011 -0700

    Fix zvol deadlock
    
    It's possible for a zvol_write thread to enter direct memory reclaim
    while holding open a transaction group.  This results in the system
    attempting to write out data to the disk to free memory.  Unfortunately,
    this can't succeed because the the thread doing reclaim is holding open
    the txg which must be closed to be synced to disk.  To prevent this
    the offending allocation is marked KM_PUSHPAGE which will prevent it
    from attempting writeback.
    
    Closes #191

[33mcommit 492b8e9e7b6f3df55eed04f7288db6b62c17c668[m
Author: Darik Horn <dajhorn@vanadac.com>
Date:   Mon Apr 25 10:18:07 2011 -0500

    Use gethostid in the Linux convention.
    
    Disable the gethostid() override for Solaris behavior because Linux systems
    implement the POSIX standard in a way that allows a negative result.
    
    Mask the gethostid() result to the lower four bytes, like coreutils does in
    /usr/bin/hostid, to prevent junk bits or sign-extension on systems that have an
    eight byte long type. This can cause a spurious hostid mismatch that prevents
    zpool import on 64-bit systems.

[33mcommit a1cc0b3290dcf1b5cf759c89352d8bdb44ee41e6[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Apr 22 16:21:26 2011 -0700

    Fix 32-bit MAXOFFSET_T definition
    
    Having MAXOFFSET_T defined to 0x7fffffffl was artificially limiting
    the maximum file size on 32-bit systems.  In reality MAXOFFSET_T is
    used when working with 'long long' types and as such we now define
    it as LLONG_MAX.  This resolves the 2GB file size limit for files
    and additionally allows zvols greater than 2GB on 32-bit systems.
    
    Closes #136
    Closes #81

[33mcommit e2448b0e62f73f8b9574d74c5b327707b67b703a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Apr 22 13:50:17 2011 -0700

    Fix spurious -EFAULT when setting I/O scheduler
    
    Occasionally we would see an -EFAULT returned when setting the
    I/O scheduler on a vdev.  This was caused an improperly formatted
    user mode helper command.
    
    This commit restructures the command to something simpler, allocates
    space for it dynamically to save stack, and removes the retry logic
    which is no longer needed.
    
    Closes #169

[33mcommit 6a8f9b6bf0de3e3d09fcfa32e129c978e7641a8f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Mar 30 18:59:17 2011 -0700

    Enforce ARC meta-data limits
    
    This change ensures the ARC meta-data limits are enforced.  Without
    this enforcement meta-data can grow to consume all of the ARC cache
    pushing out data and hurting performance.  The cache is aggressively
    reclaimed but this is a soft and not a hard limit.  The cache may
    exceed the set limit briefly before being brought under control.
    
    By default 25% of the ARC capacity can be used for meta-data.  This
    limit can be tuned by setting the 'zfs_arc_meta_limit' module option.
    Once this limit is exceeded meta-data reclaim will occur in 3 percent
    chunks, or may be tuned using 'arc_reduce_dnlc_percent'.
    
    Closes #193

[33mcommit 36df284366caa77cb40083d2e6bcce02274e2f05[m
Author: Gunnar Beutner <gunnar@beutner.name>
Date:   Thu Apr 14 22:07:24 2011 +0200

    Fixed a use-after-free bug in zfs_zget().
    
    Fixed a bug where zfs_zget could access a stale znode pointer when
    the inode had already been removed from the inode cache via iput ->
    iput_final -> ... -> zfs_zinactive but the corresponding SA handle
    was still alive.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #180

[33mcommit d247f2a3cc24e8127ec1c5055bf0cd6c39c09add[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Apr 20 10:18:56 2011 -0700

    Suppress 'zfs receive' memory warning
    
    As part of zfs_ioc_recv() a zfs_cmd_t is allocated in the kernel
    which is 17808 bytes in size.  This sort of thing in general should
    be avoided.  However, since this should be an infrequent event for
    now we allow it and simply suppress the warning with the KM_NODEBUG
    flag.  This can be revisited latter if/when it becomes an issue.
    
    Closes #178

[33mcommit 9caef54224f8a0df2fdf6a16bbdf4037ee7e7a50[m
Author: Aniruddha Shankar <k@191a.net>
Date:   Wed Apr 20 06:15:21 2011 +0530

    Added required runlevel info for init on Debian
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #208

[33mcommit 3fce1d0962dd28d094589f6d5c3f88a1db12b7cb[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Apr 19 16:14:15 2011 -0700

    Update zconfig.sh to use new zvol names
    
    This change should have occured when we commited the new udev
    rules for zvols.  Basically, the test script is just out of date.
    We need to update it to use the /dev/zvol/ device names, and
    to expect the more common -partN suffixes.
    
    I added a udev_trigger() call in zconfig_partition() and
    zconfig_zvol_device_stat() to ensure that all the udev rules have
    run before.  This ensures the devices are available to subsequent
    commands and closes a small race.
    
    Finally, I was forced added a small 'sleep 1' to test 10.  I
    was observing occassional failures in my VM due to the device
    still claiming to be busy.  Delaying betwen the various methods
    of adding/removing a vdev avoids the issue.
    
    Closes #207

[33mcommit 18f42382777b23bf84a698dea7861c943ebd5639[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Apr 19 15:01:37 2011 -0700

    Add parted and lsscsi dependencies to zfs-test
    
    The zfault.sh and zconfig.sh test scripts requires the parted
    utility, the lsscsi utility, and the scsi_debug module.  To
    ensure the utilities are available they have been added as
    dependencies to zfs-test package.  Checking for scsi_debug
    is a little more problematic because if it's missing you will
    need to build it.  For clarity the documention has been updated
    to mention this.
    
    Closes #205
    Closes #206

[33mcommit cbb1e401f94d1f597274464951e5effdbc7e6887[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Apr 19 14:12:08 2011 -0700

    Add Gunnar Beutner to AUTHORS for his contributions

[33mcommit bec30953cdbbb03d2a3791bd1ffe5b062bad0ec3[m
Author: Gunnar Beutner <gunnar@beutner.name>
Date:   Sun Apr 17 20:31:33 2011 +0200

    Truncate the xattr znode when updating existing attributes.
    
    If the attribute's new value was shorter than the old one the old
    code would leave parts of the old value in the xattr znode.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #203

[33mcommit 274b7e79f3baece5ab28331e73629f6e81fdb5ca[m
Author: Gunnar Beutner <gunnar@beutner.name>
Date:   Sun Apr 17 19:42:33 2011 +0200

    Added missing initialization for va.va_dentry in zfs_get_xattrdir.
    
    Without this we may mistakenly believe we have a dentry and try to
    d_instantiate() it.  This will result in the following BUG.  It's
    important to note that while the xattr directory has an inode
    assoicated with it we never create a dentry for it.
    
      kernel BUG at fs/dcache.c:1418!
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #202

[33mcommit 826ab7ad1931eb8351af1f4f4b7a65f8b0c45839[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Sun Apr 10 18:08:53 2011 -0500

    Support IEC base-2 prefixes
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 4da4a9e1a78e14112225fb73de5e465395c9a425[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Fri Apr 8 22:54:47 2011 -0500

    Cleanup various Sun/Solaris-isms
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 251eb26d17adbdbeec65c8e8c70bcabbeb97959a[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Fri Apr 8 22:51:04 2011 -0500

    Update the version in the zpool upgrade example
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 3b2041509f667b5706f669d72adddb03179a2111[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Fri Apr 8 22:47:11 2011 -0500

    Normalize the deferred destruction language
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 0d122e21ff432aafb0cfc6dd0e3e64c40dc69cb1[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Fri Apr 8 22:41:40 2011 -0500

    Improve the wording about hot spares
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 6b92390fe8c017674e3d15c2426bc5f6b7c499bf[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Fri Apr 8 22:39:36 2011 -0500

    Improve some quoting consistency
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 577468215b714cddea60239192a457130bb44574[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Fri Apr 8 22:37:37 2011 -0500

    Remove a stray tab
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 25d4782bac28c96770f71d2ac2c4b3cea3df6296[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Fri Apr 8 22:34:37 2011 -0500

    Linux has "partitions", not "slices"
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 54e5f2264dbd0895339ad7ab31a7c03d970906b3[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Fri Apr 8 22:27:25 2011 -0500

    Use Linux disk names in zpool.8
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 1dc3fea59e8fbcf81515a3bc616566e880181161[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Fri Apr 8 21:54:05 2011 -0500

    More and correct an example in zpool.8
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 1fe2e23771113fd66442b11017b619aacc07bac1[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Fri Apr 8 21:45:13 2011 -0500

    Change /dev/dsk -> /dev in the man pages
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 2d1b7b0b97d2a75bfeeca3fbdc0682c0176a38da[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Fri Apr 8 21:31:11 2011 -0500

    Correct man page section numbers for Linux
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 12c1acde76683108441827ae9affba1872f3afe5[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Apr 19 10:39:31 2011 -0700

    Set -Wno-unused-but-set-variable globally
    
    As of gcc-4.6 the option -Wunused-but-set-variable is enabled by
    default.  While this is a useful warning there are numerous places
    in the ZFS code when a variable is set and then only checked in an
    ASSERT().  To avoid having to update every instance of this in the
    code we now set -Wno-unused-but-set-variable to suppress the warning.
    
    Additionally, when building with --enable-debug and -Werror set these
    warning also become fatal.  We can reevaluate the suppression of these
    error at a later time if it becomes an issue.  For now we are basically
    just reverting to the previous gcc behavior.

[33mcommit 79713039a2b6e0ed223d141b4a8a8455f282d2f2[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Apr 19 10:02:21 2011 -0700

    Fix gcc configure warnings
    
    Newer versions of gcc are getting smart enough to detect the sloppy
    syntax used for the autoconf tests.  It is now generating warnings
    for unused/undeclared variables.  Newer version of gcc even have
    the -Wunused-but-set-variable option set by default.  This isn't a
    problem except when -Werror is set and they get promoted to an error.
    In this case the autoconf test will return an incorrect result which
    will result in a build failure latter on.
    
    To handle this I'm tightening up many of the autoconf tests to
    explicitly mark variables as unused to suppress the gcc warning.
    Remember, all of the autoconf code can never actually be run we
    just want to get a clean build error to detect which APIs are
    available.  Never using a variable is absolutely fine for this.
    
    Closes #176

[33mcommit 03514b01109e0a6ef4eee4914ba7442c380fa6b4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Apr 18 16:44:22 2011 -0700

    Fix gcc compiler warning, parse_option()
    
    When compiling ZFS in user space gcc-4.6.0 correctly identifies
    the variable 'value' as being set but never used.  This generates a
    warning and a build failure when using --enable-debug.  Once again
    this is correct but I'm reluctant to remove 'value' because we are
    breaking the string in to name/value pairs.  While it is not used
    now there's a good chance it will be soon and I'd rather not have
    to reinvent this.  To suppress the warning with just as a VERIFY().
    This was observed under Fedora 15.
    
      cmd/mount_zfs/mount_zfs.c: In function ‘parse_option’:
      cmd/mount_zfs/mount_zfs.c:112:21: error: variable ‘value’ set but not
      used [-Werror=unused-but-set-variable]

[33mcommit 0fe3d820f5be0cc5733f08aa4a57093c7b8febe6[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Apr 18 16:27:45 2011 -0700

    Fix gcc compiler warning, dsl_pool_create()
    
    When compiling ZFS in user space gcc-4.6.0 correctly identifies
    the variable 'os' as being set but never used.  This generates a
    warning and a build failure when using --enable-debug.  However,
    the code is correct we only want to use 'os' for the kernel space
    builds.  To suppress the warning the call was wrapped with a
    VERIFY() which has the nice side effect of ensuring the 'os'
    actually never is NULL.  This was observed under Fedora 15.
    
      module/zfs/dsl_pool.c: In function ‘dsl_pool_create’:
      module/zfs/dsl_pool.c:229:12: error: variable ‘os’ set but not used
      [-Werror=unused-but-set-variable]

[33mcommit e30c0ada6d0174e044b96fbedf5946c3be66e956[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Apr 18 14:12:28 2011 -0700

    Linux 2.6.39 compat, invalidate_inodes()
    
    Update code to use the spl_invalidate_inodes() wrapper.  This hides
    some of the complexity of determining if invalidate_inodes() was
    exported, and if so what is its prototype.  The second argument
    of spl_invalidate_inodes() determined the behavior of how dirty
    inodes are handled.  By passing a zero we are indicated that we
    want those inodes to be treated as busy and skipped.

[33mcommit cbf81d4c3b1344145519c4187e10251822204889[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Apr 18 12:48:44 2011 -0700

    Autogen refresh for kernel-insert-inode-locked.m4
    
    Several Makefile.in's were accidentally not updated when the
    kernel-insert-inode-locked.m4 check was added.  This change simply
    refreshes the missed files.

[33mcommit 0f6fd32927aa2b9c63d1b527824705924a5a21ca[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Apr 8 10:22:42 2011 -0700

    Fix rebuildable RPMs for el6/ch5
    
    When rebuilding the source RPM under el5 you need to append the
    target_cpu.  However, under el6/ch5 things are packaged correctly
    and the arch is already part of kver.  For this reason it also
    needs to be stripped from kver when setting kverpkg.

[33mcommit 38baef530de4961390d5862e29cc1a85a3dcefa3[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Fri Apr 8 09:41:41 2011 -0700

    Align closing fi in mount-zfs.sh

[33mcommit c4803a966367517d56d7b7a6becef841e44dabbd[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Thu Apr 7 13:45:57 2011 -0700

    Use consistent indentation in mount-zfs.sh

[33mcommit f1329923610fb6281bdde1d99484e636d8de4ed9[m
Author: Richard Laager <rlaager@wiktel.com>
Date:   Wed Apr 6 23:47:02 2011 -0700

    Fix a couple comments
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 0d3ac5e7356d29fbb7d2880c0a0c457656355ca0[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Apr 7 14:23:45 2011 -0700

    Linux 2.6.29 compat, credentials
    
    The .sync_fs fix as applied did not use the updated SPL credential
    API.  This broke builds on Debian Lenny, this change applies the
    needed fix to use the portable API.  The original credential changes
    are part of commit 81e97e21872a9c38ad66c37fafe1436ee25abee3.

[33mcommit 9b1d6001bcfc065e32942c0c3af9f56cc0c26eb7[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Apr 7 10:49:55 2011 -0700

    Prep zfs-0.6.0-rc3 tag
    
    Create the third 0.6.0 release candidate tag (rc3).

[33mcommit f5ef7150ead1f6234e18eb3bda0299f34209bbb8[m
Author: Manuel Amador (Rudd-O) <rudd-o@rudd-o.com>
Date:   Thu Apr 7 10:34:20 2011 -0700

    Update zfs.fedora init script
    
    Apply all of Rudd-O's changes for the Fedora init script.  The
    initial init script was one I threw together based on Rudd-O's
    original work.  It worked for me but it has some flaws.
    
    Rudd-O has invested considerable time updating it to be significantly
    smarter.  It now handles using ZFS as your root filesystem plus
    various other quirks.  Since he is familiar with the right
    way to do things on Fedora and has tested this init script we
    are integrating all of his changes.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 6583dcacdcca2aad7eaec51f31797a3533845099[m
Author: Manuel Amador (Rudd-O) <rudd-o@rudd-o.com>
Date:   Wed Apr 6 09:52:58 2011 -0700

    Permit both mountpoint=legacy and mountpoint=/ in initrd
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 8610b52bd432b7c1eb3da5e67ce4820da82ae638[m
Author: Manuel Amador (Rudd-O) <rudd-o@rudd-o.com>
Date:   Tue Mar 22 22:18:07 2011 -0700

    Added .gitignore for mount.zfs and zvol_id
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit eec8164771bee067c3cd55ed0a16dadeeba276de[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Mar 31 10:05:58 2011 -0700

    Fix ASSERTION(!dsl_pool_sync_context(tx->tx_pool))
    
    Disable the normal reclaim path for the txg_sync thread.  This
    ensures the thread will never enter dmu_tx_assign() which can
    otherwise occur due to direct reclaim.  If this is allowed to
    happen the system can deadlock.  Direct reclaim call path:
    
      ->shrink_icache_memory->prune_icache->dispose_list->
      clear_inode->zpl_clear_inode->zfs_inactive->dmu_tx_assign

[33mcommit 7cb67b45f33fd7a61af24c675c7347eb5264b38c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 29 18:08:59 2011 -0700

    Add direct+indirect ARC reclaim
    
    Under OpenSolaris all memory reclaim is done asyncronously.  Under
    Linux memory reclaim is done asynchronously _and_ synchronously.
    When a process allocates memory with GFP_KERNEL it explicitly allows
    the kernel to do reclaim on its behalf to satify the allocation.
    If that GFP_KERNEL allocation fails the kernel may take more drastic
    measures to reclaim the memory such as killing user space processes.
    
    This was observed to happen with ZFS because the ARC could consume
    a large fraction of the system memory but no synchronous reclaim
    could be performed on it.  The result was GFP_KERNEL allocations
    could fail resulting in OOM events, and only moments latter the
    arc_reclaim thread would free unused memory from the ARC.
    
    This change leaves the arc_thread in place to manage the fundamental
    ARC behavior.  But it adds a synchronous (direct) reclaim path for
    the ARC which can be called when memory is badly needed.  It also
    adds an asynchronous (indirect) reclaim path which is called
    much more frequently to prune the ARC slab caches.

[33mcommit 1834f2d8b715d25bafbb0e4a099994f45c3211ae[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Mar 24 12:13:55 2011 -0700

    Add missing arcstats
    
    The following useful values were missing the arcstats.  This change
    adds them in to provide greater visibility in to the arcs behavior.
    
    arc_no_grow                     4    0
    arc_tempreserve                 4    0
    arc_loaned_bytes                4    0
    arc_meta_used                   4    624774592
    arc_meta_limit                  4    400785408
    arc_meta_max                    4    625594176

[33mcommit c85b224fafacafa49817101f26f0a9760a8d05d1[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 29 23:04:39 2011 -0700

    Call d_instantiate before unlocking inode
    
    Under Linux a dentry referencing an inode must be instantiated before
    the inode is unlocked.  To accomplish this without overly modifing
    the core ZFS code the dentry it passed via the vattr_t.  There are
    cases such as replay when a dentry is not available.  In which case
    it is obviously not initialized at inode creation time, if a dentry
    is needed it will be spliced as when required via d_lookup().

[33mcommit d433c206515e567c52ce09589033405a0ae3716e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Apr 5 13:13:01 2011 -0700

    Fix `make distclean` for `./configure --with-config=user
    
        Making distclean in module
        make[1]: Entering directory `/zfs/module'
        make -C  SUBDIRS=`pwd`  clean
        make: Entering an unknown directory
        make: *** SUBDIRS=/zfs/module: No such file or directory.  Stop.
    
    When using --with-config=user the 'distclean' target would fail
    because it assumes the kernel configuration infrastrure is set up.
    This is not the case, nor does it need to be, because the
    '--with-config=user' option will prune the entire ./module subtree
    from SUBDIRS.  This prevents most build rules from operating in the
    ./module directory.
    
    However, the 'dist*' rules will still traverse this directory
    because it is listed in DIST_SUBDIRS.  This is correct because we
    need to ensure the dist rules package the directory contents
    regardless of the configuration for the 'dist' rule.  The correct
    way to handle this is to only invoke the kernel build system as
    part of the 'clean' rule when CONFIG_KERNEL_TRUE is set.
    
    Initial fix provided by Darik Horn <dajhorn@vanadac.com>.
    This commit is a slightly refined form of the original.

[33mcommit fa417e57a68b7aa026ec5fd8c0471b6c60ca109f[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Fri Apr 1 09:47:05 2011 -0700

    Call udevadm trigger more safely
    
    Some udev hooks are not designed to be idempotent, so calling udevadm
    trigger outside of the distribution's initialization scripts can have
    unexpected (and potentially dangerous) side effects.  For example, the
    system time may change or devices may appear multiple times.  See Ubuntu
    launchpad bug 320200 and this mailing list post for more details:
    
    https://lists.ubuntu.com/archives/ubuntu-devel/2009-January/027260.html
    
    To avoid these problems we call udevadm trigger with --action=change
    --subsystem-match=block.  The first argument tells udev just to refresh
    devices, and make sure everything's as it should be.  The second
    argument limits the scope to block devices, so devices belonging to
    other subsystems cannot be affected.
    
    This doesn't fix the problem on older udev implementations that don't
    provide udevadm but instead have udevtrigger as a standalone program.
    In this case the above options aren't available so there's no way to
    call call udevtrigger safely.  But we can live with that since this
    issue only exists in optional test and helper scripts, and most
    zfs-on-linux users are running newer systems anyways.

[33mcommit 34e4864009d32da5fe29393082a56b5272f65faa[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Mar 31 13:43:49 2011 -0700

    Update CHAOS 5 Packaging
    
    The CHAOS 5 kernels are now packaged identially to the RHEL6 kernels.
    Therefore we can simply use the RHEL6 rules in the spec file when
    building packages.

[33mcommit e88b041ed6a7ce358df25a7af057ea5c76dd1c2a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Mar 31 12:16:24 2011 -0700

    Fix libzpool cv_* build error
    
    This build failure was accidentally introduced by previous commit
    bfd214a which fixed the load average.  Unfortunately, the wrapper
    for cv_wait_interruptible was not available in the zfs_context.h
    user compatibility code.  I failed to notice this because I didn't
    rebuild everything cleanly before committing.
    
      undefined reference to `cv_wait_interruptible'
      collect2: ld returned 1 exit status
    
    Closes #181

[33mcommit bfd214af01dd360417b1331d903655244979fe0f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Mar 31 17:07:12 2011 -0700

    Fix inflated load average
    
    Kernel threads which sleep uninterruptibly on Linux are marked in the (D)
    state.  These threads are usually in the process of performing IO and are
    thus counted against the load average.  The txg_quiesce and txg_sync threads
    were always sleeping uninterruptibly and thus inflating the load average.
    
    This change makes them sleep interruptibly.  Some care is required however
    because these threads may now be woken early by signals.  In this case the
    callers are all careful to check that the required conditions are met after
    waking up.  If we're woken early due to a signal they will simply go back
    to sleep.  In this case these changes are safe.
    
    Closes #175

[33mcommit 1f5fd9d47815770fc8e0fea7028229fd0826871c[m
Author: Fajar A. Nugraha <github@fajar.net>
Date:   Fri Mar 25 10:01:28 2011 -0700

    Spec file compat, %{datadir}
    
    The dracut change caused an error during "make rpm".  The cause
    is simple, RHEL5 does not recognize the %{datarootdir} macro in
    zfs.spec.  It was changed to %{datadir} which fixes the build.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 1d82906dea5eb698a854d992e445e794fb5a0880[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Mar 24 11:34:41 2011 -0700

    Set cmd paths in udev rules using --prefix
    
    The udev/rules.d scripts must use absolute paths to their support
    binaries.  However, where those binaries get installed depends
    on what --prefix was set to when the package was configured.
    This change makes the udev/rules.d helpers to *.in files which
    are processed by configure.  This allows them to be dynamically
    updated to include the specified --prefix.
    
    Additionally, this change updates 60-zvol.rules to handle both
    the 'add' and 'change' actions.  This ensures that that all
    valid zvol devices are correctly linked.

[33mcommit a5729f7b22e14aed657bd716f3ee98b02f7e7c41[m
Author: Fajar A. Nugraha <github@fajar.net>
Date:   Thu Mar 24 15:22:52 2011 +0700

    Fixes to enable zvol symlink creation
    
    This commit fixes issue on
    https://github.com/behlendorf/zfs/issues/#issue/172
    Changes:
    - update BLKZNAME to use _IOR instead of _IO.  Kernel 2.6.32 allows
    read parameters (copy_to_user) with _IO, while newer kernels (tested
    Archlinux's 2.6.37 kernel) enforces _IOR (which is correct)
    - fix return code and message on error
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 7a1cdc0775aa4405501e64ebf0bfd998e723f2d7[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 22 11:22:49 2011 -0700

    Linux 2.6.29 compat, .freeze_fs/.unfreeze_fs
    
    The .freeze_fs/.unfreeze_fs hooks were not added until Linux 2.6.29
    Since these hooks are currently unused they are being removed to
    allow support of older kernels.

[33mcommit 81e97e21872a9c38ad66c37fafe1436ee25abee3[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 22 11:13:41 2011 -0700

    Linux 2.6.29 compat, credentials
    
    As of Linux 2.6.29 a clean credential API was added to the Linux kernel.
    Previously the credential was embedded in the task_struct.  Because the
    SPL already has considerable support for handling this API change the
    ZPL code has been updated to use the Solaris credential API.

[33mcommit bdf4328b04544ac3759d689d0a68e514b6df1025[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 22 09:55:09 2011 -0700

    Linux 2.6.28 compat, insert_inode_locked()
    
    Added insert_inode_locked() helper function, prior to this most callers
    used insert_inode_hash().  The older method doesn't check for collisions
    in the inode_hashtable but it still acceptible for use.  Fallback to
    using insert_inode_hash() when insert_inode_locked() is unavailable.

[33mcommit 3517f0b7e928e1a8e7634828fb92d194ea35004d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 22 09:26:38 2011 -0700

    Linux 2.6.27 compat, blk_queue_stackable()
    
    The blk_queue_stackable() queue flag was added in 2.6.27 to handle dm
    stacking drivers.  Prior to this request stacking drivers were detected
    by checking (q->request_fn == NULL), for earlier kernels we revert to
    this legacy behavior.

[33mcommit 1073d746d6421eb5faf8a3cf8534d82a2beb0512[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Mar 21 16:54:59 2011 -0700

    Linux compat, umount2(2) flags
    
    Older glibc <sys/mount.h> headers did not define all the available
    umount2(2) flags.  Both MNT_FORCE and MNT_DETACH are supported in the
    kernel back to 2.4.11 so we define them correctly if they are missing.
    
    Closes #95

[33mcommit d6bd8eaae4bdbce8e162414bb6c84ac95fd456b4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Mar 21 10:19:30 2011 -0700

    Fix evict() deadlock
    
    Now that KM_SLEEP is not defined as GFP_NOFS there is the possibility
    of synchronous reclaim deadlocks.  These deadlocks never existed in the
    original OpenSolaris code because all memory reclaim on Solaris is done
    asyncronously.  Linux does both synchronous (direct) and asynchronous
    (indirect) reclaim.
    
    This commit addresses a deadlock caused by inode eviction.  A KM_SLEEP
    allocation may trigger direct memory reclaim and shrink the inode cache.
    This can occur while a mutex in the array of ZFS_OBJ_HOLD mutexes is
    held.  Through the ->shrink_icache_memory()->evict()->zfs_inactive()->
    zfs_zinactive() call path the same mutex may be reacquired resulting
    in a deadlock.  To avoid this deadlock the process must not reacquire
    the mutex when it is already holding it.
    
    This is a reasonable fix for now but longer term the ZFS_OBJ_HOLD
    mutex locking should be reevaluated.  This infrastructure already
    prevents us from ever using the Linux lock dependency analysis tools,
    and it may limit scalability.

[33mcommit 691f6ac4c2858d64afc2a0dc1bd2b8c041d68502[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sat Mar 19 14:34:30 2011 -0700

    Use KM_PUSHPAGE instead of KM_SLEEP
    
    It used to be the case that all KM_SLEEP allocations were GFS_NOFS.
    Unfortunately this often resulted in the kernel being unable to
    reclaim the ARC, inode, and dentry caches in a timely manor.
    The fix was to make KM_SLEEP a GFP_KERNEL allocation in the SPL.
    
    However, this increases the posibility of deadlocking the system
    on a zfs write thread.  If a zfs write thread attempts to perform
    an allocation it may trigger synchronous reclaim.  This reclaim
    may attempt to flush dirty data/inode to disk to free memory.
    Unforunately, this write cannot finish because the write thread
    which would handle it is holding the previous transaction open.
    Deadlock.
    
    To avoid this all allocations in the zfs write thread path must
    use KM_PUSHPAGE which prohibits synchronous reclaim for that
    thread.  In this way forward progress in ensured.  The risk
    with this change is I missed updating an allocation for the
    write threads leaving an increased posibility of deadlock.  If
    any deadlocks remain they will be unlikely but we'll have to
    make sure they all get fixed.

[33mcommit f47c42e2143ccf83bb5ddca4251c9db14859a0b5[m
Merge: 716895b ae26d04
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 22 12:13:04 2011 -0700

    Merge branch 'dracut'

[33mcommit 716895b161e31e4db559566fa1dddc3d8d8c64c0[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Mar 18 14:47:19 2011 -0700

    Fix 'LDFLAGS=-Wl,--as-needed' build error
    
    Compiling with 'LDFLAGS=-Wl,--as-needed' exposed the fact that
    there were some library linking problems introduced by mount_zfs.
    In particular, the libzfs library does use nvpair symbols, and
    mount_zfs contains no dependencies on libzpool.
    
    Closes #161
    Closes #162

[33mcommit ec49a5f0ec020fa1b0d3e915e2ffb10bbed97599[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Mar 18 13:54:27 2011 -0700

    Fix getcwd() warning
    
    New versions glibc declare getcwd() with the warn_unused_result attribute.
    This results in a warning because the updated mount helper was not
    checking this return value.  This issue was fixed by checking the return
    type and in the case of an error simply returning the passed dataset.
    One possible, but unlikely, error would be having your cwd directory
    unlinked while the mount command was running.
    
      cmd/mount_zfs/mount_zfs.c: In function ‘parse_dataset’:
      cmd/mount_zfs/mount_zfs.c:223:2: error: ignoring return value of
          ‘getcwd’, declared with attribute warn_unused_result

[33mcommit ae26d0465a234d7b340566287908c78fe24901e1[m
Author: Manuel Amador (Rudd-O) <rudd-o@rudd-o.com>
Date:   Thu Mar 17 15:18:13 2011 -0700

    Add dracut support
    
    To simplify the process of using zfs as your root filesystem a
    zfs-drucat sub-package has been added.  This sub-package adds a zfs
    dracut module which allows your initramfs to be rebuilt with zfs
    support.  The process for doing this is still complicated but there
    is clearly interest from the community about getting this working
    well and documented.  This should help lay some of the groundwork.
    
    Longer term these changes should be pushed in the upstream dracut
    package.  Once that occurs this subpackage will no longer be
    required for new systems, however we may want to conditionally
    build this package in the future for systems running older
    dracut versions.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 01c0e61da027925b71c923a2b3896abf458b45a9[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Mar 17 15:02:28 2011 -0700

    Add init scripts
    
    To support automatically mounting your zfs on filesystem on boot
    a basic init script is needed.  Unfortunately, every distribution
    has their own idea of the _right_ way to do things.  Rather than
    write one very complicated portable init script, which would be
    invariably replaced by the distributions own anyway.  I have
    instead added support to provide multiple distribution specific
    init scripts.
    
    The correct init script for your distribution will be selected
    by ZFS_AC_DEFAULT_PACKAGE which will set DEFAULT_INIT_SCRIPT.
    During 'make install' the correct script for your system will
    be installed from zfs/etc/init.d/zfs.DEFAULT_INIT_SCRIPT to the
    usual /etc/init.d/zfs location.
    
    Currently, there is zfs.fedora and a more generic zfs.lsb init
    script.  Hopefully, the distribution maintainers who know best
    how they want their init scripts to function will feedback their
    approved versions to be included in the project.
    
    This change does not consider upstart jobs but I'm not at all
    opposed to add that sort of thing.

[33mcommit 0de19dad9cbca9ac89aea1c7742f131713ef8012[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 15 12:41:19 2011 -0700

    Register .remount_fs handler
    
    Register the missing .remount_fs handler.  This handler isn't strictly
    required because the VFS does a pretty good job updating most of the
    MS_* flags.  However, there's no harm in using the hook to call the
    registered zpl callback for various MS_* flags.  Additionaly, this
    allows us to lay the ground work for more complicated argument parsing
    in the future.

[33mcommit 03f9ba9d990efb911026ebee0902671915db01a3[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 15 12:03:42 2011 -0700

    Register .sync_fs handler
    
    Register the missing .sync_fs handler.  This is a noop in most cases
    because the usual requirement is that sync just be initiated.  As part
    of the DMU's normal transaction processing txgs will be frequently
    synced.  However, when the 'wait' flag is set the requirement is that
    .sync_fs must not return until the data is safe on disk.  With the
    addition of the .sync_fs handler this is now properly implemented.

[33mcommit 3aff775555a40fe3e5193f1309ba6e80312be5ff[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 15 11:17:33 2011 -0700

    Strip 'zfsutil,remount' from /etc/mtab
    
    When updating /etc/mtab we should be careful and strip certain
    options.  In particular, we need to strip 'zfsutil' because if
    we don't the mount utility will helpfull provide it to the
    mount helper when we issue mount(8) again.  This subverts the
    check that the caller is zfs(8) and not mount(8).

[33mcommit 093aa692861d0c91fd29979c13fc188760a3985b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 15 09:34:56 2011 -0700

    Always allow '-o remount,ro'
    
    Allow the mount(8) utility to always operate on all datasets when
    remounting them read-only.  This critical for rc.sysinit/umountroot
    which remounts the root filesystem read-only during shutdown to
    ensure everything is correctly flushed to disk.
    
    Fix minor typo, the check to set zfsutil should use the bitwise
    '&'.  I must have accidentally hit the adjacent '*' and obviously
    neither the compiler or my code review caught this.  Fix it now.

[33mcommit 04516a45b27144cf42bec005ef2de6d505d236a5[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Mar 10 13:34:17 2011 -0800

    Don't set I/O Scheduler for Partitions
    
    ZFS should only change the i/o scheduler for a disk when it has
    ownership of the whole disk.  This is basically the same logic as
    adjusting the write cache behavior on a disk.  This change updates
    the vdev disk code to skip partitions when setting the i/o scheduler.
    
    Closes #152

[33mcommit a6cba65ccae5a5458f9ab4ac11020716d30ea7f7[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Mar 10 12:58:44 2011 -0800

    Check for trailing '/' in mount.zfs
    
    When run with a root '/' cwd the mount.zfs helper would strip not
    only the '/' but also the next character from the dataset name.
    For example, '/tank' was changed to 'ank' instead of just 'tank'.
    Originally, this was done for the '/tmp' cwd case where we needed
    to strip the '/' following the cwd.  For example '/tmp/tank' needed
    to remove the '/tmp' cwd plus 1 character for the '/'.
    
    This change fixes the problem by checking the cwd and if it ends in
    a '/' it does not strip and extra character.  Otherwise it will strip
    the next character.  I believe this should only ever be true for the
    root directory.
    
    Closes #148

[33mcommit 3eae80100bb32140aaa76864af636ea165584446[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Mar 9 15:17:28 2011 -0800

    Prep zfs-0.6.0-rc2 tag
    
    Create the second 0.6.0 release candidate tag (rc2).

[33mcommit 9ac97c2a939aef0f9899244920007c605387949a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Mar 7 10:10:20 2011 -0800

    Print mount/umount errors
    
    Because we are dependent of the system mount/umount utilities to
    ensure correct mtab locking, we should not suppress their error
    output.  During a successful mount/umount they will be silent,
    but during a failure the error message they print is the only sure
    way to know why a mount failed.  This is because the (u)mount(8)
    return code does not contain the result of the system call issued.
    The only way to clearly idenify why thing failed is to rely on
    the error message printed by the tool.
    
    Longer term once libmount is available we can issue the mount/umount
    system calls within the tool and still be ensured correct mtab locking.
    
    Closed #107

[33mcommit d53368f6755ff67342f68e2e536c4157409fd047[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Mar 4 15:14:46 2011 -0800

    Fix mount helper
    
    Several issues related to strange mount/umount behavior were reported
    and this commit should address most of them.  The original idea was
    to put in place a zfs mount helper (mount.zfs).  This helper is used
    to enforce 'legacy' mount behavior, and perform any extra mount argument
    processing (selinux, zfsutil, etc).  This helper wasn't ready for the
    0.6.0-rc1 release but with this change it's functional but needs to
    extensively tested.
    
    This change addresses the following open issues.
    Closes #101
    Closes #107
    Closes #113
    Closes #115
    Closes #119

[33mcommit adf2e8778e66e6a749cec981da00463b342bd563[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Mar 9 13:20:28 2011 -0800

    Fix O_APPEND Corruption
    
    Due to an uninitialized variable files opened with O_APPEND may
    overwrite the start of the file rather than append to it.  This
    was introduced accidentally when I removed the Solaris vnodes.
    
    The zfs_range_lock_writer() function used to key off zf->z_vnode
    to determine if a znode_t was for a zvol of zpl object.  With
    the removal of vnodes this was replaced by the flag zp->z_is_zvol.
    This flag was used to control the append behavior for range locks.
    
    Unfortunately, this value was never properly initialized after
    the vnode removal.  However, because most of memory is usually
    zeros it happened to be set correctly most of the time making
    the bug appear racy.  Properly initializing zp->z_is_zvol to
    zero completely resolves the problem with O_APPEND.
    
    Closes #126

[33mcommit 17c37660a14cc5e26cc668fdb285933fee4b6cf4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Mar 9 10:48:49 2011 -0800

    Conserve stack in zfs_setattr()
    
    Move 'bulk' and 'xattr_bulk' from the stack to the heap to minimize
    stack space usage.  These two arrays consumed 448 bytes on the stack
    and have been replaced by two 8 byte points for a total stack space
    saving of 432 bytes.  The zfs_setattr() path had been previously
    observed to overrun the stack in certain circumstances.

[33mcommit 450dc149bd5afdddad724a6eff7ff741fa8fdf11[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 8 12:17:35 2011 -0800

    Range lock performance improvements
    
    The original range lock implementation had to be modified by commit
    8926ab7 because it was unsafe on Linux.  In particular, calling
    cv_destroy() immediately after cv_broadcast() is dangerous because
    the waiters may still be asleep.  Thus the following cv_destroy()
    will free memory which may still be in use.
    
    This was fixed by updating cv_destroy() to block on waiters but
    this in turn introduced a deadlock.  The deadlock was resolved
    with the use of a taskq to move the offending free outside the
    range lock.  This worked well but using the taskq for the free
    resulted in a serious performace hit.  This is somewhat ironic
    because at the time I felt using the taskq might improve things
    by making the free asynchronous.
    
    This patch refines the original fix and moves the free from the
    taskq to a private free list.  Then items which must be free'd
    are simply inserted in to the list.  When the range lock is dropped
    it's safe to free the items.  The list is walked and all rl_t
    entries are freed.
    
    This change improves small cached read performance by 26x.  This
    was expected because for small reads the number of locking calls
    goes up significantly.  More surprisingly this change significantly
    improves large cache read performance.  This probably attributable
    to better cpu/memory locality.  Very likely the same processor
    which allocated the memory is now freeing it.
    
    bs	ext3	zfs	zfs+fix		faster
    ----------------------------------------------
    512     435     3       79      	26x
    1k      820     7       160     	22x
    2k      1536    14      305     	21x
    4k      2764    28      572     	20x
    8k      3788    50      1024    	20x
    16k     4300    86      1843    	21x
    32k     4505    138     2560    	18x
    64k     5324    252     3891    	15x
    128k    5427    276     4710    	17x
    256k    5427    413     5017    	12x
    512k    5427    497     5324    	10x
    1m      5427    521     5632    	10x
    
    Closes #142

[33mcommit 126400a1ca656d41dea9d2ad88afbec3ed32d391[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 8 11:04:51 2011 -0800

    Add zfs_open()/zfs_close()
    
    In the original implementation the zfs_open()/zfs_close() hooks
    were dropped for simplicity.  This was functional but not 100%
    correct with the expected ZFS sematics.  Updating and re-adding the
    zfs_open()/zfs_close() hooks resolves the following issues.
    
    1) The ZFS_APPENDONLY file attribute is once again honored.  While
    there are still no Linux tools to set/clear these attributes once
    there are it should behave correctly.
    
    2) Minimal virus scan file attribute hooks were added.  Once again
    this support in disabled but the infrastructure is back in place.
    
    3) Most importantly correctly handle assigning files which were
    opened syncronously to the intent log.  Without this change O_SYNC
    modifications could be lost during a system crash even though they
    were marked synchronous.

[33mcommit 53cf50e0816a89749b3ea4d51d5d9c9605bcc3e8[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Mar 7 16:06:22 2011 -0800

    Set stat->st_dev and statfs->f_fsid
    
    Filesystems like ZFS must use what the kernel calls an anonymous super
    block.  Basically, this is just a filesystem which is not backed by a
    single block device.  Normally this block device's dev_t is stored in
    the super block.  For anonymous super blocks a unique reserved dev_t
    is assigned as part of get_sb().
    
    This sb->s_dev must then be set in the returned stat structures as
    stat->st_dev.  This allows userspace utilities to easily detect the
    boundries of a specific filesystem.  Tools such as 'du' depend on this
    for proper accounting.
    
    Additionally, under OpenSolaris the statfs->f_fsid is set to the device
    id.  To preserve consistency with OpenSolaris we also set the fsid to
    the device id.  Other Linux filesystem (ext) set the fsid to a unique
    value determined by the filesystems uuid.  This value is unique but
    maintains no relationship to the device id.  This may be desirable
    when exporting NFS filesystem because it minimizes to chance of a
    client observing the same fsid from two different servers.
    
    Closes #140

[33mcommit a60b1c0a8e7e760088c51717614205bd5e43f560[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Mar 7 13:03:48 2011 -0800

    Make Missing Modules.symvers Fatal
    
    Detect early on in configure if the Modules.symvers file is missing.
    Without this file there will be build failures later and it's best
    to catch this early and provide a useful error.  In this case the
    most likely problem is the kernel-devel packages are not installed.
    It may also be possible that they are using an unbuilt custom kernel
    in which case they must build the kernel first.
    
    Closes #127

[33mcommit 15805c7711a69a293d7ab974a7e8f19c388836b4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Mar 7 10:59:26 2011 -0800

    Make CONFIG_PREEMPT Fatal
    
    Until support is added for preemptible kernels detect this at
    configure time and make it fatal.  Otherwise, it is possible to
    have a successful build and kernel modules with flakey behavior.

[33mcommit 5075c7ea69cc66fa5031ab8d562a66274300ced6[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Mar 3 15:45:28 2011 -0800

    Add missing libspl+libzpool libs to libzfs
    
    The libspl and libzpool libraries were missing from the libzfs
    Makefile.am.  They should be explicitly listed to avoid build
    issues when compiling static libraries and binaries.
    
    Additionally, ensure libzpool is built before libzfs because
    libzfs is dependent on libzpool.  This was also exposed as an
    issue when forcing static linking.

[33mcommit 6742abf9ec5a2c0ca132951efa0dee85698ff9b8[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Mar 3 11:29:15 2011 -0800

    Use Linux ATTR_ versions
    
    The AT_ versions of these macros are used on Solaris and while they
    map to their Linux equivilants the code has been updated to use the
    ATTR_ versions.

[33mcommit f4ea75d492139f397866b64512803191103d69bb[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Mar 2 14:18:40 2011 -0800

    Conserve stack in zfs_setattr()
    
    Move 'tmpxvattr' from the stack to the heap to minimize stack
    space usage.  This is enough to get us below the 1024 byte stack
    frame warning.  That however is still a large stack frame and it
    should be further reduced by moving the 'bulk' and 'xattr_bulk'
    sa_bulk_attr_t variables to the heap in a future patch.

[33mcommit 5484965ab650a56871a62a3373859a7a36ddafcb[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 1 12:24:09 2011 -0800

    Drop HAVE_XVATTR macros
    
    When I began work on the Posix layer it immediately became clear to
    me that to integrate cleanly with the Linux VFS certain Solaris
    specific things would have to go.  One of these things was to elimate
    as many Solaris specific types from the ZPL layer as possible.  They
    would be replaced with their Linux equivalents.  This would not only
    be good for performance, but for the general readability and health of
    the code.  The Solaris and Linux VFS are different beasts and should
    be treated as such.  Most of the code remains common for constructing
    transactions and such, but there are subtle and important differenced
    which need to be repsected.
    
    This policy went quite for for certain types such as the vnode_t,
    and it initially seemed to be working out well for the vattr_t.  There
    was a relatively small amount of related xvattr_t code I was forced to
    comment out with HAVE_XVATTR.  But it didn't look that hard to come
    back soon and replace it all with a native Linux type.
    
    However, after going doing this path with xvattr some distance it
    clear that this code was woven in the ZPL more deeply than I thought.
    In particular its hooks went very deep in to the ZPL replay code
    and replacing it would not be as easy as I originally thought.
    
    Rather than continue persuing replacing and removing this code I've
    taken a step back and reevaluted things.  This commit reverts many of
    my previous commits which removed xvattr related code.  It restores
    much of the code to its original upstream state and now relies on
    improved xvattr_t support in the zfs package itself.
    
    The result of this is that much of the code which I had commented
    out, which accidentally broke things like replay, is now back in
    place and working.  However, there may be a small performance
    impact for getattr/setattr operations because they now require
    a translation from native Linux to Solaris types.  For now that's
    a price I'm willing to pay.  Once everything is completely functional
    we can revisting the issue of removing the vattr_t/xvattr_t types.
    
    Closes #111

[33mcommit 321a498b95f4a43a5553f53b435497f89fefc599[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 1 16:24:39 2011 -0800

    Add xvattr support
    
    With the removal of the minimal xvattr support from the spl this
    support needs to be replaced in the zfs package.  This is fairly
    easily accomplished by directly adding portions of the sys/vnode.h
    header from OpenSolaris.  These xvattr additions have been placed
    in the sys/xvattr.h header file and included as needed where simply
    a sys/vnode.h was included before.
    
    In additon to the xvattr types and helper macros two functions
    were also included.  The xva_init() and xva_getxoptattr() functions
    were included as static inline functions in xvattr.h.  They are
    simple enough and it was simpler to place them here rather than
    in their own .c file.

[33mcommit 9623f736d958b4a28613177e03095dbdde0cc4af[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 1 16:24:21 2011 -0800

    Remove caller_context_t
    
    Remove the remaining callers of caller_context_t.  This type has
    been removed because it is not needed for the Linux port.

[33mcommit a23cc0a443e3da417cc1894cd3e86946f1ff3add[m
Author: Darik Horn <dajhorn@vanadac.com>
Date:   Mon Feb 28 10:15:05 2011 -0600

    Add the zpool and filesystem versions
    
    Print the supported zpool and filesystem versions at module load
    time.  This change removes an ambiguity and adds information that
    system administrators care about.  The phrase "ZFS pool version %s"
    is the same as zpool upgrade -v so that the operator is familiar
    with the message.
    
      ZFS: Loaded module v0.6.0, ZFS pool version 28, ZFS filesystem version 5
      ZFS: Unloaded module v0.6.0
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit fdcd952b4d93f9c9d9ec89a95ef6e2964c27da95[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 25 11:26:41 2011 -0800

    Fix set block scheduler warnings
    
    There were two cases when attempting to set the vdev block device
    scheduler which would causes console warnings.
    
    The first case was when the vdev used a loop, ram, dm, or other
    such device which doesn't support a configurable scheduler.  In
    these cases attempting to set a scheduler is pointless and can
    be safely skipped.
    
    The secord case is slightly more troubling.  We were seeing
    transient cases where setting the elevator would return -EFAULT.
    On retry everything is fine so there appears to be a small window
    where this is possible.  To handle that case we silently retry
    up to three times before reporting the warning.
    
    In all of the above cases the warning is harmless and at worse you
    may see slightly different performance characteristics from one
    or more of your vdevs.

[33mcommit 4c0d8e50b99b4f3b4a9b7bc67ac7fc4e406f5755[m
Author: Fajar A. Nugraha <github@fajar.net>
Date:   Tue Feb 22 17:58:44 2011 +0700

    Use udev to create /dev/zvol/[dataset_name] links
    
    This commit allows zvols with names longer than 32 characters, which
    fixes issue on https://github.com/behlendorf/zfs/issues/#issue/102.
    
    Changes include:
    - use /dev/zd* device names for zvol, where * is the device minor
      (include/sys/fs/zfs.h, module/zfs/zvol.c).
    - add BLKZNAME ioctl to get dataset name from userland
      (include/sys/fs/zfs.h, module/zfs/zvol.c, cmd/zvol_id).
    - add udev rule to create /dev/zvol/[dataset_name] and the legacy
      /dev/[dataset_name] symlink. For partitions on zvol, it will create
      /dev/zvol/[dataset_name]-part* (etc/udev/rules.d/60-zvol.rules,
      cmd/zvol_id).
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 61da501f9d93f305d21d5d61fa3ecd476bdbac93[m
Author: Darik Horn <dajhorn@vanadac.com>
Date:   Thu Feb 24 11:08:35 2011 -0600

    Add the new blkdev_compat.h header to the DIST target.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit dc1d7665c54de024cf5ded1b835482dbc5f1ae38[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Feb 23 15:13:03 2011 -0800

    Remove rdev packing
    
    Remove custom code to pack/unpack dev_t's.  Under Linux all dev_t's
    are an unsigned 32-bit value even on 64-bit platforms.  The lower
    20 bits are used for the minor number and the upper 12 for the major
    number.
    
    This means if your importing a pool from Solaris you may get strange
    major/minor numbers.  But it doesn't really matter because even if
    we add compatibility code to translate the encoded Solaris major/minor
    they won't do you any good under Linux.  You will still need to
    recreate the dev_t with a major/minor which maps to reserved major
    numbers used under Linux.
    
    Dropping this code also resolves 32-bit builds by removing the
    offending 32-bit compatibility code.

[33mcommit 99c564bc48710ff2a6edbfcad16d3c3b89773111[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Feb 23 15:03:30 2011 -0800

    Use correct ASSERT3* variant
    
    ASSERT3P should be used instead of ASSERT3U when comparing
    pointers.  Using ASSERT3U with the cast causes a compiler
    warning for 32-bit builds which is fatal with --enable-debug.

[33mcommit 05ff35c602827a0f03659ec974c67b3fb5bf1c0b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Feb 23 13:57:50 2011 -0800

    Increase fragment size to block size
    
    The underlying storage pool actually uses multiple block
    size.  Under Solaris frsize (fragment size) is reported as
    the smallest block size we support, and bsize (block size)
    as the filesystem's maximum block size.  Unfortunately,
    under Linux the fragment size and block size are often used
    interchangeably.  Thus we are forced to report both of them
    as the filesystem's maximum block size.
    
    Closes #112

[33mcommit f6dcdf13f80ee039141ab92ae506bd4443111662[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Feb 23 13:03:19 2011 -0800

    Fix 'statement with no effect' warning
    
    Because the secpolicy_* macros are all currently defined to (0).
    And because the caller of this function does not check the return
    code.  The compiler complains that this statement has no effect
    which is correct and OK.  To suppress the warning explictly cast
    the result to (void).

[33mcommit 718d77f622463e1763c4f6d5cbfb7740d7e6968d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Feb 23 12:57:25 2011 -0800

    Fix uninitialized variable
    
    It was possible for rc to be unitialized in the parse_options()
    function which triggered a compiler warning.  Ensure rc is always
    initialized.

[33mcommit a31a70bbd1c3d6b27a68280e53103c5b9a8ebd65[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Feb 23 12:50:05 2011 -0800

    Fix enum compiler warning
    
    Generally it's a good idea to use enums for switch statements,
    but in this case it causes warning because the enum is really a
    set of flags.  These flags are OR'ed together in some cases
    resulting in values which are not part of the original enum.
    This causes compiler warning such as this about invalid cases.
    
      error: case value ‘33’ not in enumerated type ‘zprop_source_t’
    
    To handle this we simply case the enum to an int for the switch
    statement.  This leaves all other enum type checking in place
    and effectively disabled these warnings.

[33mcommit 45066d1f20a582fc8229776503b1cdd554d7fde4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Feb 22 14:55:35 2011 -0800

    Linux 2.6.38 compat, blkdev_get_by_path()
    
    The open_bdev_exclusive() function has been replaced (again) by the
    more generic blkdev_get_by_path() function.  Additionally, the
    counterpart function close_bdev_exclusive() has been replaced by
    blkdev_put().  Because these functions are more generic versions
    of the functions they replaced the compatibility macro must add
    the FMODE_EXCL mask to ensure they are exclusive.
    
    Closes #114

[33mcommit 61e909608d15dc6900a710a0ceab6e101a68ac5a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Feb 22 12:15:13 2011 -0800

    Linux 2.6.x compat, blkdev_compat.h
    
    For legacy reasons the zvol.c and vdev_disk.c Linux compatibility
    code ended up in sys/blkdev.h and sys/vdev_disk.h headers.  While
    there are worse places for this code to live it should be in a
    linux/blkdev_compat.h header.  This change moves this block device
    Linux compatibility code in to the linux/blkdev_compat.h header
    and updates all the correct #include locations.  This is not a
    functional change or bug fix, it is just code cleanup.

[33mcommit 075cf6cb72a460d884c29085413c3ea16a62d32d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 18 09:33:12 2011 -0800

    Prep zfs-0.6.0-rc1 tag
    
    Create the first 0.6.0 release candidate tag (rc1).  The Posix
    layer is now functional and passes fstest and several other
    test suites cleanly.  We now need this release candidate tag
    to broaden the test coverage before we can release the official
    zfs-0.6.0.

[33mcommit 5d0265c0dd54d798a35babe587ad5138392fe807[m
Merge: 54a179e 037849f
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 18 09:31:25 2011 -0800

    Merge branch 'zpl'

[33mcommit 037849f854c511d86e3564ed7000e6c6472d6f70[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Feb 17 14:17:44 2011 -0800

    Use provided uid/gid for setattr
    
    When changing the uid/gid of a file via zfs_setattr() use the
    Posix id passed in iattr->ia_uid/gid.  While the zfs_fuid_create()
    code already had the fuid support disabled for Linux it was
    returning the uid/gid from the credential.  With this change
    the 'chown' command which relies on setxattr is now working
    properly.
    
    Also remove a little stray white space which was in front of
    zfs_update_inode() call and the end of zfs_setattr().

[33mcommit efd1832bc615a4e32259e31d1c7ff0af14f5c1b2[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Feb 17 11:26:51 2011 -0800

    Fix symlink(2) inode reference count
    
    Under Linux sys_symlink(2) should result in a inode being created
    with one reference for the inode itself, and a second reference on
    the inode which is held by the new dentry.  Under Solaris this
    appears not to be the case.  Their zfs_symlink() handler drops
    the inode reference before returning.
    
    The result of this under Linux is that the reference count for
    symlinks is always one smaller than it should have been. This
    results in a BUG() when the symlink is unlinked.  To handle this
    the Linux port now keeps the inode reference which differs from
    the Solaris behavior.  This results in correct reference counts.
    
    Closes #96

[33mcommit 5095000169f695ea6b65d74da917c3f465d05aab[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Feb 17 09:48:06 2011 -0800

    Use -zfs_readlink() error
    
    The zfs_readlink() function returns a Solaris positive error value
    and that needs to be converted to a Linux negative error value.
    While in this case nothing would actually go wrong, it's still
    incorrect and should be fixed if for no other reason than clarity.

[33mcommit f03e41e8da6d184039ea3b03ba4937f4786a3f22[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Feb 17 09:21:39 2011 -0800

    Improve 'zpool import' safety
    
    There are three improvements here to 'zpool import' proposed by Fajar
    in Github issue #98.  They are all good so I'm commiting all three.
    
    1) Add descriptions for "hpet" and "core" blacklist entries.
    
    2) Add "core" to the blacklist, as described in the issue accessing
    this device will crash Xen dom0.
    
    3) Refine probing behavior to use fstatat64().  This allows us to
    determine if a device is a block device or a regular file without
    having to open it.  This is the safest appraoch when probing /dev/
    because the simple act of opening a device may have unexpected
    consequences.
    
    Closes #98

[33mcommit 8b4f9a2d55fc5ee28f69b29f2fece7d8e2cb5c7a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Feb 16 15:54:55 2011 -0800

    Fix readlink(2)
    
    This patch addresses three issues related to symlinks.
    
    1) Revert the zfs_follow_link() function to a modified version
    of the original zfs_readlink().  The only changes from the
    original OpenSolaris version relate to using Linux types.
    For the moment this means no vnode's and no zfsvfs_t.  The
    caller zpl_follow_link() was also updated accordingly.  This
    change was reverted because it was slightly gratuitious.
    
    2) Update zpl_follow_link() to use local variables for the
    link buffer.  I'd forgotten that iov.iov_base is updated by
    uiomove() so after the call to zfs_readlink() it can not longer
    be used.  We need our own private copy of the link pointer.
    
    3) Allocate MAXPATHLEN instead of MAXPATHLEN+1.  By default
    MAXPATHLEN is 4096 bytes which is a full page, adding one to
    it pushes it slightly over a page.  That means you'll likely
    end up allocating 2 pages which is wasteful of memory and
    possibly slightly slower.

[33mcommit 54a179e7b80413bd48cd2cd259110fb493d0215e[m
Author: Ricardo M. Correia <ricardo.correia@oracle.com>
Date:   Fri Jan 21 14:35:41 2011 -0800

    Add API to wait for pending commit callbacks
    
    This adds an API to wait for pending commit callbacks of already-synced
    transactions to finish processing.  This is needed by the DMU-OSD in
    Lustre during device finalization when some callbacks may still not be
    called, this leads to non-zero reference count errors.  See lustre.org
    bug 23931.

[33mcommit b9f6a49025809d658754c758dc7e2a81ee41271b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Feb 16 11:10:31 2011 -0800

    Update 'zfs.sh -u' to umount all zfs filesystems
    
    Before it is safe to unload the zfs module stack all mounted
    zfs filesystems must be unmounted.  If they are not unmounted,
    there will be references held on the modules and the stack cannot
    be removed.  To handle this have 'zfs.sh -u' which is used by all
    of the test scripts umount all zfs filesystem before attempting
    to unload the module stack.

[33mcommit 07bd86718b74b2d8e0f633f1b80e976892eaf329[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Feb 16 11:05:55 2011 -0800

    Suppress share error on mount
    
    Until code is added to support automatically sharing datasets
    we should return success instead of failure.  This prevents the
    command line tools from returning a non-zero error code.  While
    a user likely won't notice this, test scripts like zconfig.sh
    do and correctly fail because of it.

[33mcommit a6695d83b763aaeeeeb6d4bdb57ed59a384106f7[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Feb 16 09:55:53 2011 -0800

    Add get/setattr, get/setxattr hooks
    
    While the attr/xattr hooks were already in place for regular
    files this hooks can also apply to directories and special files.
    While they aren't typically used in this way, it should be
    supported.  This patch registers these additional callbacks
    for both directory and special inode types.

[33mcommit d8fd10545b677cb4b770674372c1e116b7c22c64[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Feb 16 09:51:44 2011 -0800

    Fix FIFO and socket handling
    
    Under Linux when creating a fifo or socket type device in the ZFS
    filesystem it's critical that the rdev is stored in a SA.  This
    was already being correctly done for character and block devices,
    but that logic needed to be extended to include FIFOs and sockets.
    
    This patch takes care of device creation but a follow on patch
    may still be required to verify that the dev_t is being correctly
    packed/unpacked from the SA.

[33mcommit d5674448094cec6eb3563afb63cc1e096bc5b280[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Feb 16 09:40:29 2011 -0800

    Create minors for all zvols
    
    It was noticed that when you have zvols in multiple datasets
    not all of the zvol devices are created at module load time.
    Fajarnugraha did the leg work to identify that the root cause of
    this bug is a non-zero return value from zvol_create_minors_cb().
    
    Returning a non-zero value from the dmu_objset_find_spa() callback
    function results in aborting processing the remaining children in
    a dataset.  Since we want to ensure that the callback in run on
    all children regardless of error simply unconditionally return
    zero from the zvol_create_minors_cb().  This callback function
    is solely used for this purpose so surpressing the error is safe.
    
    Closes #96

[33mcommit 2c395def2763ccc7a549d297f7f11bd304caaeae[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 11 13:46:10 2011 -0800

    Linux 2.6.36 compat, sops->evict_inode()
    
    The new prefered inteface for evicting an inode from the inode cache
    is the ->evict_inode() callback.  It replaces both the ->delete_inode()
    and ->clear_inode() callbacks which were previously used for this.

[33mcommit f9637c6c8b9c452c440a366aa937b363f027d95e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 11 10:33:01 2011 -0800

    Linux 2.6.33 compat, get/set xattr callbacks
    
    The xattr handler prototypes were sanitized with the idea being that
    the same handlers could be used for multiple methods.  The result of
    this was the inode type was changes to a dentry, and both the get()
    and set() hooks had a handler_flags argument added.  The list()
    callback was similiarly effected but no autoconf check was added
    because we do not use the list() callback.

[33mcommit 7268e1bec8478639b7a1047e02ab931f30bc2f92[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 11 08:58:55 2011 -0800

    Linux 2.6.35 compat, fops->fsync()
    
    The fsync() callback in the file_operations structure used to take
    3 arguments.  The callback now only takes 2 arguments because the
    dentry argument was determined to be unused by all consumers.  To
    handle this a compatibility prototype was added to ensure the right
    prototype is used.  Our implementation never used the dentry argument
    either so it's just a matter of using the right prototype.

[33mcommit 777d4af89137907adc91377327505f40c296035d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Feb 10 16:16:52 2011 -0800

    Linux 2.6.35 compat, const struct xattr_handler
    
    The const keyword was added to the 'struct xattr_handler' in the
    generic Linux super_block structure.  To handle this we define an
    appropriate xattr_handler_t typedef which can be used.  This was
    the preferred solution because it keeps the code clean and readable.

[33mcommit 1b94c25ceb12649b4b2ffb9a016e4f51cfa91736[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Feb 10 14:54:33 2011 -0800

    Prefer /lib/modules/$(uname -r)/ links
    
    Preferentially use the /lib/modules/$(uname -r)/source and
    /lib/modules/$(uname -r)/build links.  Only if neither of these
    links exist fallback to alternate methods for deducing which
    kernel to build with.  This resolves the need to manually
    specify --with-linux= and --with-linux-obj= on Debian systems.

[33mcommit afffb5cd102f340f3879f4d7af8988dd209b9b72[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Feb 10 12:11:05 2011 -0800

    MS_DIRSYNC and MS_REC compat
    
    It turns out that older versions of the glibc headers do not
    properly define MS_DIRSYNC despite it being explicitly mentioned
    in the man pages.  They instead call it S_WRITE, so for system
    where this is not correct defined map MS_DIRSYNC to S_WRITE.
    At the time of this commit both Ubuntu Lucid, and Debian Squeeze
    both use the out of date glibc headers.
    
    As for MS_REC this field is also not available in the older headers.
    Since there is no obvious mapping in this case we simply disable
    the recursive mount option which used it.

[33mcommit 1ac0ea38a5b19771b0dfbc6b2244c4f674ef1a31[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Feb 10 10:57:29 2011 -0800

    Add missing -ldl linker option
    
    The inclusion on dlsym(), dlopen(), and dlclose() symbols require
    us to link against the dl library.  Be careful to add the flag to
    both the libzfs library and the commands which depend on the library.

[33mcommit 6c9e06f14de1ed27e6032be2197b8f4cbec7405a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Feb 8 15:40:52 2011 -0800

    Update AUTHORS file
    
    This file has gotten stale and needed to be updated.  There are
    individuals who deserve to be recognized for their contributions
    to the project.  I've done my best to assemble names from the
    commit logs of those who have submitted patches.  This list may
    not be comprehensive, if you feel I've overlooked your contribution
    please let me know and we can get your name added.

[33mcommit 6839eed23e3c9d85cf0de767be32af0759e5bf2d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Feb 7 13:54:59 2011 -0800

    Use 'noop' IO Scheduler
    
    Initial testing has shown the the right IO scheduler to use under Linux
    is noop.  This strikes the ideal balance by allowing the zfs elevator
    to do all request ordering and prioritization.  While allowing the
    Linux elevator to do the maximum front/back merging allowed by the
    physical device.  This yields the largest possible requests for the
    device with the lowest total overhead.
    
    While 'noop' should be right for your system you can choose a different
    IO scheduler with the 'zfs_vdev_scheduler' option.  You may set this
    value to any of the standard Linux schedulers: noop, cfq, deadline,
    anticipatory.  In addition, if you choose 'none' zfs will not attempt
    to change the IO scheduler for the block device.

[33mcommit 4db77a74a6a26c57a04f98c4a23b9fda9319ba9f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Feb 7 12:21:29 2011 -0800

    Suppress large kmem_alloc() warning
    
    The following warning was observed under normal operation.  It's
    not fatal but it's something to be addressed long term.  Flag the
    offending allocation with KM_NODEBUG to suppress the warning and
    flag the call site.
    
    SPL: Showing stack for process 21761
    Pid: 21761, comm: iozone Tainted: P           ----------------
    2.6.32-71.14.1.el6.x86_64 #1
    Call Trace:
     [<ffffffffa05465a7>] spl_debug_dumpstack+0x27/0x40 [spl]
     [<ffffffffa054a84d>] kmem_alloc_debug+0x11d/0x130 [spl]
     [<ffffffffa05de166>] dmu_buf_hold_array_by_dnode+0xa6/0x4e0 [zfs]
     [<ffffffffa05de825>] dmu_buf_hold_array+0x65/0x90 [zfs]
     [<ffffffffa05de891>] dmu_read_uio+0x41/0xd0 [zfs]
     [<ffffffffa0654827>] zfs_read+0x147/0x470 [zfs]
     [<ffffffffa06644a2>] zpl_read_common+0x52/0x70 [zfs]
     [<ffffffffa0664503>] zpl_read+0x43/0x70 [zfs]
     [<ffffffff8116d905>] vfs_read+0xb5/0x1a0
     [<ffffffff8116da41>] sys_read+0x51/0x90
     [<ffffffff81013172>] system_call_fastpath+0x16/0x1b

[33mcommit f44b46a632d5b332d993faaeb16fe30650619803[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Feb 7 12:09:23 2011 -0800

    Update META to 0.6.0
    
    Roll the version forward to 0.6.0, the addition of the Posix
    layer warrents updating the major version number.

[33mcommit ceb43b935d6c4f4f6509623c7498d5dcc40ea813[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 4 16:54:34 2011 -0800

    Invalidate dcache and inode cache
    
    When performing a 'zfs rollback' it's critical to invalidate
    the previous dcache and inode cache.  If we don't there will
    stale cache entries which when accessed will result in EIOs.

[33mcommit b3b4f547f9243c0c1a446c74574a1f737e29dee6[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 4 16:17:54 2011 -0800

    Remove useless libefi warnings
    
    These two warnings in libefi serve no real purpose.  When running
    without DEBUG they are already supressed, and even when DEBUG is
    enabled all they indicate is the device doesn't already have an
    EFI label.  For a Linux machine this is probably the common case.

[33mcommit 8926ab7a50d60d855e4d49d2ed7bdef49dd56149[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Feb 4 14:38:11 2011 -0800

    Move cv_destroy() outside zp->z_range_lock()
    
    With the recent SPL change (d599e4fa) that forces cv_destroy()
    to block until all waiters have been woken.  It is now unsafe
    to call cv_destroy() under the zp->z_range_lock() because it
    is used as the condition variable mutex.  If there are waiters
    cv_destroy() will block until they wake up and aquire the mutex.
    However, they will never aquire the mutex because cv_destroy()
    will not return allowing it's caller to drop the lock.  Deadlock.
    
    To avoid this cv_destroy() is now run asynchronously in a taskq.
    This solves two problems:
    
    1) It is no longer run under the zp->z_range_lock so no deadlock.
    2) Since cv_destroy() may now block we don't want this slowing
       down zfs_range_unlock() and throttling the system.
    
    This was not as much of an issue under OpenSolaris because their
    cv_destroy() implementation does not do anything.  They do however
    risk a bad paging request if cv_destroy() returns, the memory holding
    the condition variable is free'd, and then the waiters wake up and
    try to reference it.  It's a very small unlikely race, but it is
    possible.

[33mcommit c0d35759c5ab1abaa6b72062cc4ecd0d86628de8[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Feb 3 10:34:05 2011 -0800

    Add mmap(2) support
    
    It's worth taking a moment to describe how mmap is implemented
    for zfs because it differs considerably from other Linux filesystems.
    However, this issue is handled the same way under OpenSolaris.
    
    The issue is that by design zfs bypasses the Linux page cache and
    leaves all caching up to the ARC.  This has been shown to work
    well for the common read(2)/write(2) case.  However, mmap(2)
    is problem because it relies on being tightly integrated with the
    page cache.  To handle this we cache mmap'ed files twice, once in
    the ARC and a second time in the page cache.  The code is careful
    to keep both copies synchronized.
    
    When a file with an mmap'ed region is written to using write(2)
    both the data in the ARC and existing pages in the page cache
    are updated.  For a read(2) data will be read first from the page
    cache then the ARC if needed.  Neither a write(2) or read(2) will
    will ever result in new pages being added to the page cache.
    
    New pages are added to the page cache only via .readpage() which
    is called when the vfs needs to read a page off disk to back the
    virtual memory region.  These pages may be modified without
    notifying the ARC and will be written out periodically via
    .writepage().  This will occur due to either a sync or the usual
    page aging behavior.  Note because a read(2) of a mmap'ed file
    will always check the page cache first even when the ARC is out
    of date correct data will still be returned.
    
    While this implementation ensures correct behavior it does have
    have some drawbacks.  The most obvious of which is that it
    increases the required memory footprint when access mmap'ed
    files.  It also adds additional complexity to the code keeping
    both caches synchronized.
    
    Longer term it may be possible to cleanly resolve this wart by
    mapping page cache pages directly on to the ARC buffers.  The
    Linux address space operations are flexible enough to allow
    selection of which pages back a particular index.  The trick
    would be working out the details of which subsystem is in
    charge, the ARC, the page cache, or both.  It may also prove
    helpful to move the ARC buffers to a scatter-gather lists
    rather than a vmalloc'ed region.
    
    Additionally, zfs_write/read_common() were used in the readpage
    and writepage hooks because it was fairly easy.  However, it
    would be better to update zfs_fillpage and zfs_putapage to be
    Linux friendly and use them instead.

[33mcommit cc5f931cfd623c50f283fa5cf1bc21cfd7e5c703[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jan 26 12:10:01 2011 -0800

    Add Hooks for Linux Xattr Operations
    
    The Linux specific xattr operations have all been located in the
    file zpl_xattr.c.  These functions primarily rely on the reworked
    zfs_* functions to do their job.  They are also responsible for
    converting the possible Solaris style error codes to negative
    Linux errors.

[33mcommit 51f0bbe425f7313a19ee54ccd3d67ed8ba686567[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jan 26 12:09:10 2011 -0800

    Add Hooks for Linux Super Block Operations
    
    The Linux specific super block operations have all been located in the
    file zpl_super.c.  These functions primarily rely on the reworked
    zfs_* functions to do their job.  They are also responsible for
    converting the possible Solaris style error codes to negative
    Linux errors.

[33mcommit ee154f01bf0bdb5e85524c518c19964272d33cd9[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jan 26 12:08:24 2011 -0800

    Add Hooks for Linux Inode Operations
    
    The Linux specific inode operations have all been located in the
    file zpl_inode.c.  These functions primarily rely on the reworked
    zfs_* functions to do their job.  They are also responsible for
    converting the possible Solaris style error codes to negative
    Linux errors.

[33mcommit 1efb473f8919c5f195e127136b79c6d3b1eb1c81[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jan 26 12:03:58 2011 -0800

    Add Hooks for Linux File Operations
    
    The Linux specific file operations have all been located in the
    file zpl_file.c.  These functions primarily rely on the reworked
    zfs_* functions to do their job.  They are also responsible for
    converting the possible Solaris style error codes to negative
    Linux errors.
    
    This first zpl_* commit also includes a common zpl.h header with
    minimal entries to register the Linux specific hooks.  In also
    adds all the new zpl_* file to the Makefile.in.  This is not a
    standalone commit, you required the following zpl_* commits.

[33mcommit 633e8030b3582f3579a457a803c1382fc81f56e5[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Feb 8 11:33:08 2011 -0800

    Wrap with HAVE_XVATTR
    
    For the moment exactly how to handle xvattr is not clear.  This
    change largely consists of the code to comment out the offending
    bits until something reasonable can be done.

[33mcommit 3c4988c83e4f278cd6c8076f6cdb8e4858d05840[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Feb 8 11:29:50 2011 -0800

    Add zp->z_is_zvol flag
    
    A new flag is required for the zfs_rlock code to determine if
    it is operation of the zvol of zpl dataset.  This used to be
    keyed off the zp->z_vnode, which was a hack to begin with, but
    with the removal of vnodes we needed a dedicated flag.

[33mcommit 3558fd73b5d863304102f6745c26e0b592aca60a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Feb 8 11:16:06 2011 -0800

    Prototype/structure update for Linux
    
    I appologize in advance why to many things ended up in this commit.
    When it could be seperated in to a whole series of commits teasing
    that all apart now would take considerable time and I'm not sure
    there's much merrit in it.  As such I'll just summerize the intent
    of the changes which are all (or partly) in this commit.  Broadly
    the intent is to remove as much Solaris specific code as possible
    and replace it with native Linux equivilants.  More specifically:
    
    1) Replace all instances of zfsvfs_t with zfs_sb_t.  While the
    type is largely the same calling it private super block data
    rather than a zfsvfs is more consistent with how Linux names
    this.  While non critical it makes the code easier to read when
    your thinking in Linux friendly VFS terms.
    
    2) Replace vnode_t with struct inode.  The Linux VFS doesn't have
    the notion of a vnode and there's absolutely no good reason to
    create one.  There are in fact several good reasons to remove it.
    It just adds overhead on Linux if we were to manage one, it
    conplicates the code, and it likely will lead to bugs so there's
    a good change it will be out of date.  The code has been updated
    to remove all need for this type.
    
    3) Replace all vtype_t's with umode types.  Along with this shift
    all uses of types to mode bits.  The Solaris code would pass a
    vtype which is redundant with the Linux mode.  Just update all the
    code to use the Linux mode macros and remove this redundancy.
    
    4) Remove using of vn_* helpers and replace where needed with
    inode helpers.  The big example here is creating iput_aync to
    replace vn_rele_async.  Other vn helpers will be addressed as
    needed but they should be be emulated.  They are a Solaris VFS'ism
    and should simply be replaced with Linux equivilants.
    
    5) Update znode alloc/free code.  Under Linux it's common to
    embed the inode specific data with the inode itself.  This removes
    the need for an extra memory allocation.  In zfs this information
    is called a znode and it now embeds the inode with it.  Allocators
    have been updated accordingly.
    
    6) Minimal integration with the vfs flags for setting up the
    super block and handling mount options has been added this
    code will need to be refined but functionally it's all there.
    
    This will be the first and last of these to large to review commits.

[33mcommit 6149f4c45fc905761a6f636ea9e14ff76ce6c842[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Feb 8 10:39:06 2011 -0800

    Remove dmu_write_pages() support
    
    For the moment we do not use dmu_write_pages() to write pages
    directly in to a dmu object.  It may be required at some point
    in the future, but for now is simplest and cleanest to drop it.
    It can be easily readded if/when needed.

[33mcommit eb28321e2d8952290db7dceb66d7761d528788e3[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jan 26 12:49:58 2011 -0800

    Create a root znode without VFS dependencies
    
    For portability reasons it's handy to be able to create a root
    znode and basic filesystem components without requiring the full
    cooperation of the VFS.  We are committing to this to simply the
    filesystem creations code.

[33mcommit bcf308227c9aa51ef9d5a1fe3f2f1342ff2aee94[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jan 26 12:45:24 2011 -0800

    Remove zfs_ctldir.[ch]
    
    This code is used for snapshot and heavily leverages Solaris
    functionality we do not want to reimplement.  These files have
    been removed, including references to them, and will be replaced
    by a zfs_snap.c/zpl_snap.c implementation which handles snapshots.

[33mcommit b516a07b997a8c3006788963f6b6128e505cf56c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jan 6 14:53:21 2011 -0800

    Disable fuid features
    
    These features should probably be enabled in the Linux zpl code.
    For now I'm disabling them until it's clear what needs to be done.

[33mcommit d5e53f9d06d149fbb62920bb5af766059dc35341[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jan 6 14:07:41 2011 -0800

    Disable zfs_sync during oops/panic
    
    Minor update to ensure zfs_sync() is disabled if a kernel oops/panic
    is triggered.  As the comment says 'data integrity is job one'.  This
    change could have been done by defining panicstr to oops_in_progress
    in the SPL.  But I felt it was better to use the native Linux API
    here since to be clear.

[33mcommit acb53769403aa896b022129f1bdb3d845a4d0201[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jan 5 16:38:30 2011 -0800

    Disable Shutdown/Reboot
    
    This support has been disable with HAVE_SHUTDOWN.  We can support
    this at some point by adding the needed reboot notifiers.

[33mcommit cb28b3494e88e0e43c43588fccfa6526344b9a64[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jan 6 14:15:48 2011 -0800

    Remove SYNC_ATTR check
    
    This flag does not need to be support under Linux.  As the comment
    says it was only there to support fsflush() for old filesystem like
    UFS.  This is not needed under Linux.

[33mcommit e15c02301489477c9201a80afac46791d20bd070[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jan 6 12:56:48 2011 -0800

    Remove mount options
    
    Mount option parsing is still very Linux specific and will be
    handled above this zfs filesystem layer.  Honoring those mount
    options once set if of course the responsibility of the lower
    layers.

[33mcommit d7cafa8e3e8973bca6b2ebabafb669508031075e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jan 5 17:00:34 2011 -0800

    Remove zfs_active_fs_count
    
    This variable was used to ensure that the ZFS module is never
    removed while the filesystem is mounted.  Once again the generic
    Linux VFS handles this case for us so it can be removed.

[33mcommit 42ab36aa368b09dfec7214cc884b004ee934b2df[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jan 5 16:56:49 2011 -0800

    Remove unused mount functions
    
    The functions zfs_mount_label_policy(), zfs_mountroot(), zfs_mount()
    will not be needed because most of what they do is already handled
    by the generic Linux VFS layer.  They all call zfs_domount() which
    creates the actual dataset, the caller of this library call which
    will be in the zpl layer is responsible for what's left.

[33mcommit c0b3dc7d0797ce2d08df7e07fff15298e957270c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jan 5 16:24:57 2011 -0800

    Remove zfs_major/zfs_minor/zfsfstype
    
    Under Linux we don't need to reserve a major or minor number for
    the filesystem.  We can rely on the VFS to handle colisions without
    this being handled by the lower ZFS layers.
    
    Additionally, there is no need to keep a zfsfstype around.  We are
    not limited on Linux by the OpenSolaris infrastructure which needed
    this.  The upper zpl layer can specify the filesystem type.

[33mcommit 4b3f12ecd5a641b182609d7fe78313d53f6e8976[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jan 5 14:46:59 2011 -0800

    Remove Solaris VFS Hooks
    
    The ZFS code is being restructured to act as a library and a stand
    alone module.  This allows us to leverage most of the existing code
    with minimal modification.  It also means we need to drop the Solaris
    vfs/vnode functions they will be replaced by Linux equivilants and
    updated to be Linux friendly.

[33mcommit 960e08fe3e2cdf5217996b9f42a01f7e20f2b97a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jan 5 14:27:30 2011 -0800

    VFS: Add zfs_inode_update() helper
    
    For the moment we have left ZFS unchanged and it updates many values
    as part of the znode.  However, some of these values should be set
    in the inode.  For the moment this is handled by adding a function
    called zfs_inode_update() which updates the inode based on the znode.
    
    This is considered a workaround until we can systematically go
    through the ZFS code and have it directly update the inode.  At
    which point zfs_update_inode() can be dropped entirely.  Keeping
    two copies of the same data isn't only inefficient it's a breeding
    ground for bugs.

[33mcommit 7304b6e50f656fbf4b126a4e94deac174133851c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jan 5 13:16:12 2011 -0800

    VFS: Integrate zfs_znode_alloc()
    
    Under Linux the convention for filesystem specific data structure is
    to embed it along with the generic vfs data structure.  This differs
    significantly from Solaris.
    
    Since we want to integrates as cleanly with the Linux VFS as possible.
    This changes modifies zfs_znode_alloc() to allocate a znode with an
    embedded inode for use with the generic VFS.  This is done by calling
    iget_locked() which will allocate a new inode if needed by calling
    sb->alloc_inode().  This function allocates enough memory for a
    znode_t by returns a pointer to the inode structure for Linux's VFS.
    This function is also responsible for setting the callback
    znode->z_set_ops_inodes() which is used to register the correct
    handlers for the inode.

[33mcommit 10c6047ea56445a87d8ce1397ac2d2caa97719ca[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Dec 21 16:28:11 2010 -0800

    Enable zfs_znode compilation
    
    Basic compilation of the bulk of zfs_znode.c has been enabled.  After
    much consideration it was decided to convert the existing vnode based
    interfaces to more friendly Linux interfaces.  The following commits
    will systematically replace update the requiter interfaces.  There
    are of course pros and cons to this decision.
    
    Pros:
    * This simplifies intergration with Linux in the long term.  There is
      no longer any need to manage vnodes which are a foreign concept to
      the Linux VFS.
    * Improved long term maintainability.
    * Minor performance improvements by removing vnode overhead.
    
    Cons:
    * Added work in the short term to modify multiple ZFS interfaces.
    * Harder to pull in changes if we ever see any new code from Solaris.
    * Mixed Solaris and Linux interfaces in some ZFS code.

[33mcommit a405c8a665bf7d96880c97bcb783cf84d04e3e76[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Dec 17 15:21:18 2010 -0800

    ACL related changes
    
    A small collection of ACL related changes related to not
    supporting fuid mapping.  This whole are will need to be
    closely investigated.

[33mcommit 3fc050aaf2bc2e11844268ae0c091e6eb56108e5[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Dec 17 15:26:17 2010 -0800

    Init/destroy tsd
    
    Add missing tsd_destroy() call for rrw_tsd_key to avoid a leak.

[33mcommit 8299a1f41eb4761cd25ea821830295a6f32be581[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jan 18 11:42:25 2011 -0800

    Add Linux Compat Infrastructure
    
    Lay the initial ground work for a include/linux/ compatibility
    directory.  This was less critical in the past because the bulk
    of the ZFS code consumes the Solaris API via the SPL.  This API
    was stable and the bulk Linux API differences were handled in
    the SPL.
    
    However, with the addition of a full Posix layer written directly
    against the Linux APIs we are going to need more compatibility
    code.  It makes sense that all this code should be cleanly located
    in one place.  Subsequent patches should move the existing zvol
    and vdev_disk compatibility code in to this directory.

[33mcommit ab892c5f0ad7c2ee291693cf61dfc9601a2472d0[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Dec 22 10:07:03 2010 -0800

    Replace VOP_* calls with direct zfs_* calls
    
    These generic Solaris wrappers are no longer required.  Simply
    directly call the correct zfs functions for clarity.

[33mcommit 590329b50cda53cad87a4222d55cdbb35bfcf494[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Dec 22 12:13:57 2010 -0800

    Add basic uio support
    
    This code originates in OpenSolaris and was modified by KQ Infotech
    to be compatible with Linux.  While supporting uios in the short
    term is useful to get something working this is not an abstraction
    we want to keep.  This code is expected to be short lived and
    removed as soon as all the remaining uio based APIs and updated.

[33mcommit 538f669f63e43b1d2a288c872a66b9d18b4a4bee[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Jan 12 12:51:48 2011 -0800

    Add trivial acl helpers
    
    The zfs acl code makes use of the two OpenSolaris helper functions
    acl_trivial_access_masks() and ace_trivial_common().  Since they are
    only called from zfs_acl.c I've brought them over from OpenSolaris
    and added them as static function to this file.  This way I don't
    need to reimplement this functionality from scratch in the SPL.
    
    Long term once I take a more careful look at the acl implementation
    it may be the case that these functions really aren't needed.  If
    that turns out to be the case they can then be removed.

[33mcommit c60bc1fbf0760c9797411e10c05426fc41052f0a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Dec 21 14:38:27 2010 -0800

    Remove dead ACL code
    
    The following code was unused which caused gcc to complain.
    Since it was deadcode it has simply been removed.

[33mcommit 4e1b54fdde35e952ea7084a4640e08c6e42f8a94[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jan 6 16:49:45 2011 -0800

    Remove zfs_parse_bootfs() support
    
    Remove unneeded bootfs functions.  This support shouldn't be required
    for the Linux port, and even if it is it would need to be reworked
    to integrate cleanly with Linux.

[33mcommit 9ee7fac5312f9c6b33155aed77e50b0dfd68a77d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jan 7 11:51:27 2011 -0800

    VFS: Wrap with HAVE_SHARE
    
    Certain NFS/SMB share functionality is not yet in place.  These
    functions used to be wrapped with the generic HAVE_ZPL to prevent
    them from being compiled.  I still don't want them compiled but
    I'm working toward eliminating the use of HAVE_ZPL.  So I'm just
    renaming the wrapper here to HAVE_SHARE.  They still won't be
    compiled until all the share issues are worked through.  Share
    support is the last missing piece from zfs_ioctl.c.

[33mcommit bc3e15e386a62c29e10194e5fae3c4f8a76337df[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jan 6 16:47:31 2011 -0800

    Wrap with HAVE_MLSLABEL
    
    The zfs_check_global_label() function is part of the HAVE_MLSLABEL
    support which was previously commented out by a HAVE_ZPL check.
    Since we're still deciding what to do about mls labels wrap it
    with the preexisting macro to keep it compiled out.

[33mcommit 5649246dd3ba02041c83f7bab1c19c5815f9b771[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jan 7 12:40:30 2011 -0800

    Remove znode move functionality
    
    Unlike Solaris the Linux implementation embeds the inode in the
    znode, and has no use for a vnode.  So while it's true that fragmention
    of the znode cache may occur it should not be worse than any of the
    other Linux FS inode caches.  Until proven that this is a problem it's
    just added complexity we don't need.

[33mcommit f30484afc32b6040a15fabfc697cfb76116e468f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jan 7 13:47:47 2011 -0800

    Conserve stack in zfs_mkdir()
    
    Move the sa_attrs array from the stack to the heap to minimize stack
    space usage.

[33mcommit 1ee1b76786aebc6eed546c6e869cc88f1e318890[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Dec 17 14:21:46 2010 -0800

    Conserve stack in zfs_sa_upgrade()
    
    As always under Linux stack space is at a premium.  Relocate two
    20 element sa_bulk_attr_t arrays in zfs_sa_upgrade() from the stack
    to the heap.

[33mcommit e5c39b95a7ccc19ce7a3af8d8d09f0b8959a3991[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Dec 17 11:18:08 2010 -0800

    Export required vfs/vn symbols

[33mcommit 72d5e2da3e45a6865806f1be908232f5fea8787b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Dec 17 14:04:40 2010 -0800

    Add HAVE_SCANSTAMP
    
    This functionality is not supported under Linux, perhaps it
    will be some day if it's decided it's useful.

[33mcommit 872e8d26978a8e1caa1ca7d931db7f95d987a3e7[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Dec 17 09:14:38 2010 -0800

    Add initial rw_uio functions to the dmu
    
    These functions were dropped originally because I felt they would
    need to be rewritten anyway to avoid using uios.  However, this
    patch readds then with they dea they can just be reworked and
    the uio bits dropped.

[33mcommit b4ead57cfb410247eee4d2a8a6e488cf4542ac77[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 16 15:11:40 2010 -0800

    Remove HAVE_ZPL from commands and libraries
    
    Thanks to the previous few commits we can now build all of the
    user space commands and libraries with support for the zpl.

[33mcommit 9a616b5d17185c7fa5cd0d39ff8bc101cad8466d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 16 15:43:37 2010 -0800

    Documentation updates
    
    Minor Linux specific documentation updates to the comments and
    man pages.

[33mcommit c5d915f4237bbd1f5623b5044a1924a3cb91852b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 16 13:47:30 2010 -0800

    Minimal libshare infrastructure
    
    ZFS even under Solaris does not strictly require libshare to be
    available.  The current implementation attempts to dlopen() the
    library to access the needed symbols.  If this fails libshare
    support is simply disabled.
    
    This means that on Linux we only need the most minimal libshare
    implementation.  In fact just enough to prevent the build from
    failing.  Longer term we can decide if we want to implement a
    libshare library like Solaris.  At best this would be an abstraction
    layer between ZFS and NFS/SMB.  Alternately, we can drop libshare
    entirely and directly integrate ZFS with Linux's NFS/SMB.
    
    Finally the bare bones user-libshare.m4 test was dropped.  If we
    do decide to implement libshare at some point it will surely be
    as part of this package so the check is not needed.

[33mcommit 3fb1fcdea167d705e050a0383ec61b95fbe8a0ed[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 16 16:16:25 2010 -0800

    Add 'zfs mount' support
    
    By design the zfs utility is supposed to handle mounting and unmounting
    a zfs filesystem.  We could allow zfs to do this directly.  There are
    system calls available to mount/umount a filesystem.  And there are
    library calls available to manipulate /etc/mtab.  But there are a
    couple very good reasons not to take this appraoch... for now.
    
    Instead of directly calling the system and library calls to (u)mount
    the filesystem we fork and exec a (u)mount process.  The principle
    reason for this is to delegate the responsibility for locking and
    updating /etc/mtab to (u)mount(8).  This ensures maximum portability
    and ensures the right locking scheme for your version of (u)mount
    will be used.  If we didn't do this we would have to resort to an
    autoconf test to determine what locking mechanism is used.
    
    The downside to using mount(8) instead of mount(2) is that we lose
    the exact errno which was returned by the kernel.  The return code
    from mount(8) provides some insight in to what went wrong but it
    not quite as good.  For the moment this is translated as a best
    guess in to a errno for the higher layers of zfs.
    
    In the long term a shared library called libmount is under development
    which provides a common API to address the locking and errno issues.
    Once the standard mount utility has been updated to use this library
    we can then leverage it.  Until then this is the only safe solution.
    
      http://www.kernel.org/pub/linux/utils/util-linux/libmount-docs/index.html

[33mcommit feb46b92a7619a3bb67b925e24184fe70464d261[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 16 15:47:40 2010 -0800

    Open up libzfs_run_process/libzfs_load_module
    
    Recently helper functions were added to libzfs_util to load a kernel
    module or execute a process.  Initially this functionality was limited
    to libzfs but it has become clear there will be other consumers.  This
    change opens up the interface so it may be used where appropriate.

[33mcommit 95c4cae39fd77b5b00810eb976c9a6462d86ccd4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 16 12:56:10 2010 -0800

    Disable umount.zfs helper
    
    For the moment, the only advantage in registering a umount helper
    would be to automatically unshare a zfs filesystem.  Since under
    Linux this would be unexpected (but nice) behavior there is no
    harm in disabling it.
    
    This is desirable because the 'zfs unmount' path invokes the system
    umount.  This is done to ensure correct mtab locking but has the
    side effect that the umount.zfs helper would be called if it exists.
    By default this helper calls back in to zfs to do the unmount on
    Solaris which we don't want under Linux.
    
    Once libmount is available and we have a safe way to correctly
    lock and update the /etc/mtab file we can reconsider the need
    for a umount helper.  Using libmount is the prefered solution.

[33mcommit 3b8cfee8af1d966eea75389e2a2e53a5a8dca600[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Dec 8 16:40:11 2010 -0800

    Enable mount.zfs helper
    
    While not strictly required to mount a zfs filesystem using a
    mount helper has certain advantages.
    
    First, we need it if we want to honor the mount behavior as found
    on Solaris.  As part of the mount we need to validate that the
    dataset has the legacy mount property set if we are using 'mount'
    instead of 'zfs mount'.
    
    Secondly, by using a mount helper we can automatically load the
    zpl kernel module.  This way you can just issue a 'mount' or
    'zfs mount' and it will just work.
    
    Finally, it gives us common hook in user space to add any zfs
    specific mount options we might want.  At the moment we don't
    have any but now the infrastructure is at least in place.

[33mcommit b3259b6a2ba29595dc5f2df0f6def8c7fc6bcb98[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 16 14:26:08 2010 -0800

    Autoconf selinux support
    
    If libselinux is detected on your system at configure time link
    against it.  This allows us to use a library call to detect if
    selinux is enabled and if it is to pass the mount option:
    
      "context=\"system_u:object_r:file_t:s0"
    
    For now this is required because none of the existing selinux
    policies are aware of the zfs filesystem type.  Because of this
    they do not properly enable xattr based labeling even though
    zfs supports all of the required hooks.
    
    Until distro's add zfs as a known xattr friendly fs type we
    must use mntpoint labeling.  Alternately, end users could modify
    their existing selinux policy with a little guidance.

[33mcommit 95c73795b001267d6b683b71e8abe51de4b0c938[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jan 7 12:24:03 2011 -0800

    Fix ZVOL rename minor devices
    
    During a rename we need to be careful to destroy and create a
    new minor for the ZVOL _only_ if the rename succeeded.  The previous
    code would both destroy you minor device unconditionally, it would
    also fail to create the new minor device on success.

[33mcommit 149e873ab174ded1f632f2b2eb2267593517c7ca[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 16 14:05:42 2010 -0800

    Fix minor compiler warnings
    
    These compiler warnings were introduced when code which was
    previously #ifdef'ed out by HAVE_ZPL was re-added for use
    by the posix layer.  All of the following changes should be
    obviously correct and will cause no semantic changes.

[33mcommit 683fe41fc718fd43f57aa9ca76457fe34e62057c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Dec 10 12:54:30 2010 -0800

    Add missing mkdirp prototype
    
    For while now mkdirp has been built as part of libspl however
    the protoype was never added to libgen.h.  This went unnoticed
    until enabling the mount support which uses mkdirp().

[33mcommit 5b63b3eb6f42f3d9f6a19b22c3f10f72927eeacc[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Dec 10 12:00:00 2010 -0800

    Use cv_timedwait_interruptible in arc
    
    The issue is that cv_timedwait() sleeps uninterruptibly to block signals
    and avoid waking up early.  Under Linux this counts against the load
    average keeping it artificially high.  This change allows the arc to
    sleep interruptibly which mean it may be woken up early due to a signal.
    
    Normally this means some extra care must be taken to handle a potential
    signal.  But for the arcs usage of cv_timedwait() there is no harm in
    waking up before the timeout expires so no extra handling is required.

[33mcommit 8d4e8140ef67fa9c8fa0b1d0f5b1d5d36c747969[m
Author: Ricardo M. Correia <ricardo.correia@oracle.com>
Date:   Tue Dec 14 09:50:37 2010 -0800

    Fix block device-related issues in zdb.
    
    Specifically, this fixes the two following errors in zdb when a pool
    is composed of block devices:
    
    1) 'Value too large for defined data type' when running 'zdb <dataset>'.
    2) 'character device required' when running 'zdb -l <block-device>'.
    
    Signed-off-by: Ricardo M. Correia <ricardo.correia@oracle.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit a7dc7e5d5a5c4a68266b3d9ce89c6c53c04b1741[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Dec 7 16:05:25 2010 -0800

    Enable rrwlock.c compilation
    
    With the addition of the thread specific data interfaces to the
    SPL it is safe to enable compilation of the re-enterant read
    reader/writer locks.

[33mcommit 135cf6a8ae587855c8df803549c81dc60ccc12b5[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Dec 7 15:33:12 2010 -0800

    Refresh autogen.sh products
    
    Refresh the autogen.sh products based on the versions which are
    installed by default in the GA RHEL6.0 release.
    
    autoconf (GNU Autoconf) 2.63
    automake (GNU automake) 1.11.1
    ltmain.sh (GNU libtool) 2.2.6b

[33mcommit 31165fd9aacefb0f606ced8265de34247e9f9bc5[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Tue Nov 23 11:19:57 2010 -0800

    Remove partition from vdev name in zfault.sh
    
    As of the 0.5.2 tag, names of whole-disk vdevs must be specified to
    the command line tools without partition identifiers.  This commit
    fixes a 'zpool online' command in zfault.sh that incorrectly includes
    he partition in the vdev name, causing test 9 to fail.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 5e7affae52365f9f329cc63a53ae570352c4d993[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Nov 12 09:33:17 2010 -0800

    Skip /dev/hpet during 'zpool import'
    
    If libblkid does not contain ZFS support, then 'zpool import' will scan
    all block devices in /dev/ to determine which ones are components of a
    ZFS filesystem.  It does this by opening all the devices and stat'ing
    them to determine which ones are block devices.  If the device turns
    out not to be a block device it is skipped.
    
    Usually, this whole process is pretty harmless (although slow).  But
    there are certain devices in /dev/ which must be handled in a very
    specific way or your system may crash.  For example, if /dev/watchdog
    is simply opened the watchdog timer will be started and your system
    will panic when the timer expires.
    
    It turns out the /dev/hpet causes similiar problems although only when
    accessed under a virtual machine.  For some reason accessing /dev/hpet
    causes qemu to crash.  To address this issue this commit adds /dev/hpet
    to the device blacklist, it will be skipped solely based on its name.

[33mcommit e0f3df67e5174cd51284f0c26779046facfc95e0[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Nov 11 10:22:36 2010 -0800

    Add '-ts' options to zconfig.sh/zfault.sh usage
    
    When adding this functionality originally the options to only
    run specific tests (-t), or conversely skip specific tests (-s)
    were omitted from the usage page.  This commit adds the missing
    documentation.

[33mcommit 7dc3830c0f591ae8dfe349cf67c0c61cc8602dc8[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Nov 11 10:17:02 2010 -0800

    Remove spl/zfs modules as part of cleanup
    
    The idea behind the '-c' flag is to cleanup everything from a
    previous test run which might cause the test script to fail.
    This should also include removing the previously loaded module.
    This makes it a little easier to run 'zconfig.sh -c', however
    remember this is a test script and it will take all of your
    other zpools offline for the purposes of the test.  This notion
    has also been extended to the default 'make check' behavior.

[33mcommit cf47fad67d798f42e6d2edc8b0e9f9b43175703b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Nov 11 10:00:39 2010 -0800

    Unconditionally load core kernel modules
    
    Loading and unloading the zlib modules as part of the zfs.sh
    script has proven a little problematic for a few reasons.
    
      * First, your kernel may not need to load either zlib_inflate
        or zlib_deflate.  This functionality may be built directly in
        to your kernel.  It depends entirely on what your distribution
        decided was the right thing to do.
    
      * Second, even if you do manage to load the correct modules you
        may not be able to unload them.  There may other consumers
        of the modules with a reference preventing the unload.
    
    To avoid both of these issues the test scripts have been updated to
    attempt to unconditionally load all modules listed in KERNEL_MODULES.
    If the module is successfully loaded you must have needed it. If
    the module can't be loaded that almost certainly means either it is
    built in to your kernel or is already being used by another consumer.
    In both cases this is not an issue and we can move on to the spl/zfs
    modules.
    
    Finally, by removing these kernel modules from the MODULES list
    we ensure they are never unloaded during 'zfs.sh -u'.  This avoids
    the issue of the script failing because there is another consumer
    using the module we were not aware of.  In other words the script
    restricts unloading modules to only the spl/zfs modules.
    
    Closes #78

[33mcommit e06be586410cdad14d2dce76af4f2d43eebe7c83[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Wed Nov 10 13:36:18 2010 -0800

    Fix for access beyond end of device error
    
    This commit fixes a sign extension bug affecting l2arc devices.  Extremely
    large offsets may be passed down to the low level block device driver on
    reads, generating errors similar to
    
        attempt to access beyond end of device
        sdbi1: rw=14, want=36028797014862705, limit=125026959
    
    The unwanted sign extension occurrs because the function arc_read_nolock()
    stores the offset as a daddr_t, a 32-bit signed int type in the Linux kernel.
    This offset is then passed to zio_read_phys() as a uint64_t argument, causing
    sign extension for values of 0x80000000 or greater.  To avoid this, we store
    the offset in a uint64_t.
    
    This change also changes a few daddr_t struct members to uint64_t in the libspl
    headers to avoid similar bugs cropping up in the future.  We also add an ASSERT
    to __vdev_disk_physio() to check for invalid offsets.
    
    Closes #66
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 1f30b9d432dd48826cd562757d19c2771b0973e8[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Nov 10 16:44:20 2010 -0800

    Linux 2.6.36 compat, use fops->unlocked_ioctl()
    
    As of linux-2.6.36 the last in-tree consumer of fops->ioctl() has
    been removed and thus fops()->ioctl() has also been removed.  The
    replacement hook is fops->unlocked_ioctl() which has existed in
    kernel since 2.6.12.  Since the ZFS code only contains support
    back to 2.6.18 vintage kernels, I'm not adding an autoconf check
    for this and simply moving everything to use fops->unlocked_ioctl().

[33mcommit 8326eb4605a3d7c87cac15d5d11316fb99cd9ab0[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Nov 10 16:38:14 2010 -0800

    Linux 2.6.36 compat, blk_* macros removed
    
    Most of the blk_* macros were removed in 2.6.36.  Ostensibly this was
    done to improve readability and allow easier grepping.  However, from
    a portability stand point the macros are helpful.  Therefore the needed
    macros are redefined here if they are missing from the kernel.

[33mcommit 675de5aa379bfceb0258a20c4ccd1414e4798ee6[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Nov 10 15:49:40 2010 -0800

    Linux 2.6.36 compat, synchronous bio flag
    
    The name of the flag used to mark a bio as synchronous has changed
    again in the 2.6.36 kernel due to the unification of the BIO_RW_*
    and REQ_* flags.  The new flag is called REQ_SYNC.  To simplify
    checking this flag I have introduced the vdev_disk_dio_is_sync()
    helper function.  Based on the results of several new autoconf
    tests it uses the correct mask to check for a synchronous bio.
    
    Preferred interface for flagging a synchronous bio:
      2.6.12-2.6.29: BIO_RW_SYNC
      2.6.30-2.6.35: BIO_RW_SYNCIO
      2.6.36-2.6.xx: REQ_SYNC

[33mcommit f4af6bb783b0b7f2a6075cb1c74c225db8a157b2[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Nov 10 14:40:38 2010 -0800

    Linux 2.6.36 compat, use REQ_FAILFAST_MASK
    
    As of linux-2.6.36 the BIO_RW_FAILFAST and REQ_FAILFAST flags
    have been unified under the REQ_* names.  These flags always had
    to be kept in-sync so this is a nice step forward, unfortunately
    it means we need to be careful to only use the new unified flags
    when the BIO_RW_* flags are not defined.  Additional autoconf
    checks were added for this and if it is ever unclear which method
    to use no flags are set.  This is safe but may result in longer
    delays before a disk is failed.
    
    Perferred interface for setting FAILFAST on a bio:
      2.6.12-2.6.27: BIO_RW_FAILFAST
      2.6.28-2.6.35: BIO_RW_FAILFAST_{DEV|TRANSPORT|DRIVER}
      2.6.36-2.6.xx: REQ_FAILFAST_{DEV|TRANSPORT|DRIVER}

[33mcommit b04cffc9b03db08148f19bfbc92a53e5dc7b30d5[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Tue Nov 9 14:20:01 2010 -0800

    Remove inconsistent use of EOPNOTSUPP
    
    Commit 3ee56c292bbcd7e6b26e3c2ad8f0e50eee236bcc changed an ENOTSUP return value
    in one location to ENOTSUPP to fix user programs seeing an invalid ioctl()
    error code.  However, use of ENOTSUP is widespread in the zfs module.  Instead
    of changing all of those uses, we fixed the ENOTSUP definition in the SPL to be
    consistent with user space.  The changed return value in the above commit is
    therefore no longer needed, so this commit reverses it to maintain consistency.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 8c3ab23f4be92a4e55f07f8c1bb467b851ed3e54[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Nov 5 12:29:58 2010 -0700

    Add lustre zpios-test workload
    
    The lustre zpios-test simulates a reasonable lustre workload.  It will
    create 128 threads, the same as a Lustre OSS, and then 4096 individual
    objects.  Each objects is 16MiB in size and will be written/read in 1MiB
    from a random thread.  This is fundamentally how we expect Lustre to behave
    for large IO intensive workloads.

[33mcommit a8179b513904f4e11eb1299f70869d15ee577139[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Nov 5 11:51:24 2010 -0700

    Prep for 0.5.2 tag
    
    Update META file to prep for 0.5.2 tag.

[33mcommit cb39a6c6aa91531a641232e7d0c6a4d63836b0cc[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Nov 5 11:43:20 2010 -0700

    Replace custom zpool configs with generic configs
    
    To streamline testing I have in the past added several custom configs
    to the zpool-config directory.  This change reverts those custom configs
    and replaces them with three generic config which can do the same thing.
    The generic config behavior can be set by setting various environment
    variables when calling either the zpool-create.sh or zpios.sh scripts.
    
    For example if you wanted to create and test a single 4-disk Raid-Z2
    configuration using disks [A-D]1 with dedicated ZIL and L2ARC devices
    you could run the following.
    
    $ ZIL="log A2" L2ARC="cache B2" RANKS=1 CHANNELS=4 LEVEL=2 \
      zpool-create.sh -c zpool-raidz
    
    $ zpool status tank
      pool: tank
     state: ONLINE
     scan: none requested
    config:
    
          NAME        STATE     READ WRITE CKSUM
          tank        ONLINE       0     0     0
            raidz2-0  ONLINE       0     0     0
              A1      ONLINE       0     0     0
              B1      ONLINE       0     0     0
              C1      ONLINE       0     0     0
              D1      ONLINE       0     0     0
          logs
            A2        ONLINE       0     0     0
          cache
            B2        ONLINE       0     0     0
    
    errors: No known data errors

[33mcommit 3ee56c292bbcd7e6b26e3c2ad8f0e50eee236bcc[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Fri Oct 29 15:27:03 2010 -0700

    Make rollbacks fail gracefully
    
    Support for rolling back datasets require a functional ZPL, which we currently
    do not have.  The zfs command does not check for ZPL support before attempting
    a rollback, and in preparation for rolling back a zvol it removes the minor
    node of the device.  To prevent the zvol device node from disappearing after a
    failed rollback operation, this change wraps the zfs_do_rollback() function in
    an #ifdef HAVE_ZPL and returns ENOSYS in the absence of a ZPL.  This is
    consistent with the behavior of other ZPL dependent commands such as mount.
    
    The orginal error message observed with this bug was rather confusing:
    
        internal error: Unknown error 524
        Aborted
    
    This was because zfs_ioc_rollback() returns ENOTSUP if we don't HAVE_ZPL, but
    Linux actually has no such error code.  It should instead return EOPNOTSUPP, as
    that is how ENOTSUP is defined in user space.  With that we would have gotten
    the somewhat more helpful message
    
        cannot rollback 'tank/fish': unsupported version
    
    This is rather a moot point with the above changes since we will no longer make
    that ioctl call without a ZPL.  But, this change updates the error code just in
    case.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 7e55f4e00cefd7bf5ff7753759c42c5af19ba710[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Oct 28 10:42:38 2010 -0700

    Increate zio write interrupt thread count.
    
    Increasing the default zio_wr_int thread count from 8 to 16 improves
    write performence by 13% on large systems.  More testing need to be
    done but I suspect the ideal tuning here is ZTI_BATCH() with a minimum
    of 8 threads.

[33mcommit 451041db531dfec52c9e70fbd5d4179e30d61e2f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Oct 28 10:36:50 2010 -0700

    Shorten zio_* thread names
    
    Linux kernel thread names are expected to be short.  This change shortens
    the zio thread names to 10 characters leaving a few chracters to append
    the /<cpuid> to which the thread is bound.  For example: z_wr_iss/0.

[33mcommit b1c58213751141f28793e723017d4064893d819a[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Fri Oct 29 12:13:52 2010 -0700

    Fix panic mounting unformatted zvol
    
    On some older kernels, i.e. 2.6.18, zvol_ioctl_by_inode() may get passed a NULL
    file pointer if the user tries to mount a zvol without a filesystem on it.
    This change adds checks to prevent a null pointer dereference.
    
    Closes #73.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 6ee71f5ce39885969f986f3092fed00f41667963[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Fri Oct 22 11:13:16 2010 -0700

    Call modprobe with absolute path
    
    Some sudo configurations may not include /sbin in the PATH.
    libzfs_load_module() currently does not call modprobe with an absolute path, so
    it may fail under such configurations if called under sudo.  This change adds
    the absolute path to modprobe so we no longer rely on how PATH is set.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit d877ac6bfefaf09f0399888df1fc88bd4b4419d0[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Thu Oct 21 17:08:30 2010 -0700

    Fix intermittent 'zpool add' failures
    
    Creating whole-disk vdevs can intermittently fail if a udev-managed symlink to
    the disk partition is already in place.  To avoid this, we now remove any such
    symlink before partitioning the disk.  This makes zpool_label_disk_wait() truly
    wait for the new link to show up instead of returning if it finds an old link
    still in place.  Otherwise there is a window between when udev deletes and
    recreates the link during which access attempts will fail with ENOENT.
    
    Also, clean up a comment about waiting for udev to create symlinks.  It no
    longer needs to describe the special cases for the link names, since that is
    now handled in a separate helper function.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit d4055aac3c4fdb6c1b5b1a7b73d20ff716e0a711[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Mon Oct 18 11:07:20 2010 -0700

    Add zconfig test for adding and removing vdevs
    
    This test performs a sanity check of the zpool add and remove commands.  It
    tests adding and removing both a cache disk and a log disk to and from a zpool.
    Usage of both a shorthand device path and a full path is covered.  The test
    uses a scsi_debug device as the disk to be added and removed.  This is done so
    that zpool will see it as a whole disk and partition it, which it does not
    currently done for loopback devices.  We want to verify that the manipulation
    done to whole disks paths to hide the parition information does not break the
    add/remove interface.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 4682b8c14efdeae26808195422a763b896fef037[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Mon Oct 18 11:26:04 2010 -0700

    Remove solaris-specific code from make_leaf_vdev()
    
    Portability between Solaris and Linux isn't really an issue for us anymore, and
    removing sections like this one helps simplify the code.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit a2c6816c34952eb6dad51248d31172189fba9126[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Wed Oct 13 17:27:41 2010 -0700

    Support shorthand names with zpool remove
    
    zpool status displays abbreviated vdev names without leading path components
    and, in the case of whole disks, without partition information.  Also, the
    zpool subcommands 'create' and 'add' support using shorthand devices names
    without qualified paths.  Prior to this change, however, removing a device
    generally required specifying its name as it is stored in the vdev label.  So
    while zpool status might list a cache disk with a name like A16, removing it
    would require a full path such as /dev/disk/zpool/A16-part1, which is
    non-intuitive.
    
    This change adds support for shorthand device names with the remove subcommand
    so one can simply type, for example,
    
            zpool remove tank A16
    
    A consequence of this change is that including the partition information when
    removing a whole-disk vdev now results in an error.  While this is arguably the
    correct behavior, it is a departure from how zpool previously worked in this
    project.
    
    This change removes the only reference to ctd_check_path(), so that function is
    also removed to avoid compiler warnings.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 79e7242a91c17f50c857b53d2a7313cf363ea535[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Wed Oct 13 16:16:25 2010 -0700

    Add helper functions for manipulating device names
    
    This change adds two helper functions for working with vdev names and paths.
    zfs_resolve_shortname() resolves a shorthand vdev name to an absolute path
    of a file in /dev, /dev/disk/by-id, /dev/disk/by-label, /dev/disk/by-path,
    /dev/disk/by-uuid, /dev/disk/zpool.  This was previously done only in the
    function is_shorthand_path(), but we need a general helper function to
    implement shorthand names for additional zpool subcommands like remove.
    is_shorthand_path() is accordingly updated to call the helper function.
    
    There is a minor change in the way zfs_resolve_shortname() tests if a file
    exists.  is_shorthand_path() effectively used open() and stat64() to test for
    file existence, since its scope includes testing if a device is a whole disk
    and collecting file status information.  zfs_resolve_shortname(), on the other
    hand, only uses access() to test for existence and leaves it to the caller to
    perform any additional file operations.  This seemed like the most general and
    lightweight approach, and still preserves the semantics of is_shorthand_path().
    
    zfs_append_partition() appends a partition suffix to a device path.  This
    should be used to generate the name of a whole disk as it is stored in the vdev
    label. The user-visible names of whole disks do not contain the partition
    information, while the name in the vdev label does.   The code was lifted from
    the function make_disks(), which now just calls the helper function.  Again,
    having a helper function to do this supports general handling of shorthand
    names in the user interface.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 0ee8118bd31d1c160123d0aac9c55455706d5975[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Sep 28 16:32:12 2010 -0700

    Add zfault zpool configurations and tests
    
    Eleven new zpool configurations were added to allow testing of various
    failure cases.  The first 5 zpool configurations leverage the 'faulty'
    md device type which allow us to simuluate IO errors at the block layer.
    The last 6 zpool configurations leverage the scsi_debug module provided
    by modern kernels.  This device allows you to create virtual scsi
    devices which are backed by a ram disk.  With this setup we can verify
    the full IO stack by injecting faults at the lowest layer.  Both methods
    of fault injection are important to verifying the IO stack.
    
    The zfs code itself also provides a mechanism for error injection
    via the zinject command line tool.  While we should also take advantage
    of this appraoch to validate the code it does not address any of the
    Linux integration issues which are the most concerning.  For the
    moment we're trusting that the upstream Solaris guys are running
    zinject and would have caught internal zfs logic errors.
    
    Currently, there are 6 r/w test cases layered on top of the 'faulty'
    md devices.  They include 3 writes tests for soft/transient errors,
    hard/permenant errors, and all writes error to the device.  There
    are 3 matching read tests for soft/transient errors, hard/permenant
    errors, and fixable read error with a write.  Although for this last
    case zfs doesn't do anything special.
    
    The seventh test case verifies zfs detects and corrects checksum
    errors.  In this case one of the drives is extensively damaged and
    by dd'ing over large sections of it.  We then ensure zfs logs the
    issue and correctly rebuilds the damage.
    
    The next  test cases use the scsi_debug configuration to injects error
    at the bottom of the scsi stack.  This ensures we find any flaws in the
    scsi midlayer or our usage of it.  Plus it stresses the device specific
    retry, timeout, and error handling outside of zfs's control.
    
    The eighth test case is to verify that the system correctly handles an
    intermittent device timeout.  Here the scsi_debug device drops 1 in N
    requests resulting in a retry either at the block level.  The ZFS code
    does specify the FAILFAST option but it turns out that for this case
    the Linux IO stack with still retry the command.  The FAILFAST logic
    located in scsi_noretry_cmd() does no seem to apply to the simply
    timeout case.  It appears to be more targeted to specific device or
    transport errors from the lower layers.
    
    The ninth test case handles a persistent failure in which the device
    is removed from the system by Linux.  The test verifies that the failure
    is detected, the device is made unavailable, and then can be successfully
    re-add when brought back online.  Additionally, it ensures that errors
    and events are logged to the correct places and the no data corruption
    has occured due to the failure.

[33mcommit baa40d45cbb336765b2f89d934cd9ea690e4f7c9[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Oct 4 16:21:04 2010 -0700

    Fix missing 'zpool events'
    
    It turns out that 'zpool events' over 1024 bytes in size where being
    silently dropped.  This was discovered while writing the zfault.sh
    tests to validate common failure modes.
    
    This could occur because the zfs interface for passing an arbitrary
    size nvlist_t over an ioctl() is to provide a buffer for the packed
    nvlist which is usually big enough.  In this case 1024 byte is the
    default.  If the kernel determines the buffer is to small it returns
    ENOMEM and the minimum required size of the nvlist_t.  This was
    working properly but in the case of 'zpool events' the event stream
    was advanced dispite the error.  Thus the retry with the bigger
    buffer would succeed but it would skip over the previous event.
    
    The fix is to pass this size to zfs_zevent_next() and determine
    before removing the event from the list if it will fit.  This was
    preferable to checking after the event was returned because this
    avoids the need to rewind the stream.

[33mcommit a69052be7f9a4008e2b09578e9db5fdebc186111[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Oct 1 16:54:52 2010 -0700

    Initial zio delay timing
    
    While there is no right maximum timeout for a disk IO we can start
    laying the ground work to measure how long they do take in practice.
    This change simply measures the IO time and if it exceeds 30s an
    event is posted for 'zpool events'.
    
    This value was carefully selected because for sd devices it implies
    that at least one timeout (SD_TIMEOUT) has occured.  Unfortunately,
    even with FAILFAST set we may retry and request and not get an
    error.  This behavior is strongly dependant on the device driver
    and how it is hooked in to the scsi error handling stack.  However
    by setting the limit at 30s we can log the event even if no error
    was returned.
    
    Slightly longer term we can start recording these delays perhaps
    as a simple power-of-two histrogram.  This histogram can then be
    reported as part of the 'zpool status' command when given an command
    line option.
    
    None of this code changes the internal behavior of ZFS.  Currently
    it is simply for reporting excessively long delays.

[33mcommit 2959d94a0a53612cc1ca9ce9d17df26c3d69a513[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Oct 1 10:57:56 2010 -0700

    Add FAILFAST support
    
    ZFS works best when it is notified as soon as possible when a device
    failure occurs.  This allows it to immediately start any recovery
    actions which may be needed.  In theory Linux supports a flag which
    can be set on bio's called FAILFAST which provides this quick
    notification by disabling the retry logic in the lower scsi layers.
    
    That's the theory at least.  In practice is turns out that while the
    flag exists you oddly have to set it with the BIO_RW_AHEAD flag.
    And even when it's set it you may get retries in the low level
    drivers decides that's the right behavior, or if you don't get the
    right error codes reported to the scsi midlayer.
    
    Unfortunately, without additional kernels patchs there's not much
    which can be done to improve this.  Basically, this just means that
    it may take 2-3 minutes before a ZFS is notified properly that a
    device has failed.  This can be improved and I suspect I'll be
    submitting patches upstream to handle this.

[33mcommit c5343ba71b9fea6e3636be25a16173092f2042ba[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Sep 28 16:30:54 2010 -0700

    Fix 'zpool events' formatting for awk
    
    To make the 'zpool events' output simple to parse with awk the extra
    newline after embedded nvlists has been dropped.  This allows the
    entire event to be parsed as a single whitespace seperated record.
    
    The -H option has been added to operate in scripted mode.  For the
    'zpool events' command this means don't print the header.  The usage
    of -H is consistent with scripted mode for other zpool commands.

[33mcommit 312c07edfdbdbabfab7f721797bba8eade5dcdeb[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Sep 27 16:55:05 2010 -0700

    Generate zevents for speculative and soft errors
    
    By default the Solaris code does not log speculative or soft io errors
    in either 'zpool status' or post an event.  Under Linux we don't want
    to change the expected behavior of 'zpool status' so these io errors
    are still suppressed there.
    
    However, since we do need to know about these events for Linux FMA and
    the 'zpool events' interface is new we do post the events.  With the
    addition of the zio_flags field the posted events now contain enough
    information that a user space consumer can identify and discard these
    events if it sees fit.

[33mcommit d148e95156b98ac226013d24962d1afa4a51c712[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Sep 27 15:30:14 2010 -0700

    Fix negative zio->io_error which must be positive.
    
    All the upper layers of zfs expect zio->io_error to be positive.  I was
    careful but I missed one instance in vdev_disk_physio_completion() which
    could return a negative error.  To ensure all cases are always caught I
    had additionally added an ASSERT() to check this before zio_interpret().
    
    Finally, as a debugging aid when zfs is build with --enable-debug all
    errors from the backing block devices will be reported to the console
    with an error message like this:
    
    	ZFS: zio error=5 type=1 offset=4217856 size=8192 flags=60440

[33mcommit 398f129ca36b211b19b98ca16aff1d7e91ee2949[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Sep 27 15:04:24 2010 -0700

    Suppress large kmem_alloc() warning.
    
    Observed during failure mode testing, dsl_scan_setup_sync() allocates
    73920 bytes.  This is way over the limit of what is wise to do with a
    kmem_alloc() and it should probably be moved to a slab.  For now I'm
    just flagging it with KM_NODEBUG to quiet the error until this can be
    revisited.

[33mcommit 5c1bad0013204d70c5b60713af977bdaa5df1302[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Mon Oct 11 14:48:52 2010 -0700

    Fix undersized buffer in is_shorthand_path()
    
    The string array 'char dirs[5][8]' was too small to accomodate the terminating
    NUL character in "by-label". This change adds the needed additional byte.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 4b1abce9f5c20e298ddaa3368b3fb6a529c71459[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Wed Oct 6 18:00:55 2010 -0700

    Make commands load zfs module on demand
    
    This commit modifies libzfs_init() to attempt to load the zfs kernel module if
    it is not already loaded.  This is done to simplify initialization by letting
    users simply import their zpools without having to first load the module.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 83c62c939938ca5915a61022208a31c4ab3faa1c[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Fri Oct 1 12:00:58 2010 -0700

    Strip partition from device name for whole disks
    
    Under Solaris, the slice number is chopped off when displaying the device name
    if the vdev is a whole disk.  Under Linux we should similarly discard the
    partition number.  This commit adds the logic to perform the name truncation
    for devices ending in -partX, XpX, or X, where X is a string of digits.  The
    second case handles devices like md0p0. The third case is limited to scsi and
    ide disks, i.e. those beginning with "sd" or "hd", in order to avoid stripping
    the number from names like "loop0".
    
    This commit removes the Solaris-specific code for removing slices, since we no
    longer reasonably expect our changes to be merged in upstream.  The partition
    stripping code was moved off to a helper function to improve readability.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 3a7381e531f55929f894fa2e81b79e1980de6f22[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Mon Oct 4 13:08:24 2010 -0700

    Use stored whole_disk property when opening a vdev
    
    This commit fixes a bug in vdev_disk_open() in which the whole_disk property
    was getting set to 0 for disk devices, even when it was stored as a 1 when the
    zpool was created.  The whole_disk property lets us detect when the partition
    suffix should be stripped from the device name in CLI output.  It is also used
    to determine how writeback cache should be set for a device.
    
    When an existing zpool is imported its configuration is read from the vdev
    label by user space in zpool_read_label().  The whole_disk property is saved in
    the nvlist which gets passed into the kernel, where it in turn gets saved in
    the vdev struct in vdev_alloc().  Therefore, this value is available in
    vdev_disk_open() and should not be overridden by checking the provided device
    path, since that path will likely point to a partition and the check will
    return the wrong result.
    
    We also add an ASSERT that the whole_disk property is set.  We are not aware of
    any cases where vdev_disk_open() should be called with a config that doesn't
    have this property set.  The ASSERT is there so that when debugging is enabled
    we can identify any legitimate cases that we are missing.  If we never hit the
    ASSERT, we can at some point remove it along with the conditional whole_disk
    check.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 0151834d65bb05f02a43c7f1b6128030aa3e76c4[m
Author: Ricardo M. Correia <ricardo.correia@oracle.com>
Date:   Mon Oct 4 10:19:17 2010 -0700

    Register the space accounting callback even when we don't have the ZPL.
    
    This callback is needed for properly accounting the per-uid and per-gid
    space usage.  Even if we don't have the ZPL, we still need this callback
    in order to have proper on-disk ZPL compatibility and to be able to use
    Lustre quotas.
    
    Fortunately, the callback doesn't have any ZPL/VFS dependencies so we
    can just move it out of #ifdef HAVE_ZPL.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 858219cc4e44aea8373c56a94380f5be53026b38[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Wed Sep 22 18:53:59 2010 -0700

    Fix missing vdev names in zpool status output
    
    Top-level vdev names in zpool status output should follow a <type-id> naming
    convention.  In the case of raidz devices, the type portion of the name was
    missing.
    
    This commit fixes a bug in zpool_vdev_name() where in this snprintf call
    
    	(void) snprintf(buf, sizeof (buf), "%s-%llu", path,
    		(u_longlong_t)id);
    
    buf and path may point to the same location.  The result is that buf ends up
    containing only the "-id" part.  This only occurred for raidz devices because
    the code for appending the parity level to the type string stored its result in
    buf then set path to point there.  To fix this we allocate a new temporary
    buffer on the stack instead of reusing buf.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
    Closes #57

[33mcommit 368f4c10aec9da58738750cf33de6d12e4fcb500[m
Author: Ricardo M. Correia <ricardo.correia@oracle.com>
Date:   Fri Sep 17 16:07:24 2010 -0700

    Export ZFS symbols needed by Lustre.
    
    Required for the DB_DNODE_ENTER()/DB_DNODE_EXIT() helpers.
    
    Signed-off-by: Ricardo M. Correia <ricardo.correia@oracle.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 1e411a4c12b95b1a18028585ae7fd5e51030b25e[m
Author: Ricardo M. Correia <ricardo.correia@oracle.com>
Date:   Fri Sep 17 16:08:56 2010 -0700

    Quiet down very frequent large allocation warning in ZFS.
    
    In my machine, dnode_hold_impl() allocates 9992 bytes in DEBUG mode and it
    causes a large stream of stack traces in the logs. Instead, use KM_NODEBUG
    to quiet down this known large alloc.
    
    Signed-off-by: Ricardo M. Correia <ricardo.correia@oracle.com>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 12f30129745a3da85b6bbc31e24d3738ff007d9b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Sep 17 16:22:08 2010 -0700

    Add missing Makefile.in from zpool_layout commit
    
    The scripts/zpool-layout/Makefile.in file generated by autogen.sh
    was accidentally omitted from the previous commit.  Add it.

[33mcommit a5b4d63582005300c4526c7c15b63294e5408534[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Sep 15 15:32:27 2010 -0700

    Add [-m map] option to zpool_layout
    
    By default the zpool_layout command would always use the slot
    number assigned by Linux when generating the zdev.conf file.
    This is a reasonable default there are cases when it makes
    sense to remap the slot id assigned by Linux using your own
    custom mapping.
    
    This commit adds support to zpool_layout to provide a custom
    slot mapping file.  The file contains in the first column the
    Linux slot it and in the second column the custom slot mapping.
    By passing this map file with '-m map' to zpool_config the
    mapping will be applied when generating zdev.conf.
    
    Additionally, two sample mapping have been added which reflect
    different ways to map the slots in the dragon drawers.

[33mcommit bbf3a3575c0b5795d3e4ddc27523258dc61ffa88[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Sep 15 09:09:37 2010 -0700

    Fix markdown rendering
    
    These two lines were being rendered incorrectly on the GitHub
    site.  To fix the issue there needs to be leading whitespace
    before each line to ensure each command is rendered on its
    own line.
    
    $ ./configure
    $ make pkg

[33mcommit b1aa38137f7085cfce5d76c3d28b8dabdac1830e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Sep 14 15:58:25 2010 -0700

    Reference new zfsonlinux.org website
    
    The wiki contents have been converted to html and made available
    at their new home http://zfsonlinux.org.  The wiki has also been
    disabled the html pages are now the official documentation.

[33mcommit 2c4834f87af4beec4b16157622c85d2850cce25f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Sep 10 21:44:17 2010 -0700

    Wait up to timeout seconds for udev device
    
    Occasional failures were observed in zconfig.sh because udev
    could be delayed for a few seconds.  To handle this the wait_udev
    function has been added to wait for timeout seconds for an
    expected device before returning an error.  By default callers
    currently use a 30 seconds timeout which should be much longer
    than udev ever needs but not so long to worry the test suite
    is hung.

[33mcommit ac063c48ae12061bbe0f66b3a9d641239782ae62[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Sep 10 21:35:27 2010 -0700

    Reduce volume size in zconfig.sh
    
    Due to occasional ENOSPC failures on certain platforms I've reduced
    the size of the ZVOL from 400M to 300M for the zvol+ext2 clone tests.

[33mcommit e32f7d6162296de70cab5a6b298bfe2618d657ef[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Sep 10 12:33:31 2010 -0700

    Use top level object directory in zfs-module.spec
    
    Commit 6283f55ea1b91e680386388c17d14b89e344fa8d updated _almost_
    everything to use the correct top level object directory.  This
    was done to correctly supporting building in custom directories.
    Unfortunately, I missed this one instance in the zfs-module.spec.in
    rpm spec file.  Fix it.

[33mcommit d9400aede6ad32dde7021c739f0e8c7b570432af[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Sep 10 11:43:12 2010 -0700

    Exclude atomic.S source from dist rules
    
    The zfs package supports the option --with-config=srpm which
    is used to bootstrap configure to allow the 'make srpm' target
    to work.  This has the advantage of allowing creation of source
    rpms without having all your -devel packages installed.  This
    source package can then be feed back in to an automated build
    farm which only installs the required packages listed by the
    srpm.  This ensures that all proper dependencies are expressed
    by the source package, because if they are not you will get
    configure/build failures.
    
    The trouble here is that --with-config=srpm prevents the
    architecture check from running resulting in TARGET_ASM_DIR
    being set to the default asm-generic.  The 'make dist' rule
    then fails because there is no asm-generic/atomic.S file
    because it is generated at build time.  To handle this I
    have added an empty file asm-generic/atomic.S simply as a
    place holder for 'make dist'.

[33mcommit e37e1d3040edac06a0d4380f7eaaa7a69892c7c6[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Sep 10 09:36:39 2010 -0700

    Use linux __KERNEL__ define
    
    Previously the project contained who zfs_context.h files,
    one for user space builds and one for kernel space builds.
    It was the responsibility of the source including the file
    to ensure the right one was included based on the order of
    the include paths.
    
    This was the way it was done in OpenSolaris but for our
    purposes I felt it was overly obscure.  The user and kernel
    zfs_context.h files have been combined in to a single file
    and a #define determines if you get the user or kernel
    context.
    
    The issue here was that I used the _KERNEL macro which is
    defined as part of the spl which will only be defined for
    most builds after you include the right zfs_context.  It is
    safer to use the __KERNEL__ macro which is automatically
    defined as part of the kernel build process and passed as
    a command line compiler option.  It will always be defined
    if your building in the kernel and never for user space.

[33mcommit 8ec8000f95d60daa51f670fd46930a2cec6accae[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Sep 8 21:39:28 2010 -0700

    Fix "format not a string literal" warning
    
    Under Ubuntu 10.04 the default compiler flags include -Wformat
    and -Wformat-security which cause the above warning.  In particular,
    cases where "%s" was forgotten as part of the format specifier.
    
    https://wiki.ubuntu.com/CompilerFlags

[33mcommit 6283f55ea1b91e680386388c17d14b89e344fa8d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sat Sep 4 13:26:23 2010 -0700

    Support custom build directories and move includes
    
    One of the neat tricks an autoconf style project is capable of
    is allow configurion/building in a directory other than the
    source directory.  The major advantage to this is that you can
    build the project various different ways while making changes
    in a single source tree.
    
    For example, this project is designed to work on various different
    Linux distributions each of which work slightly differently.  This
    means that changes need to verified on each of those supported
    distributions perferably before the change is committed to the
    public git repo.
    
    Using nfs and custom build directories makes this much easier.
    I now have a single source tree in nfs mounted on several different
    systems each running a supported distribution.  When I make a
    change to the source base I suspect may break things I can
    concurrently build from the same source on all the systems each
    in their own subdirectory.
    
    wget -c http://github.com/downloads/behlendorf/zfs/zfs-x.y.z.tar.gz
    tar -xzf zfs-x.y.z.tar.gz
    cd zfs-x-y-z
    
    ------------------------- run concurrently ----------------------
    <ubuntu system>  <fedora system>  <debian system>  <rhel6 system>
    mkdir ubuntu     mkdir fedora     mkdir debian     mkdir rhel6
    cd ubuntu        cd fedora        cd debian        cd rhel6
    ../configure     ../configure     ../configure     ../configure
    make             make             make             make
    make check       make check       make check       make check
    
    This change also moves many of the include headers from individual
    incude/sys directories under the modules directory in to a single
    top level include directory.  This has the advantage of making
    the build rules cleaner and logically it makes a bit more sense.

[33mcommit 5e6121455c0b941f4612ceb2c1f312d527534b46[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Sep 2 20:44:41 2010 -0700

    Fix spl version check
    
    The spl_config.h file is checked to determine the spl version.
    However, the zfs code was looking for it in the source directory
    and not the build directory.

[33mcommit 8160dd9a74b5b5eb3439d4aa0f0bc50e3400c123[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Sep 2 13:18:17 2010 -0700

    Remove zfs-x.y.z.zip creation in 'make dist'
    
    Do no create a zfs-x.y.z.zip file as part of 'make dist'.  Simply
    create the standard zfs-x.y.z.tar.gz file.

[33mcommit 7d06aee0965d66e6e5eb413c2b3ddfc049398ee0[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Sep 1 11:23:32 2010 -0700

    Prep for zfs-0.5.1 tag

[33mcommit f5e79474f07ec7a2035da2e139885a046ad70066[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Sep 1 15:58:09 2010 -0700

    Fix zfsdev_compat_ioctl() case
    
    For the !CONFIG_COMPAT case fix the zfsdev_compat_ioctl()
    compatibility function name.  This was caught by the
    chaos4.3 builder.

[33mcommit 1ae93745d2eadcdfdf1ab677180f28922e7c7d26[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Sep 1 12:54:51 2010 -0700

    Minor packaging fixes
    
    The GIT file was removed from the tree because I have stopped
    using TopGit.  Because of this is must also be removed from
    the top level Makefile.am as will as the zfs.spec.in file
    which referenced it.
    
    Fix type in lib/libzpool/Makefile.am which was preventing
    the needed zrlock.h header from being included by 'make dist'.
    I simply had the name wrong in the Makefile.am.
    
    Regenerated autogen.sh build products.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 9691eb9fee92301869ae34f750279f93504f7db1[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Sep 1 12:50:44 2010 -0700

    Remove scripts/common.sh
    
    This script is now dynamically generated at configure time
    from scripts/common.sh.in.  This change was made by commit
    26e61dd074df64f9e1d779273efd56fa9d92cdc5 but we accidentally
    kept the common.sh file around.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 34bc5537e574ac8fa7c7818e48529710e4fb83f6[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Sep 1 11:23:13 2010 -0700

    Add quick build instructions
    
    Full update to date build information will stay on the wiki for
    now, but there is no harm in adding the bare bones instructions
    to the README.  They shouldn't change and are a reasonable
    quick start.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit e70e591c51177d202396b1b0c5de04a7664d45cf[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 12:28:14 2010 -0700

    Add initial autoconf products
    
    Add the initial products from autogen.sh.  These products will
    be updated incrementally after this point as development occurs.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 0e8d1b2d8b5f8515aada6b43e68483bcd96db85e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 11:59:11 2010 -0700

    Add linux ztest support
    
    Minor changes to ztest for this environment.  These including
    updating ztest to run in the local development tree, as well
    as relocating some local variables in this function to the heap.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 302ef1517e5769cbe6a12d94c89f44a90721bfd4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 11:58:00 2010 -0700

    Add linux zpios support
    
    Linux kernel implementation of PIOS test app.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 9b020fd97a3dc449a94baec028b30b1fe3c2d5bc[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 11:57:29 2010 -0700

    Add linux user util support
    
    This topic branch contains required changes to the user space
    utilities to allow them to integrate cleanly with Linux.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit d603ed6c278f9c25b17ba8e75e9bce6e5d715ac0[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 11:56:53 2010 -0700

    Add linux user disk support
    
    This topic branch contains all the changes needed to integrate the user
    side zfs tools with Linux style devices.  Primarily this includes fixing
    up the Solaris libefi library to be Linux friendly, and integrating with
    the libblkid library which is provided by e2fsprogs.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit f1fb119f6bb0c3185ec88912e4488fdd9ec08ab2[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 11:55:32 2010 -0700

    Add linux unused code tracking
    
    Track various large hunks which have been dropped simply
    because they are not relevant to this port.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 6b003d7cda153c58bb5faab62c5e5a7aab780715[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 11:55:19 2010 -0700

    Add linux topology support
    
    Solaris recently introduced the idea of drive topology because
    where a drive is located does matter.  I have already handled
    this with udev/blkid integration under Linux so I'm hopeful
    this case can simply be removed but for now I've just stubbed
    out what is needed in libspl and commented out the rest here.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 054bc00b4c0c257f6baf6d7145b270c7283fe51e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 11:54:51 2010 -0700

    Add linux compatibility
    
    Resolve minor Linux compatibility issues.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 7b89a549965e50f4f80e41b804bfbc3c09bbddca[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 11:52:20 2010 -0700

    Add linux spa thread support
    
    Disable the spa thread under Linux until it can be implemented.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 9c905c550bb9cb095a5d9707bc7cf72d3f2562af[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 11:52:05 2010 -0700

    Add linux sha2 support
    
    The upstream ZFS code has correctly moved to a faster native sha2
    implementation.  Unfortunately, under Linux that's going to be a little
    problematic so we revert the code to the more portable version contained
    in earlier ZFS releases.  Using the native sha2 implementation in Linux
    is possible but the API is slightly different in kernel version user
    space depending on which libraries are used.  Ideally, we need a fast
    implementation of SHA256 which builds as part of ZFS this shouldn't be
    that hard to do but it will take some effort.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit a26baf285f71eb95f1eace8c79d12d647a694488[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 11:50:56 2010 -0700

    Add linux libspl support
    
    All changes needed for the libspl layer.  This includes modifications
    to files directly copied from OpenSolaris and the addition of new
    files needed to fill in the gaps.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit c28b227942b421ebdc03c9df9a012642fb517223[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 11:49:16 2010 -0700

    Add linux kernel module support
    
    Setup linux kernel module support, this includes:
    - zfs context for kernel/user
    - kernel module build system integration
    - kernel module macros
    - kernel module symbol export
    - kernel module options
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 00b46022c676e402e3f33ce93ee2983bbad2c46f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 11:46:09 2010 -0700

    Add linux kernel memory support
    
    Required kmem/vmem changes
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 60101509ee73c6e61e50c0a4079097f31bb39f4b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 11:45:02 2010 -0700

    Add linux kernel disk support
    
    Native Linux vdev disk interfaces
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 325f023544bbec6a478882c442e15304ee379759[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 11:44:39 2010 -0700

    Add linux kernel device support
    
    This branch contains the majority of the changes required to cleanly
    intergrate with Linux style special devices (/dev/zfs).  Mainly this
    means dropping all the Solaris style callbacks and replacing them
    with the Linux equivilants.
    
    This patch also adds the onexit infrastructure needed to track
    some minimal state between ioctls.  Under Linux it would be easy
    to do this simply using the file->private_data.  But under Solaris
    they apparent need to pass the file descriptor as part of the ioctl
    data and then perform a lookup in the kernel.  Once again to keep
    code change to a minimum I've implemented the Solaris solution.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 47d0ed1e6f8a8ee67492ec63173a27df8e4ca059[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 11:44:12 2010 -0700

    Add linux spl debug support
    
    Use spl debug if HAVE_SPL defined
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 2eadf037f5ae2735bcbc61e3bb2974c6d3235b8e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 11:43:58 2010 -0700

    Add linux mntent support
    
    Use mount entry if HAVE_SETMNTENT defined
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit d2c15e84e9c37f9c3d10dfffc9bd6be4600bf924[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 11:43:42 2010 -0700

    Add linux mlslabel support
    
    The ZFS update to onnv_141 brought with it support for a
    security label attribute called mlslabel.  This feature
    depends on zones to work correctly and thus I am disabling
    it under Linux.  Equivilant functionality could be added
    at some point in the future.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit be160928b79888fc8b4ce8122435f3f633f01ead[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 11:43:07 2010 -0700

    Add linux idmap support
    
    Use idmap service if available.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 266852767f42781821c1d62544c9b9e985828304[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 11:42:43 2010 -0700

    Add linux events
    
    This topic branch leverages the Solaris style FMA call points
    in ZFS to create a user space visible event notification system
    under Linux.  This new system is called zevent and it unifies
    all previous Solaris style ereports and sysevent notifications.
    
    Under this Linux specific scheme when a sysevent or ereport event
    occurs an nvlist describing the event is created which looks almost
    exactly like a Solaris ereport.  These events are queued up in the
    kernel when they occur and conditionally logged to the console.
    It is then up to a user space application to consume the events
    and do whatever it likes with them.
    
    To make this possible the existing /dev/zfs ABI has been extended
    with two new ioctls which behave as follows.
    
    * ZFS_IOC_EVENTS_NEXT
    Get the next pending event.  The kernel will keep track of the last
    event consumed by the file descriptor and provide the next one if
    available.  If no new events are available the ioctl() will block
    waiting for the next event.  This ioctl may also be called in a
    non-blocking mode by setting zc.zc_guid = ZEVENT_NONBLOCK.  In the
    non-blocking case if no events are available ENOENT will be returned.
    It is possible that ESHUTDOWN will be returned if the ioctl() is
    called while module unloading is in progress.  And finally ENOMEM
    may occur if the provided nvlist buffer is not large enough to
    contain the entire event.
    
    * ZFS_IOC_EVENTS_CLEAR
    Clear are events queued by the kernel.  The kernel will keep a fairly
    large number of recent events queued, use this ioctl to clear the
    in kernel list.  This will effect all user space processes consuming
    events.
    
    The zpool command has been extended to use this events ABI with the
    'events' subcommand.  You may run 'zpool events -v' to output a
    verbose log of all recent events.  This is very similar to the
    Solaris 'fmdump -ev' command with the key difference being it also
    includes what would be considered sysevents under Solaris.  You
    may also run in follow mode with the '-f' option.  To clear the
    in kernel event queue use the '-c' option.
    
    $ sudo cmd/zpool/zpool events -fv
    TIME                        CLASS
    May 13 2010 16:31:15.777711000 ereport.fs.zfs.config.sync
            class = "ereport.fs.zfs.config.sync"
            ena = 0x40982b7897700001
            detector = (embedded nvlist)
                    version = 0x0
                    scheme = "zfs"
                    pool = 0xed976600de75dfa6
            (end detector)
    
            time = 0x4bec8bc3 0x2e5aed98
            pool = "zpios"
            pool_guid = 0xed976600de75dfa6
            pool_context = 0x0
    
    While the 'zpool events' command is handy for interactive debugging
    it is not expected to be the primary consumer of zevents.  This ABI
    was primarily added to facilitate the addition of a user space
    monitoring daemon.  This daemon would consume all events posted by
    the kernel and based on the type of event perform an action.  For
    most events simply forwarding them on to syslog is likely enough.
    But this interface also cleanly allows for more sophisticated
    actions to be taken such as generating an email for a failed drive.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit c9c0d073da561bcbefbdf09c87fc75b227415619[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 11:22:58 2010 -0700

    Add build system
    
    Add autoconf style build infrastructure to the ZFS tree.  This
    includes autogen.sh, configure.ac, m4 macros, some scripts/*,
    and makefiles for all the core ZFS components.

[33mcommit 40b84e7aec6392187722e61e5a4a853b530bf60f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 11:13:05 2010 -0700

    Fix stack ztest
    
    While ztest does run in user space we run it with the same stack
    restrictions it would have in kernel space.  This ensures that any
    stack related issues which would be hit in the kernel can be caught
    and debugged in user space instead.
    
    This patch is a first pass to limit the stack usage of every ztest
    function to 1024 bytes.  Subsequent updates can further reduce this.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 6656bf56216f36805731298ee0f4de87ae6b6b3d[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Aug 27 16:48:18 2010 -0700

    Fix stack traverse_visitbp()
    
    Due to  limited stack space recursive functions are frowned upon in
    the Linux kernel.  However, they often are the most elegant solution
    to a problem.  The following code preserves the recursive function
    traverse_visitbp() but moves the local variables AND function
    arguments to the heap to minimize the stack frame size.  Enough
    space is initially allocated on the stack for 20 levels of recursion.
    This change does ugly-up-the-code but it reduces the worst case
    usage from roughly 4160 bytes to 960 bytes on x86_64 archs.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit da6b4005c92ce02359aabae6549f1031ad1fe41c[m
Author: Ned Bass <bass6@llnl.gov>
Date:   Thu Aug 26 11:38:38 2010 -0700

    Fix stack zio_execute()
    
    Implement zio_execute() as a wrapper around the static function
    __zio_execute() so that we can force  __zio_execute() to be inlined.
    This reduces stack overhead which is important because __zio_execute()
    is called recursively in several zio code paths.  zio_execute() itself
    cannot be inlined because it is externally visible.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit c776b317e44a64d53217d34c3fa61d36fd5a32d5[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 11:04:17 2010 -0700

    Fix stack zio_done()
    
    Eliminated local variables pointing to members of the zio struct.
    Just refer to the struct members directly.  This saved about 32 bytes per
    call, but this function can be called recurisvely up to 19 levels deep,
    so we potentially save up to 608 bytes.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 5ae4e2c2c660269d87dd5bbac6f590f69d0c7d8c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 11:03:04 2010 -0700

    Fix stack vn_open()
    
    We should not put a 4k maxpathlen buffer on the stack, instead
    locate it to the heap.  Even in user space we run ztest with 8K
    stacks to verify correctness
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 5fed499defe68b57fab349ac945a84416fb024ba[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 11:00:46 2010 -0700

    Fix stack vdev_cache_read()
    
    Moving the vdev_cache_entry_t struct ve_search from the stack to
    the heap saves ~100 bytes.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 47050a88ac1445f3557030d0d7e61b8a397a5476[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 10:58:47 2010 -0700

    Fix stack traverse_impl()
    
    Stack use reduced from 560 bytes to 128 bytes.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 60948de1ef976aabaa3630707bcc8b5867508507[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 10:58:36 2010 -0700

    Fix stack noinline
    
    Certain function must never be automatically inlined by gcc because
    they are stack heavy or called recursively.  This patch flags all
    such functions I've found as 'noinline' to prevent gcc from making
    the optimization.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 18a89ba43d3e5e8a31d50838c93ec26d1cb27429[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 10:58:19 2010 -0700

    Fix stack lzjb
    
    Reduce kernel stack usage by lzjb_compress() by moving uint16 array
    off the stack and on to the heap.  The exact performance implications
    of this I have not measured but we absolutely need to keep stack
    usage to a minimum.  If/when this becomes and issue we optimize.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit bf701a83c5ec192be6d3afe87ebeee45ce9127f4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 10:58:00 2010 -0700

    Fix stack inline
    
    Decrease stack usage for various call paths by forcing certain
    functions to be inlined.  By inlining the functions the overhead
    of a new stack frame is removed at the cost of increased code size.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 161ce7ce3cfc7ec1cd3c93d27f25a94b7408588f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 10:53:43 2010 -0700

    Fix stack dsl_scan_visitbp()
    
    To reduce stack overhead this topic branch moves the 128 byte
    blkptr_t data strucutre in dsl_scan_visitbp() to the heap.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit fcf37ec6c28f3d62773097c2fd0d5d56c4b2f2ff[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 10:53:31 2010 -0700

    Fix stack dsl_dir_open_spa()
    
    Reduce stack usage by 256 bytes by moving buf char array from
    the stack to the heap.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 48c67dc8f8d822dbd2fec51d5e46cdb445f66814[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 10:53:19 2010 -0700

    Fix stack dsl_deleg_get()
    
    Reduce stack usage in dsl_deleg_get, gcc flagged it as consuming a
    whopping 1040 bytes or potentially 1/4 of a 4K stack.  This patch
    moves all the large structures and buffer off the stack and on to
    the heap.  This includes 2 zap_cursor_t structs each 52 bytes in
    size, 2 zap_attribute_t structs each 280 bytes in size, and 1
    256 byte char array.  The total saves on the stack is 880 bytes
    after you account for the 5 new pointers added.
    
    Also the source buffer length has been increased from MAXNAMELEN
    to MAXNAMELEN+strlen(MOS_DIR_NAME)+1 as described by the comment in
    dsl_dir_name().  A buffer overrun may have been possible with the
    slightly smaller buffer.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 81a4966389518651823deec8719fbf98df002102[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 10:52:40 2010 -0700

    Fix stack dsl_dataset_destroy()
    
    Move dsl_dataset_t local variable from the stack to the heap.
    This reduces the stack usage of this function from 2048 bytes
    to 176 bytes for x84_64 arches.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit a8ac8e715e50e56b5e907007ef70f39301a4d984[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 10:52:23 2010 -0700

    Fix stack dmu_objset_snapshot()
    
    Reduce stack usage by 276 bytes by moving the snaparg struct from the
    stack to the heap.  We have limited stack space we must not waste.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit fc5bb51f08a6c91ff9ad3559d0266eeeab0b1f61[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 10:52:00 2010 -0700

    Fix stack dbuf_hold_impl()
    
    This commit preserves the recursive function dbuf_hold_impl() but moves
    the local variables and function arguments to the heap to minimize
    the stack frame size.  Enough space is initially allocated on the
    stack for 20 levels of recursion.  This technique was based on commit
    34229a2f2ac07363f64ddd63e014964fff2f0671 which reduced stack usage of
    traverse_visitbp().
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 5ac1241a9527df92f6631459127d8b2a985a8f29[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Aug 27 10:55:07 2010 -0700

    Fix dnode_move() scope
    
    The dnode_move() functionality is only used in the kernel build.
    As such we should be careful to wrap all of the related code
    with '#ifdef _KERNEL' to avoid gcc warnings about unused code.

[33mcommit 1e33ac1e2677c898a0b5ef6207048c692cb51bf4[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 10:43:27 2010 -0700

    Fix Solaris thread dependency by using pthreads
    
    This is a portability change which removes the dependence of the Solaris
    thread library.  All locations where Solaris thread API was used before
    have been replaced with equivilant Solaris kernel style thread calls.
    In user space the kernel style threading API is implemented in term of
    the portable pthreads library.  This includes all threads, mutexs,
    condition variables, reader/writer locks, and taskqs.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 8a8f5c6b3ca44248b47a4a65515d7828803c71ff[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 10:34:33 2010 -0700

    Fix zfs_ioc_objset_stats
    
    Interestingly this looks like an upstream bug as well.  If for some
    reason we are unable to get a zvols statistics, because perhaps the
    zpool is hopelessly corrupt, we would trigger the VERIFY.  This
    commit adds the proper error handling just to propagate the error
    back to user space.  Now the user space tools still must handle this
    properly but in the worst case the tool will crash or perhaps have
    some missing output.  That's far far better than crashing the host.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 5cc556b447380bf5fed181d3aa5f138618cd69c8[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 10:32:23 2010 -0700

    Fix zio_taskq_dispatch to use TQ_NOSLEEP
    
    The zio_taskq_dispatch() function may be called at interrupt time
    and it is critical that we never sleep.
    
    Additionally, wrap taskq_dispatch() in a while loop because it may
    fail.  This is non optimal but is OK for now.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 2a442d1629e5405efe82b832d06f69e8d1360cc7[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 10:31:53 2010 -0700

    Fix strncat usage
    
    This look like a typo.  The intention was to use strlcat() however
    strncat() was used instead accidentally this may lead to a buffer
    overflow.  This was caught by gcc -D_FORTIFY_SOURCE=2.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit ef5319df8e1272f6d89e3b79e248c34f286ae049[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 10:30:13 2010 -0700

    Fix rw_init() usage
    
    Properly initialize rwlock primitives.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit eaa8687be33318ae07d61a91e0069244b326f450[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 10:29:11 2010 -0700

    Fix zmod.h usage in userspace
    
    Do not use zmod.h in userspace.
    
    This has also been filed with the ZFS team. It makes the userspace
    libzpool code use the zlib API, instead of the Solaris-only and
    non-standard zmod.h.  The zlib API is almost identical and is a de
    facto standard, so this is a no-brainer.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 3f504482929e4c4e098ec00b335ddc45509be716[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 10:28:31 2010 -0700

    Fix missing newlines
    
    Add missing \n's to dprintf()s
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 22c81dd8a9ec5177a65808c1d782599402b40233[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 10:27:53 2010 -0700

    Fix metaslab
    
    If your only going to allow one allocator to be used and it is defined
    at compile time there is no point including the others in the build.
    This patch could/should be refined for Linux to make the metaslab
    configurable at run time.  That might be a bit tricky however since
    you would need to quiese all IO.  Short of that making it configurable
    as a module load option would be a reasonable compromise.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 98f72a539c8ca2ba1ca7fc8cac44018ade96065c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 10:26:44 2010 -0700

    Fix list handling to only use the API
    
    Remove all instances of list handling where the API is not used
    and instead list data members are directly accessed.  Doing this
    sort of thing is bad for portability.
    
    Additionally, ensure that list_link_init() is called on newly
    created list nodes.  This ensures the node is properly initialized
    and does not rely on the assumption that zero'ing the list_node_t
    via kmem_zalloc() is the same as proper initialization.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 59e6e7ca85e984433fc9c929dd0d474579bb88a5[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 10:26:05 2010 -0700

    Fix kstat xuio
    
    Move xiou stat structures from a header to the dmu.c source as is
    done with all the other kstat interfaces.  This information is local
    to dmu.c registered the xuio kstat and should stay that way.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 754c6663a36b9801b391a9659319416ecd79d9d2[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 10:24:44 2010 -0700

    Fix dbuf eviction assertion
    
    Replace non-fatal assertion with warning.  This was being observed
    during testing and it should not be fatal.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 4d58b69de8a6e2dc77b73e113d2c7847d389f456[m
Author: Ricardo M. Correia <Ricardo.M.Correia@Sun.COM>
Date:   Thu Aug 26 10:21:44 2010 -0700

    Fix vn_open/vn_rdwr error handling
    
    1) In vn_open(), if fstat64() returned an error, the real errno
    was being obscured by calling close().
    
    2) Add error handling for both pwrite64() calls in vn_rdwr().
    
    Signed-off-by: Ricardo M. Correia <Ricardo.M.Correia@Sun.COM>
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 235db0aceaa01638d3cd7d041ac968c3faa3a691[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 10:19:48 2010 -0700

    Fix deadcode
    
    Remove deadcode.  It's possible the code should be in use
    somewhere, but as the source code is laid out it currently
    is not.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 753972fccf7d3d5c9406edbd5281950681e0f606[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 10:19:04 2010 -0700

    Fix dbuf_dirty_record_t leaks
    
    Fix two leaks with dbuf_dirty_record_t
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 5631c038895ea97fde261831887226ee56d06dd5[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 10:18:06 2010 -0700

    Fix variables named current
    
    In the linux kernel 'current' is defined to mean the current process
    and can never be used as a local variable in a function.  Simply
    replace all usage of 'current' with 'curr' in this function.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 090ff0929ec7a2e2e65efaaddb9981d15964f7d9[m
Author: Ricardo M. Correia <ricardo.correia@oracle.com>
Date:   Thu Aug 26 10:17:18 2010 -0700

    Fix commit callbacks
    
    The upstream commit cb code had a few bugs:
    
    1) The arguments of the list_move_tail() call in txg_dispatch_callbacks()
    were reversed by mistake. This caused the commit callbacks to not be
    called at all.
    
    2) ztest had a bug in ztest_dmu_commit_callbacks() where "error" was not
    initialized correctly. This seems to have caused the test to always take
    the simulated error code path, which made ztest unable to detect whether
    commit cbs were being called for transactions that successfuly complete.
    
    3) ztest had another bug in ztest_dmu_commit_callbacks() where the commit
    cb threshold was not being compared correctly.
    
    4) The commit cb taskq was using 'max_ncpus * 2' as the maxalloc argument
    of taskq_create(), which could have caused unnecessary delays in the txg
    sync thread.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit a6098088eb706f643a726f71f22ea7126fcd822e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 10:10:35 2010 -0700

    Fix minor acl issue
    
    Minor fixes for newly introduced acl support.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit d4ed667343c3dac114642b9f6cb4f7baa3ff7334[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 09:58:04 2010 -0700

    Fix gcc uninitialized variable warnings
    
    Gcc -Wall warn: 'uninitialized variable'
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 1fde1e37208c2f56c72c70a06676676f04b65998[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 09:53:00 2010 -0700

    Fix gcc unused variable warnings
    
    Gcc -Wall warn: 'unused variable'
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit c65aa5b2b9c48375ea1c451f252f0056e16f4e49[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 09:52:42 2010 -0700

    Fix gcc missing parenthesis warnings
    
    Gcc -Wall warn: 'missing parenthesis'
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit e75c13c353571efaa9b4e047f16969ec13a518f5[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 09:52:41 2010 -0700

    Fix gcc missing case warnings
    
    Gcc ASSERT() missing cases are impossible
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 2598c0012dc33496539ce893a0af601c66cbb7e2[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 09:52:41 2010 -0700

    Fix gcc missing braces warnings
    
    Resolve compiler warnings concerning missing braces.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 0bc8fd7884fc603eb7646c43b1fc0b18e37e7d62[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 09:52:41 2010 -0700

    Fix gcc invalid prototype warnings
    
    Gcc -Wall warn: 'invalid prototype'
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 0ccd9d24e4fdbe9cd07f838d0a62083e8eca95f2[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 09:52:40 2010 -0700

    Fix gcc init pragma warnings
    
    Use constructor attribute on non-Solaris platforms.
    
    The #pragma init/fini ->__attribute__((constructor/destructor))
    conversions, these should go upstream.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit e5dc681a50a41d42c18b52abc8d5a3c2a357bdaa[m
Author: Ricardo M. Correia <Ricardo.M.Correia@Sun.COM>
Date:   Thu Aug 26 09:52:40 2010 -0700

    Fix gcc ident pragma warnings
    
    Remove all ident pragmas which are unknown to gcc.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 0e5b68e0159e071dae2cac01c2b6783b8e926133[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 09:52:40 2010 -0700

    Fix gcc fortify source warnings
    
    Resolve issues uncovered by -D_FORTIFY_SOURCE=2, the default redhat
    macro's file adds this option to the cflags.  This causes warnings
    of the following type designed to keep the developer honest:
    
            warning: ignoring return value of 'foo', declared
                     with attribute warn_unused_result
    
    The short term fix is to wrap these calls in VERIFY() to check the
    return code.  The code was already assusing these would never fail.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit f709a82dc11fe9bad4953e9cfb0a78f71c859ff0[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 09:52:40 2010 -0700

    Fix gcc useless debug warnings
    
    Gcc useless debugging.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit b8864a233c569edcc57c686f3ea8cd1ae3b89153[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 09:52:39 2010 -0700

    Fix gcc cast warnings
    
    Gcc -Wall warn: 'lacks a cast'
    Gcc -Wall warn: 'comparison between pointer and integer'
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit d6320ddb78fa89c4d0fc2af00ae53c7c70992f96[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 09:52:39 2010 -0700

    Fix gcc c90 compliance warnings
    
    Fix non-c90 compliant code, for the most part these changes
    simply deal with where a particular variable is declared.
    Under c90 it must alway be done at the very start of a block.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit c5b3a7bbcc321846bb15ff73c6fd6f1c483b6aa6[m
Author: Ricardo M. Correia <Ricardo.M.Correia@Sun.COM>
Date:   Thu Aug 26 09:52:39 2010 -0700

    Fix gcc 64-bit constant warnings
    
    Add 'ull' suffix to 64-bit constants.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit 572e285762521df27fe5b026f409ba1a21abb7ac[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 14:24:34 2010 -0700

    Update to onnv_147
    
    This is the last official OpenSolaris tag before the public
    development tree was closed.

[33mcommit 1980602bfae0605d3231e79627b3e25c07991b0e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Aug 26 13:45:31 2010 -0700

    Remove GIT notes
    
    These notes describe how to use TopGit with this repo.  As of
    this point TopGit is no longer used so the notes have been removed.
    
    Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>

[33mcommit b3c82b1b18b5935fdc2f69d6e2c85331589eeac5[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jun 29 14:35:21 2010 -0700

    Add basic README
    
    A simple README with a short summary of the project and a link
    directing people to the online documentation.

[33mcommit 428870ff734fdaccc342b33fc53cf94724409a46[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri May 28 13:45:14 2010 -0700

    Update core ZFS code from build 121 to build 141.

[33mcommit 6119cb885a976e175a6e827894accf657ff1984f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue May 18 14:55:01 2010 -0700

    Add AUTHORS to master branch

[33mcommit fa94cf43b915fbb13e039886a572682d48365ac8[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue May 18 14:25:28 2010 -0700

    Update COPYRIGHT to reference zpios CDDL exceptions.

[33mcommit 94d52d93d9efbdad47a3923277a417c88a3c9de6[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue May 18 11:06:56 2010 -0700

    Update COPYRIGHT to include release id LLNL-CODE-403049.

[33mcommit 91ac110c9ce29fcf81625cea81876b958564d384[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue May 18 10:32:23 2010 -0700

    Update COPYRIGHT and DISCLAIMER.
    
    Update the COPYRIGHT and DISCLAIMER in an attempt to be clear about
    the copyright and licensing issues.

[33mcommit 3affbe6d7e23f26ef9b4e70043b9fb93bfe9ea32[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Apr 29 11:59:41 2010 -0700

    Update nvpair's to include nv_alloc_fixed support

[33mcommit fa42225a3d5daa58704bdb920ec92cd95c274011[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Apr 29 10:37:15 2010 -0700

    Add Solaris FMA style support

[33mcommit 414f1f975e5c8ac0e9a399e992e46f517ab59828[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Mar 11 09:53:59 2010 -0800

    Rename update-zfs.sh -> zfs-update.sh for consistency

[33mcommit 774f7c02b181f6e18b91ebdd3092df57151da3e3[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Mar 9 14:14:09 2010 -0800

    Ignore unsigned module build products
    
    Along with the addition of signed kernel modules in newer kernel
    we have a few new build products we need to ignore.   LKLM has the
    whole thread for those interested: http://lkml.org/lkml/2007/2/14/164

[33mcommit 4cd8e49a69db0c3058c03f2541175985f07ff5c1[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Jan 8 11:35:17 2010 -0800

    Add .gitignore files to exclude build products

[33mcommit 058ac9ba7811baea78a47ba1ead8acd7512684b6[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Dec 11 16:15:33 2009 -0800

    Pull in latest man pages as part of update-zfs.sh
    
    The script has been updated to download the latest documentations
    packages for Solaris and extract the needed ZFS man pages.  These
    will still need a little markup to handle changes between the
    Solaris and Linux versions of ZFS.  Howver, they should be pretty
    minor I've tried hard to keep the interface the same.
    
    In additional to the script update the zdb, zfs, and zpool man
    pages have been added to the repo.

[33mcommit 0aa61e8427c63e835d9159d3b497591b0691dfe8[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Sun Nov 15 16:20:01 2009 -0800

    Remove zvol.c when updating in update-zfs.sh Linux version available.

[33mcommit 5c36312909256a886495b56fb0cd75ebaa25615b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Oct 9 15:37:29 2009 -0700

    Script update-zfs.sh updated to include libefi library

[33mcommit 45d1cae3b8c949ecc391dd7a5b81963b34c71c29[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Aug 18 11:43:27 2009 -0700

    Rebase master to b121

[33mcommit 9babb37438b58e77bad04e820d5702e15b79e6a6[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jul 2 15:44:48 2009 -0700

    Rebase master to b117

[33mcommit d164b2093561a9771db07346e6fffc9ca19427a2[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Feb 18 12:51:31 2009 -0800

    Rebase master to b108

[33mcommit c65e71073f45e6e549c825969740cb15a96ea547[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jan 26 21:58:32 2009 -0800

    Refresh type in topgit git://* reference

[33mcommit 4710ede86aa9ea299e58e8f7293ee7c493a53ce0[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Jan 20 15:43:44 2009 -0800

    Add GIT to master

[33mcommit fb5f0bc83330c8a0236c4d34a23723ac1974971a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Jan 15 13:59:39 2009 -0800

    Rebase master to b105

[33mcommit 42bcb36c8987b0b11411ce6cf8339694b624a17c[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jan 5 12:03:23 2009 -0800

    Add unicode library

[33mcommit 36b849fa517f04d9145aa6874e5398bb01cef4d7[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Jan 5 11:10:13 2009 -0800

    Remove zdump, it's an unrelateds command which I added simply due to the z* command convention

[33mcommit 810db7e0a2186eaedf888ab12283f2d796d9c5e9[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Dec 12 13:41:20 2008 -0800

    Remove zcommon reference merged in to zpool

[33mcommit 6b2c60acca39ef3468797095d3a4162e6ce69786[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 11 15:38:59 2008 -0800

    Moving lib/libspl to linux-libspl branch

[33mcommit a4076c7544bdbdc0ac0fe20f4ef86c2aa06862fb[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 11 14:21:14 2008 -0800

    Script updates

[33mcommit c4911ece249bad4329e1ed6a9de6fba51bd06f1f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 11 14:16:55 2008 -0800

    Move library files to lib

[33mcommit b453b61272db34cd097f8636f57033785b00d932[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 11 11:22:02 2008 -0800

    Fix libspl move to the wrong place

[33mcommit 4b7ee081ce0c36750d8039ec98c160a0a1ec471b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 11 11:16:38 2008 -0800

    Fix typo

[33mcommit 77755a5771c339a1d96c36ab1a8f1e41e14507f0[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 11 11:14:49 2008 -0800

    Add a few missing files

[33mcommit 172bb4bd5e4afef721dd4d2972d8680d983f144b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Dec 11 11:08:09 2008 -0800

    Move the world out of /zfs/ and seperate out module build tree

[33mcommit 9e8b1e836caa454586797f771a7ad1817ebae315[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Dec 10 12:43:20 2008 -0800

    Remove libumem, we will try and remove this dependency entirely.  If we can't then the best move will simply be to use the official library, or build it as a convenience library

[33mcommit 5e97ed8493584c0d331592894de401edd89f5bab[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Dec 9 14:14:00 2008 -0800

    Move vmem* to libumem

[33mcommit 48343be6a309efe3787ed8c539f10b376ece5ef8[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Dec 9 13:32:01 2008 -0800

    Temporarily move taskq+util to libzpool until that directory is broken in to lib+module

[33mcommit 2f40ac4d9e154f1d1ca4073ef8c3bfba92093c86[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Dec 8 16:38:46 2008 -0800

    Minor tweak to update script

[33mcommit 2b67f51fb663abe1a4a5cb969c73d0e10bcafe84[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Dec 8 16:20:25 2008 -0800

    Attempt move of kernel.c with topgit

[33mcommit 96072c88e22486c05a0bfc6c490d9e0c59fbd7e8[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Dec 3 15:43:56 2008 -0800

    Add userspace zfs_context file

[33mcommit b128c09fbee863d15be744a2ce602b514eddbe3a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Dec 3 12:09:06 2008 -0800

    Rebase to OpenSolaris b103, in the process we are removing any code which did not originate from the OpenSolaris source.  These changes will be reintroduced in topic branches for easier tracking

[33mcommit b6097ae55adc8edb7149c4d433fa45a6ea3c45e7[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Tue Dec 2 08:47:21 2008 -0800

    Remove stray stub kernel files which should be brought in my linux-kernel-module patch

[33mcommit 7ebbc0c799748b8e13cdfcf7c96e11b3d331549b[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Dec 1 16:15:29 2008 -0800

    Finish removing all non-upstream bits from master

[33mcommit ef76e2f5ea42f9fab723ee79d17d69fe7caf1e13[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Dec 1 15:41:33 2008 -0800

    Removed build system from master branch, will relocate to linux-zfs-branch

[33mcommit 42baae9615b86e48e0c8c37eb83b409b8afa5e76[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Dec 1 15:38:41 2008 -0800

    Removed build system from master branch, will relocate to linux-zfs-branch

[33mcommit fe441a9050c2309b222976a70385e19fafa1d569[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Dec 1 15:34:53 2008 -0800

    Relocate COPYING+COPYRIGHT, remove README cruft

[33mcommit ef2e1711d2d515ce48fd0bf4e070ed60d610f4a9[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Dec 1 14:49:34 2008 -0800

    Add CDDL license file

[33mcommit 100eb88b46781b3777b59a81cc2e800ff386d9f3[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Nov 26 15:48:14 2008 -0800

    Update zpios for trivial workload

[33mcommit 62b749c8c846442f37f41c8ae5c612d75308c046[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Nov 26 15:32:39 2008 -0800

    Working version of M4 macro config

[33mcommit f0e648ca02f55bb2c4bc328656769a0c529f683a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Nov 26 14:29:45 2008 -0800

    Make everything a M4 macro, it's just cleaner that way

[33mcommit e833fd4a5c1fc22077c36782070837553f60b258[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Nov 26 14:06:23 2008 -0800

    Additional buidl system cleanup.  Starting to move all
    of the kernel specific build info in to config/kernel,
    likewise and user specific build flags should go in
    config/user.  This seems like a reasonable way to go.

[33mcommit dbceaca71db4d7989acdef950ae23d4c92a55b67[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Nov 26 13:28:44 2008 -0800

    Prefix META_ALIAS with ZFS_

[33mcommit cb9c044bf698cc063b986baa7f25cfcf4c76f54e[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Nov 26 13:11:33 2008 -0800

    Add SPL prefix to META_* #defines

[33mcommit c9a913795679c3f5895de8258f31269530c5eaed[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Wed Nov 26 12:53:24 2008 -0800

    First step of META build system cleanup

[33mcommit 536640fe2908070f22d340ec23cfa9224df97aa3[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Nov 24 11:56:48 2008 -0800

    Minor autoconf build fixes:
    
    Fixed BUILDDIR in config/*
    Added missing " to ZFS_AC_SCRIPT_CONFIG macro
    Removed autoconf/Makefile

[33mcommit 22b47b55363f41ce526225e8e1d22aebc84442dc[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Nov 24 11:29:11 2008 -0800

    Use config directory, enable maintainer mode

[33mcommit a54f863a14edbbd2c5bd14774c8f1ead32ed7bf5[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Mon Nov 24 11:16:19 2008 -0800

    Restructure autoconf around ./config directory

[33mcommit 5b1a72b34269450274b6901b81eeb35f8cbf2f82[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Fri Nov 21 10:55:10 2008 -0800

    Update GIT docs, removing remaining patches.  They will soon me applies as topic branches

[33mcommit 9fc325737bd0fc5f5539763570cdde792859326a[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Nov 20 16:54:29 2008 -0800

    Update GIT documentation to describe the new DAC setup

[33mcommit 34dc7c2f2553220ebc6e29ca195fb6d57155f95f[m
Author: Brian Behlendorf <behlendorf1@llnl.gov>
Date:   Thu Nov 20 12:01:55 2008 -0800

    Initial Linux ZFS GIT Repo
